(robinsonunificationEF
 (IMP_robinsonunification_TCC1 0
  (IMP_robinsonunification_TCC1-1 nil 3522686037
   ("" (lemma var_countable) (("" (propax) nil nil)) nil)
   ((var_countable formula-decl nil robinsonunificationEF nil)) nil
   (IMP_robinsonunification assuming
    "robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].robinsonunification"
    "var_countable: ASSUMPTION countability[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].is_countably_infinite(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)")))
 (IMP_robinsonunification_TCC2 0
  (IMP_robinsonunification_TCC2-1 nil 3522686037
   ("" (lemma var_nonempty) (("" (propax) nil nil)) nil)
   ((var_nonempty formula-decl nil robinsonunificationEF nil)) nil
   (IMP_robinsonunification assuming
    "robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].robinsonunification"
    "var_nonempty: ASSUMPTION sets[term_adt[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].term].nonempty?(variables_term[robinsonunification.variable, robinsonunification.symbol, robinsonunification.arity].V)")))
 (IMP_robinsonunification_TCC3 0
  (IMP_robinsonunification_TCC3-1 nil 3522686037
   ("" (lemma symbol_nonempty) (("" (propax) nil nil)) nil)
   ((symbol_nonempty formula-decl nil robinsonunificationEF nil)) nil
   (IMP_robinsonunification assuming
    "robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].robinsonunification"
    "symbol_nonempty: ASSUMPTION sets[robinsonunification.symbol].nonempty?({f: robinsonunification.symbol | robinsonunification.arity(f) = 1})")))
 (right_pos_TCC1 0
  (right_pos_TCC1-1 nil 3506350454
   ("" (skosimp)
    (("" (skosimp)
      (("" (assert)
        (("" (lemma empty_0[posnat])
          (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (right_pos subtype "robinsonunificationEF.p" "not_empty_seq[posnat]")))
 (right_pos_TCC2 0
  (right_pos_TCC2-1 nil 3506350454
   ("" (skosimp*)
    (("" (lemma delete_is_position)
      (("" (inst -1 p!1 s!1)
        (("" (assert) (("" (flatten) (("" (rewrite empty_0) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (delete_is_position formula-decl nil positions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (right_pos subtype "robinsonunificationEF.p1"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (right_pos_TCC3 0
  (right_pos_TCC3-1 nil 3506350454
   ("" (skosimp*)
    (("" (lemma subterm_is_app)
      (("" (inst -1 p!1 s!1)
        (("" (assert) (("" (flatten) (("" (rewrite empty_0) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (subterm_is_app formula-decl nil subterm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (right_pos subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (right_pos_TCC4 0
  (right_pos_TCC4-1 nil 3506350454
   ("" (skosimp*)
    (("" (hide -1 -3 -4)
      (("" (replaces -1)
        (("" (expand delete 2)
          (("" (lemma empty_0[posnat])
            (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((delete const-decl "finseq" seq_extras structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (right_pos termination
    "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "nil")))
 (right_pos_TCC5 0
  (right_pos_TCC5-1 nil 3506350454
   ("" (skosimp*)
    (("" (lemma positions_of_arg)
      (("" (inst -1 "subtermOF(s!1, p1!1)" "j!1 + i!1")
        (("1" (lemma pos_o_term)
          (("1" (inst -1 "p1!1" "#(j!1 + i!1 + 1)" "s!1")
            (("1" (lemma delete_is_position)
              (("1" (inst -1 p!1 s!1)
                (("1" (lemma empty_0[posnat])
                  (("1" (inst -1 p!1)
                    (("1" (assert)
                      (("1" (hide-all-but (-2 3))
                        (("1"
                          (case "p1!1 o  #(1 + i!1 + j!1) = add_last(p1!1, 1 + i!1 + j!1)")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred j!1)
          (("2" (typepred "args(subtermOF(s!1, p1!1))")
            (("2" (replace -1 1)
              (("2" (replace -6 1 rl)
                (("2" (hide-all-but (-2 1)) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (positions_of_arg formula-decl nil positions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos_o_term formula-decl nil subterm nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (add_last const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "nat" robinsonunificationEF nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n!1 skolem-const-decl "nat" robinsonunificationEF nil)
    (below type-eq-decl nil naturalnumbers nil)
    (j!1 skolem-const-decl "below(n!1 - i!1)" robinsonunificationEF nil)
    (term type-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (p1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (right_pos subtype
    "seq_extras[posnat].add_last(robinsonunificationEF.p1, (number_fields.+)((number_fields.+)(robinsonunificationEF.i, robinsonunificationEF.j), 1))"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (right_pos_TCC6 0
  (right_pos_TCC6-2 "" 3790333618
   ("" (skosimp*)
    (("" (lemma positions_of_arg)
      (("" (lemma pos_o_term)
        (("" (lemma delete_is_position)
          (("" (inst -1 p!1 s!1)
            (("" (lemma empty_0[posnat])
              (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (right_pos subtype "(number_fields.-)(length(robinsonunificationEF.p), 1)"
    "below[length(p)]"))
  (right_pos_TCC6-1 nil 3506350454
   ("" (skosimp*)
    (("" (lemma positions_of_arg)
      (("" (inst -1 "subtermOF(s!1, p1!1)" "j!1 + i!1")
        (("1" (lemma pos_o_term)
          (("1" (inst -1 "p1!1" "#(j!1 + i!1 + 1)" "s!1")
            (("1" (lemma delete_is_position)
              (("1" (inst -1 p!1 s!1)
                (("1" (lemma empty_0[posnat])
                  (("1" (inst -1 p!1)
                    (("1" (assert)
                      (("1" (hide-all-but (-2 3))
                        (("1"
                          (case "p1!1 o  #(1 + i!1 + j!1) = add_last(p1!1, 1 + i!1 + j!1)")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred j!1)
          (("2" (typepred "args(subtermOF(s!1, p1!1))")
            (("2" (replace -1 1)
              (("2" (replace -6 1 rl)
                (("2" (hide-all-but (-2 1)) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (positions_of_arg formula-decl nil positions nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (pos_o_term formula-decl nil subterm nil))
   nil
   (right_pos subtype "(number_fields.-)(length(robinsonunificationEF.p), 1)"
    "below[length(p)]")))
 (next_position_TCC1 0
  (next_position_TCC1-1 nil 3488040223
   ("" (skosimp)
    (("" (lemma empty_0[posnat])
      (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (next_position subtype
    "(number_fields.-)(length(robinsonunificationEF.p), 1)"
    "below[length(p)]")))
 (next_position_TCC2 0
  (next_position_TCC2-1 nil 3488040223
   ("" (skosimp)
    (("" (rewrite delete_is_position)
      (("" (hide 3) (("" (flatten) (("" (rewrite empty_0) nil nil)) nil))
        nil))
      nil))
    nil)
   ((delete_is_position formula-decl nil positions nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype
    "seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1))"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (next_position_TCC3 0
  (next_position_TCC3-1 nil 3488040223
   ("" (skosimp*)
    (("" (lemma "subterm_is_app")
      (("" (inst -1 p!1 s!1)
        (("" (assert)
          (("" (hide 3)
            (("" (flatten) (("" (rewrite "empty_0") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (subterm_is_app formula-decl nil subterm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (next_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1)))"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_position_TCC4 0
  (next_position_TCC4-1 nil 3488040223
   ("" (skosimp*) (("" (rewrite "empty_0") nil nil)) nil)
   ((empty_0 formula-decl nil seq_extras structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (next_position subtype "robinsonunificationEF.p" "not_empty_seq[posnat]")))
 (next_position_TCC5 0
  (next_position_TCC5-1 nil 3496419653
   ("" (skosimp)
    (("" (name-replace "q!1" "delete(p!1, length(p!1) - 1)" :hide? nil)
      (("1" (lemma empty_0[posnat])
        (("1" (inst -1 p!1)
          (("1" (assert)
            (("1" (typepred "args(subtermOF(s!1, q!1))")
              (("1" (replace -1 3 rl)
                (("1" (hide -1)
                  (("1" (lemma add_last_delete[posnat])
                    (("1" (inst -1 p!1)
                      (("1" (assert)
                        (("1" (replace -2 -1)
                          (("1" (lemma add_last_delete_is_o[posnat])
                            (("1" (inst -1 p!1)
                              (("1" (assert)
                                (("1" (expand finseq_appl)
                                  (("1" (replace -3 -1)
                                    (("1" (replace -2 -1 rl)
                                      (("1"
                                        (lemma pos_subterm_ax)
                                        (("1"
                                          (inst
                                           -1
                                           "q!1"
                                           "#(p!1`seq(p!1`length - 1))"
                                           "s!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand positionsOF -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (hide-all-but -2)
                                                    (("1" (grind) nil nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but -2)
                                                    (("2" (grind) nil nil))
                                                    nil)
                                                   ("3"
                                                    (expand*
                                                     union
                                                     IUnion
                                                     member)
                                                    (("3"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand finseq_appl)
                                                          (("2"
                                                            (expand catenate)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 member)
                                                                (("2"
                                                                  (typepred
                                                                   i!1)
                                                                  (("2"
                                                                    (expand
                                                                     add_first)
                                                                    (("2"
                                                                      (expand
                                                                       insert?)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           finseq_appl)
                                                                          (("2"
                                                                            (expand
                                                                             "#"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "#"
                                                                               -2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (case
                                                                                     "p!1`seq(p!1`length - 1) = last(p!1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 3)
        (("2" (lemma empty_0[posnat])
          (("2" (inst -1 p!1) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (delete const-decl "finseq" seq_extras structures)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (only_empty_seq const-decl "positions" positions nil)
    (<= const-decl "bool" reals nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (insert? const-decl "finseq" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (add_first const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (add_last_delete_is_o formula-decl nil seq_extras structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype
    "(number_fields.-)(robinsonunificationEF.arity(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].f(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, seq_extras[posnat].delete(robinsonunificationEF.p, (number_fields.-)(length(robinsonunificationEF.p), 1))))), seq_extras[posnat].last(robinsonunificationEF.p))"
    "nat")))
 (next_position_TCC6 0
  (next_position_TCC6-1 nil 3496419653
   ("" (skosimp*)
    (("" (typepred "length(z!1`3)")
      (("" (case "length(z!1`3)=0")
        (("1" (rewrite "empty_0") nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (next_position subtype
    "(number_fields.-)(length(robinsonunificationEF.z`3), 1)"
    "below[length(z`3)]")))
 (next_position_TCC7 0
  (next_position_TCC7-1 nil 3496419653
   ("" (skosimp)
    (("" (rewrite delete_is_position)
      (("" (hide 3) (("" (flatten) (("" (rewrite empty_0) nil nil)) nil))
        nil))
      nil))
    nil)
   ((delete_is_position formula-decl nil positions nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype
    "seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1))"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.z`1)")))
 (next_position_TCC8 0
  (next_position_TCC8-1 nil 3496419653
   ("" (skosimp*)
    (("" (lemma "subterm_is_app")
      (("" (inst?)
        (("" (assert) (("" (prop) (("" (rewrite "empty_0") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (subterm_is_app formula-decl nil subterm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (next_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.z`1, seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1)))"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_position_TCC9 0
  (next_position_TCC9-2 "" 3790333621
   ("" (skosimp)
    (("" (name-replace "q!1" "delete(z!1`3, length(z!1`3) - 1)" :hide? nil)
      (("1" (lemma empty_0[posnat])
        (("1" (inst -1 "z!1`3") (("1" (assert) nil nil)) nil)) nil)
       ("2" (lemma empty_0[posnat])
        (("2" (inst -1 "z!1`3") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (next_position subtype "robinsonunificationEF.z`3"
    "not_empty_seq[posnat]"))
  (next_position_TCC9-1 nil 3496419653
   ("" (skosimp)
    (("" (name-replace "q!1" "delete(z!1`3, length(z!1`3) - 1)" :hide? nil)
      (("1" (lemma empty_0[posnat])
        (("1" (inst -1 "z!1`3")
          (("1" (assert)
            (("1" (typepred "args(subtermOF(z!1`1, q!1))")
              (("1" (replace -1 3 rl)
                (("1" (hide -1)
                  (("1" (lemma add_last_delete[posnat])
                    (("1" (inst -1 "z!1`3")
                      (("1" (assert)
                        (("1" (replace -2 -1)
                          (("1" (lemma add_last_delete_is_o[posnat])
                            (("1" (inst -1 "z!1`3")
                              (("1" (assert)
                                (("1" (expand finseq_appl)
                                  (("1" (replace -3 -1)
                                    (("1" (replace -2 -1 rl)
                                      (("1"
                                        (lemma pos_subterm_ax)
                                        (("1"
                                          (inst
                                           -1
                                           "q!1"
                                           "#(z!1`3`seq(z!1`3`length - 1))"
                                           "z!1`1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand positionsOF -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (hide-all-but -2)
                                                    (("1" (grind) nil nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but -2)
                                                    (("2" (grind) nil nil))
                                                    nil)
                                                   ("3"
                                                    (expand*
                                                     union
                                                     IUnion
                                                     member)
                                                    (("3"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand finseq_appl)
                                                          (("2"
                                                            (expand catenate)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 member)
                                                                (("2"
                                                                  (typepred
                                                                   i!1)
                                                                  (("2"
                                                                    (expand
                                                                     add_first)
                                                                    (("2"
                                                                      (expand
                                                                       insert?)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           finseq_appl)
                                                                          (("2"
                                                                            (expand
                                                                             "#"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "#"
                                                                               -2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (case
                                                                                     "z!1`3`seq(z!1`3`length - 1) = last(z!1`3)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 3)
        (("2" (lemma empty_0[posnat])
          (("2" (inst -1 "z!1`3") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (delete const-decl "finseq" seq_extras structures)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype "robinsonunificationEF.z`3"
    "not_empty_seq[posnat]")))
 (next_position_TCC10 0
  (next_position_TCC10-1 nil 3496419653
   ("" (skosimp)
    (("" (name-replace "q!1" "delete(z!1`3, length(z!1`3) - 1)" :hide? nil)
      (("1" (lemma empty_0[posnat])
        (("1" (inst -1 "z!1`3")
          (("1" (assert)
            (("1" (typepred "args(subtermOF(z!1`1, q!1))")
              (("1" (replace -1 3 rl)
                (("1" (hide -1)
                  (("1" (lemma add_last_delete[posnat])
                    (("1" (inst -1 "z!1`3")
                      (("1" (assert)
                        (("1" (replace -2 -1)
                          (("1" (lemma add_last_delete_is_o[posnat])
                            (("1" (inst -1 "z!1`3")
                              (("1" (assert)
                                (("1" (expand finseq_appl)
                                  (("1" (replace -3 -1)
                                    (("1" (replace -2 -1 rl)
                                      (("1"
                                        (lemma pos_subterm_ax)
                                        (("1"
                                          (inst
                                           -1
                                           "q!1"
                                           "#(z!1`3`seq(z!1`3`length - 1))"
                                           "z!1`1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand positionsOF -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (hide-all-but -2)
                                                    (("1" (grind) nil nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but -2)
                                                    (("2" (grind) nil nil))
                                                    nil)
                                                   ("3"
                                                    (expand*
                                                     union
                                                     IUnion
                                                     member)
                                                    (("3"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand finseq_appl)
                                                          (("2"
                                                            (expand catenate)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 member)
                                                                (("2"
                                                                  (typepred
                                                                   i!1)
                                                                  (("2"
                                                                    (expand
                                                                     add_first)
                                                                    (("2"
                                                                      (expand
                                                                       insert?)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           finseq_appl)
                                                                          (("2"
                                                                            (expand
                                                                             "#"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "#"
                                                                               -2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (case
                                                                                     "z!1`3`seq(z!1`3`length - 1) = last(z!1`3)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 3)
        (("2" (lemma empty_0[posnat])
          (("2" (inst -1 "z!1`3") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (delete const-decl "finseq" seq_extras structures)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (only_empty_seq const-decl "positions" positions nil)
    (<= const-decl "bool" reals nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (insert? const-decl "finseq" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (add_first const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (add_last_delete_is_o formula-decl nil seq_extras structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures))
   nil
   (next_position subtype
    "(number_fields.-)(robinsonunificationEF.arity(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].f(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.z`1, seq_extras[posnat].delete(robinsonunificationEF.z`3, (number_fields.-)(length(robinsonunificationEF.z`3), 1))))), seq_extras[posnat].last(robinsonunificationEF.z`3))"
    "nat")))
 (next_position_TCC11 0
  (next_position_TCC11-1 nil 3496419653
   ("" (skosimp*)
    (("" (replaces -1)
      (("" (rewrite "delete_is_position")
        (("" (prop) (("" (rewrite "empty_0") nil nil)) nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (delete_is_position formula-decl nil positions nil))
   nil
   (next_position subtype "robinsonunificationEF.pi0"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (next_position_TCC12 0
  (next_position_TCC12-1 nil 3496419653
   ("" (skosimp*)
    (("" (lemma "subterm_is_app")
      (("" (inst?)
        (("" (inst -1 "s!1")
          (("" (assert) (("" (prop) (("" (rewrite "empty_0") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (subterm_is_app formula-decl nil subterm nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (next_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.pi0)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_position_TCC13 0
  (next_position_TCC13-1 nil 3496419653
   ("" (skosimp*)
    (("" (replaces -1)
      (("" (rewrite delete_is_position)
        (("" (hide 3) (("" (flatten) (("" (rewrite empty_0) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (delete_is_position formula-decl nil positions nil))
   nil
   (next_position subtype "robinsonunificationEF.pi0"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.t)")))
 (next_position_TCC14 0
  (next_position_TCC14-1 nil 3496419653
   ("" (skosimp*)
    (("" (lemma "subterm_is_app")
      (("" (inst?)
        (("" (assert)
          (("" (inst -1 "t!1")
            (("" (assert) (("" (prop) (("" (rewrite "empty_0") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (subterm_is_app formula-decl nil subterm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (next_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.pi0)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_position_TCC15 0
  (next_position_TCC15-1 nil 3496419653
   ("" (skosimp*)
    (("" (replace -2 -4 rl)
      (("" (case "pi!1 = pi0!1 o #(last(p!1) + 1)")
        (("1" (lemma pos_o_term)
          (("1" (inst -1 "pi0!1" "#(last(p!1) + 1)" "t!1")
            (("1" (assert)
              (("1" (hide 3)
                (("1" (split)
                  (("1" (lemma delete_is_position)
                    (("1" (inst -1 "p!1" "t!1")
                      (("1" (assert)
                        (("1" (hide-all-but (1 3))
                          (("1" (lemma empty_0[posnat])
                            (("1" (inst -1 p!1) (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma pos_subterm_ax)
                    (("2" (inst -1 "pi0!1" "#(last(p!1) + 1)" "s!1")
                      (("2" (assert)
                        (("2" (expand positionsOF 1)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("1" (lemma subterm_is_app)
                                (("1" (inst -1 p!1 t!1)
                                  (("1" (assert)
                                    (("1" (hide-all-but (1 3))
                                      (("1"
                                        (lemma empty_0[posnat])
                                        (("1"
                                          (inst -1 p!1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "args(subtermOF(t!1, pi0!1))"
                                 "args(subtermOF(s!1, pi0!1))")
                                (("2" (replace -6 -2)
                                  (("2" (replace -1 -2 rl)
                                    (("2" (hide -1)
                                      (("2"
                                        (replace -1 -2 rl)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (case
                                             "positionsOF(subtermOF(s!1, pi0!1)) = only_empty_seq")
                                            (("1"
                                              (lemma pos_subterm_ax)
                                              (("1"
                                                (inst
                                                 -1
                                                 "pi0!1"
                                                 "#(1 + last(p!1))"
                                                 "s!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (expand positionsOF)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (expand union)
                                (("3" (expand member)
                                  (("3" (flatten)
                                    (("3" (expand IUnion)
                                      (("3"
                                        (expand finseq_appl)
                                        (("3"
                                          (inst 3 "last(p!1) + 1")
                                          (("1"
                                            (expand catenate)
                                            (("1"
                                              (inst 3 empty_seq)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (expand positionsOF)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand*
                                                           member
                                                           only_empty_seq)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           member
                                                           only_empty_seq)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand*
                                                           union
                                                           member
                                                           only_empty_seq)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma next_position_TCC5)
                                            (("2"
                                              (inst -1 s!1 s!1 pi!1)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (case
                                                   "delete(pi!1, length(pi!1) - 1) = pi0!1")
                                                  (("1"
                                                    (replace -1 -2)
                                                    (("1"
                                                      (typepred
                                                       "args(subtermOF(t!1, pi0!1))"
                                                       "args(subtermOF(s!1, pi0!1))")
                                                      (("1"
                                                        (replace -7 -1 rl)
                                                        (("1"
                                                          (replace -1 -2 rl)
                                                          (("1"
                                                            (replace -2 1 rl)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               -1
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -4
                                                                 rl)
                                                                (("1"
                                                                  (case
                                                                   "1 + last(p!1) = last(pi!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-6
                                                                      -10
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but (-7 1))
                                                    (("2"
                                                      (expand*
                                                       add_last
                                                       insert?
                                                       delete)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             finseq_appl)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (typepred
                                                                     x!1)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       x!1)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (hide -2)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand finseq_appl)
                                                          (("2"
                                                            (decompose-equality
                                                             2)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (decompose-equality
                                                                 -3)
                                                                (("2"
                                                                  (typepred
                                                                   x!1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand finseq_appl)
                                                          (("3"
                                                            (decompose-equality
                                                             2)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but (-3 -7 1))
                                                    (("3" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -3 -5 -7 5))
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (-4 1))
          (("2" (expand* add_last o insert?)
            (("2"
              (case "1 + pi0!1`length = #(1 + last(p!1))`length + pi0!1`length")
              (("1" (replace -1 1 rl)
                (("1" (decompose-equality 1)
                  (("1" (decompose-equality 1)
                    (("1" (expand finseq_appl)
                      (("1" (decompose-equality -2) (("1" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil)
               ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (pos_o_term formula-decl nil subterm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (subterm_is_app formula-decl nil subterm nil)
    (only_empty_seq const-decl "positions" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (p!1 skolem-const-decl
     "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}"
     robinsonunificationEF nil)
    (pi0!1 skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (catenate const-decl "positions" positions nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (delete const-decl "finseq" seq_extras structures)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (add_last const-decl "finseq" seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi!1 skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (TRUE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (union const-decl "set" sets nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil))
   nil
   (next_position subtype "robinsonunificationEF.pi"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.t)")))
 (next_position_TCC16 0
  (next_position_TCC16-1 nil 3497078571
   ("" (skosimp*)
    (("" (lemma next_position_TCC15)
      (("" (inst -1 s!1 t!1 p!1)
        (("" (assert)
          (("" (inst -1 pi0!1)
            (("" (assert) (("" (inst -1 pi!1) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_position_TCC15 subtype-tcc nil robinsonunificationEF nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   nil
   (next_position subtype "robinsonunificationEF.pi"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")))
 (next_position_TCC17 0
  (next_position_TCC17-1 nil 3497078571
   ("" (skosimp*)
    (("" (lift-if)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide-all-but (-1 -6 3)) (("1" (grind) nil nil)) nil)
           ("2" (lift-if)
            (("2" (prop)
              (("2" (rewrite lex2_lt)
                (("1" (flatten)
                  (("1" (split)
                    (("1" (hide-all-but (-5 1))
                      (("1" (expand* add_last delete insert?)
                        (("1" (expand finseq_appl)
                          (("1" (decompose-equality -1)
                            (("1" (hide -2)
                              (("1" (lift-if)
                                (("1" (prop)
                                  (("1" (reveal 3)
                                    (("1" (lemma empty_0[posnat])
                                      (("1"
                                        (inst -1 p!1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal 3)
                              (("2" (hide-all-but (-3 1))
                                (("2" (lemma empty_0[posnat])
                                  (("2" (inst -1 p!1) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (reveal 3)
                              (("3" (hide-all-but (-3 1))
                                (("3" (lemma empty_0[posnat])
                                  (("3" (inst -1 p!1) (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "delete(pi!1, length(pi!1) - 1) = delete(p!1, length(p!1) - 1)")
                      (("1" (replace -1 1)
                        (("1" (replace -3 1 rl)
                          (("1" (rewrite both_sides_minus_lt2)
                            (("1" (case "last(pi!1) = last(p!1) + 1")
                              (("1" (assert) nil nil)
                               ("2" (hide-all-but (-6 1))
                                (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -2 1 rl)
                        (("2" (replace -2 -5 rl)
                          (("2" (hide-all-but (-2 -5 1 5 6))
                            (("2" (expand delete 1)
                              (("2" (expand finseq_appl)
                                (("2" (decompose-equality 1)
                                  (("1" (lift-if)
                                    (("1" (prop)
                                      (("1"
                                        (hide-all-but (-1 2))
                                        (("1"
                                          (lemma empty_0[posnat])
                                          (("1"
                                            (inst -1 pi!1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand* add_last insert?)
                                        (("2"
                                          (decompose-equality -2)
                                          (("2"
                                            (hide-all-but (-1 2))
                                            (("2"
                                              (replaces -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lift-if)
                                    (("2" (prop)
                                      (("1"
                                        (hide-all-but (-1 2))
                                        (("1"
                                          (lemma empty_0[posnat])
                                          (("1"
                                            (inst -1 pi!1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 2)
                                        (("1"
                                          (expand* add_last insert?)
                                          (("1"
                                            (expand finseq_appl)
                                            (("1"
                                              (decompose-equality -2)
                                              (("1"
                                                (decompose-equality -2)
                                                (("1"
                                                  (inst -1 x!1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (typepred x!1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (expand*
                                             add_last
                                             insert?
                                             finseq_appl)
                                            (("2"
                                              (decompose-equality -2)
                                              (("2"
                                                (hide-all-but (-1 1))
                                                (("2"
                                                  (replaces -1)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (lemma empty_0[posnat])
                                    (("3" (inst -1 pi!1)
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but (1 6))
                        (("3" (lemma empty_0[posnat])
                          (("3" (inst -1 p!1) (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (hide-all-but (1 5))
                        (("4" (lemma empty_0[posnat])
                          (("4" (inst -1 pi!1) (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite next_position_TCC5) nil nil)
                 ("3" (hide-all-but (1 5))
                  (("3" (lemma empty_0[posnat])
                    (("3" (inst -1 p!1) (("3" (assert) nil nil)) nil)) nil))
                  nil)
                 ("4" (lemma next_position_TCC5)
                  (("4" (inst -1 s!1 s!1 pi!1) (("4" (assert) nil nil)) nil))
                  nil)
                 ("5" (hide-all-but (1 4))
                  (("5" (lemma empty_0[posnat])
                    (("5" (inst -1 pi!1) (("5" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (add_last const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (both_sides_minus_lt2 formula-decl nil real_props nil)
    (pi!1 skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (TRUE const-decl "bool" booleans nil)
    (pi0!1 skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (empty_0 formula-decl nil seq_extras structures)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil) (< const-decl "bool" reals nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lex2_lt formula-decl nil lex2 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (next_position termination
    "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)"
    "nil")))
 (next_position_TCC18 0
  (next_position_TCC18-1 nil 3497078571
   ("" (skosimp*)
    (("" (typepred p!1)
      (("" (lemma delete_is_position)
        (("" (inst-cp -1 p!1 s!1)
          (("" (inst -1 p!1 t!1)
            (("" (lemma empty_0[posnat])
              (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty_0 formula-decl nil seq_extras structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (delete_is_position formula-decl nil positions nil))
   nil
   (next_position subtype "robinsonunificationEF.pi0"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")))
 (next_position_TCC19 0
  (next_position_TCC19-1 nil 3506626310
   ("" (skosimp*)
    (("" (assert)
      (("" (rewrite lex2_lt)
        (("1" (flatten)
          (("1" (hide-all-but (-2 1 4))
            (("1" (expand* delete finseq_appl)
              (("1" (decompose-equality -1)
                (("1" (hide -2)
                  (("1" (lemma empty_0[posnat])
                    (("1" (inst -1 p!1) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 -3 4 5)
          (("2" (lemma next_position_TCC5)
            (("2" (inst -1 s!1 t!1 p!1) (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("3" (hide-all-but (1 2))
          (("3" (lemma empty_0[posnat])
            (("3" (inst -1 p!1) (("3" (assert) nil nil)) nil)) nil))
          nil)
         ("4" (hide -1 -3 4 5)
          (("4" (lemma next_position_TCC5)
            (("4" (inst -1 s!1 t!1 pi0!1)
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (lemma delete_is_position)
                  (("2" (inst-cp -1 p!1 s!1)
                    (("2" (inst -1 p!1 t!1)
                      (("2" (lemma empty_0[posnat])
                        (("2" (inst -1 p!1) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (hide-all-but (1 3))
          (("5" (lemma empty_0[posnat])
            (("5" (inst -1 pi0!1) (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (pi0!1 skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (delete_is_position formula-decl nil positions nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (delete const-decl "finseq" seq_extras structures)
    (< const-decl "bool" reals nil) (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term type-decl nil term_adt nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lex2_lt formula-decl nil lex2 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (next_position termination
    "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi0)"
    "nil")))
 (right_pos_subset 0
  (right_pos_subset-2 "" 3790333635
   ("" (measure-induct+ "length(p)" ("s" "p"))
    (("" (expand* subset? member)
      (("" (skosimp)
        (("" (expand right_pos -2)
          (("" (expand* union IUnion member)
            (("" (prop)
              (("1" (hide -1 -3)
                (("1" (expand only_empty_seq)
                  (("1" (replaces -1)
                    (("1" (expand positionsOF)
                      (("1" (lift-if)
                        (("1" (expand only_empty_seq)
                          (("1" (prop)
                            (("1" (expand union)
                              (("1" (flatten)
                                (("1" (hide 3)
                                  (("1" (expand member)
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2)
                (("2" (expand singleton) (("2" (assert) nil nil)) nil)) nil)
               ("3" (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
                (("1" (expand delete -2 1)
                  (("1" (lemma empty_0[posnat])
                    (("1" (inst -1 x!2)
                      (("1" (assert)
                        (("1" (inst -2 x!3) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite delete_is_position)
                  (("2" (flatten) (("2" (rewrite empty_0) nil nil)) nil)) nil)
                 ("3" (lemma empty_0[posnat])
                  (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil)) nil))
                nil)
               ("4" (skosimp*)
                (("4" (hide -3)
                  (("4"
                    (name-replace "pi"
                     "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))"
                     :hide? nil)
                    (("1"
                      (case "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))")
                      (("1" (replace -1 -4 rl)
                        (("1" (hide -2)
                          (("1" (lemma pos_o_term)
                            (("1" (inst -1 pi q1!1 x!1)
                              (("1" (assert)
                                (("1" (lemma right_pos_TCC5)
                                  (("1" (inst -1 x!1 x!2)
                                    (("1" (assert)
                                      (("1"
                                        (inst
                                         -1
                                         "delete(x!2, length(x!2) - 1)")
                                        (("1"
                                          (inst -1 "last(x!2)")
                                          (("1"
                                            (inst
                                             -1
                                             "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))")
                                            (("1"
                                              (inst -1 i!1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (reveal -7)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma right_pos_TCC3)
                                              (("2"
                                                (inst -1 x!1 x!2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "delete(x!2, length(x!2) - 1)")
                                                    (("1"
                                                      (inst -1 "last(x!2)")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (1 4))
                                                      (("2"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("2"
                                                          (inst -1 x!2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite delete_is_position)
                                              (("3"
                                                (hide-all-but (1 4))
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (rewrite empty_0)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide-all-but (1 3))
                                              (("4"
                                                (lemma empty_0[posnat])
                                                (("4"
                                                  (inst -1 x!2)
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 3))
                                          (("2"
                                            (lemma empty_0[posnat])
                                            (("2"
                                              (inst -1 x!2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 1 rl)
                        (("2" (hide - 2 3)
                          (("2" (grind)
                            (("2" (decompose-equality)
                              (("1" (reveal 1)
                                (("1" (lemma empty_0[posnat])
                                  (("1" (inst -1 x!2)
                                    (("1" (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (typepred x!4)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp) (("2" (grind) nil nil)) nil)
                               ("3" (skosimp)
                                (("3" (reveal 1)
                                  (("3" (hide 2)
                                    (("3" (lemma empty_0[posnat])
                                      (("3"
                                        (inst -1 x!2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (skosimp)
                                (("4" (reveal 1)
                                  (("4" (lemma empty_0[posnat])
                                    (("4" (inst -1 x!2)
                                      (("4" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("5" (reveal 1)
                                (("5" (lemma empty_0[posnat])
                                  (("5" (inst -1 x!2) (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("6" (skosimp)
                                (("6" (typepred i!2)
                                  (("6" (lemma empty_0[posnat])
                                    (("6" (reveal 1)
                                      (("6"
                                        (inst -1 x!2)
                                        (("6" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("7" (skosimp)
                                (("7" (reveal 1)
                                  (("7" (lemma empty_0[posnat])
                                    (("7" (inst -1 x!2)
                                      (("7" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("8" (skosimp)
                                (("8" (reveal 1)
                                  (("8" (lemma empty_0[posnat])
                                    (("8" (inst -1 x!2)
                                      (("8" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("9" (reveal 1)
                                (("9" (lemma empty_0[posnat])
                                  (("9" (inst -1 x!2) (("9" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but (1 2))
                        (("3" (lemma empty_0[posnat])
                          (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 2))
                      (("2" (lemma empty_0[posnat])
                        (("2" (inst -1 x!2) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (right_pos_subset-1 nil 3506439585
   ("" (measure-induct+ "length(p)" ("s" "p"))
    (("" (expand* subset? member)
      (("" (skosimp)
        (("" (expand right_pos -2)
          (("" (expand* union IUnion member)
            (("" (prop)
              (("1" (hide -1 -3)
                (("1" (expand only_empty_seq)
                  (("1" (replaces -1)
                    (("1" (expand positionsOF)
                      (("1" (lift-if)
                        (("1" (expand only_empty_seq)
                          (("1" (prop)
                            (("1" (expand union)
                              (("1" (flatten)
                                (("1" (hide 3)
                                  (("1" (expand member)
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2)
                (("2" (expand singleton) (("2" (assert) nil nil)) nil)) nil)
               ("3" (inst -2 "x!1" "delete(x!2, length(x!2) - 1)")
                (("1" (expand delete -2 1)
                  (("1" (lemma empty_0[posnat])
                    (("1" (inst -1 x!2)
                      (("1" (assert)
                        (("1" (inst -2 x!3) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite delete_is_position)
                  (("2" (flatten) (("2" (rewrite empty_0) nil nil)) nil)) nil)
                 ("3" (lemma empty_0[posnat])
                  (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil)) nil))
                nil)
               ("4" (skosimp*)
                (("4" (hide -3)
                  (("4"
                    (name-replace "pi"
                     "add_last(delete(x!2, length(x!2) - 1), 1 + i!1 + last(x!2))"
                     :hide? nil)
                    (("1"
                      (case "pi = delete(x!2, length(x!2) - 1) o  #(1 + i!1 + last(x!2))")
                      (("1" (replace -1 -4 rl)
                        (("1" (hide -2)
                          (("1" (lemma pos_o_term)
                            (("1" (inst -1 pi q1!1 x!1)
                              (("1" (assert)
                                (("1" (lemma right_pos_TCC5)
                                  (("1" (inst -1 x!1 x!2)
                                    (("1" (assert)
                                      (("1"
                                        (inst
                                         -1
                                         "delete(x!2, length(x!2) - 1)")
                                        (("1"
                                          (inst -1 "last(x!2)")
                                          (("1"
                                            (inst
                                             -1
                                             "arity(f(subtermOF(x!1, delete(x!2, length(x!2) - 1))))")
                                            (("1"
                                              (inst -1 i!1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (reveal -7)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma right_pos_TCC3)
                                              (("2"
                                                (inst -1 x!1 x!2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "delete(x!2, length(x!2) - 1)")
                                                    (("1"
                                                      (inst -1 "last(x!2)")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (1 4))
                                                      (("2"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("2"
                                                          (inst -1 x!2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite delete_is_position)
                                              (("3"
                                                (hide-all-but (1 4))
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (rewrite empty_0)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide-all-but (1 3))
                                              (("4"
                                                (lemma empty_0[posnat])
                                                (("4"
                                                  (inst -1 x!2)
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 3))
                                          (("2"
                                            (lemma empty_0[posnat])
                                            (("2"
                                              (inst -1 x!2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 1 rl)
                        (("2" (hide - 2 3)
                          (("2" (grind)
                            (("2" (decompose-equality)
                              (("1" (reveal 1)
                                (("1" (lemma empty_0[posnat])
                                  (("1" (inst -1 x!2)
                                    (("1" (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (grind)
                                              (("1"
                                                (typepred x!4)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp) (("2" (grind) nil nil)) nil)
                               ("3" (skosimp)
                                (("3" (reveal 1)
                                  (("3" (hide 2)
                                    (("3" (lemma empty_0[posnat])
                                      (("3"
                                        (inst -1 x!2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (skosimp)
                                (("4" (reveal 1)
                                  (("4" (lemma empty_0[posnat])
                                    (("4" (inst -1 x!2)
                                      (("4" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("5" (reveal 1)
                                (("5" (lemma empty_0[posnat])
                                  (("5" (inst -1 x!2) (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("6" (skosimp)
                                (("6" (typepred i!2)
                                  (("6" (lemma empty_0[posnat])
                                    (("6" (reveal 1)
                                      (("6"
                                        (inst -1 x!2)
                                        (("6" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("7" (skosimp)
                                (("7" (reveal 1)
                                  (("7" (lemma empty_0[posnat])
                                    (("7" (inst -1 x!2)
                                      (("7" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("8" (skosimp)
                                (("8" (reveal 1)
                                  (("8" (lemma empty_0[posnat])
                                    (("8" (inst -1 x!2)
                                      (("8" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("9" (reveal 1)
                                (("9" (lemma empty_0[posnat])
                                  (("9" (inst -1 x!2) (("9" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but (1 2))
                        (("3" (lemma empty_0[posnat])
                          (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 2))
                      (("2" (lemma empty_0[posnat])
                        (("2" (inst -1 x!2) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (only_empty_seq const-decl "positions" positions nil)
    (TRUE const-decl "bool" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (delete_is_position formula-decl nil positions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_0 formula-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (x!2 skolem-const-decl "{p: position | positionsOF(x!1)(p)}"
     robinsonunificationEF nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (right_pos_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (right_pos_TCC3 subtype-tcc nil robinsonunificationEF nil)
    (pos_o_term formula-decl nil subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (insert? const-decl "finseq" seq_extras structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (add_last const-decl "finseq" seq_extras structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (below type-eq-decl nil naturalnumbers nil)
    (union const-decl "set" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (subset? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (next_position_commute 0
  (next_position_commute-1 nil 3503335634
   (""
    (measure-induct+ "IF p = empty_seq
                  THEN lex2(0,0)
                  ELSE  lex2(length(p),
                             arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))
                  ENDIF" ("s" "t" "p"))
    (("1" (case "x!3 = empty_seq")
      (("1" (hide -2)
        (("1" (expand next_position) (("1" (assert) nil nil)) nil)) nil)
       ("2" (expand next_position 2 1)
        (("2" (assert)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (expand next_position 2) (("1" (assert) nil nil)) nil)
               ("2" (hide -3)
                (("2" (expand next_position 2)
                  (("2" (assert)
                    (("2"
                      (case "positionsOF(x!2)
                                  (add_last(delete(x!3, length(x!3) - 1),
                                            1 + last(x!3)))")
                      (("1" (assert) nil nil)
                       ("2" (hide 3)
                        (("2" (lemma next_position_TCC15)
                          (("2" (inst -1 x!1 x!2 x!3)
                            (("2" (assert)
                              (("2" (inst -1 "delete(x!3, length(x!3) - 1)")
                                (("1" (assert)
                                  (("1"
                                    (inst -1
                                     "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                    (("1" (assert) nil nil)
                                     ("2" (hide-all-but (1 4))
                                      (("2"
                                        (lemma empty_0[posnat])
                                        (("2"
                                          (inst -1 x!3)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but (1 4))
                                  (("2" (lemma empty_0[posnat])
                                    (("2" (inst -1 x!3)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but (1 4))
                        (("3" (lemma empty_0[posnat])
                          (("3" (inst -1 x!3) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3"
                (inst -4 x!1 x!2
                 " add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                (("1" (assert)
                  (("1"
                    (case "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = empty_seq")
                    (("1" (hide-all-but -1) (("1" (grind) nil nil)) nil)
                     ("2" (assert)
                      (("2" (lemma next_position_TCC17)
                        (("2" (inst -1 x!1 x!2 x!3)
                          (("2" (assert)
                            (("2" (inst -1 "delete(x!3, length(x!3) - 1)")
                              (("1" (assert)
                                (("1"
                                  (inst -1
                                   "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                  (("1" (assert)
                                    (("1" (expand next_position 2 2)
                                      (("1"
                                        (case
                                         "positionsOF(x!2)
                                          (add_last(delete(x!3, length(x!3) - 1),
                                                    1 + last(x!3)))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide -1 -2 -5 2 3)
                                          (("2"
                                            (lemma next_position_TCC15)
                                            (("2"
                                              (inst -1 x!1 x!2 x!3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "delete(x!3, length(x!3) - 1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (hide-all-but (1 3))
                                                        (("2"
                                                          (lemma
                                                           empty_0[posnat])
                                                          (("2"
                                                            (inst -1 x!3)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but (1 3))
                                                    (("2"
                                                      (lemma empty_0[posnat])
                                                      (("2"
                                                        (inst -1 x!3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (1 4))
                                    (("2" (lemma empty_0[posnat])
                                      (("2"
                                        (inst -1 x!3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but (1 4))
                                (("2" (lemma empty_0[posnat])
                                  (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (1 3))
                      (("3" (lemma empty_0[posnat])
                        (("3" (inst -1 x!3) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 3))
                  (("2" (lemma empty_0[posnat])
                    (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("4" (inst -2 x!1 x!2 "delete(x!3, length(x!3) - 1)")
                (("1" (assert)
                  (("1" (split)
                    (("1" (expand next_position 2 2)
                      (("1" (assert)
                        (("1"
                          (case "positionsOF(x!2)
                                      (add_last(delete(x!3, length(x!3) - 1),
                                                1 + last(x!3)))")
                          (("1" (hide -2 1 2)
                            (("1" (lemma next_position_TCC15)
                              (("1" (inst -1 x!2 x!1 x!3)
                                (("1" (assert)
                                  (("1"
                                    (inst -1 "delete(x!3, length(x!3) - 1)")
                                    (("1" (assert)
                                      (("1"
                                        (inst
                                         -1
                                         "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide-all-but (1 3))
                                          (("2"
                                            (lemma empty_0[posnat])
                                            (("2"
                                              (inst -1 x!3)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but (1 3))
                                      (("2"
                                        (lemma empty_0[posnat])
                                        (("2"
                                          (inst -1 x!3)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (hide-all-but (1 5))
                            (("3" (lemma empty_0[posnat])
                              (("3" (inst -1 x!3) (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite lex2_lt)
                      (("1" (flatten)
                        (("1" (hide-all-but (1 6))
                          (("1" (expand delete)
                            (("1" (rewrite empty_0) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 2 4 5)
                        (("2" (lemma next_position_TCC5)
                          (("2" (inst -1 x!1 x!2 x!3) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -1 2 4 5)
                        (("3" (lemma next_position_TCC5)
                          (("3"
                            (inst -1 x!1 x!2 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2" (rewrite delete_is_position)
                                (("1" (rewrite delete_is_position)
                                  (("1" (flatten)
                                    (("1" (rewrite empty_0) nil nil)) nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (rewrite empty_0) nil nil)) nil))
                                nil))
                              nil)
                             ("3" (hide 2 3)
                              (("3" (lemma empty_0[posnat])
                                (("3" (inst -1 x!3) (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide -1 2 4 5)
                        (("4" (lemma empty_0[posnat])
                          (("4" (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert) nil nil)
                             ("2" (hide 2 3)
                              (("2" (lemma empty_0[posnat])
                                (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (hide-all-but (1 6))
                        (("5" (lemma empty_0[posnat])
                          (("5" (inst -1 x!3) (("5" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 5))
                  (("2" (lemma empty_0[posnat])
                    (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("5" (expand next_position 1)
                (("5" (assert)
                  (("5"
                    (case "positionsOF(x!2)
                                  (add_last(delete(x!3, length(x!3) - 1),
                                            1 + last(x!3)))")
                    (("1" (hide -2 -4 1)
                      (("1" (lemma next_position_TCC15)
                        (("1" (inst -1 x!2 x!1 x!3)
                          (("1" (assert)
                            (("1" (inst -1 "delete(x!3, length(x!3) - 1)")
                              (("1" (assert)
                                (("1"
                                  (inst -1
                                   "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                  (("1" (assert) nil nil)
                                   ("2" (hide-all-but (1 3))
                                    (("2" (lemma empty_0[posnat])
                                      (("2"
                                        (inst -1 x!3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but (1 3))
                                (("2" (lemma empty_0[posnat])
                                  (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil)
                     ("3" (hide-all-but (1 4))
                      (("3" (lemma empty_0[posnat])
                        (("3" (inst -1 x!3) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 3)
      (("2" (lemma next_position_TCC5)
        (("2" (inst -1 x!1 x!2 x!3) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (hide 2) (("3" (rewrite empty_0) nil nil)) nil)
     ("4" (hide 3)
      (("4" (lemma next_position_TCC3)
        (("4" (inst -1 x!1 x!2 x!3) (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (hide 3)
      (("5" (rewrite delete_is_position)
        (("5" (hide 3) (("5" (flatten) (("5" (rewrite empty_0) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (hide 3)
      (("6" (lemma empty_0[posnat])
        (("6" (inst -1 x!3) (("6" (assert) nil nil)) nil)) nil))
      nil)
     ("7" (hide 3)
      (("7" (lemma next_position_TCC5)
        (("7" (inst -1 y!1 y!2 y!3) (("7" (assert) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2) (("8" (rewrite empty_0) nil nil)) nil)
     ("9" (hide 3)
      (("9" (lemma next_position_TCC3)
        (("9" (inst -1 y!1 y!2 y!3) (("9" (assert) nil nil)) nil)) nil))
      nil)
     ("10" (hide 3)
      (("10" (rewrite delete_is_position)
        (("10" (hide 3)
          (("10" (flatten) (("10" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("11" (hide 3)
      (("11" (lemma empty_0[posnat])
        (("11" (inst -1 y!3) (("11" (assert) nil nil)) nil)) nil))
      nil)
     ("12" (hide 3)
      (("12" (lemma next_position_TCC5)
        (("12" (inst -1 "x!1`1" "x!1`2" "x!1`3") (("12" (assert) nil nil))
          nil))
        nil))
      nil)
     ("13" (hide 2) (("13" (rewrite empty_0) nil nil)) nil)
     ("14" (hide 3)
      (("14" (lemma next_position_TCC3)
        (("14" (inst -1 "x!1`1" "x!1`2" "x!1`3") (("14" (assert) nil nil))
          nil))
        nil))
      nil)
     ("15" (hide 3)
      (("15" (rewrite delete_is_position)
        (("15" (hide 3)
          (("15" (flatten) (("15" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("16" (hide 3)
      (("16" (lemma empty_0[posnat])
        (("16" (inst -1 "x!1`3") (("16" (assert) nil nil)) nil)) nil))
      nil)
     ("17" (hide 3)
      (("17" (lemma next_position_TCC5)
        (("17" (inst -1 "y!1`1" "y!1`2" "y!1`3") (("17" (assert) nil nil))
          nil))
        nil))
      nil)
     ("18" (hide 2) (("18" (rewrite empty_0) nil nil)) nil)
     ("19" (hide 3)
      (("19" (lemma next_position_TCC3)
        (("19" (inst -1 "y!1`1" "y!1`2" "y!1`3") (("19" (assert) nil nil))
          nil))
        nil))
      nil)
     ("20" (hide 3)
      (("20" (rewrite delete_is_position)
        (("20" (hide 3)
          (("20" (flatten) (("20" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("21" (hide 3)
      (("21" (lemma empty_0[posnat])
        (("21" (inst -1 "y!1`3") (("21" (assert) nil nil)) nil)) nil))
      nil)
     ("22" (hide 3)
      (("22" (lemma next_position_TCC5)
        (("22" (inst -1 "s!1" "t!1" "p!1") (("22" (assert) nil nil)) nil))
        nil))
      nil)
     ("23" (hide 2) (("23" (rewrite empty_0) nil nil)) nil)
     ("24" (hide 3)
      (("24" (lemma next_position_TCC3)
        (("24" (inst -1 "s!1" "t!1" "p!1") (("24" (assert) nil nil)) nil))
        nil))
      nil)
     ("25" (hide 3)
      (("25" (rewrite delete_is_position)
        (("25" (hide 3)
          (("25" (flatten) (("25" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("26" (hide 3)
      (("26" (lemma empty_0[posnat])
        (("26" (inst -1 "p!1") (("26" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((next_position_TCC3 subtype-tcc nil robinsonunificationEF nil)
    (add_last const-decl "finseq" seq_extras structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (next_position_TCC15 subtype-tcc nil robinsonunificationEF nil)
    (empty_0 formula-decl nil seq_extras structures)
    (x!3 skolem-const-decl
     "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}"
     robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (next_position_TCC17 termination-tcc nil robinsonunificationEF nil)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (lex2_lt formula-decl nil lex2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (delete_is_position formula-decl nil positions nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (delete const-decl "finseq" seq_extras structures)
    (< const-decl "bool" reals nil) (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (next_position_is_position 0
  (next_position_is_position-1 nil 3503157274
   (""
    (measure-induct+ "IF p = empty_seq
                THEN lex2(0,0)
                ELSE  lex2(length(p),
                           arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))
                ENDIF" ("s" "t" "p"))
    (("1" (case "x!3 = empty_seq")
      (("1" (hide -2 -4)
        (("1" (expand next_position) (("1" (assert) nil nil)) nil)) nil)
       ("2" (expand next_position 2)
        (("2" (assert)
          (("2" (prop)
            (("1" (hide -1)
              (("1" (rewrite delete_is_position)
                (("1" (flatten) (("1" (rewrite empty_0) nil nil)) nil)) nil))
              nil)
             ("2"
              (inst -4 x!1 x!2 " add_last(delete(x!3, length(x!3) - 1),
                                                         1 + last(x!3))")
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide -2 -3 -4 -5 -6 1 2 3) (("1" (grind) nil nil))
                      nil)
                     ("2" (lemma next_position_TCC17)
                      (("2" (inst -1 x!1 x!2 x!3)
                        (("2" (assert)
                          (("2" (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert)
                              (("1"
                                (inst -1
                                 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                (("1" (assert) nil nil)
                                 ("2" (hide-all-but (1 5))
                                  (("2" (lemma empty_0[posnat])
                                    (("2" (inst -1 x!3)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 5))
                              (("2" (lemma empty_0[posnat])
                                (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (1 3))
                (("2" (lemma empty_0[posnat])
                  (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (hide 3)
              (("3" (inst -2 x!1 x!2 "delete(x!3, length(x!3) - 1)")
                (("1" (assert)
                  (("1" (hide -1 2)
                    (("1" (rewrite lex2_lt)
                      (("1" (flatten)
                        (("1" (hide 1 4)
                          (("1" (expand delete)
                            (("1" (lemma empty_0[posnat])
                              (("1" (inst -1 x!3) (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 4)
                        (("2" (lemma next_position_TCC5)
                          (("2" (inst -1 x!1 x!2 x!3) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 4)
                        (("3" (lemma next_position_TCC5)
                          (("3"
                            (inst -1 x!1 x!2 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2" (rewrite delete_is_position)
                                (("1" (rewrite delete_is_position)
                                  (("1" (flatten)
                                    (("1" (rewrite empty_0) nil nil)) nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (rewrite empty_0) nil nil)) nil))
                                nil))
                              nil)
                             ("3" (hide 2 3)
                              (("3" (lemma empty_0[posnat])
                                (("3" (inst -1 x!3) (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide 4)
                        (("4" (lemma empty_0[posnat])
                          (("4" (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert) nil nil)
                             ("2" (hide 2 3)
                              (("2" (lemma empty_0[posnat])
                                (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (hide 2 4)
                        (("5" (lemma empty_0[posnat])
                          (("5" (inst -1 x!3) (("5" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 4))
                  (("2" (lemma empty_0[posnat])
                    (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (hide-all-but 1)
              (("4" (expand positionsOF)
                (("4" (lift-if)
                  (("4" (expand* union IUnion member only_empty_seq) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 3)
      (("2" (lemma next_position_TCC5)
        (("2" (inst -1 x!1 x!2 x!3) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (hide 2) (("3" (rewrite empty_0) nil nil)) nil)
     ("4" (hide 3)
      (("4" (lemma next_position_TCC3)
        (("4" (inst -1 x!1 x!2 x!3) (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (hide 3)
      (("5" (rewrite delete_is_position)
        (("5" (hide 3) (("5" (flatten) (("5" (rewrite empty_0) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (hide 3)
      (("6" (lemma empty_0[posnat])
        (("6" (inst -1 x!3) (("6" (assert) nil nil)) nil)) nil))
      nil)
     ("7" (hide 3)
      (("7" (lemma next_position_TCC5)
        (("7" (inst -1 y!1 y!2 y!3) (("7" (assert) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2) (("8" (rewrite empty_0) nil nil)) nil)
     ("9" (hide 3)
      (("9" (lemma next_position_TCC3)
        (("9" (inst -1 y!1 y!2 y!3) (("9" (assert) nil nil)) nil)) nil))
      nil)
     ("10" (hide 3)
      (("10" (rewrite delete_is_position)
        (("10" (hide 3)
          (("10" (flatten) (("10" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("11" (hide 3)
      (("11" (lemma empty_0[posnat])
        (("11" (inst -1 y!3) (("11" (assert) nil nil)) nil)) nil))
      nil)
     ("12" (hide 3)
      (("12" (lemma next_position_TCC5)
        (("12" (inst -1 "x!1`1" "x!1`2" "x!1`3") (("12" (assert) nil nil))
          nil))
        nil))
      nil)
     ("13" (hide 2) (("13" (rewrite empty_0) nil nil)) nil)
     ("14" (hide 3)
      (("14" (lemma next_position_TCC3)
        (("14" (inst -1 "x!1`1" "x!1`2" "x!1`3") (("14" (assert) nil nil))
          nil))
        nil))
      nil)
     ("15" (hide 3)
      (("15" (rewrite delete_is_position)
        (("15" (hide 3)
          (("15" (flatten) (("15" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("16" (hide 3)
      (("16" (lemma empty_0[posnat])
        (("16" (inst -1 "x!1`3") (("16" (assert) nil nil)) nil)) nil))
      nil)
     ("17" (hide 3)
      (("17" (lemma next_position_TCC5)
        (("17" (inst -1 "y!1`1" "y!1`2" "y!1`3") (("17" (assert) nil nil))
          nil))
        nil))
      nil)
     ("18" (hide 2) (("18" (rewrite empty_0) nil nil)) nil)
     ("19" (hide 3)
      (("19" (lemma next_position_TCC3)
        (("19" (inst -1 "y!1`1" "y!1`2" "y!1`3") (("19" (assert) nil nil))
          nil))
        nil))
      nil)
     ("20" (hide 3)
      (("20" (rewrite delete_is_position)
        (("20" (hide 3)
          (("20" (flatten) (("20" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("21" (hide 3)
      (("21" (lemma empty_0[posnat])
        (("21" (inst -1 "y!1`3") (("21" (assert) nil nil)) nil)) nil))
      nil)
     ("22" (hide 3)
      (("22" (lemma next_position_TCC5)
        (("22" (inst -1 "s!1" "t!1" "p!1") (("22" (assert) nil nil)) nil))
        nil))
      nil)
     ("23" (hide 2) (("23" (rewrite empty_0) nil nil)) nil)
     ("24" (hide 3)
      (("24" (lemma next_position_TCC3)
        (("24" (inst -1 "s!1" "t!1" "p!1") (("24" (assert) nil nil)) nil))
        nil))
      nil)
     ("25" (hide 3)
      (("25" (rewrite delete_is_position)
        (("25" (hide 3)
          (("25" (flatten) (("25" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("26" (hide 3)
      (("26" (lemma empty_0[posnat])
        (("26" (inst -1 "p!1") (("26" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((next_position_TCC3 subtype-tcc nil robinsonunificationEF nil)
    (only_empty_seq const-decl "positions" positions nil)
    (member const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (union const-decl "set" sets nil) (lex2_lt formula-decl nil lex2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (x!3 skolem-const-decl
     "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}"
     robinsonunificationEF nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add_last const-decl "finseq" seq_extras structures)
    (next_position_TCC17 termination-tcc nil robinsonunificationEF nil)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (delete const-decl "finseq" seq_extras structures)
    (< const-decl "bool" reals nil) (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (next_pos_length_and_last_TCC1 0
  (next_pos_length_and_last_TCC1-1 nil 3506181251
   ("" (skosimp)
    (("" (hide 1)
      (("" (lemma empty_0[posnat])
        (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (/= const-decl "boolean" notequal nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (next_pos_length_and_last subtype "robinsonunificationEF.p"
    "not_empty_seq[posnat]")))
 (next_pos_length_and_last_TCC2 0
  (next_pos_length_and_last_TCC2-1 nil 3506259641
   ("" (skosimp)
    (("" (typepred p!1)
      (("" (hide -1 -2)
        (("" (lemma empty_0[posnat])
          (("" (inst -1 p!1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty_0 formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (next_pos_length_and_last subtype
    "robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.p)"
    "not_empty_seq[posnat]")))
 (next_pos_length_and_last 0
  (next_pos_length_and_last-1 nil 3506181434
   ("" (lemma empty_0[posnat])
    ((""
      (measure-induct+
       "lex2(length(p),  arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))"
       ("s" "t" "p"))
      (("1" (name-replace "p!1" "next_position(x!1, x!2, x!3)" :hide? nil)
        (("1" (inst -3 x!3)
          (("1" (assert)
            (("1" (ground)
              (("1" (expand next_position -1)
                (("1" (lift-if)
                  (("1" (ground)
                    (("1" (hide -2 1 2)
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1)
                          (("1" (expand delete) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 -3 -4 1 3)
                      (("2" (replace -1 1 rl)
                        (("2" (hide -1)
                          (("2" (expand* add_last delete insert? finseq_appl)
                            nil nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (inst -5 "x!1" "x!2"
                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                      (("1" (replace -2 -5)
                        (("1" (split -5)
                          (("1"
                            (case "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)")
                            (("1" (assert) nil nil)
                             ("2" (hide - 2 3)
                              (("2"
                                (expand* add_last delete insert? finseq_appl)
                                nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (case "length(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = length(x!3)")
                              (("1" (assert) nil nil)
                               ("2" (hide - 2 3)
                                (("2"
                                  (expand* add_last delete insert?
                                   finseq_appl)
                                  nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -2 2 3)
                            (("3" (lemma next_position_TCC17)
                              (("3" (inst -1 x!1 x!2 x!3)
                                (("3" (assert)
                                  (("3"
                                    (inst -1 "delete(x!3, length(x!3) - 1)")
                                    (("3" (assert)
                                      (("3"
                                        (inst
                                         -1
                                         "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (lift-if)
                                            (("3"
                                              (prop)
                                              (("3"
                                                (hide-all-but (-1 2))
                                                (("3"
                                                  (expand*
                                                   add_last
                                                   insert?
                                                   finseq_appl)
                                                  (("3"
                                                    (decompose-equality)
                                                    (("3"
                                                      (hide -2)
                                                      (("3"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("3"
                                                          (inst -1 empty_seq)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma next_position_TCC15)
                        (("2" (inst -1 x!1 x!2 x!3)
                          (("2" (assert)
                            (("2" (inst -1 "delete(x!3, length(x!3) - 1)")
                              (("2" (assert)
                                (("2"
                                  (inst -1
                                   "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                  (("2" (assert)
                                    (("2" (hide - 2 3)
                                      (("2"
                                        (expand*
                                         add_last
                                         delete
                                         insert?
                                         finseq_appl)
                                        (("2"
                                          (decompose-equality)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (lemma empty_0[posnat])
                                              (("2"
                                                (inst -1 empty_seq)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (inst -3 x!1 x!2 "delete(x!3, length(x!3) - 1)")
                      (("1" (replace -1 -3)
                        (("1" (split -3)
                          (("1" (expand delete -1) (("1" (assert) nil nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand delete -1) (("2" (assert) nil nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (hide -1 4 5)
                              (("3" (lemma next_position_TCC19)
                                (("3" (inst -1 x!1 x!2 x!3)
                                  (("3" (assert)
                                    (("3"
                                      (inst -1 "delete(x!3, length(x!3) - 1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst
                                           -1
                                           "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite delete_is_position)
                        (("2" (rewrite delete_is_position) nil nil)) nil))
                      nil)
                     ("5" (hide -1 -3 -4 1)
                      (("5" (lemma empty_0[posnat])
                        (("5" (inst -1 p!1) (("5" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand next_position -1)
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (hide -2 1 2)
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1)
                          (("1" (expand delete) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 -3 -4 1 3)
                      (("2" (replace -1 1 rl)
                        (("2" (hide -1)
                          (("2" (expand* add_last delete insert? finseq_appl)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (inst -5 x!1 x!2
                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                      (("1" (replace -2 -5)
                        (("1" (split -5)
                          (("1" (hide-all-but (-1 2 3))
                            (("1"
                              (expand* add_last delete insert? finseq_appl)
                              nil nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide -1 -3 -4 -5 -6 2)
                              (("2"
                                (case "last(add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))) = 1 + last(x!3)")
                                (("1" (replaces -1) (("1" (assert) nil nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2"
                                    (expand* add_last delete insert?
                                     finseq_appl)
                                    (("2" (assert) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma next_position_TCC17)
                            (("3" (inst -1 x!1 x!2 x!3)
                              (("3" (assert)
                                (("3" (inst -1 "delete(x!3, length(x!3) - 1)")
                                  (("3" (assert)
                                    (("3"
                                      (inst
                                       -1
                                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (prop)
                                            (("3"
                                              (hide -2 -3 -4 -5 -6 1 2 4)
                                              (("3"
                                                (expand*
                                                 add_last
                                                 delete
                                                 insert?
                                                 finseq_appl)
                                                (("3"
                                                  (decompose-equality)
                                                  (("3"
                                                    (hide -2)
                                                    (("3"
                                                      (lemma empty_0[posnat])
                                                      (("3"
                                                        (inst -1 empty_seq)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma next_position_TCC15)
                        (("2" (inst -1 x!1 x!2 x!3)
                          (("2" (assert)
                            (("2" (inst -1 "delete(x!3, length(x!3) - 1)")
                              (("2" (assert)
                                (("2"
                                  (inst -1
                                   "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                  (("2" (assert)
                                    (("2" (hide - 2 3)
                                      (("2"
                                        (expand*
                                         add_last
                                         delete
                                         insert?
                                         finseq_appl)
                                        (("2"
                                          (decompose-equality)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (lemma empty_0[posnat])
                                              (("2"
                                                (inst -1 empty_seq)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (inst -3 "x!1" "x!2" "delete(x!3, length(x!3) - 1)")
                      (("1" (lemma next_position_TCC19)
                        (("1" (inst -1 x!1 x!2 x!3)
                          (("1" (assert)
                            (("1" (inst -1 "delete(x!3, length(x!3) - 1)")
                              (("1" (assert)
                                (("1"
                                  (inst -1
                                   "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                  (("1" (assert)
                                    (("1" (hide -1)
                                      (("1"
                                        (replace -1 -3)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (case
                                             "length(delete(x!3, length(x!3) - 1)) < length(x!3)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but (1 6))
                                              (("2"
                                                (expand delete)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "length(delete(x!3, length(x!3) - 1)) < length(x!3)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but (1 6))
                                              (("2"
                                                (expand delete)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite delete_is_position)
                        (("2" (rewrite delete_is_position) nil nil)) nil))
                      nil)
                     ("5" (hide-all-but (-2 3 4))
                      (("5" (lemma empty_0[posnat])
                        (("5" (inst -1 p!1) (("5" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -2 1 2) (("2" (inst -3 y!3) (("2" (assert) nil nil)) nil))
        nil)
       ("3" (hide-all-but (-3 -4))
        (("3" (inst -2 y!3) (("3" (assert) nil nil)) nil)) nil)
       ("4" (hide -1 2)
        (("4" (lemma next_position_TCC5)
          (("4" (inst -1 x!1 x!2 x!3) (("4" (assert) nil nil)) nil)) nil))
        nil)
       ("5" (hide 1) (("5" (inst -2 x!3) (("5" (assert) nil nil)) nil)) nil)
       ("6" (hide 2)
        (("6" (lemma next_position_TCC12)
          (("6" (inst -1 x!1 x!2 x!3)
            (("6" (assert)
              (("6" (inst -1 "delete(x!3, length(x!3) - 1)")
                (("6" (inst -1 x!3) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (hide 2)
        (("7" (rewrite delete_is_position)
          (("7" (inst -1 x!3) (("7" (assert) nil nil)) nil)) nil))
        nil)
       ("8" (hide 2) (("8" (inst -1 x!3) (("8" (assert) nil nil)) nil)) nil)
       ("9" (hide 2)
        (("9" (lemma next_position_TCC5)
          (("9" (inst -1 y!1 y!2 y!3) (("9" (assert) nil nil)) nil)) nil))
        nil)
       ("10" (hide 1) (("10" (inst -2 y!3) (("10" (assert) nil nil)) nil))
        nil)
       ("11" (hide 2)
        (("11" (lemma next_position_TCC12)
          (("11" (inst -1 y!1 y!2 y!3)
            (("11" (assert)
              (("11" (inst -1 "delete(y!3, length(y!3) - 1)")
                (("11" (inst -1 y!3) (("11" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("12" (hide 2)
        (("12" (rewrite delete_is_position)
          (("12" (inst -1 y!3) (("12" (assert) nil nil)) nil)) nil))
        nil)
       ("13" (hide 2) (("13" (inst -1 y!3) (("13" (assert) nil nil)) nil))
        nil)
       ("14" (hide -2 2)
        (("14" (inst -3 "x!1`3") (("14" (assert) nil nil)) nil)) nil)
       ("15" (hide-all-but (-3 -4))
        (("15" (inst -2 "x!1`3") (("15" (assert) nil nil)) nil)) nil)
       ("16" (hide-all-but (-1 -3 -4))
        (("16" (inst -3 "y!1`3") (("16" (assert) nil nil)) nil)) nil)
       ("17" (hide-all-but (-3 -4))
        (("17" (inst -2 "y!1`3") (("17" (assert) nil nil)) nil)) nil)
       ("18" (hide 2)
        (("18" (lemma next_position_TCC5)
          (("18" (inst -1 "x!1`1" "x!1`2" "x!1`3") (("18" (assert) nil nil))
            nil))
          nil))
        nil)
       ("19" (hide 1) (("19" (inst -2 "x!1`3") (("19" (assert) nil nil)) nil))
        nil)
       ("20" (hide 2)
        (("20" (lemma next_position_TCC12)
          (("20" (inst -1 "x!1`1" "x!1`2" "x!1`3")
            (("20" (assert)
              (("20" (inst -1 "delete(x!1`3, length(x!1`3) - 1)")
                (("20" (inst -1 "x!1`3") (("20" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("21" (hide 2)
        (("21" (rewrite delete_is_position)
          (("21" (inst -1 "x!1`3") (("21" (assert) nil nil)) nil)) nil))
        nil)
       ("22" (hide 2) (("22" (inst -1 "x!1`3") (("22" (assert) nil nil)) nil))
        nil)
       ("23" (hide 2)
        (("23" (lemma next_position_TCC5)
          (("23" (inst -1 "y!1`1" "y!1`2" "y!1`3") (("23" (assert) nil nil))
            nil))
          nil))
        nil)
       ("24" (hide 1) (("24" (inst -2 "y!1`3") (("24" (assert) nil nil)) nil))
        nil)
       ("25" (hide 2)
        (("25" (lemma next_position_TCC12)
          (("25" (inst -1 "y!1`1" "y!1`2" "y!1`3")
            (("25" (assert)
              (("25" (inst -1 "delete(y!1`3, length(y!1`3) - 1)")
                (("25" (inst -1 "y!1`3") (("25" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("26" (hide 2)
        (("26" (rewrite delete_is_position)
          (("26" (inst -1 "y!1`3") (("26" (assert) nil nil)) nil)) nil))
        nil)
       ("27" (hide 2) (("27" (inst -1 "y!1`3") (("27" (assert) nil nil)) nil))
        nil)
       ("28" (hide +) (("28" (inst -3 p!1) (("28" (assert) nil nil)) nil))
        nil)
       ("29" (hide -1 +) (("29" (inst -2 p!1) (("29" (assert) nil nil)) nil))
        nil)
       ("30" (hide 2)
        (("30" (lemma next_position_TCC5)
          (("30" (inst -1 s!1 t!1 p!1) (("30" (assert) nil nil)) nil)) nil))
        nil)
       ("31" (hide 1) (("31" (inst -2 p!1) (("31" (assert) nil nil)) nil))
        nil)
       ("32" (hide 2)
        (("32" (lemma next_position_TCC12)
          (("32" (inst -1 s!1 t!1 p!1)
            (("32" (assert)
              (("32" (inst -1 "delete(p!1, length(p!1) - 1)")
                (("32" (inst -1 p!1) (("32" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("33" (hide 2)
        (("33" (rewrite delete_is_position)
          (("33" (inst -1 p!1) (("33" (assert) nil nil)) nil)) nil))
        nil)
       ("34" (inst -1 p!1) (("34" (assert) nil nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (below type-eq-decl nil nat_types nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (/= const-decl "boolean" notequal nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil) (< const-decl "bool" reals nil)
    (delete const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (next_position_TCC19 termination-tcc nil robinsonunificationEF nil)
    (delete_is_position formula-decl nil positions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (x!3 skolem-const-decl "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}"
     robinsonunificationEF nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (next_position_TCC17 termination-tcc nil robinsonunificationEF nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_position_TCC15 subtype-tcc nil robinsonunificationEF nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (next_position_TCC12 subtype-tcc nil robinsonunificationEF nil)
    (x!3 skolem-const-decl "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}"
     robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (y!3 skolem-const-decl "{p: position |
   positionsOF(y!1)(p) AND positionsOF(y!2)(p) AND p /= empty_seq}"
     robinsonunificationEF nil)
    (y!2 skolem-const-decl "term" robinsonunificationEF nil)
    (y!1 skolem-const-decl "term" robinsonunificationEF nil)
    (x!1 skolem-const-decl "[s: term, t: term,
 {p: position | positionsOF(s)(p) AND positionsOF(t)(p) AND p /= empty_seq}]"
     robinsonunificationEF nil)
    (y!1 skolem-const-decl "[s: term, t: term,
 {p: position | positionsOF(s)(p) AND positionsOF(t)(p) AND p /= empty_seq}]"
     robinsonunificationEF nil)
    (p!1 skolem-const-decl "{p: position |
   positionsOF(s!1)(p) AND positionsOF(t!1)(p) AND p /= empty_seq}"
     robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (empty_0 formula-decl nil seq_extras structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (next_pos_is_a_diff_pos 0
  (next_pos_is_a_diff_pos-1 nil 3504615157
   ("" (skosimp)
    (("" (lemma "next_pos_length_and_last")
      (("" (inst -1 s!1 t!1 p!1)
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((next_pos_length_and_last formula-decl nil robinsonunificationEF nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (p!1 skolem-const-decl
     "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}"
     robinsonunificationEF nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (member_right_pos 0
  (member_right_pos-2 "" 3790333668
   ("" (measure-induct+ "length(p)" ("s" "p"))
    (("" (skosimp)
      (("" (expand member)
        (("" (prop)
          (("1" (expand right_pos -1)
            (("1" (prop)
              (("1" (hide 2 -3)
                (("1" (expand only_empty_seq) (("1" (assert) nil nil)) nil))
                nil)
               ("2" (expand union)
                (("2" (prop)
                  (("1" (expand member)
                    (("1" (prop)
                      (("1" (hide -2 1 3)
                        (("1" (expand singleton) (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (inst -2 x!1 "delete(x!2, length(x!2) - 1)")
                        (("1" (inst -2 q!1)
                          (("1" (expand delete -2 1)
                            (("1" (rewrite empty_0)
                              (("1" (assert)
                                (("1" (prop)
                                  (("1" (hide -2)
                                    (("1" (expand left_pos)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst
                                             5
                                             r!1
                                             "p1!1 o #(last(x!2))"
                                             q1!1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but -1)
                                                      (("1" (grind) nil nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite o_assoc)
                                                      (("2"
                                                        (replace -2 1 rl)
                                                        (("2"
                                                          (hide - 2 3 5)
                                                          (("2"
                                                            (expand delete)
                                                            (("2"
                                                              (rewrite
                                                               empty_0)
                                                              (("2"
                                                                (expand
                                                                 finseq_appl)
                                                                (("2"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       empty_0[posnat])
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         x!2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     empty_0[posnat])
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       x!2)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 4))
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite empty_0)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             6
                                             r!1
                                             "p1!1 o #(last(x!2))"
                                             q1!1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (rewrite o_assoc)
                                                      (("1"
                                                        (replace -2 1 rl)
                                                        (("1"
                                                          (hide - 2 3 4 6)
                                                          (("1"
                                                            (expand delete)
                                                            (("1"
                                                              (rewrite
                                                               empty_0)
                                                              (("1"
                                                                (expand
                                                                 finseq_appl)
                                                                (("1"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       empty_0[posnat])
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         x!2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     empty_0[posnat])
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       x!2)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but -1)
                                                      (("2" (grind) nil nil))
                                                      nil)
                                                     ("3"
                                                      (rewrite first_compo)
                                                      (("3"
                                                        (hide-all-but (1 4))
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (rewrite empty_0)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 5))
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite empty_0)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 1)
                                    (("2" (expand left_pos)
                                      (("2"
                                        (inst
                                         3
                                         "delete(x!2, length(x!2) - 1)"
                                         "#(last(x!2))"
                                         empty_seq)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide-all-but -1)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (hide -1 3)
                                              (("2"
                                                (expand delete)
                                                (("2"
                                                  (rewrite empty_0)
                                                  (("2"
                                                    (decompose-equality)
                                                    (("1" (grind) nil nil)
                                                     ("2"
                                                      (decompose-equality)
                                                      (("1" (grind) nil nil)
                                                       ("2"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("2"
                                                          (inst -1 x!2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma empty_0[posnat])
                                                      (("3"
                                                        (inst -1 x!2)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 3)
                                          (("2"
                                            (flatten)
                                            (("2" (rewrite empty_0) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -1 3)
                                          (("3"
                                            (lemma empty_0[posnat])
                                            (("3"
                                              (inst -1 x!2)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite delete_is_position)
                          (("2" (hide-all-but (1 3))
                            (("2" (flatten) (("2" (rewrite empty_0) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but (1 2))
                          (("3" (lemma empty_0[posnat])
                            (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (expand* member IUnion)
                      (("2" (skosimp*)
                        (("2" (expand left_pos)
                          (("2"
                            (inst 3 "delete(x!2, length(x!2) - 1)"
                             "#(last(x!2))" "#(1 + i!1 + last(x!2)) o q1!1")
                            (("1" (flatten)
                              (("1" (hide 3)
                                (("1" (prop)
                                  (("1" (hide -1 3)
                                    (("1" (replaces -1)
                                      (("1"
                                        (expand delete)
                                        (("1"
                                          (rewrite empty_0)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (decompose-equality)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (lemma empty_0[posnat])
                                                  (("2"
                                                    (inst -1 x!2)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma empty_0[posnat])
                                                (("3"
                                                  (inst -1 x!2)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide - 3)
                                    (("2" (expand delete)
                                      (("2"
                                        (rewrite empty_0)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (decompose-equality)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (decompose-equality)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (lemma empty_0[posnat])
                                                (("2"
                                                  (inst -1 x!2)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma empty_0[posnat])
                                              (("3"
                                                (inst -1 x!2)
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide-all-but -1)
                                    (("3" (grind) nil nil)) nil)
                                   ("4" (hide-all-but -1)
                                    (("4" (grind) nil nil)) nil)
                                   ("5" (rewrite first_compo)
                                    (("1" (hide-all-but 1)
                                      (("1" (grind) nil nil)) nil)
                                     ("2" (hide-all-but -1)
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 2))
                              (("2" (lemma empty_0[posnat])
                                (("2" (inst -1 x!2) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "x!2 = empty_seq")
            (("1" (hide -3)
              (("1" (expand* left_pos right_pos only_empty_seq)
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (prop)
                      (("1" (replaces -3)
                        (("1" (lemma seq_empty[posnat])
                          (("1" (inst -1 r!1 p1!1)
                            (("1" (assert)
                              (("1" (lemma empty_0[posnat])
                                (("1" (inst -1 r!1) (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replaces -4)
                        (("2" (hide -1 -3)
                          (("2" (lemma seq_empty[posnat])
                            (("2" (inst -1 r!1 p1!1)
                              (("2" (assert)
                                (("2" (lemma empty_0[posnat])
                                  (("2" (inst -1 p1!1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "q!1 = delete(x!2, length(x!2) - 1)")
              (("1" (hide -2 -3)
                (("1" (expand right_pos)
                  (("1" (assert)
                    (("1" (expand* union member)
                      (("1" (flatten)
                        (("1" (hide 4)
                          (("1" (replace -1 3 rl)
                            (("1" (expand* right_pos only_empty_seq)
                              (("1" (prop)
                                (("1" (expand* union member)
                                  (("1" (flatten)
                                    (("1" (hide-all-but 2)
                                      (("1"
                                        (expand singleton)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 x!1 "delete(x!2, length(x!2) - 1)")
                (("1" (inst -2 q!1)
                  (("1" (expand delete -2 1)
                    (("1" (rewrite empty_0)
                      (("1" (assert)
                        (("1" (expand right_pos 3)
                          (("1" (expand* union member)
                            (("1" (flatten 3)
                              (("1" (assert)
                                (("1" (hide 4 5)
                                  (("1" (expand* singleton left_pos)
                                    (("1" (skosimp)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst
                                           5
                                           r!1
                                           "delete(p1!1, length(p1!1) - 1)"
                                           empty_seq)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand o)
                                                (("1"
                                                  (decompose-equality -3)
                                                  (("1"
                                                    (expand*
                                                     delete
                                                     finseq_appl)
                                                    (("1"
                                                      (expand empty_seq -3)
                                                      (("1"
                                                        (decompose-equality
                                                         -3)
                                                        (("1"
                                                          (lemma
                                                           empty_0[posnat])
                                                          (("1"
                                                            (inst -1 p1!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces -5)
                                                                (("1"
                                                                  (decompose-equality
                                                                   3)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -4)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         x!3)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand delete 1)
                                                (("2"
                                                  (rewrite empty_0)
                                                  (("2"
                                                    (rewrite empty_0)
                                                    (("2"
                                                      (expand o)
                                                      (("2"
                                                        (expand finseq_appl)
                                                        (("2"
                                                          (decompose-equality
                                                           -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   x!3)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide-all-but
                                                                 (1 2))
                                                                (("4"
                                                                  (lemma
                                                                   empty_0[posnat])
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     p1!1)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (hide-all-but
                                                                 (1 4))
                                                                (("5"
                                                                  (lemma
                                                                   empty_0[posnat])
                                                                  (("5"
                                                                    (inst
                                                                     -1
                                                                     x!2)
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 2))
                                            (("2"
                                              (lemma empty_0[posnat])
                                              (("2"
                                                (inst -1 p1!1)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst
                                           6
                                           r!1
                                           "delete(p1!1, length(p1!1) - 1)"
                                           q1!1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 6)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -1 -3 4)
                                                  (("1"
                                                    (expand*
                                                     delete
                                                     finseq_appl)
                                                    (("1"
                                                      (rewrite empty_0)
                                                      (("1"
                                                        (rewrite empty_0)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand o)
                                                            (("1"
                                                              (decompose-equality
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       x!3)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide-all-but
                                                                       (1 3))
                                                                      (("4"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           p1!1)
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (hide-all-but
                                                                       (1 4))
                                                                      (("5"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("5"
                                                                          (inst
                                                                           -1
                                                                           x!2)
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal 4)
                                                  (("2"
                                                    (expand IUnion)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "first(q1!1) - 1 - last(x!2)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "rest(q1!1)")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (case
                                                               "add_last(delete(x!2, length(x!2) - 1),
                                     first(q1!1)) o rest(q1!1)
             = r!1 o q1!1")
                                                              (("1"
                                                                (typepred q!1)
                                                                (("1"
                                                                  (lemma
                                                                   pos_subterm_ax)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "add_last(delete(x!2, length(x!2) - 1), first(q1!1))"
                                                                     "rest(q1!1)"
                                                                     x!1)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1 6))
                                                                      (("2"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           x!2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (case
                                                                   "r!1 = delete(x!2, length(x!2) - 1)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       seq_first_rest_1[posnat])
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         q1!1)
                                                                        (("1"
                                                                          (lemma
                                                                           empty_0[posnat])
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             q1!1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "add_last(r!1, first(q1!1)) o rest(q1!1) = r!1 o ( #(first(q1!1)) o rest(q1!1))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    4))
                                                                                  (("2"
                                                                                    (expand*
                                                                                     add_last
                                                                                     insert?
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (expand
                                                                                       o)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skosimp)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (skosimp)
                                                                                            (("5"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2
                                                                     -4
                                                                     2
                                                                     3
                                                                     5
                                                                     7)
                                                                    (("2"
                                                                      (expand*
                                                                       delete
                                                                       finseq_appl)
                                                                      (("2"
                                                                        (rewrite
                                                                         empty_0)
                                                                        (("2"
                                                                          (rewrite
                                                                           empty_0)
                                                                          (("2"
                                                                            (decompose-equality)
                                                                            (("1"
                                                                              (expand
                                                                               empty_seq
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     o)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               empty_seq
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     o)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         -2)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             x!3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               empty_0[posnat])
                                                                              (("3"
                                                                                (inst
                                                                                 -1
                                                                                 x!2)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "r!1 = delete(x!2, length(x!2) - 1)")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -4
                                                                   -5
                                                                   3
                                                                   4
                                                                   5
                                                                   6)
                                                                  (("1"
                                                                    (expand o)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         -2)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (lemma
                                                                             seq_first_rest_1[posnat])
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               q1!1)
                                                                              (("1"
                                                                                (lemma
                                                                                 empty_0[posnat])
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   q1!1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       o)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               x!3)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   seq_first_rest_1[posnat])
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     q1!1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       empty_0[posnat])
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         q1!1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             o)
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               -1)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skosimp)
                                                                              (("4"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (skosimp)
                                                                              (("5"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (skosimp)
                                                                              (("6"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("7"
                                                                              (skosimp)
                                                                              (("7"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("8"
                                                                              (hide
                                                                               -)
                                                                              (("8"
                                                                                (flatten)
                                                                                (("8"
                                                                                  (rewrite
                                                                                   empty_0)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skosimp)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 -4
                                                                 2
                                                                 3
                                                                 5
                                                                 7)
                                                                (("2"
                                                                  (expand*
                                                                   delete
                                                                   finseq_appl)
                                                                  (("2"
                                                                    (rewrite
                                                                     empty_0)
                                                                    (("2"
                                                                      (rewrite
                                                                       empty_0)
                                                                      (("2"
                                                                        (expand
                                                                         empty_seq
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               o)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 -2)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   -2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         x!3)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (prop)
                                                        (("1"
                                                          (case
                                                           "last(x!2) = first(p1!1)")
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 -3 1 4 6))
                                                            (("2"
                                                              (expand*
                                                               last
                                                               first
                                                               finseq_appl)
                                                              (("2"
                                                                (expand o)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -2)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x!2`length - 1")
                                                                      (("1"
                                                                        (expand
                                                                         delete
                                                                         -3)
                                                                        (("1"
                                                                          (rewrite
                                                                           empty_0)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               empty_seq
                                                                               -3)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           x!2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (name
                                                           "pi"
                                                           "r!1 o #(first(q1!1))")
                                                          (("2"
                                                            (case
                                                             "delete(x!2, length(x!2) - 1) = r!1")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (case
                                                                 "first(q1!1) =  last(pi)")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     next_position_TCC5)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       x!1
                                                                       x!1
                                                                       pi)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (case
                                                                           "delete(pi, length(pi) - 1) = r!1")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("2"
                                                                              (expand*
                                                                               delete
                                                                               finseq_appl)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (decompose-equality
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       o)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         o)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           -1)
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             -2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               x!3)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 x!3)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2))
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (reveal
                                                                         -2)
                                                                        (("2"
                                                                          (lemma
                                                                           seq_first_rest_1[posnat])
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             q1!1)
                                                                            (("2"
                                                                              (lemma
                                                                               empty_0[posnat])
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 q1!1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     -5)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       pos_ax)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         o_assoc)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "r!1 o  #(first(q1!1))"
                                                                                           "rest(q1!1)"
                                                                                           x!1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1 1 3))
                                                                  (("2"
                                                                    (expand*
                                                                     first
                                                                     last
                                                                     finseq_appl)
                                                                    (("2"
                                                                      (expand
                                                                       o)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -1)
                                                                        (("2"
                                                                          (decompose-equality
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "pi`length - 1")
                                                                            (("1"
                                                                              (expand
                                                                               "#"
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   -1
                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "#")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   (-1 1))
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -3
                                                               -5
                                                               2
                                                               3
                                                               5
                                                               7)
                                                              (("2"
                                                                (expand
                                                                 delete)
                                                                (("2"
                                                                  (rewrite
                                                                   empty_0)
                                                                  (("2"
                                                                    (rewrite
                                                                     empty_0)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("2"
                                                                          (expand
                                                                           empty_seq
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   o)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -2)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     o)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           x!3)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       empty_0[posnat])
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         x!2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (expand
                                                                                     o)
                                                                                    (("3"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("3"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("3"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (hide
                                                                                   -
                                                                                   2)
                                                                                  (("4"
                                                                                    (lemma
                                                                                     empty_0[posnat])
                                                                                    (("4"
                                                                                      (inst
                                                                                       -1
                                                                                       x!2)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but (1 5))
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (rewrite empty_0)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but (-3 1 2 3))
                                                  (("3"
                                                    (expand*
                                                     delete
                                                     finseq_appl)
                                                    (("3"
                                                      (rewrite empty_0)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand first)
                                                          (("3"
                                                            (expand
                                                             finseq_appl)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 3))
                                            (("2"
                                              (lemma empty_0[posnat])
                                              (("2"
                                                (inst -1 p1!1)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite delete_is_position)
                  (("2" (flatten) (("2" (rewrite empty_0) nil nil)) nil)) nil)
                 ("3" (lemma empty_0[posnat])
                  (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil)) nil))
                nil)
               ("3" (lemma empty_0[posnat])
                (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (hide -3)
            (("3" (expand left_pos)
              (("3" (skosimp)
                (("3" (prop)
                  (("1" (replaces -1)
                    (("1" (replaces -2)
                      (("1" (expand o)
                        (("1" (decompose-equality -1)
                          (("1" (hide -2)
                            (("1" (lemma empty_0[posnat])
                              (("1" (inst -1 p1!1) (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -4)
                    (("2" (replaces -1)
                      (("2" (expand o)
                        (("2" (flatten)
                          (("2" (decompose-equality -2)
                            (("2" (inst -1 "length(r!1)")
                              (("1" (assert)
                                (("1" (expand first)
                                  (("1" (expand finseq_appl)
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (hide - 3)
                                (("2" (lemma empty_0[posnat])
                                  (("2" (inst -1 q1!1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (member_right_pos-1 nil 3506959387
   ("" (measure-induct+ "length(p)" ("s" "p"))
    (("" (skosimp)
      (("" (expand member)
        (("" (prop)
          (("1" (expand right_pos -1)
            (("1" (prop)
              (("1" (hide 2 -3)
                (("1" (expand only_empty_seq) (("1" (assert) nil nil)) nil))
                nil)
               ("2" (expand union)
                (("2" (prop)
                  (("1" (expand member)
                    (("1" (prop)
                      (("1" (hide -2 1 3)
                        (("1" (expand singleton) (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (inst -2 x!1 "delete(x!2, length(x!2) - 1)")
                        (("1" (inst -2 q!1)
                          (("1" (expand delete -2 1)
                            (("1" (rewrite empty_0)
                              (("1" (assert)
                                (("1" (prop)
                                  (("1" (hide -2)
                                    (("1" (expand left_pos)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst
                                             5
                                             r!1
                                             "p1!1 o #(last(x!2))"
                                             q1!1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but -1)
                                                      (("1" (grind) nil nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite o_assoc)
                                                      (("2"
                                                        (replace -2 1 rl)
                                                        (("2"
                                                          (hide - 2 3 5)
                                                          (("2"
                                                            (expand delete)
                                                            (("2"
                                                              (rewrite
                                                               empty_0)
                                                              (("2"
                                                                (expand
                                                                 finseq_appl)
                                                                (("2"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       empty_0[posnat])
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         x!2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     empty_0[posnat])
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       x!2)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 4))
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite empty_0)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             6
                                             r!1
                                             "p1!1 o #(last(x!2))"
                                             q1!1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (rewrite o_assoc)
                                                      (("1"
                                                        (replace -2 1 rl)
                                                        (("1"
                                                          (hide - 2 3 4 6)
                                                          (("1"
                                                            (expand delete)
                                                            (("1"
                                                              (rewrite
                                                               empty_0)
                                                              (("1"
                                                                (expand
                                                                 finseq_appl)
                                                                (("1"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       empty_0[posnat])
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         x!2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     empty_0[posnat])
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       x!2)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but -1)
                                                      (("2" (grind) nil nil))
                                                      nil)
                                                     ("3"
                                                      (rewrite first_compo)
                                                      (("3"
                                                        (hide-all-but (1 4))
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (rewrite empty_0)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 5))
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite empty_0)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 1)
                                    (("2" (expand left_pos)
                                      (("2"
                                        (inst
                                         3
                                         "delete(x!2, length(x!2) - 1)"
                                         "#(last(x!2))"
                                         empty_seq)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide-all-but -1)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (hide -1 3)
                                              (("2"
                                                (expand delete)
                                                (("2"
                                                  (rewrite empty_0)
                                                  (("2"
                                                    (decompose-equality)
                                                    (("1" (grind) nil nil)
                                                     ("2"
                                                      (decompose-equality)
                                                      (("1" (grind) nil nil)
                                                       ("2"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("2"
                                                          (inst -1 x!2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma empty_0[posnat])
                                                      (("3"
                                                        (inst -1 x!2)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 3)
                                          (("2"
                                            (flatten)
                                            (("2" (rewrite empty_0) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -1 3)
                                          (("3"
                                            (lemma empty_0[posnat])
                                            (("3"
                                              (inst -1 x!2)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite delete_is_position)
                          (("2" (hide-all-but (1 3))
                            (("2" (flatten) (("2" (rewrite empty_0) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but (1 2))
                          (("3" (lemma empty_0[posnat])
                            (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (expand* member IUnion)
                      (("2" (skosimp*)
                        (("2" (expand left_pos)
                          (("2"
                            (inst 3 "delete(x!2, length(x!2) - 1)"
                             "#(last(x!2))" "#(1 + i!1 + last(x!2)) o q1!1")
                            (("1" (flatten)
                              (("1" (hide 3)
                                (("1" (prop)
                                  (("1" (hide -1 3)
                                    (("1" (replaces -1)
                                      (("1"
                                        (expand delete)
                                        (("1"
                                          (rewrite empty_0)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (decompose-equality)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (lemma empty_0[posnat])
                                                  (("2"
                                                    (inst -1 x!2)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma empty_0[posnat])
                                                (("3"
                                                  (inst -1 x!2)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide - 3)
                                    (("2" (expand delete)
                                      (("2"
                                        (rewrite empty_0)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (decompose-equality)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (decompose-equality)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (lemma empty_0[posnat])
                                                (("2"
                                                  (inst -1 x!2)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma empty_0[posnat])
                                              (("3"
                                                (inst -1 x!2)
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide-all-but -1)
                                    (("3" (grind) nil nil)) nil)
                                   ("4" (hide-all-but -1)
                                    (("4" (grind) nil nil)) nil)
                                   ("5" (rewrite first_compo)
                                    (("1" (hide-all-but 1)
                                      (("1" (grind) nil nil)) nil)
                                     ("2" (hide-all-but -1)
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 2))
                              (("2" (lemma empty_0[posnat])
                                (("2" (inst -1 x!2) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "x!2 = empty_seq")
            (("1" (hide -3)
              (("1" (expand* left_pos right_pos only_empty_seq)
                (("1" (assert)
                  (("1" (skosimp)
                    (("1" (prop)
                      (("1" (replaces -3)
                        (("1" (lemma seq_empty[posnat])
                          (("1" (inst -1 r!1 p1!1)
                            (("1" (assert)
                              (("1" (lemma empty_0[posnat])
                                (("1" (inst -1 r!1) (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replaces -4)
                        (("2" (hide -1 -3)
                          (("2" (lemma seq_empty[posnat])
                            (("2" (inst -1 r!1 p1!1)
                              (("2" (assert)
                                (("2" (lemma empty_0[posnat])
                                  (("2" (inst -1 p1!1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "q!1 = delete(x!2, length(x!2) - 1)")
              (("1" (hide -2 -3)
                (("1" (expand right_pos)
                  (("1" (assert)
                    (("1" (expand* union member)
                      (("1" (flatten)
                        (("1" (hide 4)
                          (("1" (replace -1 3 rl)
                            (("1" (expand* right_pos only_empty_seq)
                              (("1" (prop)
                                (("1" (expand* union member)
                                  (("1" (flatten)
                                    (("1" (hide-all-but 2)
                                      (("1"
                                        (expand singleton)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 x!1 "delete(x!2, length(x!2) - 1)")
                (("1" (inst -2 q!1)
                  (("1" (expand delete -2 1)
                    (("1" (rewrite empty_0)
                      (("1" (assert)
                        (("1" (expand right_pos 3)
                          (("1" (expand* union member)
                            (("1" (flatten 3)
                              (("1" (assert)
                                (("1" (hide 4 5)
                                  (("1" (expand* singleton left_pos)
                                    (("1" (skosimp)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst
                                           5
                                           r!1
                                           "delete(p1!1, length(p1!1) - 1)"
                                           empty_seq)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand o)
                                                (("1"
                                                  (decompose-equality -3)
                                                  (("1"
                                                    (expand*
                                                     delete
                                                     finseq_appl)
                                                    (("1"
                                                      (expand empty_seq -3)
                                                      (("1"
                                                        (decompose-equality
                                                         -3)
                                                        (("1"
                                                          (lemma
                                                           empty_0[posnat])
                                                          (("1"
                                                            (inst -1 p1!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces -5)
                                                                (("1"
                                                                  (decompose-equality
                                                                   3)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -4)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         x!3)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand delete 1)
                                                (("2"
                                                  (rewrite empty_0)
                                                  (("2"
                                                    (rewrite empty_0)
                                                    (("2"
                                                      (expand o)
                                                      (("2"
                                                        (expand finseq_appl)
                                                        (("2"
                                                          (decompose-equality
                                                           -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   x!3)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide-all-but
                                                                 (1 2))
                                                                (("4"
                                                                  (lemma
                                                                   empty_0[posnat])
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     p1!1)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (hide-all-but
                                                                 (1 4))
                                                                (("5"
                                                                  (lemma
                                                                   empty_0[posnat])
                                                                  (("5"
                                                                    (inst
                                                                     -1
                                                                     x!2)
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 2))
                                            (("2"
                                              (lemma empty_0[posnat])
                                              (("2"
                                                (inst -1 p1!1)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst
                                           6
                                           r!1
                                           "delete(p1!1, length(p1!1) - 1)"
                                           q1!1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 6)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -1 -3 4)
                                                  (("1"
                                                    (expand*
                                                     delete
                                                     finseq_appl)
                                                    (("1"
                                                      (rewrite empty_0)
                                                      (("1"
                                                        (rewrite empty_0)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand o)
                                                            (("1"
                                                              (decompose-equality
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       x!3)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide-all-but
                                                                       (1 3))
                                                                      (("4"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           p1!1)
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (hide-all-but
                                                                       (1 4))
                                                                      (("5"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("5"
                                                                          (inst
                                                                           -1
                                                                           x!2)
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal 4)
                                                  (("2"
                                                    (expand IUnion)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "first(q1!1) - 1 - last(x!2)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "rest(q1!1)")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (case
                                                               "add_last(delete(x!2, length(x!2) - 1),
                                     first(q1!1)) o rest(q1!1)
             = r!1 o q1!1")
                                                              (("1"
                                                                (typepred q!1)
                                                                (("1"
                                                                  (lemma
                                                                   pos_subterm_ax)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "add_last(delete(x!2, length(x!2) - 1), first(q1!1))"
                                                                     "rest(q1!1)"
                                                                     x!1)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1 6))
                                                                      (("2"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           x!2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (case
                                                                   "r!1 = delete(x!2, length(x!2) - 1)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       seq_first_rest_1[posnat])
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         q1!1)
                                                                        (("1"
                                                                          (lemma
                                                                           empty_0[posnat])
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             q1!1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "add_last(r!1, first(q1!1)) o rest(q1!1) = r!1 o ( #(first(q1!1)) o rest(q1!1))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    4))
                                                                                  (("2"
                                                                                    (expand*
                                                                                     add_last
                                                                                     insert?
                                                                                     finseq_appl)
                                                                                    (("2"
                                                                                      (expand
                                                                                       o)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skosimp)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (skosimp)
                                                                                            (("5"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2
                                                                     -4
                                                                     2
                                                                     3
                                                                     5
                                                                     7)
                                                                    (("2"
                                                                      (expand*
                                                                       delete
                                                                       finseq_appl)
                                                                      (("2"
                                                                        (rewrite
                                                                         empty_0)
                                                                        (("2"
                                                                          (rewrite
                                                                           empty_0)
                                                                          (("2"
                                                                            (decompose-equality)
                                                                            (("1"
                                                                              (expand
                                                                               empty_seq
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     o)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               empty_seq
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     o)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         -2)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             x!3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               empty_0[posnat])
                                                                              (("3"
                                                                                (inst
                                                                                 -1
                                                                                 x!2)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "r!1 = delete(x!2, length(x!2) - 1)")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -4
                                                                   -5
                                                                   3
                                                                   4
                                                                   5
                                                                   6)
                                                                  (("1"
                                                                    (expand o)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         -2)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (lemma
                                                                             seq_first_rest_1[posnat])
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               q1!1)
                                                                              (("1"
                                                                                (lemma
                                                                                 empty_0[posnat])
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   q1!1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       o)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               x!3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   seq_first_rest_1[posnat])
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     q1!1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       empty_0[posnat])
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         q1!1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             o)
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               -1)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skosimp)
                                                                              (("4"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (skosimp)
                                                                              (("5"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (skosimp)
                                                                              (("6"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("7"
                                                                              (skosimp)
                                                                              (("7"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("8"
                                                                              (hide
                                                                               -)
                                                                              (("8"
                                                                                (flatten)
                                                                                (("8"
                                                                                  (rewrite
                                                                                   empty_0)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skosimp)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 -4
                                                                 2
                                                                 3
                                                                 5
                                                                 7)
                                                                (("2"
                                                                  (expand*
                                                                   delete
                                                                   finseq_appl)
                                                                  (("2"
                                                                    (rewrite
                                                                     empty_0)
                                                                    (("2"
                                                                      (rewrite
                                                                       empty_0)
                                                                      (("2"
                                                                        (expand
                                                                         empty_seq
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               o)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 -2)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   -2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         x!3)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (prop)
                                                        (("1"
                                                          (case
                                                           "last(x!2) = first(p1!1)")
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 -3 1 4 6))
                                                            (("2"
                                                              (expand*
                                                               last
                                                               first
                                                               finseq_appl)
                                                              (("2"
                                                                (expand o)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -2)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x!2`length - 1")
                                                                      (("1"
                                                                        (expand
                                                                         delete
                                                                         -3)
                                                                        (("1"
                                                                          (rewrite
                                                                           empty_0)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               empty_seq
                                                                               -3)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           x!2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (name
                                                           "pi"
                                                           "r!1 o #(first(q1!1))")
                                                          (("2"
                                                            (case
                                                             "delete(x!2, length(x!2) - 1) = r!1")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (case
                                                                 "first(q1!1) =  last(pi)")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     next_position_TCC5)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       x!1
                                                                       x!1
                                                                       pi)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (case
                                                                           "delete(pi, length(pi) - 1) = r!1")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("2"
                                                                              (expand*
                                                                               delete
                                                                               finseq_appl)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (decompose-equality
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       o)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1
                                                                                               rl)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         o)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           -1)
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             -2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               x!3)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 x!3)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2))
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (reveal
                                                                         -2)
                                                                        (("2"
                                                                          (lemma
                                                                           seq_first_rest_1[posnat])
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             q1!1)
                                                                            (("2"
                                                                              (lemma
                                                                               empty_0[posnat])
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 q1!1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     -5)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       pos_ax)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         o_assoc)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "r!1 o  #(first(q1!1))"
                                                                                           "rest(q1!1)"
                                                                                           x!1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1 1 3))
                                                                  (("2"
                                                                    (expand*
                                                                     first
                                                                     last
                                                                     finseq_appl)
                                                                    (("2"
                                                                      (expand
                                                                       o)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -1)
                                                                        (("2"
                                                                          (decompose-equality
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "pi`length - 1")
                                                                            (("1"
                                                                              (expand
                                                                               "#"
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   -1
                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "#")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   (-1 1))
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -3
                                                               -5
                                                               2
                                                               3
                                                               5
                                                               7)
                                                              (("2"
                                                                (expand
                                                                 delete)
                                                                (("2"
                                                                  (rewrite
                                                                   empty_0)
                                                                  (("2"
                                                                    (rewrite
                                                                     empty_0)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("2"
                                                                          (expand
                                                                           empty_seq
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   o)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -2)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     o)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           x!3)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       empty_0[posnat])
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         x!2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (expand
                                                                                     o)
                                                                                    (("3"
                                                                                      (decompose-equality
                                                                                       -2)
                                                                                      (("3"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("3"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (hide
                                                                                   -
                                                                                   2)
                                                                                  (("4"
                                                                                    (lemma
                                                                                     empty_0[posnat])
                                                                                    (("4"
                                                                                      (inst
                                                                                       -1
                                                                                       x!2)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but (1 5))
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (rewrite empty_0)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but (-3 1 2 3))
                                                  (("3"
                                                    (expand*
                                                     delete
                                                     finseq_appl)
                                                    (("3"
                                                      (rewrite empty_0)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand first)
                                                          (("3"
                                                            (expand
                                                             finseq_appl)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 3))
                                            (("2"
                                              (lemma empty_0[posnat])
                                              (("2"
                                                (inst -1 p1!1)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite delete_is_position)
                  (("2" (flatten) (("2" (rewrite empty_0) nil nil)) nil)) nil)
                 ("3" (lemma empty_0[posnat])
                  (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil)) nil))
                nil)
               ("3" (lemma empty_0[posnat])
                (("3" (inst -1 x!2) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (hide -3)
            (("3" (expand left_pos)
              (("3" (skosimp)
                (("3" (prop)
                  (("1" (replaces -1)
                    (("1" (replaces -2)
                      (("1" (expand o)
                        (("1" (decompose-equality -1)
                          (("1" (hide -2)
                            (("1" (lemma empty_0[posnat])
                              (("1" (inst -1 p1!1) (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -4)
                    (("2" (replaces -1)
                      (("2" (expand o)
                        (("2" (flatten)
                          (("2" (decompose-equality -2)
                            (("2" (inst -1 "length(r!1)")
                              (("1" (assert)
                                (("1" (expand first)
                                  (("1" (expand finseq_appl)
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (hide - 3)
                                (("2" (lemma empty_0[posnat])
                                  (("2" (inst -1 q1!1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((only_empty_seq const-decl "positions" positions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (delete_is_position formula-decl nil positions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (delete const-decl "finseq" seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (x!2 skolem-const-decl "{p: position | positionsOF(x!1)(p)}"
     robinsonunificationEF nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (first const-decl "T" seq_extras structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (below type-eq-decl nil naturalnumbers nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[position[variable, symbol, arity]]"
     robinsonunificationEF nil)
    (q1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (rest const-decl "finseq" seq_extras structures)
    (q!1 skolem-const-decl "{q: position | positionsOF(x!1)(q)}"
     robinsonunificationEF nil)
    (add_last const-decl "finseq" seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (insert? const-decl "finseq" seq_extras structures)
    (pi skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (x!3 skolem-const-decl "below[pi`length - 1]" robinsonunificationEF nil)
    (pos_ax formula-decl nil positions nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (p1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (r!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (FALSE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (seq_empty formula-decl nil seq_extras structures)
    (r!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (q1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (left_pos const-decl "bool" positions nil)
    (/= const-decl "boolean" notequal nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (next_pos_member_right_pos 0
  (next_pos_member_right_pos-1 nil 3507041072
   ("" (lemma empty_0[posnat])
    ((""
      (measure-induct+
       "lex2(length(p), arity(f(subtermOF(s,delete(p,length(p) - 1)))) - last(p))"
       ("s" "t" "p"))
      (("1" (case "x!3 = empty_seq")
        (("1" (hide -2 -3)
          (("1" (replaces -1)
            (("1"
              (expand* member right_pos next_position emptyset only_empty_seq)
              (("1" (prop)
                (("1" (expand positionsOF)
                  (("1" (lift-if)
                    (("1" (expand only_empty_seq)
                      (("1" (prop)
                        (("1" (expand union)
                          (("1" (flatten)
                            (("1" (hide 3)
                              (("1" (expand member) (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma member_right_pos)
          (("2" (inst -1 x!1 x!3 "next_position(x!1, x!2, x!3)")
            (("1" (assert)
              (("1"
                (name-replace "q!1" "next_position(x!1, x!2, x!3)" :hide? nil)
                (("1" (hide 3)
                  (("1" (expand next_position -1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide -2 1)
                          (("1" (expand left_pos)
                            (("1"
                              (inst 1 "delete(x!3, length(x!3) - 1)"
                               "#(last(x!3))" empty_seq)
                              (("1" (assert)
                                (("1" (prop)
                                  (("1" (hide -2 -3 1)
                                    (("1" (expand empty_seq)
                                      (("1"
                                        (expand "#")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -1)
                                    (("2" (expand* delete finseq_appl)
                                      (("2"
                                        (rewrite empty_0)
                                        (("2"
                                          (decompose-equality)
                                          (("1"
                                            (expand o)
                                            (("1"
                                              (expand "#")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (decompose-equality)
                                            (("1"
                                              (expand o)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (inst -1 x!3)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst -1 x!3)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -)
                                (("2" (flatten)
                                  (("2" (rewrite empty_0) nil nil)) nil))
                                nil)
                               ("3" (hide -1)
                                (("3" (inst -1 x!3) (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3 -4 1)
                          (("2" (expand left_pos)
                            (("2"
                              (inst 1 "delete(x!3, length(x!3) - 1)"
                               "#(last(x!3))" "#(1 + last(x!3))")
                              (("1" (flatten)
                                (("1" (hide 1)
                                  (("1" (prop)
                                    (("1" (replace -1 1 rl)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand*
                                           add_last
                                           insert?
                                           delete
                                           finseq_appl)
                                          (("1"
                                            (inst -1 x!3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality)
                                                  (("1" (grind) nil nil)
                                                   ("2"
                                                    (decompose-equality)
                                                    (("1" (grind) nil nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("3" (grind) nil nil)
                                                   ("4" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1)
                                      (("2"
                                        (expand delete)
                                        (("2"
                                          (inst -1 x!3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (decompose-equality)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (decompose-equality)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (hide-all-but -1)
                                      (("3" (grind) nil nil)) nil)
                                     ("4" (hide-all-but -1)
                                      (("4" (grind) nil nil)) nil)
                                     ("5" (hide-all-but 1)
                                      (("5"
                                        (expand* first finseq_appl "#")
                                        (("5" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -1)
                                (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3"
                          (inst -5 x!1 x!2
                           "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                          (("1" (lemma next_position_TCC17)
                            (("1" (inst -1 x!1 x!2 x!3)
                              (("1" (assert)
                                (("1" (inst -1 "delete(x!3, length(x!3) - 1)")
                                  (("1" (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "NOT add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) =
                               empty_seq")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1 -2 -4 -5 1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (name-replace
                                                   "pi"
                                                   "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
                                                   :hide?
                                                   nil)
                                                  (("1"
                                                    (lemma member_right_pos)
                                                    (("1"
                                                      (inst -1 x!1 pi q!1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           next_pos_is_a_diff_pos)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             x!1
                                                             x!2
                                                             pi)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -4
                                                                 -5)
                                                                (("1"
                                                                  (expand
                                                                   left_pos)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         2
                                                                         r!1
                                                                         "add_last(delete(p1!1, length(p1!1) - 1), last(p1!1) - 1)"
                                                                         empty_seq)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               -1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replaces
                                                                               -2)
                                                                              (("2"
                                                                                (expand*
                                                                                 add_last
                                                                                 insert?
                                                                                 delete
                                                                                 finseq_appl
                                                                                 o)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -4
                                                                                     p1!1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       x!3)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             -3)
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       x!4)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         delete)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       x!4)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         delete)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       x!4)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           x!4)
                                                                                                          (("1"
                                                                                                            (expand*
                                                                                                             last
                                                                                                             finseq_appl)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         delete)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (skosimp)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skosimp)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               delete
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "last(p1!1) = 1 + last(x!3)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (replaces
                                                                               -2)
                                                                              (("2"
                                                                                (expand*
                                                                                 add_last
                                                                                 insert?
                                                                                 delete
                                                                                 last
                                                                                 finseq_appl
                                                                                 o)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     empty_0)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         -3)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!3`length - 1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (ground)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -5
                                                                                                     p1!1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             delete
                                                                                             1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -3
                                                                                               x!3)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           delete
                                                                                           -1)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -5
                                                                                             x!3)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (inst
                                                                                           -6
                                                                                           p1!1)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (inst
                                                                                           -5
                                                                                           p1!1)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (inst
                                                                             -4
                                                                             p1!1)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (inst
                                                                           -4
                                                                           p1!1)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (inst
                                                                           -4
                                                                           p1!1)
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         3
                                                                         r!1
                                                                         "add_last(delete(p1!1, length(p1!1) - 1), last(p1!1) - 1)"
                                                                         q1!1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     2)
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -2
                                                                                       x!3)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         p1!1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand*
                                                                                             add_last
                                                                                             insert?
                                                                                             delete
                                                                                             last
                                                                                             finseq_appl
                                                                                             o)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           x!4)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             delete
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           x!4)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             delete
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           x!4)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             delete
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   delete
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   -1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -4)
                                                                                  (("3"
                                                                                    (expand*
                                                                                     add_last
                                                                                     insert?
                                                                                     delete
                                                                                     first
                                                                                     finseq_appl)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -2
                                                                                       p1!1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (lift-if)
                                                                                            (("3"
                                                                                              (ground)
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "last(p1!1) - 1 = last(x!3)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               -3
                                                                               2
                                                                               3)
                                                                              (("2"
                                                                                (inst-cp
                                                                                 -2
                                                                                 x!3)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   p1!1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand*
                                                                                       add_last
                                                                                       insert?
                                                                                       delete
                                                                                       last
                                                                                       finseq_appl
                                                                                       o)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           -2)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!3`length - 1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               delete)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             delete
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (inst
                                                                           -5
                                                                           p1!1)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         next_position_is_position)
                                                        (("2"
                                                          (inst -1 x!1 x!2 pi)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (reveal -3)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but -1)
                                            (("2" (grind) nil nil))
                                            nil)
                                           ("3"
                                            (hide-all-but (-7 1 3))
                                            (("3"
                                              (inst -1 x!3)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-6 1 3))
                                        (("2"
                                          (inst -1 x!3)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (-6 1 3))
                                    (("2" (inst -1 x!3)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (prop)
                              (("1" (lemma next_position_TCC15)
                                (("1" (inst -1 x!1 x!2 x!3)
                                  (("1" (assert)
                                    (("1"
                                      (inst -1 "delete(x!3, length(x!3) - 1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -1
                                           "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but (-5 1 4))
                                            (("2"
                                              (inst -1 x!3)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-5 1 4))
                                        (("2"
                                          (inst -1 x!3)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but -1) (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but (-5 1 3))
                            (("3" (inst -1 x!3) (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (inst -3 x!1 x!2 "delete(x!3, length(x!3) - 1)")
                          (("1" (lemma next_position_TCC19)
                            (("1" (inst -1 x!1 x!2 x!3)
                              (("1" (assert)
                                (("1" (inst -1 "delete(x!3, length(x!3) - 1)")
                                  (("1" (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1 -3 1 2)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (lemma member_right_pos)
                                              (("1"
                                                (inst
                                                 -1
                                                 x!1
                                                 "delete(x!3, length(x!3) - 1)"
                                                 q!1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     next_pos_is_a_diff_pos)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       x!1
                                                       x!2
                                                       "delete(x!3, length(x!3) - 1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1 -3 -4)
                                                          (("1"
                                                            (name-replace
                                                             "pi"
                                                             "delete(x!3, length(x!3) - 1)"
                                                             :hide?
                                                             nil)
                                                            (("1"
                                                              (expand
                                                               left_pos)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     r!1
                                                                     "add_last(p1!1, last(x!3))"
                                                                     empty_seq)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           -1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -2)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (inst-cp
                                                                               -2
                                                                               p1!1)
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 x!3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand*
                                                                                     delete
                                                                                     add_last
                                                                                     insert?
                                                                                     last
                                                                                     finseq_appl
                                                                                     o)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         -2)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               x!4)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -4
                                                                       x!3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     3
                                                                     r!1
                                                                     "add_last(p1!1, last(x!3))"
                                                                     q1!1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           3)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 2)
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -2
                                                                                   x!3)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     p1!1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand*
                                                                                         delete
                                                                                         add_last
                                                                                         insert?
                                                                                         last
                                                                                         o
                                                                                         finseq_appl)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             -2)
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "x!4 = x!3`length - 1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     x!4)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               -1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (rewrite
                                                                               first_add_last)
                                                                              (("3"
                                                                                (inst
                                                                                 -5
                                                                                 p1!1)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -5
                                                                       x!3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst -2 x!3)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst -4 x!3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   next_position_is_position)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     x!1
                                                     x!2
                                                     "delete(x!3, length(x!3) - 1)")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (inst -3 x!3)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (rewrite delete_is_position)
                                                  (("3"
                                                    (inst -3 x!3)
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (inst -3 x!3)
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -4 x!3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (inst -4 x!3) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (rewrite delete_is_position)
                              (("1" (rewrite delete_is_position)
                                (("1" (inst -3 x!3) (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (inst -3 x!3) (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (inst -3 x!3) (("3" (assert) nil nil)) nil))
                          nil)
                         ("5" (hide -1 -3 -4 1)
                          (("5" (expand left_pos)
                            (("5" (inst 1 empty_seq x!3 empty_seq)
                              (("5" (assert)
                                (("5" (rewrite empty_o_seq) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite next_position_is_position) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma next_position_TCC5)
          (("2" (inst -1 x!1 x!2 x!3) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (hide 1) (("3" (inst -2 x!3) (("3" (assert) nil nil)) nil)) nil)
       ("4" (hide 2)
        (("4" (lemma next_position_TCC3)
          (("4" (inst -1 x!1 x!2 x!3) (("4" (assert) nil nil)) nil)) nil))
        nil)
       ("5" (hide 2)
        (("5" (rewrite delete_is_position)
          (("5" (inst -1 x!3) (("5" (assert) nil nil)) nil)) nil))
        nil)
       ("6" (hide 2) (("6" (inst -1 x!3) (("6" (assert) nil nil)) nil)) nil)
       ("7" (hide 2)
        (("7" (lemma next_position_TCC5)
          (("7" (inst -1 y!1 y!2 y!3) (("7" (assert) nil nil)) nil)) nil))
        nil)
       ("8" (hide 1) (("8" (inst -2 y!3) (("8" (assert) nil nil)) nil)) nil)
       ("9" (hide 2)
        (("9" (lemma next_position_TCC3)
          (("9" (inst -1 y!1 y!2 y!3) (("9" (assert) nil nil)) nil)) nil))
        nil)
       ("10" (hide 2)
        (("10" (rewrite delete_is_position)
          (("10" (inst -1 y!3) (("10" (assert) nil nil)) nil)) nil))
        nil)
       ("11" (hide 2) (("11" (inst -1 y!3) (("11" (assert) nil nil)) nil))
        nil)
       ("12" (hide 2)
        (("12" (lemma next_position_TCC5)
          (("12" (inst -1 "x!1`1" "x!1`2" "x!1`3") (("12" (assert) nil nil))
            nil))
          nil))
        nil)
       ("13" (hide 1) (("13" (inst -2 "x!1`3") (("13" (assert) nil nil)) nil))
        nil)
       ("14" (hide 2)
        (("14" (lemma next_position_TCC3)
          (("14" (inst -1 "x!1`1" "x!1`2" "x!1`3") (("14" (assert) nil nil))
            nil))
          nil))
        nil)
       ("15" (hide 2)
        (("15" (rewrite delete_is_position)
          (("15" (inst -1 "x!1`3") (("15" (assert) nil nil)) nil)) nil))
        nil)
       ("16" (hide 2) (("16" (inst -1 "x!1`3") (("16" (assert) nil nil)) nil))
        nil)
       ("17" (hide 2)
        (("17" (lemma next_position_TCC5)
          (("17" (inst -1 "y!1`1" "y!1`2" "y!1`3") (("17" (assert) nil nil))
            nil))
          nil))
        nil)
       ("18" (hide 1) (("18" (inst -2 "y!1`3") (("18" (assert) nil nil)) nil))
        nil)
       ("19" (hide 2)
        (("19" (lemma next_position_TCC3)
          (("19" (inst -1 "y!1`1" "y!1`2" "y!1`3") (("19" (assert) nil nil))
            nil))
          nil))
        nil)
       ("20" (hide 2)
        (("20" (rewrite delete_is_position)
          (("20" (inst -1 "y!1`3") (("20" (assert) nil nil)) nil)) nil))
        nil)
       ("21" (hide 2) (("21" (inst -1 "y!1`3") (("21" (assert) nil nil)) nil))
        nil)
       ("22" (hide 2)
        (("22" (lemma next_position_TCC5)
          (("22" (inst -1 s!1 t!1 p!1) (("22" (assert) nil nil)) nil)) nil))
        nil)
       ("23" (hide 1) (("23" (inst -2 p!1) (("23" (assert) nil nil)) nil))
        nil)
       ("24" (hide 2)
        (("24" (lemma next_position_TCC3)
          (("24" (inst -1 s!1 t!1 p!1) (("24" (assert) nil nil)) nil)) nil))
        nil)
       ("25" (hide 2)
        (("25" (rewrite delete_is_position)
          (("25" (inst -1 p!1) (("25" (assert) nil nil)) nil)) nil))
        nil)
       ("26" (hide 2) (("26" (inst -1 p!1) (("26" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (below type-eq-decl nil nat_types nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (/= const-decl "boolean" notequal nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil) (< const-decl "bool" reals nil)
    (delete const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member_right_pos formula-decl nil robinsonunificationEF nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (delete_is_position formula-decl nil positions nil)
    (p1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (r!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (x!4 skolem-const-decl "below[x!3`length]" robinsonunificationEF nil)
    (first_add_last formula-decl nil seq_extras structures)
    (x!4 skolem-const-decl "below[x!3`length]" robinsonunificationEF nil)
    (next_position_TCC19 termination-tcc nil robinsonunificationEF nil)
    (pi skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (q!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (next_pos_is_a_diff_pos formula-decl nil robinsonunificationEF nil)
    (r!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (x!4 skolem-const-decl "below[x!3`length]" robinsonunificationEF nil)
    (p1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (x!4 skolem-const-decl "below[x!3`length]" robinsonunificationEF nil)
    (next_position_is_position formula-decl nil robinsonunificationEF nil)
    (next_position_TCC17 termination-tcc nil robinsonunificationEF nil)
    (next_position_TCC15 subtype-tcc nil robinsonunificationEF nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (first const-decl "T" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (add_last const-decl "finseq" seq_extras structures)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (left_pos const-decl "bool" positions nil)
    (x!3 skolem-const-decl "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}"
     robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (emptyset const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (union const-decl "set" sets nil) (TRUE const-decl "bool" booleans nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (next_position_TCC3 subtype-tcc nil robinsonunificationEF nil)
    (empty_0 formula-decl nil seq_extras structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (equal_right_pos 0
  (equal_right_pos-1 nil 3507387106
   ("" (skosimp)
    ((""
      (case "subset?(right_pos(s!1, p!1), right_pos(s!1, q!1)) AND
             subset?(right_pos(s!1, q!1), right_pos(s!1, p!1))")
      (("1" (hide -2)
        (("1" (flatten)
          (("1" (expand subset?)
            (("1" (inst -1 p!1)
              (("1" (inst -2 q!1)
                (("1" (case "p!1 = empty_seq")
                  (("1" (hide -2)
                    (("1" (expand right_pos -2 2)
                      (("1" (assert)
                        (("1" (case "member(q!1, right_pos(s!1, q!1))")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (expand* member only_empty_seq)
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (expand* right_pos member)
                              (("2" (expand* union member)
                                (("2" (flatten)
                                  (("2" (hide 2 3)
                                    (("2" (expand singleton)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "q!1 = empty_seq")
                    (("1" (hide -3)
                      (("1" (expand right_pos -2 2)
                        (("1" (assert)
                          (("1" (case "member(p!1, right_pos(s!1, p!1))")
                            (("1" (assert)
                              (("1" (hide -1)
                                (("1" (expand* member only_empty_seq) nil
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (expand* right_pos union member)
                                (("2" (flatten)
                                  (("2" (hide 2 3)
                                    (("2" (expand singleton)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "member(p!1, right_pos(s!1, p!1)) AND member(q!1, right_pos(s!1, q!1))")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (hide -1 -2)
                            (("1" (lemma member_right_pos)
                              (("1" (inst-cp -1 s!1 p!1 q!1)
                                (("1" (inst -1 s!1 q!1 p!1)
                                  (("1" (assert)
                                    (("1" (hide -3 -4)
                                      (("1"
                                        (expand left_pos)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (replace -1 -4)
                                              (("1"
                                                (replace -4 -2)
                                                (("1"
                                                  (replace -3 -2)
                                                  (("1"
                                                    (expand o -2)
                                                    (("1"
                                                      (decompose-equality -2)
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -4
                                                         -5
                                                         3
                                                         4
                                                         5)
                                                        (("1"
                                                          (lemma
                                                           empty_0[posnat])
                                                          (("1"
                                                            (inst-cp -1 p1!2)
                                                            (("1"
                                                              (inst -1 p1!1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -5 -1)
                                              (("2"
                                                (replace -4 -2)
                                                (("2"
                                                  (replace -2 -1)
                                                  (("2"
                                                    (case
                                                     "p1!2 o p1!1 = q1!2")
                                                    (("1"
                                                      (replace -1 -4 rl)
                                                      (("1"
                                                        (rewrite first_compo)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but (1 3))
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (rewrite
                                                               empty_0)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 -3 -4 -5 5 6 7)
                                                      (("2"
                                                        (expand o)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (decompose-equality
                                                             -2)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "x!1 + r!2`length")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -1
                                                                       "x!1 + r!2`length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (replace -4 -1)
                                              (("3"
                                                (replace -3 -2)
                                                (("3"
                                                  (replace -1 -2 rl)
                                                  (("3"
                                                    (case
                                                     "q1!1 = p1!1 o p1!2")
                                                    (("1"
                                                      (replace -1 -6)
                                                      (("1"
                                                        (rewrite first_compo)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but (1 4))
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (rewrite
                                                               empty_0)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 -3 -4 -5 5 6 7)
                                                      (("2"
                                                        (expand o)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (decompose-equality
                                                             -2)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "x!1 + r!1`length")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -1
                                                                       "x!1 + r!1`length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (replace -5 -1)
                                              (("4"
                                                (replace -4 -2)
                                                (("4"
                                                  (hide -4 -5)
                                                  (("4"
                                                    (expand o)
                                                    (("4"
                                                      (flatten)
                                                      (("4"
                                                        (decompose-equality
                                                         -2)
                                                        (("4"
                                                          (decompose-equality
                                                           -4)
                                                          (("4"
                                                            (hide -3 -4)
                                                            (("4"
                                                              (case
                                                               "r!1`length = r!2`length")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "r!1`length")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "r!1`length")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand*
                                                                           first
                                                                           finseq_appl)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1 5))
                                                                    (("2"
                                                                      (lemma
                                                                       empty_0[posnat])
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         p1!1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1 4))
                                                                  (("2"
                                                                    (lemma
                                                                     empty_0[posnat])
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       q1!1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "r!1`length < r!2`length")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "r!1`length")
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "r!1`length")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -3
                                                                         rl)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-3
                                                                            -5))
                                                                          (("1"
                                                                            (expand*
                                                                             first
                                                                             finseq_appl)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1 6))
                                                                      (("2"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           p1!1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1 5))
                                                                    (("2"
                                                                      (lemma
                                                                       empty_0[posnat])
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         q1!1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -1
                                                                   "r!2`length")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "r!2`length")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-2
                                                                            -3))
                                                                          (("1"
                                                                            (expand*
                                                                             first
                                                                             finseq_appl)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        2
                                                                        3
                                                                        7))
                                                                      (("2"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           p1!1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      2
                                                                      3
                                                                      6))
                                                                    (("2"
                                                                      (lemma
                                                                       empty_0[posnat])
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         q1!1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide - 4)
                        (("2" (prop)
                          (("1" (expand* right_pos union member)
                            (("1" (assert)
                              (("1" (flatten)
                                (("1" (hide-all-but 1)
                                  (("1" (expand singleton)
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand* right_pos union member)
                            (("2" (assert)
                              (("2" (flatten)
                                (("2" (hide-all-but 1)
                                  (("2" (expand singleton)
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (prop)
        (("1" (expand subset?)
          (("1" (skosimp)
            (("1" (decompose-equality -2)
              (("1" (expand member)
                (("1" (inst -1 x!1) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand* subset? member)
          (("2" (decompose-equality -1)
            (("2" (skosimp) (("2" (inst -1 x!1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positionsOF def-decl "positions" positions nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil) (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil) (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (member const-decl "bool" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (member_right_pos formula-decl nil robinsonunificationEF nil)
    (TRUE const-decl "bool" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (first const-decl "T" seq_extras structures)
    (r!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (r!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (q1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (q1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (first_compo formula-decl nil seq_extras structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (empty_0 formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (left_pos const-decl "bool" positions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[position[variable, symbol, arity]]"
     robinsonunificationEF nil))
   shostak))
 (subset_right_pos 0
  (subset_right_pos-1 nil 3503741089
   ("" (skosimp)
    (("" (expand* strict_subset? subset?)
      (("" (prop)
        (("1" (skosimp)
          (("1" (lemma member_right_pos)
            (("1" (inst-cp -1 s!1 q!1 x!1)
              (("1" (inst-cp -1 s!1 p!1 q!1)
                (("1" (inst -1 s!1 p!1 x!1)
                  (("1" (assert)
                    (("1" (hide -3 -4 2)
                      (("1" (expand left_pos -1)
                        (("1" (skosimp)
                          (("1" (prop)
                            (("1" (expand left_pos -3)
                              (("1" (skosimp)
                                (("1" (prop)
                                  (("1" (replaces -3)
                                    (("1" (replaces -2)
                                      (("1"
                                        (expand left_pos)
                                        (("1"
                                          (inst 3 r!2 "p1!2 o p1!1" empty_seq)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lemma seq_empty[posnat])
                                                (("1"
                                                  (inst -1 p1!2 p1!1)
                                                  (("1"
                                                    (lemma empty_0[posnat])
                                                    (("1"
                                                      (inst -1 p1!1)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 4)
                                                (("2"
                                                  (expand o)
                                                  (("2"
                                                    (decompose-equality -1)
                                                    (("2"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (decompose-equality
                                                         -2)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (inst -1 x!2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (grind) nil nil)
                                                       ("3" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (replaces -4)
                                    (("2" (replaces -2)
                                      (("2"
                                        (expand left_pos)
                                        (("2"
                                          (inst 4 r!2 "p1!2 o p1!1" q1!2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide 4)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (hide -1 -2 2 5)
                                                    (("1"
                                                      (expand o)
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (decompose-equality
                                                           -2)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (inst -1 x!2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma seq_empty[posnat])
                                                    (("2"
                                                      (inst -1 p1!2 p1!1)
                                                      (("2"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("2"
                                                          (inst -1 p1!1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite first_compo)
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (rewrite empty_0)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand left_pos -4)
                              (("2" (skosimp)
                                (("2" (prop)
                                  (("1" (case "r!1 = r!2")
                                    (("1" (replaces -1)
                                      (("1"
                                        (expand left_pos)
                                        (("1"
                                          (inst 4 r!2 p1!1 empty_seq)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "<=(r!1, r!2) OR <=(r!2, r!1)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand <=)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand left_pos)
                                                (("1"
                                                  (inst 5 r!1 p1!1 p1!3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but (-1 1))
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (rewrite
                                                             seq_o_empty)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "p1!3 o p1!2 = q1!1")
                                                        (("1"
                                                          (replace -1 -6 rl)
                                                          (("1"
                                                            (rewrite
                                                             first_compo)
                                                            (("1"
                                                              (hide-all-but
                                                               (1 3))
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (rewrite
                                                                   empty_0)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       seq_o_empty)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 -3 1 4 5))
                                                          (("2"
                                                            (replaces -2)
                                                            (("2"
                                                              (expand o)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x!2 + r!1`length")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand <=)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand left_pos)
                                                (("2"
                                                  (inst
                                                   5
                                                   r!2
                                                   "p1!3 o p1!1"
                                                   empty_seq)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but (-1 4))
                                                        (("1"
                                                          (lemma
                                                           seq_empty[posnat])
                                                          (("1"
                                                            (inst
                                                             -1
                                                             p1!3
                                                             p1!1)
                                                            (("1"
                                                              (lemma
                                                               empty_0[posnat])
                                                              (("1"
                                                                (inst -1 p1!1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but (-4 1))
                                                        (("2"
                                                          (expand o)
                                                          (("2"
                                                            (decompose-equality
                                                             -1)
                                                            (("2"
                                                              (decompose-equality
                                                               -2)
                                                              (("2"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     x!2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (-2 -3 1 2 3 4 5))
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (case
                                               "length(r!2) > length(r!1)")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand <=)
                                                  (("1"
                                                    (name
                                                     "pi"
                                                     "(# length := length(r!2) - length(r!1),
                                                                                             seq := (LAMBDA (j: below[length(r!2) - length(r!1)]): q1!1`seq(j)) #)")
                                                    (("1"
                                                      (inst 1 pi)
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (decompose-equality
                                                           -2)
                                                          (("1"
                                                            (expand o 1)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       o
                                                                       -5)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -6)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             x!2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       x!2)
                                                                      (("2"
                                                                        (expand
                                                                         o
                                                                         -5)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (decompose-equality
                                                                             -6)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               x!2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "x!2 - r!1`length")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       -1
                                                                       rl)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -3
                                                                       1
                                                                       rl)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 -3 -6 1))
                                                            (("2"
                                                              (expand o)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (decompose-equality)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 -2 -5 1))
                                                          (("2"
                                                            (expand o)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide -4)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (typepred j!1)
                                                        (("2"
                                                          (hide -2 2 3 4 5)
                                                          (("2"
                                                            (expand o)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide -3)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "length(r!2) = length(r!1)")
                                                (("1"
                                                  (decompose-equality 4)
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (expand o)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (decompose-equality
                                                           -3)
                                                          (("1"
                                                            (inst -1 x!2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand <=)
                                                    (("2"
                                                      (name
                                                       "pi"
                                                       "(# length := length(r!1) - length(r!2),
                                                                                                                         seq := (LAMBDA (j: below[length(r!1) - length(r!2)]): p1!2`seq(j)) #)")
                                                      (("1"
                                                        (inst 3 pi)
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (decompose-equality
                                                             -2)
                                                            (("1"
                                                              (expand o 3)
                                                              (("1"
                                                                (decompose-equality
                                                                 3)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         o
                                                                         -4)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -5)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               x!2)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         x!2)
                                                                        (("2"
                                                                          (expand
                                                                           o
                                                                           -4)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               -5)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 x!2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "x!2 - r!2`length")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (replace
                                                                         -3
                                                                         -1
                                                                         rl)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -3
                                                                         1
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 -3 -5 1))
                                                              (("2"
                                                                (expand o)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide -4)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 -2 -4 1))
                                                            (("2"
                                                              (expand o)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide -4)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (typepred j!1)
                                                          (("2"
                                                            (hide 2 3 4 5 6)
                                                            (("2"
                                                              (expand o)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide -3)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "r!1 = r!2")
                                    (("1" (replaces -1)
                                      (("1"
                                        (expand left_pos)
                                        (("1"
                                          (inst 5 r!2 p1!1 q1!2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (replace -4 -2)
                                                (("1"
                                                  (hide-all-but
                                                   (-2 -3 -6 1 2 3 4 6))
                                                  (("1"
                                                    (expand*
                                                     o
                                                     first
                                                     finseq_appl)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (decompose-equality
                                                         -2)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "r!2`length")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 4))
                                                            (("2"
                                                              (lemma
                                                               empty_0[posnat])
                                                              (("2"
                                                                (inst -1 q1!1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "<=(r!1, r!2) OR <=(r!2, r!1)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand <=)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand left_pos)
                                                (("1"
                                                  (inst
                                                   6
                                                   r!1
                                                   p1!1
                                                   "p1!3 o q1!2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide-all-but (-1 1))
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand o)
                                                            (("1"
                                                              (decompose-equality)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skosimp)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skosimp)
                                                                (("5"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but (-1 2))
                                                        (("2"
                                                          (lemma
                                                           seq_empty[posnat])
                                                          (("2"
                                                            (inst
                                                             -1
                                                             p1!3
                                                             q1!2)
                                                            (("2"
                                                              (lemma
                                                               empty_0[posnat])
                                                              (("2"
                                                                (inst -1 q1!2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (case
                                                         "p1!3 o p1!2 = q1!1")
                                                        (("1"
                                                          (replace -1 -7 rl)
                                                          (("1"
                                                            (rewrite
                                                             first_compo)
                                                            (("1"
                                                              (rewrite
                                                               first_compo)
                                                              (("1"
                                                                (hide-all-but
                                                                 (1 3))
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (rewrite
                                                                     empty_0)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (rewrite
                                                                         seq_o_empty)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 3))
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (rewrite
                                                                   empty_0)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       seq_o_empty)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 -4 1 5 6))
                                                          (("2"
                                                            (replaces -2)
                                                            (("2"
                                                              (expand o)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "x!2 + r!1`length")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -1
                                                                             "x!2 + r!1`length")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand <=)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand left_pos)
                                                (("2"
                                                  (inst
                                                   6
                                                   r!2
                                                   "p1!3 o p1!1"
                                                   q1!2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide 6)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide-all-but
                                                             (-5 1))
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (expand o)
                                                                (("1"
                                                                  (decompose-equality)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("5"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 5))
                                                            (("2"
                                                              (lemma
                                                               seq_empty[posnat])
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 p1!3
                                                                 p1!1)
                                                                (("2"
                                                                  (lemma
                                                                   empty_0[posnat])
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     p1!1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (case
                                                             "p1!3 o q1!1 = p1!2")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -4
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 first_compo)
                                                                (("1"
                                                                  (rewrite
                                                                   first_compo)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (1 3))
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (rewrite
                                                                         empty_0)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             seq_o_empty)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1 3))
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (rewrite
                                                                       empty_0)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (rewrite
                                                                           seq_o_empty)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-2 -4 1 5 6))
                                                              (("2"
                                                                (replaces -2)
                                                                (("2"
                                                                  (expand o)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       -2)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         1)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x!2 + r!2`length")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (-2 -4 1 2 3 4 5))
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (case
                                               "length(r!2) > length(r!1)")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand <=)
                                                  (("1"
                                                    (name
                                                     "pi"
                                                     "(# length := length(r!2) - length(r!1),
                                                                                             seq := (LAMBDA (j: below[length(r!2) - length(r!1)]): q1!1`seq(j)) #)")
                                                    (("1"
                                                      (inst 1 pi)
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (decompose-equality
                                                           -2)
                                                          (("1"
                                                            (expand o 1)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       o
                                                                       -5)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -6)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             x!2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       x!2)
                                                                      (("2"
                                                                        (expand
                                                                         o
                                                                         -5)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (decompose-equality
                                                                             -6)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               x!2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "x!2 - r!1`length")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       -1
                                                                       rl)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -3
                                                                       1
                                                                       rl)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 -3 -6 1))
                                                            (("2"
                                                              (expand o)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (decompose-equality)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 -2 -5 1))
                                                          (("2"
                                                            (expand o)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide -4)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (typepred j!1)
                                                        (("2"
                                                          (hide -2 2 3 4 5)
                                                          (("2"
                                                            (expand o)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide -3)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "length(r!2) = length(r!1)")
                                                (("1"
                                                  (decompose-equality 4)
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (expand o)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (decompose-equality
                                                           -3)
                                                          (("1"
                                                            (inst -1 x!2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand <=)
                                                    (("2"
                                                      (name
                                                       "pi"
                                                       "(# length := length(r!1) - length(r!2),
                                                                                                                         seq := (LAMBDA (j: below[length(r!1) - length(r!2)]): p1!2`seq(j)) #)")
                                                      (("1"
                                                        (inst 3 pi)
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (decompose-equality
                                                             -2)
                                                            (("1"
                                                              (expand o 3)
                                                              (("1"
                                                                (decompose-equality
                                                                 3)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         o
                                                                         -4)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -5)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               x!2)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         x!2)
                                                                        (("2"
                                                                          (expand
                                                                           o
                                                                           -4)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               -5)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 x!2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "x!2 - r!2`length")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (replace
                                                                         -3
                                                                         -1
                                                                         rl)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -3
                                                                         1
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 -3 -5 1))
                                                              (("2"
                                                                (expand o)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide -4)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 -2 -4 1))
                                                            (("2"
                                                              (expand o)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide -4)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (typepred j!1)
                                                          (("2"
                                                            (hide 2 3 4 5 6)
                                                            (("2"
                                                              (expand o)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide -3)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2 -4 2 3)
                    (("2" (lemma right_pos_subset)
                      (("2" (inst -1 s!1 q!1)
                        (("2" (expand subset?)
                          (("2" (inst -1 x!1)
                            (("2" (assert)
                              (("2" (hide -2)
                                (("2" (expand member) (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2 2 3)
                (("2" (lemma right_pos_subset)
                  (("2" (inst -1 s!1 q!1)
                    (("2" (expand subset?)
                      (("2" (inst -1 x!1)
                        (("2" (assert)
                          (("2" (hide -2)
                            (("2" (expand member) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma equal_right_pos)
          (("2" (inst -1 s!1 q!1 p!1) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (strict_subset? const-decl "bool" sets nil)
    (equal_right_pos formula-decl nil robinsonunificationEF nil)
    (x!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" positions nil)
    (r!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p1!3 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (r!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (q1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p1!3 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (pi skolem-const-decl
     "[# length: int, seq: [below[length(r!2) - length(r!1)] -> posnat] #]"
     robinsonunificationEF nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (x!2 skolem-const-decl "below[r!2`length]" robinsonunificationEF nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!2 skolem-const-decl "below[r!1`length]" robinsonunificationEF nil)
    (pi skolem-const-decl
     "[# length: int, seq: [below[length(r!1) - length(r!2)] -> posnat] #]"
     robinsonunificationEF nil)
    (x!2 skolem-const-decl "below[r!1`length]" robinsonunificationEF nil)
    (p1!3 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p1!3 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (q1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (pi skolem-const-decl
     "[# length: int, seq: [below[length(r!2) - length(r!1)] -> posnat] #]"
     robinsonunificationEF nil)
    (x!2 skolem-const-decl "below[r!2`length]" robinsonunificationEF nil)
    (x!2 skolem-const-decl "below[r!1`length]" robinsonunificationEF nil)
    (pi skolem-const-decl
     "[# length: int, seq: [below[length(r!1) - length(r!2)] -> posnat] #]"
     robinsonunificationEF nil)
    (x!2 skolem-const-decl "below[r!1`length]" robinsonunificationEF nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (first const-decl "T" seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (p1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (r!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p!1 skolem-const-decl "{p: position | positionsOF(s!1)(p)}"
     robinsonunificationEF nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (first_compo formula-decl nil seq_extras structures)
    (left_pos const-decl "bool" positions nil)
    (right_pos_subset formula-decl nil robinsonunificationEF nil)
    (member const-decl "bool" sets nil)
    (member_right_pos formula-decl nil robinsonunificationEF nil))
   shostak))
 (next_pos_to_the_right_TCC1 0
  (next_pos_to_the_right_TCC1-1 nil 3501322880
   ("" (skosimp)
    (("" (lemma right_pos_subset)
      (("" (inst -1 s!1 "next_position(s!1, t!1, p!1)")
        (("1" (lemma positions_of_terms_finite)
          (("1" (inst -1 s!1)
            (("1" (lemma finite_subset[position])
              (("1"
                (inst -1 "positionsOF(s!1)"
                 "right_pos(s!1, next_position(s!1, t!1, p!1))")
                (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (rewrite next_position_is_position) nil nil))
        nil))
      nil))
    nil)
   ((right_pos_subset formula-decl nil robinsonunificationEF nil)
    (next_position_is_position formula-decl nil robinsonunificationEF nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (/= const-decl "boolean" notequal nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (p!1 skolem-const-decl "{p: position |
   positionsOF(s!1)(p) AND positionsOF(t!1)(p) AND p /= empty_seq}"
     robinsonunificationEF nil))
   nil
   (next_pos_to_the_right subtype
    "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.next_position(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.p))"
    "finite_set[position[variable, symbol, arity]]")))
 (next_pos_to_the_right_TCC2 0
  (next_pos_to_the_right_TCC2-1 nil 3501322880
   ("" (skosimp)
    (("" (lemma right_pos_subset)
      (("" (inst -1 s!1 p!1)
        (("" (lemma positions_of_terms_finite)
          (("" (inst -1 s!1)
            (("" (lemma finite_subset[position])
              (("" (inst -1 "positionsOF(s!1)" "right_pos(s!1, p!1)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_pos_subset formula-decl nil robinsonunificationEF nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   nil
   (next_pos_to_the_right subtype
    "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p)"
    "finite_set[position[variable, symbol, arity]]")))
 (next_pos_to_the_right 0
  (next_pos_to_the_right-1 nil 3503391279
   ("" (skosimp)
    (("" (lemma subset_right_pos)
      (("" (inst -1 s!1 p!1 "next_position(s!1, t!1, p!1)")
        (("1" (lemma next_pos_member_right_pos)
          (("1" (inst -1 s!1 t!1 p!1)
            (("1" (lemma next_pos_is_a_diff_pos)
              (("1" (inst -1 s!1 t!1 p!1)
                (("1" (assert)
                  (("1" (hide -1 -2)
                    (("1" (lemma card_subset[position])
                      (("1"
                        (inst -1
                         "right_pos(s!1, next_position(s!1, t!1, p!1))"
                         "right_pos(s!1, p!1)")
                        (("1" (expand strict_subset?)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1" (rewrite same_card_subset) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite next_position_is_position) nil nil))
        nil))
      nil))
    nil)
   ((subset_right_pos formula-decl nil robinsonunificationEF nil)
    (next_position_is_position formula-decl nil robinsonunificationEF nil)
    (next_pos_member_right_pos formula-decl nil robinsonunificationEF nil)
    (next_pos_is_a_diff_pos formula-decl nil robinsonunificationEF nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_subset formula-decl nil finite_sets nil)
    (strict_subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (/= const-decl "boolean" notequal nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (p!1 skolem-const-decl "{p: position |
   positionsOF(s!1)(p) AND positionsOF(t!1)(p) AND p /= empty_seq}"
     robinsonunificationEF nil))
   shostak))
 (ext_link_remove_x_TCC1 0
  (ext_link_remove_x_TCC1-1 nil 3503824755 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (ext_link_remove_x subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)"
    "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p) /= t}")))
 (ext_link_remove_x 0
  (ext_link_remove_x-1 nil 3504359379
   ("" (skosimp)
    (("" (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
      (("" (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
        (("" (name-replace "sig1" "link_of_frst_diff(sp, tp)" :hide? nil)
          (("" (assert)
            (("" (flatten)
              (("" (prop)
                (("1" (lemma "vars_subst_not_in")
                  (("1" (inst -1 s!1 sig1 x!1)
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (lemma "dom_ran_link_disjoint")
                          (("1" (inst -1 sp tp)
                            (("1" (replace -5)
                              (("1" (assert)
                                (("1" (inst -1 "x!1" "r!1")
                                  (("1" (hide-all-but (-1 1))
                                    (("1" (expand member)
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (hide-all-but (-7 1))
                                    (("2" (expand member)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "vars_subst_not_in")
                  (("2" (inst -1 "t!1" "sig1" "x!1")
                    (("2" (assert)
                      (("2" (skosimp)
                        (("2" (lemma "dom_ran_link_disjoint")
                          (("2" (inst -1 sp tp)
                            (("2" (replace -5)
                              (("2" (assert)
                                (("2" (inst -1 "x!1" "r!1")
                                  (("1" (hide-all-but (-1 1))
                                    (("1" (expand member)
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (hide-all-but (-7 1))
                                    (("2" (expand member)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (r!1 skolem-const-decl "term[variable, symbol, arity]"
     robinsonunificationEF nil)
    (vars_subst_not_in formula-decl nil substitution nil)
    (dom_ran_link_disjoint formula-decl nil robinsonunification nil)
    (Ran const-decl "set[term[variable, symbol, arity]]" substitution nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (member const-decl "bool" sets nil)
    (x!1 skolem-const-decl "(V)" robinsonunificationEF nil)
    (sig1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (r!1 skolem-const-decl "term[variable, symbol, arity]"
     robinsonunificationEF nil))
   shostak))
 (vars_ext_link_s_subset 0
  (vars_ext_link_s_subset-1 nil 3503927962
   ("" (skosimp)
    (("" (assert)
      (("" (flatten)
        ((""
          (name-replace "sig1"
           "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
           :hide? nil)
          ((""
            (name "pi" "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
            (("" (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
              (("" (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
                (("" (expand* "subset?")
                  (("" (skosimp)
                    (("" (expand* "union" "member")
                      (("" (flatten)
                        (("" (case "member(x!1, VRan(sig1))")
                          (("1" (expand* "member" "VRan")
                            (("1" (expand "IUnion")
                              (("1" (skosimp)
                                (("1" (lemma "dom_link_of_frst_diff_is")
                                  (("1" (inst -1 pi sp tp)
                                    (("1" (assert)
                                      (("1"
                                        (replace -6)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand* "restrict" "singleton")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (decompose-equality -2)
                                                  (("1"
                                                    (inst -1 "i!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replace -6 -2 rl)
                                                          (("1"
                                                            (expand
                                                             "link_of_frst_diff"
                                                             -2)
                                                            (("1"
                                                              (replace -5)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -3
                                                                    -5
                                                                    4))
                                                                  (("1"
                                                                    (expand
                                                                     "Vars")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (typepred
                                                                         "p!2")
                                                                        (("1"
                                                                          (lemma
                                                                           pos_o_term)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             p!1
                                                                             "pi o p!2"
                                                                             t!1)
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (lemma
                                                                                 pos_o_term)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   pi
                                                                                   p!2
                                                                                   tp)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     position_t_first_diff)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       sp
                                                                                       tp
                                                                                       pi)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "p!1 o (pi o p!2)")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             pos_subterm)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               p!1
                                                                                               "pi o p!2"
                                                                                               t!1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     pos_subterm)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       pi
                                                                                                       p!2
                                                                                                       tp)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -3
                                                                    -6
                                                                    -7
                                                                    1))
                                                                  (("2"
                                                                    (expand
                                                                     link_of_frst_diff)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality -1)
                                                  (("1"
                                                    (inst -1 i!1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replace -5 -1 rl)
                                                          (("1"
                                                            (expand
                                                             "link_of_frst_diff"
                                                             -1)
                                                            (("1"
                                                              (replace -4)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -4
                                                                    -5
                                                                    4))
                                                                  (("1"
                                                                    (expand
                                                                     "Vars")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (typepred
                                                                         p!2)
                                                                        (("1"
                                                                          (lemma
                                                                           pos_o_term)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             p!1
                                                                             "pi o p!2"
                                                                             s!1)
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (lemma
                                                                                 pos_o_term)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   pi
                                                                                   p!2
                                                                                   sp)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     position_s_first_diff)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       sp
                                                                                       tp
                                                                                       pi)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "p!1 o (pi o p!2)")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             pos_subterm)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               p!1
                                                                                               "pi o p!2"
                                                                                               s!1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     pos_subterm)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       pi
                                                                                                       p!2
                                                                                                       sp)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -3
                                                                    -6
                                                                    -7
                                                                    1
                                                                    2))
                                                                  (("2"
                                                                    (expand
                                                                     link_of_frst_diff)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   link_of_frst_diff)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but (-7 1))
                                                    (("2"
                                                      (lemma
                                                       position_t_first_diff)
                                                      (("2"
                                                        (inst -1 sp tp pi)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member")
                            (("2" (case "vars?(subtermOF(sp,pi))")
                              (("1"
                                (case "VRan(sig1) = Vars(subtermOF(tp,pi))")
                                (("1" (replaces -1)
                                  (("1" (lemma ext_link_remove_x)
                                    (("1" (inst -1 x!1 s!1 t!1 p!1)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (replace -6)
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "positions_of_ext")
                                                  (("1"
                                                    (inst -1 sig1 s!1)
                                                    (("1"
                                                      (decompose-equality -1)
                                                      (("1"
                                                        (expand "Vars" -7)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst -1 "p!2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "union")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (rewrite
                                                                         "subterm_ext_commute")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -7)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (expand
                                                                                 "ext")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               -2)
                                                                              (("2"
                                                                                (typepred
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "V")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         -10)
                                                                        (("2"
                                                                          (rewrite
                                                                           "pos_subterm")
                                                                          (("2"
                                                                            (rewrite
                                                                             "subterm_ext_commute")
                                                                            (("2"
                                                                              (expand
                                                                               ext
                                                                               -10)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "subtermOF(s!1, p1!1) = subtermOF(sp, pi)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -10
                                                                                     -11
                                                                                     rl)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "link_of_frst_diff"
                                                                                       -11)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -9)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  3))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Vars")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "p2!1")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -8
                                                                                                  -11
                                                                                                  -12
                                                                                                  3))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   link_of_frst_diff)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -9
                                                                                     -10
                                                                                     rl)
                                                                                    (("2"
                                                                                      (expand
                                                                                       link_of_frst_diff
                                                                                       -10)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -8)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 ext
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -10
                                                                                                   -5
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     link_of_frst_diff
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "pos_o_term")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "p1!1"
                                                                                                           "p2!1"
                                                                                                           "s!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "pos_subterm")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "p1!1"
                                                                                                                 "p2!1"
                                                                                                                 "s!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     -3
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (-3
                                                                                                                        6))
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "Vars")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "p1!1 o p2!1")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -7
                                                                                                  -10
                                                                                                  -11
                                                                                                  4))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   link_of_frst_diff)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (decompose-equality 1)
                                  (("2" (iff)
                                    (("2" (prop)
                                      (("1"
                                        (expand "VRan" -1)
                                        (("1"
                                          (expand "IUnion")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (lemma
                                               "dom_link_of_frst_diff_is")
                                              (("1"
                                                (inst -1 pi sp tp)
                                                (("1"
                                                  (replace -7)
                                                  (("1"
                                                    (replace -6)
                                                    (("1"
                                                      (expand*
                                                       "restrict"
                                                       "singleton")
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (inst -1 "i!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (replace
                                                                 -6
                                                                 -1
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "link_of_frst_diff"
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -3
                                                                          -6
                                                                          -7
                                                                          3))
                                                                        (("1"
                                                                          (expand
                                                                           link_of_frst_diff)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "VRan" 1)
                                        (("2"
                                          (expand "IUnion")
                                          (("2"
                                            (inst 1 "subtermOF(sp, pi)")
                                            (("1"
                                              (replace -6 1 rl)
                                              (("1"
                                                (expand "link_of_frst_diff" 1)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -3 -6 -7 3))
                                                      (("1"
                                                        (expand
                                                         link_of_frst_diff)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand V)
                                              (("2"
                                                (expand "Dom")
                                                (("2"
                                                  (lemma
                                                   dom_link_of_frst_diff_is)
                                                  (("2"
                                                    (inst -1 pi sp tp)
                                                    (("2"
                                                      (replace -7)
                                                      (("2"
                                                        (replace -6)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand*
                                                             restrict
                                                             singleton)
                                                            (("2"
                                                              (decompose-equality
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "subtermOF(sp, pi)")
                                                                (("2"
                                                                  (expand Dom)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (hide-all-but (-4 1))
                                  (("3" (lemma position_t_first_diff)
                                    (("3" (inst -1 sp tp pi)
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (case "vars?(subtermOF(tp, pi))")
                                (("1"
                                  (case "VRan(sig1) = Vars(subtermOF(sp,pi))")
                                  (("1" (replaces -1)
                                    (("1" (lemma ext_link_remove_x)
                                      (("1"
                                        (inst -1 x!1 s!1 t!1 p!1)
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (replace -6)
                                              (("1"
                                                (expand member)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "positions_of_ext")
                                                    (("1"
                                                      (inst -1 sig1 s!1)
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (expand Vars -7)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst -1 "p!2")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "union")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "member")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (rewrite
                                                                           "subterm_ext_commute")
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -7)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("1"
                                                                                  (expand
                                                                                   "ext")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 -2)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "V")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           -10)
                                                                          (("2"
                                                                            (rewrite
                                                                             "pos_subterm")
                                                                            (("2"
                                                                              (rewrite
                                                                               "subterm_ext_commute")
                                                                              (("2"
                                                                                (expand
                                                                                 ext
                                                                                 -10)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "subtermOF(s!1, p1!1) = subtermOF(tp, pi)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -10
                                                                                       -11
                                                                                       rl)
                                                                                      (("1"
                                                                                        (expand
                                                                                         link_of_frst_diff
                                                                                         -11)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -9)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    4))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     Vars)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       p2!1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -8
                                                                                                    -11
                                                                                                    -12
                                                                                                    2
                                                                                                    4))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     link_of_frst_diff)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -9
                                                                                       -10
                                                                                       rl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         link_of_frst_diff
                                                                                         -10)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -8)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   pos_subterm)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     p1!1
                                                                                                     p2!1
                                                                                                     s!1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       pos_o_term)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         p1!1
                                                                                                         p2!1
                                                                                                         s!1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           ext
                                                                                                           -7)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -12
                                                                                                             -7
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               link_of_frst_diff
                                                                                                               -7)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -11)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -5
                                                                                                                       -2
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -5
                                                                                                                         -3
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           (-2
                                                                                                                            -3
                                                                                                                            -4
                                                                                                                            7))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             Vars)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               p!2)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -7
                                                                                                    -10
                                                                                                    -11
                                                                                                    3
                                                                                                    5))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     link_of_frst_diff)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (decompose-equality 1)
                                    (("2" (iff)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (expand "VRan" -1)
                                          (("1"
                                            (expand "IUnion")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (lemma
                                                 "dom_link_of_frst_diff_is")
                                                (("1"
                                                  (inst -1 pi sp tp)
                                                  (("1"
                                                    (replace -7)
                                                    (("1"
                                                      (replace -6)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand*
                                                           "restrict"
                                                           "singleton")
                                                          (("1"
                                                            (decompose-equality
                                                             -1)
                                                            (("1"
                                                              (inst -1 "i!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -6
                                                                     -1
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "link_of_frst_diff"
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -5)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -3
                                                                              -6
                                                                              -7
                                                                              2
                                                                              4))
                                                                            (("1"
                                                                              (expand
                                                                               link_of_frst_diff)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "VRan" 1)
                                          (("2"
                                            (expand "IUnion")
                                            (("2"
                                              (inst 1 "subtermOF(tp, pi)")
                                              (("1"
                                                (replace -6 1 rl)
                                                (("1"
                                                  (expand
                                                   "link_of_frst_diff"
                                                   1)
                                                  (("1"
                                                    (replace -5)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -3 -6 -7 2 4))
                                                        (("1"
                                                          (expand
                                                           "link_of_frst_diff")
                                                          (("1"
                                                            (replace -3)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand V)
                                                (("2"
                                                  (lemma
                                                   dom_link_of_frst_diff_is)
                                                  (("2"
                                                    (inst -1 pi sp tp)
                                                    (("2"
                                                      (replace -7)
                                                      (("2"
                                                        (replace -6)
                                                        (("2"
                                                          (expand*
                                                           restrict
                                                           singleton)
                                                          (("2"
                                                            (decompose-equality
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "subtermOF(tp, pi)")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but (-3 -4 1 2 4))
                                  (("2" (expand link_of_frst_diff)
                                    (("2" (replace -1)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (hide-all-but (-3 1))
                                  (("3" (lemma position_t_first_diff)
                                    (("3" (inst -1 sp tp pi)
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (hide-all-but (-3 1))
                                (("3" (lemma position_s_first_diff)
                                  (("3" (inst -1 sp tp pi)
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (restrict const-decl "R" restrict nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (TRUE const-decl "bool" booleans nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[term]" robinsonunificationEF nil)
    (finite_restrict application-judgement "finite_set[S]" restrict_set_props
     nil)
    (sig1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (pi skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (sp skolem-const-decl "term[variable, symbol, arity]"
     robinsonunificationEF nil)
    (positions_of_ext formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (v adt-accessor-decl "[(vars?) -> variable]" term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (ext_link_remove_x formula-decl nil robinsonunificationEF nil)
    (tp skolem-const-decl "term[variable, symbol, arity]"
     robinsonunificationEF nil)
    (first_diff def-decl "position" robinsonunification nil))
   shostak))
 (vars_ext_link_t_subset 0
  (vars_ext_link_t_subset-1 nil 3503831830
   ("" (skosimp)
    (("" (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
      (("" (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
        (("" (name-replace "sig!1" "link_of_frst_diff(sp, tp)" :hide? nil)
          (("" (name "q!1" "first_diff(sp, tp)")
            (("" (assert)
              (("" (flatten)
                (("" (case "NOT vars?(subtermOF(sp, q!1))")
                  (("1" (lemma comutative_link_fd)
                    (("1" (lemma vars_ext_link_s_subset)
                      (("1" (inst -1 t!1 s!1 p!1)
                        (("1" (inst -2 sp tp)
                          (("1" (replace -6)
                            (("1" (replace -5)
                              (("1" (replace -4)
                                (("1" (replace -3)
                                  (("1" (assert)
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "union(Vars(t!1), Vars(s!1)) = union(Vars(s!1), Vars(t!1))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (decompose-equality)
                                            (("2"
                                              (expand union)
                                              (("2"
                                                (iff)
                                                (("2" (prop) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand* "subset?")
                    (("2" (skosimp)
                      (("2" (expand* "union" "member")
                        (("2" (flatten)
                          (("2" (case "member(x!1, VRan(sig!1))")
                            (("1" (expand* "member" "VRan")
                              (("1" (expand "IUnion")
                                (("1" (skosimp)
                                  (("1" (lemma "dom_link_of_frst_diff_is")
                                    (("1" (inst -1 q!1 sp tp)
                                      (("1"
                                        (replace -5)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand* "restrict" "singleton")
                                              (("1"
                                                (decompose-equality -1)
                                                (("1"
                                                  (typepred "i!1")
                                                  (("1"
                                                    (inst -3 "i!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces -3)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (replace -5 -2 rl)
                                                            (("1"
                                                              (expand
                                                               "link_of_frst_diff"
                                                               -2)
                                                              (("1"
                                                                (replace -4)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -4
                                                                      -6
                                                                      4))
                                                                    (("1"
                                                                      (expand
                                                                       "Vars")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (typepred
                                                                           "p!2")
                                                                          (("1"
                                                                            (lemma
                                                                             "pos_o_term")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "q!1"
                                                                               "p!2"
                                                                               "tp")
                                                                              (("1"
                                                                                (lemma
                                                                                 position_t_first_diff)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   sp
                                                                                   tp
                                                                                   q!1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "pos_o_term")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       p!1
                                                                                       "q!1 o p!2"
                                                                                       t!1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -7)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "p!1 o (q!1 o p!2)")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               pos_subterm)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 q!1
                                                                                                 p!2
                                                                                                 tp)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -6
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -8
                                                                                                       -6
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-4
                                                                                                          -6
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           pos_subterm)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             p!1
                                                                                                             "q!1 o p!2"
                                                                                                             t!1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -4
                                                                      -5
                                                                      -6
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       link_of_frst_diff)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "member")
                              (("2"
                                (case "VRan(sig!1) = Vars(subtermOF(tp,q!1))")
                                (("1" (replaces -1)
                                  (("1" (lemma ext_link_remove_x)
                                    (("1" (inst -1 x!1 s!1 t!1 p!1)
                                      (("1"
                                        (replace -6)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (lemma "positions_of_ext")
                                                    (("1"
                                                      (inst -1 "sig!1" "t!1")
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (expand Vars -7)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst -1 "p!2")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "union")
                                                                  (("1"
                                                                    (expand
                                                                     member)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (rewrite
                                                                         "subterm_ext_commute")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -7)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (expand
                                                                                 "ext")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               -2)
                                                                              (("2"
                                                                                (typepred
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "V")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           -10)
                                                                          (("2"
                                                                            (rewrite
                                                                             "pos_subterm")
                                                                            (("2"
                                                                              (rewrite
                                                                               "subterm_ext_commute")
                                                                              (("2"
                                                                                (expand
                                                                                 "ext"
                                                                                 -10)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "subtermOF(t!1, p1!1) = subtermOF(sp, q!1)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -8
                                                                                       -11
                                                                                       rl)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "link_of_frst_diff"
                                                                                         -11)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -7)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    3))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     Vars)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       p2!1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -8
                                                                                                    -9
                                                                                                    -10
                                                                                                    3))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     link_of_frst_diff)
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -7
                                                                                       -10
                                                                                       rl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "link_of_frst_diff"
                                                                                         -10)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -6)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -8
                                                                                                   -5
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     link_of_frst_diff
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -7)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           ext
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             pos_o_term)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               p1!1
                                                                                                               p2!1
                                                                                                               t!1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   pos_subterm)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     p1!1
                                                                                                                     p2!1
                                                                                                                     t!1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         -3
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -4
                                                                                                                           -3
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -4
                                                                                                                             -2
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (hide-all-but
                                                                                                                               (-2
                                                                                                                                -3
                                                                                                                                7))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 Vars)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   p!2)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -7
                                                                                                    -8
                                                                                                    -9
                                                                                                    4))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     link_of_frst_diff)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (decompose-equality 1)
                                  (("2" (iff)
                                    (("2" (prop)
                                      (("1"
                                        (expand "VRan" -1)
                                        (("1"
                                          (expand "IUnion")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (lemma
                                               "dom_link_of_frst_diff_is")
                                              (("1"
                                                (inst -1 q!1 sp tp)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (replace -5)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand*
                                                         "restrict"
                                                         "singleton")
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (inst -1 "i!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces -1)
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   -1
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "link_of_frst_diff"
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -3)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -3
                                                                            -4
                                                                            -5
                                                                            3))
                                                                          (("1"
                                                                            (expand
                                                                             link_of_frst_diff)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "VRan" 1)
                                        (("2"
                                          (expand "IUnion")
                                          (("2"
                                            (lemma dom_link_of_frst_diff_is)
                                            (("2"
                                              (inst -1 q!1 sp tp)
                                              (("2"
                                                (replace -4)
                                                (("2"
                                                  (replace -5)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand*
                                                       restrict
                                                       singleton)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "subtermOF(sp, q!1)")
                                                          (("1"
                                                            (inst
                                                             1
                                                             "subtermOF(sp, q!1)")
                                                            (("1"
                                                              (replace
                                                               -5
                                                               1
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 link_of_frst_diff
                                                                 1)
                                                                (("1"
                                                                  (replace -4)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -4
                                                                          -5
                                                                          -6
                                                                          3))
                                                                        (("1"
                                                                          (expand
                                                                           link_of_frst_diff)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-2 1))
                                                            (("2"
                                                              (expand V)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (hide-all-but (-2 1))
                                  (("3" (lemma position_t_first_diff)
                                    (("3" (inst -1 sp tp q!1)
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but (-1 1))
                    (("3" (lemma position_s_first_diff)
                      (("3" (inst -1 sp tp q!1) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (vars_ext_link_s_subset formula-decl nil robinsonunificationEF nil)
    (Vars const-decl "set[(V)]" subterm nil) (union const-decl "set" sets nil)
    (comutative_link_fd formula-decl nil robinsonunification nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[term]" robinsonunificationEF nil)
    (finite_restrict application-judgement "finite_set[S]" restrict_set_props
     nil)
    (sp skolem-const-decl "term[variable, symbol, arity]"
     robinsonunificationEF nil)
    (q!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (v adt-accessor-decl "[(vars?) -> variable]" term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (positions_of_ext formula-decl nil substitution nil)
    (ext_link_remove_x formula-decl nil robinsonunificationEF nil)
    (singleton const-decl "(singleton?)" sets nil)
    (restrict const-decl "R" restrict nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (pos_o_term formula-decl nil subterm nil)
    (TRUE const-decl "bool" booleans nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (first_diff def-decl "position" robinsonunification nil))
   shostak))
 (union_vars_ext_link_subterm 0
  (union_vars_ext_link_subterm-1 nil 3503402991
   ("" (skosimp*)
    (("" (assert)
      (("" (flatten)
        ((""
          (name-replace "sig!1"
           "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
           :hide? nil)
          (("" (decompose-equality 2)
            (("" (iff)
              (("" (prop)
                (("1" (expand "difference")
                  (("1" (expand "union")
                    (("1" (expand "member")
                      (("1" (prop)
                        (("1" (lemma vars_ext_link_s_subset)
                          (("1" (inst -1 "s!1" "t!1" "p!1")
                            (("1" (replace -3 -1)
                              (("1" (assert)
                                (("1" (expand "subset?")
                                  (("1" (inst -1 "x!1")
                                    (("1" (expand* "union" "member") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma ext_link_remove_x)
                          (("2" (inst -1 "x!1" "s!1" "t!1" "p!1")
                            (("2" (replace -4 -1)
                              (("2" (assert)
                                (("2" (assert)
                                  (("2" (prop)
                                    (("2" (expand "member")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma vars_ext_link_t_subset)
                          (("3" (inst -1 "s!1" "t!1" "p!1")
                            (("3" (replace -3 -1)
                              (("3" (assert)
                                (("3" (expand "subset?")
                                  (("3" (inst -1 "x!1")
                                    (("3" (expand* "union" "member") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (lemma ext_link_remove_x)
                          (("4" (inst -1 "x!1" "s!1" "t!1" "p!1")
                            (("4" (replace -4 -1)
                              (("4" (assert)
                                (("4" (assert)
                                  (("4" (prop)
                                    (("4" (expand member)
                                      (("4" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand* "difference" "union" "member")
                  (("2" (prop)
                    (("1" (hide 3)
                      (("1" (expand "Vars")
                        (("1" (skosimp)
                          (("1" (inst 2 "p!2")
                            (("1" (rewrite "subterm_ext_commute")
                              (("1" (replaces -1)
                                (("1" (typepred "x!1")
                                  (("1" (expand* "V" "Dom" "ext")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "ext_preserv_pos") nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "Vars")
                        (("2" (skosimp)
                          (("2" (inst 2 "p!2")
                            (("1" (rewrite "subterm_ext_commute")
                              (("1" (replaces -1)
                                (("1" (typepred "x!1")
                                  (("1" (expand* "V" "Dom" "ext")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "ext_preserv_pos") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p!2 skolem-const-decl "positions?[variable, symbol, arity](t!1)"
     robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (p!2 skolem-const-decl "positions?[variable, symbol, arity](s!1)"
     robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (member const-decl "bool" sets nil)
    (vars_ext_link_t_subset formula-decl nil robinsonunificationEF nil)
    (ext_link_remove_x formula-decl nil robinsonunificationEF nil)
    (vars_ext_link_s_subset formula-decl nil robinsonunificationEF nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil) (Vars const-decl "set[(V)]" subterm nil)
    (ext def-decl "term" substitution nil)
    (difference const-decl "set" sets nil)
    (Dom const-decl "set[(V)]" substitution nil))
   shostak))
 (termination_lemma_subterm_TCC1 0
  (termination_lemma_subterm_TCC1-1 nil 3503156263
   ("" (skosimp)
    (("" (hide -1 1)
      (("" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_union judgement-tcc nil finite_sets nil))
   nil
   (termination_lemma_subterm subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s)), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t)))"
    "finite_set[(V[variable, symbol, arity])]")))
 (termination_lemma_subterm_TCC2 0
  (termination_lemma_subterm_TCC2-1 nil 3503156263
   ("" (skosimp)
    (("" (hide -1 1)
      (("" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil))
    nil)
   ((vars_of_term_finite formula-decl nil subterm nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_union judgement-tcc nil finite_sets nil))
   nil
   (termination_lemma_subterm subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.s), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.t))"
    "finite_set[(V[variable, symbol, arity])]")))
 (termination_lemma_subterm 0
  (termination_lemma_subterm-1 nil 3503302874
   ("" (skosimp*)
    (("" (assert)
      (("" (prop)
        ((""
          (name-replace "sig1"
           "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
           :hide? nil)
          (("" (lemma "card_diff_subset[(V)]")
            (("" (lemma "union_vars_ext_link_subterm")
              (("" (inst -1 "s!1" "t!1" "p!1")
                (("" (assert)
                  (("" (replace -3 -1)
                    (("" (assert)
                      (("" (replaces -1)
                        ((""
                          (inst -1 "Dom(sig1)" "union(Vars(s!1), Vars(t!1))")
                          (("1" (prop)
                            (("1" (case-replace "card(Dom(sig1)) = 1")
                              (("1" (assert) nil nil)
                               ("2" (hide-all-but (-2 1 2))
                                (("2" (rewrite "card_one")
                                  (("2" (lemma "dom_link_of_frst_diff_is")
                                    (("2"
                                      (inst
                                       -1
                                       "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
                                       "subtermOF(s!1, p!1)"
                                       "subtermOF(t!1, p!1)")
                                      (("2"
                                        (replace -2 -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (expand "restrict")
                                              (("1"
                                                (inst
                                                 1
                                                 "subtermOF(subtermOF(s!1, p!1),
                             first_diff(subtermOF(s!1, p!1),
                                        subtermOF(t!1, p!1)))")
                                                (("1"
                                                  (decompose-equality 1)
                                                  (("1"
                                                    (decompose-equality -2)
                                                    (("1"
                                                      (inst -1 "x!1")
                                                      (("1"
                                                        (hide -2 -3 2)
                                                        (("1"
                                                          (expand singleton)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "V")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "restrict")
                                              (("2"
                                                (case
                                                 "vars?(subtermOF(subtermOF(t!1, p!1),
                      first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))))")
                                                (("1"
                                                  (inst
                                                   2
                                                   "subtermOF(subtermOF(t!1, p!1),
                             first_diff(subtermOF(s!1, p!1),
                                        subtermOF(t!1, p!1)))")
                                                  (("1"
                                                    (decompose-equality -2)
                                                    (("1"
                                                      (decompose-equality 2)
                                                      (("1"
                                                        (inst -1 "x!1")
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("1"
                                                            (expand singleton)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "V")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 3)
                                                  (("2"
                                                    (expand
                                                     "link_of_frst_diff")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (lemma
                                                     "position_s_first_diff")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "subtermOF(t!1, p!1)"
                                                       "subtermOF(s!1, p!1)"
                                                       "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide 2)
                                                          (("3"
                                                            (lemma
                                                             "comutative_first_diff")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "subtermOF(s!1, p!1)"
                                                               "subtermOF(t!1, p!1)"
                                                               "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "dom_link_of_frst_diff_is")
                              (("2"
                                (inst -1
                                 "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
                                 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)")
                                (("2" (replace -2 -1)
                                  (("2" (assert)
                                    (("2" (expand "restrict")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (decompose-equality -2)
                                          (("1"
                                            (hide 3)
                                            (("1"
                                              (expand "subset?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst -1 "x!1")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (iff)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "singleton")
                                                          (("1"
                                                            (expand "union")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1 1))
                                                                (("1"
                                                                  (expand*
                                                                   "member"
                                                                   "Vars")
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                                                                    (("1"
                                                                      (rewrite
                                                                       pos_subterm)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (lemma
                                                                           position_s_first_diff)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "subtermOF(s!1, p!1)"
                                                                             "subtermOF(t!1, p!1)"
                                                                             "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                                                                            (("2"
                                                                              (rewrite
                                                                               pos_o_term)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         position_s_first_diff)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "subtermOF(s!1, p!1)"
                                                                           "subtermOF(t!1, p!1)"
                                                                           "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                                                                          (("2"
                                                                            (rewrite
                                                                             pos_o_term)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "vars?(subtermOF(subtermOF(t!1, p!1),
                      first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))))")
                                          (("1"
                                            (hide 1 4)
                                            (("1"
                                              (expand "subset?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (decompose-equality -2)
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (iff)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -2 -3)
                                                            (("1"
                                                              (expand*
                                                               "union"
                                                               "member")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide 1)
                                                                  (("1"
                                                                    (expand
                                                                     "Vars")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                                                                      (("1"
                                                                        (expand
                                                                         singleton)
                                                                        (("1"
                                                                          (rewrite
                                                                           pos_subterm)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (lemma
                                                                               position_t_first_diff)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "subtermOF(s!1, p!1)"
                                                                                 "subtermOF(t!1, p!1)"
                                                                                 "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   pos_o_term)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         2)
                                                                        (("2"
                                                                          (lemma
                                                                           position_t_first_diff)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "subtermOF(s!1, p!1)"
                                                                             "subtermOF(t!1, p!1)"
                                                                             "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                                                                            (("2"
                                                                              (rewrite
                                                                               pos_o_term)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 3 5)
                                            (("2"
                                              (expand "link_of_frst_diff")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3"
                                              (lemma position_t_first_diff)
                                              (("3"
                                                (inst
                                                 -1
                                                 "subtermOF(s!1, p!1)"
                                                 "subtermOF(t!1, p!1)"
                                                 "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2 3)
                            (("2" (typepred "sig1")
                              (("2" (expand "Sub?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (union_vars_ext_link_subterm formula-decl nil robinsonunificationEF nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (sig1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (Vars const-decl "set[(V)]" subterm nil) (union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (subset? const-decl "bool" sets nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_one formula-decl nil finite_sets nil)
    (first_diff def-decl "position" robinsonunification nil)
    (comutative_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (restrict const-decl "R" restrict nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[term]" robinsonunificationEF nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     robinsonunificationEF nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (p!1 skolem-const-decl "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}"
     robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (card_diff_subset formula-decl nil finite_sets nil))
   shostak))
 (subtermOF_next_position_TCC1 0
  (subtermOF_next_position_TCC1-1 nil 3509290215
   ("" (skosimp*)
    (("" (lemma "next_position_is_position")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((next_position_is_position formula-decl nil robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   nil
   (subtermOF_next_position subtype "robinsonunificationEF.q"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.s)")))
 (subtermOF_next_position_TCC2 0
  (subtermOF_next_position_TCC2-1 nil 3509290215
   ("" (skosimp*)
    (("" (lemma "next_position_is_position")
      (("" (inst -1 "t!1" "s!1" "p!1")
        (("" (lemma "next_position_commute")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((next_position_is_position formula-decl nil robinsonunificationEF nil)
    (next_position_commute formula-decl nil robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   nil
   (subtermOF_next_position subtype "robinsonunificationEF.q"
    "positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positions?(robinsonunificationEF.t)")))
 (subtermOF_next_position 0
  (subtermOF_next_position-1 nil 3509290246
   ("" (skolem 1 ("s!1" "t!1" "_"))
    ((""
      (measure-induct+ "IF p = empty_seq 
                         THEN lex2(0,0)
                         ELSE lex2(length(p), 
                         arity(f(subtermOF(s!1,delete(p,length(p) - 1)))) - last(p))
                         ENDIF" ("p"))
      (("1" (name-replace "p!1" "next_position(s!1, t!1, x!1)" :hide? nil)
        (("1" (case "x!1 = empty_seq")
          (("1" (hide -3)
            (("1" (replaces -1)
              (("1" (expand next_position)
                (("1" (replace -1 -2 rl)
                  (("1" (hide -1)
                    (("1" (expand subtermOF)
                      (("1" (rewrite empty_0) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand next_position -1)
            (("2" (assert)
              (("2" (lift-if)
                (("2" (ground)
                  (("1"
                    (inst -5
                     "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))")
                    (("1" (replace -2)
                      (("1" (prop)
                        (("1" (hide -2 -5)
                          (("1" (lemma next_position_TCC17)
                            (("1" (inst -1 s!1 t!1 x!1)
                              (("1" (assert)
                                (("1" (inst -1 "delete(x!1, length(x!1) - 1)")
                                  (("1" (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide-all-but -1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (3 4))
                                            (("2"
                                              (lemma empty_0[posnat])
                                              (("2"
                                                (inst -1 x!1)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (1 3))
                                    (("2" (lemma empty_0[posnat])
                                      (("2"
                                        (inst -1 x!1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 2))
                      (("2" (lemma empty_0[posnat])
                        (("2" (inst -1 x!1) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -3 "delete(x!1, length(x!1) - 1)")
                    (("1" (replace -1)
                      (("1" (prop)
                        (("1" (hide -3 -1)
                          (("1" (lemma next_position_TCC19)
                            (("1" (inst -1 s!1 t!1 x!1)
                              (("1" (assert)
                                (("1" (inst -1 "delete(x!1, length(x!1) - 1)")
                                  (("1" (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "add_last(delete(x!1, length(x!1) - 1), 1 + last(x!1))")
                                      (("1"
                                        (hide-all-but (1 5))
                                        (("1"
                                          (lemma empty_0[posnat])
                                          (("1"
                                            (inst -1 x!1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (1 5))
                                    (("2" (lemma empty_0[posnat])
                                      (("2"
                                        (inst -1 x!1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 4))
                      (("2" (lemma empty_0[posnat])
                        (("2" (inst -1 x!1) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but (-2 -5))
                    (("3" (replace -1 -2 rl)
                      (("3" (hide -1)
                        (("3" (expand subtermOF)
                          (("3" (rewrite empty_0) (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma next_position_is_position)
          (("2" (inst -1 t!1 s!1 p!1)
            (("2" (lemma next_position_commute)
              (("2" (inst -1 s!1 t!1 p!1) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (replaces -1)
          (("3" (rewrite next_position_is_position) nil nil)) nil))
        nil)
       ("4" (hide 3)
        (("4" (lemma next_position_TCC5)
          (("4" (inst -1 s!1 t!1 p!1) (("4" (assert) nil nil)) nil)) nil))
        nil)
       ("5" (hide 2) (("5" (rewrite empty_0) nil nil)) nil)
       ("6" (hide 3)
        (("6" (lemma next_position_TCC3)
          (("6" (inst -1 s!1 t!1 p!1) (("6" (assert) nil nil)) nil)) nil))
        nil)
       ("7" (hide 3)
        (("7" (rewrite delete_is_position)
          (("7" (hide 3)
            (("7" (flatten) (("7" (rewrite empty_0) nil nil)) nil)) nil))
          nil))
        nil)
       ("8" (hide 3)
        (("8" (lemma empty_0[posnat])
          (("8" (inst -1 p!1) (("8" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (/= const-decl "boolean" notequal nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil) (< const-decl "bool" reals nil)
    (delete const-decl "finseq" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (t!1 skolem-const-decl "{t: term | s!1 /= t}" robinsonunificationEF nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (TRUE const-decl "bool" booleans nil)
    (empty_0 formula-decl nil seq_extras structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (insert? const-decl "finseq" seq_extras structures)
    (next_position_TCC17 termination-tcc nil robinsonunificationEF nil)
    (add_last const-decl "finseq" seq_extras structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl
     "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}"
     robinsonunificationEF nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (next_position_TCC19 termination-tcc nil robinsonunificationEF nil)
    (next_position_is_position formula-decl nil robinsonunificationEF nil)
    (next_position_commute formula-decl nil robinsonunificationEF nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (next_position_TCC3 subtype-tcc nil robinsonunificationEF nil)
    (delete_is_position formula-decl nil positions nil))
   shostak))
 (np_o_fd_is_position_TCC1 0
  (np_o_fd_is_position_TCC1-1 nil 3510656190
   ("" (skosimp)
    (("" (lemma subtermOF_next_position)
      (("" (inst -1 s!1 t!1 p!1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((subtermOF_next_position formula-decl nil robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   nil
   (np_o_fd_is_position subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.q)"
    "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.q) /= t}")))
 (np_o_fd_is_position 0
  (np_o_fd_is_position-1 nil 3510656191
   ("" (skosimp)
    (("" (assert)
      (("" (name-replace "pi" "next_position(s!1, t!1, p!1)" :hide? nil)
        ((""
          (name-replace "qi"
           "first_diff(subtermOF(s!1, pi), subtermOF(t!1, pi))" :hide? nil)
          (("" (lemma position_s_first_diff)
            (("" (lemma position_t_first_diff)
              (("" (inst -1 "subtermOF(s!1, pi)" "subtermOF(t!1, pi)" qi)
                (("" (inst -2 "subtermOF(s!1, pi)" "subtermOF(t!1, pi)" qi)
                  (("" (assert)
                    (("" (lemma next_position_is_position)
                      (("" (inst-cp -1 s!1 t!1 p!1)
                        (("" (inst -1 t!1 s!1 p!1)
                          (("" (lemma next_position_commute)
                            (("" (inst -1 s!1 t!1 p!1)
                              (("" (replace -1 -2 rl)
                                (("" (hide -1)
                                  (("" (replace -6)
                                    (("" (hide -5 -6)
                                      ((""
                                        (lemma pos_o_term)
                                        ((""
                                          (inst-cp -1 pi qi s!1)
                                          ((""
                                            (inst -1 pi qi t!1)
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first_diff def-decl "position" robinsonunification nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (next_position_is_position formula-decl nil robinsonunificationEF nil)
    (pos_o_term formula-decl nil subterm nil)
    (next_position_commute formula-decl nil robinsonunificationEF nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (/= const-decl "boolean" notequal nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (child_np_child_p 0
  (child_np_child_p-1 nil 3514657234
   (""
    (measure-induct+ "IF p = empty_seq 
          THEN lex2(0,0)
          ELSE lex2(length(p), 
                    arity(f(subtermOF(s, 
                                   delete(p,length(p) - 1)))) - last(p))
          ENDIF" ("s" "t" "p"))
    (("1" (skosimp)
      (("1" (name-replace "np" "next_position(x!1, x!2, x!3)" :hide? nil)
        (("1" (expand next_position -1)
          (("1" (lift-if -1)
            (("1" (prop)
              (("1" (hide-all-but (-2 -4))
                (("1" (replace -1 -2 rl)
                  (("1" (hide -1)
                    (("1" (expand child)
                      (("1" (skosimp)
                        (("1" (lemma seq_empty[posnat])
                          (("1" (inst -1 q!1 p1!1)
                            (("1" (assert)
                              (("1" (flatten)
                                (("1" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2 1)
                (("2" (expand child)
                  (("2" (skosimp)
                    (("2" (inst 3 "p1!1 o #(last(x!3))")
                      (("1" (split)
                        (("1" (hide-all-but 1)
                          (("1" (expand* "#" o empty_seq)
                            (("1" (flatten) (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (rewrite o_assoc)
                          (("2" (replace -2 1 rl)
                            (("2" (hide -2)
                              (("2" (lemma add_last_delete[posnat])
                                (("2" (inst -1 x!3)
                                  (("2" (lemma empty_0[posnat])
                                    (("2" (inst -1 x!3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (rewrite add_last_is_o)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (rewrite empty_0) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -2 -3 -4 1)
                (("3" (lemma add_last_delete[posnat])
                  (("3" (inst -1 x!3)
                    (("3" (lemma empty_0[posnat])
                      (("3" (inst -1 x!3)
                        (("3" (assert)
                          (("3"
                            (name-replace "dp" "delete(x!3, x!3`length - 1)"
                             :hide? nil)
                            (("3" (rewrite add_last_is_o)
                              (("3" (rewrite add_last_is_o)
                                (("3" (expand child)
                                  (("3" (skosimp)
                                    (("3" (case "dp = q!1")
                                      (("1"
                                        (inst 4 "#(last(x!3))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide-all-but -6)
                                              (("1"
                                                (expand* "#" empty_seq)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "length(q!1) < length(dp)")
                                        (("1"
                                          (lemma o_length_o[posnat])
                                          (("1"
                                            (inst
                                             -1
                                             q!1
                                             p1!1
                                             dp
                                             "#(1 + last(x!3))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (replace -1 -4)
                                                  (("1"
                                                    (inst
                                                     5
                                                     "seq!1 o  #(last(x!3))")
                                                    (("1"
                                                      (rewrite o_assoc)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but 5)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand*
                                                               "#"
                                                               o
                                                               empty_seq)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-3 -4 1 2 5))
                                          (("2"
                                            (replaces -2)
                                            (("2"
                                              (lemma o_equals_o[posnat])
                                              (("2"
                                                (inst
                                                 -1
                                                 q!1
                                                 p1!1
                                                 dp
                                                 "#(1 + last(x!3))")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 3)
                                                    (("2"
                                                      (lemma empty_0[posnat])
                                                      (("2"
                                                        (inst -1 p1!1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 4)
                                                            (("2"
                                                              (expand o)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide -2)
                                                                  (("2"
                                                                    (expand
                                                                     "#")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4"
                (name-replace "pi"
                 "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
                 :hide? nil)
                (("1"
                  (name-replace "dp" "delete(x!3, length(x!3) - 1)" :hide?
                   nil)
                  (("1" (inst -7 x!1 x!2 pi)
                    (("1" (inst -7 q!1)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (hide -4 -5 -6 -7 -8)
                            (("1" (lemma add_last_delete[posnat])
                              (("1" (inst -1 x!3)
                                (("1" (lemma empty_0[posnat])
                                  (("1" (inst -1 x!3)
                                    (("1" (assert)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (rewrite add_last_is_o)
                                          (("1"
                                            (rewrite add_last_is_o)
                                            (("1"
                                              (expand child)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (replace -2 -4)
                                                  (("1"
                                                    (case "dp = q!1")
                                                    (("1"
                                                      (inst 4 "#(last(x!3))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but 4)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand*
                                                               "#"
                                                               empty_seq)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "length(dp) > length(q!1)")
                                                      (("1"
                                                        (lemma
                                                         o_length_o[posnat])
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "q!1"
                                                           "p1!1"
                                                           "dp"
                                                           "#(1 + last(x!3))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -3)
                                                                (("1"
                                                                  (inst
                                                                   5
                                                                   "seq!1 o  #(last(x!3))")
                                                                  (("1"
                                                                    (rewrite
                                                                     o_assoc)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         5)
                                                                        (("1"
                                                                          (expand*
                                                                           "#"
                                                                           o
                                                                           empty_seq)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-4 1 2 4))
                                                        (("2"
                                                          (lemma
                                                           empty_0[posnat])
                                                          (("2"
                                                            (inst -1 p1!1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 o_equals_o[posnat])
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "q!1"
                                                                   "p1!1"
                                                                   "dp"
                                                                   "#(1 + last(x!3))")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       o)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "#")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lift-if)
                            (("2" (prop)
                              (("1" (hide-all-but (-1 -3))
                                (("1" (replace -2 -1 rl)
                                  (("1" (hide -2)
                                    (("1" (expand* add_last insert? empty_seq)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -7 4)
                                (("2" (lemma next_position_TCC17)
                                  (("2" (inst -1 x!1 x!2 x!3)
                                    (("2" (assert)
                                      (("2"
                                        (inst -1 dp)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (inst -1 pi)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 2))
                    (("2" (lemma empty_0[posnat])
                      (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 2))
                  (("2" (lemma empty_0[posnat])
                    (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("5"
                (name-replace "dp" "delete(x!3, length(x!3) - 1)" :hide? nil)
                (("1" (inst -4 x!1 x!2 dp)
                  (("1" (replace -2)
                    (("1" (inst -4 q!1)
                      (("1" (assert)
                        (("1" (lemma next_position_TCC19)
                          (("1" (inst -1 x!1 x!2 x!3)
                            (("1" (assert)
                              (("1" (inst -1 dp)
                                (("1" (assert)
                                  (("1" (replace -2)
                                    (("1"
                                      (inst -1 "add_last(dp, 1 + last(x!3))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (-2 -5 3 4))
                                          (("1"
                                            (lemma add_last_delete[posnat])
                                            (("1"
                                              (inst -1 x!3)
                                              (("1"
                                                (lemma empty_0[posnat])
                                                (("1"
                                                  (inst -1 x!3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (rewrite
                                                         add_last_is_o)
                                                        (("1"
                                                          (expand child)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replace -3 -1)
                                                              (("1"
                                                                (inst
                                                                 4
                                                                 "p1!1 o  #(last(x!3))")
                                                                (("1"
                                                                  (rewrite
                                                                   o_assoc)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       4)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand*
                                                                           "#"
                                                                           o
                                                                           empty_seq)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 4))
                  (("2" (lemma empty_0[posnat])
                    (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("6" (hide-all-but (-2 -5))
                (("6" (replace -1 -2 rl)
                  (("6" (hide -1)
                    (("6" (expand child)
                      (("6" (skosimp)
                        (("6" (lemma seq_empty[posnat])
                          (("6" (inst -1 q!1 p1!1)
                            (("6" (assert)
                              (("6" (flatten)
                                (("6" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but (1 2))
      (("2" (lemma next_position_TCC5)
        (("2" (inst -1 x!1 x!2 x!3) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (hide-all-but (-1 1)) (("3" (rewrite empty_0) nil nil)) nil)
     ("4" (hide-all-but (1 2))
      (("4" (lemma next_position_TCC3)
        (("4" (inst -1 x!1 x!2 x!3) (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (hide-all-but (1 2))
      (("5" (rewrite delete_is_position)
        (("5" (hide 3) (("5" (flatten) (("5" (rewrite empty_0) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (hide -1 3)
      (("6" (lemma empty_0[posnat])
        (("6" (inst -1 x!3) (("6" (assert) nil nil)) nil)) nil))
      nil)
     ("7" (hide -1 3)
      (("7" (lemma next_position_TCC5)
        (("7" (inst -1 y!1 y!2 y!3) (("7" (assert) nil nil)) nil)) nil))
      nil)
     ("8" (hide -2 2) (("8" (rewrite empty_0) nil nil)) nil)
     ("9" (hide -1 3)
      (("9" (lemma next_position_TCC3)
        (("9" (inst -1 y!1 y!2 y!3) (("9" (assert) nil nil)) nil)) nil))
      nil)
     ("10" (hide -1 3)
      (("10" (rewrite delete_is_position)
        (("10" (hide 3)
          (("10" (flatten) (("10" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("11" (hide -1 3)
      (("11" (lemma empty_0[posnat])
        (("11" (inst -1 y!3) (("11" (assert) nil nil)) nil)) nil))
      nil)
     ("12" (hide 3)
      (("12" (lemma next_position_TCC5)
        (("12" (inst -1 x!1 x!2 x!3) (("12" (assert) nil nil)) nil)) nil))
      nil)
     ("13" (hide 2) (("13" (rewrite empty_0) nil nil)) nil)
     ("14" (hide 3)
      (("14" (lemma next_position_TCC3)
        (("14" (inst -1 x!1 x!2 x!3) (("14" (assert) nil nil)) nil)) nil))
      nil)
     ("15" (hide 3)
      (("15" (rewrite delete_is_position)
        (("15" (hide 3)
          (("15" (flatten) (("15" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("16" (hide 3)
      (("16" (lemma empty_0[posnat])
        (("16" (inst -1 x!3) (("16" (assert) nil nil)) nil)) nil))
      nil)
     ("17" (hide 3)
      (("17" (lemma next_position_TCC5)
        (("17" (inst -1 y!1 y!2 y!3) (("17" (assert) nil nil)) nil)) nil))
      nil)
     ("18" (hide 2) (("18" (rewrite empty_0) nil nil)) nil)
     ("19" (hide 3)
      (("19" (lemma next_position_TCC3)
        (("19" (inst -1 y!1 y!2 y!3) (("19" (assert) nil nil)) nil)) nil))
      nil)
     ("20" (hide 3)
      (("20" (rewrite delete_is_position)
        (("20" (hide 3)
          (("20" (flatten) (("20" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("21" (hide 3)
      (("21" (lemma empty_0[posnat])
        (("21" (inst -1 y!3) (("21" (assert) nil nil)) nil)) nil))
      nil)
     ("22" (hide 3)
      (("22" (lemma next_position_TCC5)
        (("22" (inst?) (("22" (assert) nil nil)) nil)) nil))
      nil)
     ("23" (hide 2) (("23" (rewrite empty_0) nil nil)) nil)
     ("24" (hide 3)
      (("24" (lemma next_position_TCC3)
        (("24" (inst?) (("24" (assert) nil nil)) nil)) nil))
      nil)
     ("25" (hide 3)
      (("25" (rewrite delete_is_position)
        (("25" (hide 3)
          (("25" (flatten) (("25" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("26" (hide 3)
      (("26" (lemma empty_0[posnat])
        (("26" (inst?) (("26" (assert) nil nil)) nil)) nil))
      nil)
     ("27" (hide 3)
      (("27" (lemma next_position_TCC5)
        (("27" (inst?) (("27" (assert) nil nil)) nil)) nil))
      nil)
     ("28" (hide 2) (("28" (rewrite empty_0) nil nil)) nil)
     ("29" (hide 3)
      (("29" (lemma next_position_TCC3)
        (("29" (inst?) (("29" (assert) nil nil)) nil)) nil))
      nil)
     ("30" (hide 3)
      (("30" (rewrite delete_is_position)
        (("30" (hide 3)
          (("30" (flatten) (("30" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("31" (hide 3)
      (("31" (lemma empty_0[posnat])
        (("31" (inst?) (("31" (assert) nil nil)) nil)) nil))
      nil)
     ("32" (hide 3)
      (("32" (lemma next_position_TCC5)
        (("32" (inst?) (("32" (assert) nil nil)) nil)) nil))
      nil)
     ("33" (hide 2) (("33" (rewrite empty_0) nil nil)) nil)
     ("34" (hide 3)
      (("34" (lemma next_position_TCC3)
        (("34" (inst?) (("34" (assert) nil nil)) nil)) nil))
      nil)
     ("35" (hide 3)
      (("35" (rewrite delete_is_position)
        (("35" (hide 3)
          (("35" (flatten) (("35" (rewrite empty_0) nil nil)) nil)) nil))
        nil))
      nil)
     ("36" (hide 3)
      (("36" (lemma empty_0[posnat])
        (("36" (inst?) (("36" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((delete_is_position formula-decl nil positions nil)
    (next_position_TCC3 subtype-tcc nil robinsonunificationEF nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (x!3 skolem-const-decl
     "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}"
     robinsonunificationEF nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (add_last_is_o formula-decl nil seq_extras structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (o_length_o formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (insert? const-decl "finseq" seq_extras structures)
    (next_position_TCC17 termination-tcc nil robinsonunificationEF nil)
    (add_last const-decl "finseq" seq_extras structures)
    (next_position_TCC19 termination-tcc nil robinsonunificationEF nil)
    (child const-decl "bool" positions nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (delete const-decl "finseq" seq_extras structures)
    (< const-decl "bool" reals nil) (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (next_pos_empty_equal_subterm_TCC1 0
  (next_pos_empty_equal_subterm_TCC1-1 nil 3511709362
   ("" (skosimp*)
    (("" (hide -1)
      (("" (expand child)
        (("" (skosimp)
          (("" (lemma pos_subterm_ax)
            (("" (inst -1 p1!1 p1!2 s!1)
              (("" (assert)
                (("" (lemma not_var)
                  (("" (lemma seq_first_rest[posnat])
                    (("" (inst -1 p1!2)
                      (("" (lemma empty_0[posnat])
                        (("" (inst -1 p1!2)
                          (("" (assert)
                            ((""
                              (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                               "subtermOF(s!1, p1!1)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (not_var formula-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (child const-decl "bool" positions nil))
   nil
   (next_pos_empty_equal_subterm subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_pos_empty_equal_subterm_TCC2 0
  (next_pos_empty_equal_subterm_TCC2-1 nil 3511709362
   ("" (skosimp*)
    (("" (hide -1)
      (("" (expand child)
        (("" (skosimp)
          (("" (lemma pos_subterm_ax)
            (("" (inst -1 p1!1 p1!2 t!1)
              (("" (assert)
                (("" (lemma not_var)
                  (("" (lemma seq_first_rest[posnat])
                    (("" (inst -1 p1!2)
                      (("" (lemma empty_0[posnat])
                        (("" (inst -1 p1!2)
                          (("" (assert)
                            ((""
                              (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                               "subtermOF(t!1, p1!1)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (not_var formula-decl nil positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (child const-decl "bool" positions nil))
   nil
   (next_pos_empty_equal_subterm subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_pos_empty_equal_subterm 0
  (next_pos_empty_equal_subterm-2 nil 3513029724
   (""
    (measure-induct+ "lex2(length(p),
                          arity(f(subtermOF(s,
                                         delete(p,length(p) - 1)))) - last(p))"
     ("s" "t" "p"))
    (("1" (skosimp)
      (("1" (expand next_position -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide-all-but (-1 -3 1))
              (("1" (replaces -1)
                (("1" (inst -1 empty_seq)
                  (("1" (assert)
                    (("1" (hide 1)
                      (("1" (expand child)
                        (("1" (inst 1 x!3)
                          (("1" (assert) (("1" (rewrite empty_o_seq) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (split)
                      (("1" (expand positionsOF)
                        (("1" (lift-if)
                          (("1" (expand* only_empty_seq union member) nil
                            nil))
                          nil))
                        nil)
                       ("2" (expand positionsOF)
                        (("2" (lift-if)
                          (("2" (expand* only_empty_seq union member) nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but -1) (("2" (grind) nil nil)) nil)
             ("3"
              (name-replace "nx3"
               "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :hide?
               nil)
              (("1" (inst -6 x!1 x!2 nx3)
                (("1" (prop)
                  (("1" (case "q!1 = nx3")
                    (("1" (assert) nil nil)
                     ("2" (case "child(q!1, nx3)")
                      (("1" (hide-all-but (-1 -4 2))
                        (("1" (expand child)
                          (("1" (skosimp)
                            (("1" (replace -1 2)
                              (("1" (rewrite pos_subterm)
                                (("1" (rewrite pos_subterm)
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "left_without_children(nx3, q!1)")
                        (("1" (inst -2 q!1) (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but (-2 -8 1 2 3))
                          (("2" (lemma lwc_add_last_delete)
                            (("2" (inst -1 x!3 q!1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (inst -7 p1!1)
                      (("2" (assert)
                        (("2" (hide-all-but (-1 -2 2))
                          (("2" (expand child)
                            (("2" (skosimp)
                              (("2"
                                (inst 2
                                 "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)")
                                (("1" (split)
                                  (("1" (hide-all-but 1)
                                    (("1" (grind) nil nil)) nil)
                                   ("2" (replaces -1)
                                    (("2"
                                      (case
                                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = delete(x!3, length(x!3) - 1) o #(1 + last(x!3))")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1) = delete(p1!2, length(p1!2) - 1) o #(last(p1!2) - 1)")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma add_last_delete[posnat])
                                              (("1"
                                                (inst -1 x!3)
                                                (("1"
                                                  (lemma empty_0[posnat])
                                                  (("1"
                                                    (inst -1 x!3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         add_last_delete_is_o)
                                                        (("1"
                                                          (expand finseq_appl)
                                                          (("1"
                                                            (lemma
                                                             add_last_delete[posnat])
                                                            (("1"
                                                              (inst -1 p1!2)
                                                              (("1"
                                                                (lemma
                                                                 empty_0[posnat])
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   p1!2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       add_last_delete_is_o)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (rewrite
                                                                           o_assoc)
                                                                          (("1"
                                                                            (expand*
                                                                             last
                                                                             finseq_appl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -3)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   o_assoc)
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "pi1"
                                                                                     "delete(x!3, x!3`length - 1)"
                                                                                     :hide?
                                                                                     nil)
                                                                                    (("1"
                                                                                      (name-replace
                                                                                       "pi2"
                                                                                       "(p1!1 o delete(p1!2, p1!2`length - 1))"
                                                                                       :hide?
                                                                                       nil)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         o_equals_o[posnat])
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           pi1
                                                                                           "#(1 + x!3`seq(x!3`length - 1))"
                                                                                           pi2
                                                                                           "#(p1!2`seq(p1!2`length - 1))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "x!3`seq(x!3`length - 1) = p1!2`seq(p1!2`length - 1) - 1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   equal_prefix[posnat])
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     pi1
                                                                                                     "#(1 + x!3`seq(x!3`length - 1))"
                                                                                                     "#(p1!2`seq(p1!2`length - 1))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "#"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (decompose-equality
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             0)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   o)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "#")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 3))
                                            (("2"
                                              (lemma nth_add_last[posnat])
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (expand finseq_appl)
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1" (grind) nil nil))
                                                      nil)
                                                     ("2"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (typepred x!4)
                                                        (("1"
                                                          (inst -2 x!4)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replaces -2)
                                                              (("1"
                                                                (expand o)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "#")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (expand o)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (hide
                                                                       2
                                                                       4)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2 3)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (lemma
                                                           empty_0[posnat])
                                                          (("2"
                                                            (inst -1 p1!2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -1)
                                                      (("3"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("3"
                                                          (inst -1 p1!2)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma empty_0[posnat])
                                                    (("2"
                                                      (inst -1 p1!2)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (lemma empty_0[posnat])
                                                    (("3"
                                                      (inst -1 p1!2)
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but (1 3))
                                            (("3"
                                              (lemma empty_0[posnat])
                                              (("3"
                                                (inst -1 p1!2)
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide-all-but (1 3))
                                            (("4"
                                              (lemma empty_0[posnat])
                                              (("4"
                                                (inst -1 p1!2)
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (lemma nth_add_last[posnat])
                                          (("2"
                                            (expand finseq_appl)
                                            (("2"
                                              (decompose-equality 1)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (expand*
                                                   add_last
                                                   insert?
                                                   o
                                                   "#")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (typepred x!4)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replaces -2)
                                                          (("1"
                                                            (expand o)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "#")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand o)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1 1 3))
                                                                    (("2"
                                                                      (expand*
                                                                       add_last
                                                                       insert?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3 4)
                                                        (("2"
                                                          (expand*
                                                           add_last
                                                           insert?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("2"
                                                          (inst -1 x!3)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (lemma empty_0[posnat])
                                                    (("2"
                                                      (inst -1 x!3)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (lemma empty_0[posnat])
                                                  (("3"
                                                    (inst -1 x!3)
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (lemma empty_0[posnat])
                                          (("3"
                                            (inst -1 x!3)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lemma empty_0[posnat])
                                  (("2" (inst-cp -1 p1!2)
                                    (("2" (inst -1 x!3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "last(p1!2) = 1 + last(x!3)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (hide 4)
                                              (("2"
                                                (expand*
                                                 add_last
                                                 insert?
                                                 o
                                                 finseq_appl)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (decompose-equality -2)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "length(delete(x!3, length(x!3) - 1))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand last 1 1)
                                                          (("2"
                                                            (expand
                                                             finseq_appl)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (hide-all-but (1 2))
                                  (("3" (flatten)
                                    (("3" (rewrite empty_0) nil nil)) nil))
                                  nil)
                                 ("4" (hide-all-but (1 2))
                                  (("4" (lemma empty_0[posnat])
                                    (("4" (inst -1 p1!2)
                                      (("4" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -6 -7 2)
                    (("3" (lemma next_position_TCC17)
                      (("3" (inst -1 x!1 x!2 x!3)
                        (("3" (assert)
                          (("3" (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert)
                              (("1" (inst -1 nx3)
                                (("1" (assert)
                                  (("1" (lift-if)
                                    (("1" (prop)
                                      (("1"
                                        (hide-all-but (-1 -3))
                                        (("1"
                                          (replaces -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (lemma empty_0[posnat])
                                (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (prop)
                    (("1" (lemma next_position_TCC15)
                      (("1" (inst -1 x!1 x!2 x!3)
                        (("1" (assert)
                          (("1" (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert)
                              (("1" (inst -1 nx3) (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (lemma empty_0[posnat])
                                (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2))
                      (("2" (replaces -1) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma empty_0[posnat])
                  (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("4"
              (name-replace "px3" "delete(x!3, length(x!3) - 1)" :hide? nil)
              (("1" (inst -4 x!1 x!2 px3)
                (("1" (prop)
                  (("1" (case "left_without_children(px3, q!1)")
                    (("1" (inst -2 q!1) (("1" (assert) nil nil)) nil)
                     ("2" (hide -1 -3 -4 -5 4)
                      (("2"
                        (case "EXISTS (r : position): q!1 = px3 o r AND first(r) > last(x!3)")
                        (("1" (skosimp)
                          (("1" (case "r!1 = empty_seq")
                            (("1" (hide-all-but (-1 -2 -4 -5 2))
                              (("1" (replaces -1)
                                (("1" (rewrite seq_o_empty)
                                  (("1" (replaces -1)
                                    (("1" (expand left_without_children)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (lemma add_last_delete[posnat])
                                          (("1"
                                            (inst -1 x!3)
                                            (("1"
                                              (lemma empty_0[posnat])
                                              (("1"
                                                (inst -1 x!3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     add_last_delete_is_o)
                                                    (("1"
                                                      (expand finseq_appl)
                                                      (("1"
                                                        (replace -2 -1)
                                                        (("1"
                                                          (replace -1 -4)
                                                          (("1"
                                                            (replace -3 -4)
                                                            (("1"
                                                              (lemma
                                                               equal_prefix[posnat])
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 r!2
                                                                 "q1!1 o  #(x!3`seq(x!3`length - 1))"
                                                                 p1!1)
                                                                (("1"
                                                                  (rewrite
                                                                   o_assoc)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5)
                                                                      (("1"
                                                                        (expand*
                                                                         first
                                                                         o
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -1)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -2)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               0)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      4))
                                                                                    (("2"
                                                                                      (lemma
                                                                                       empty_0[posnat])
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         q1!1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "#")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma seq_first_rest_1[posnat])
                              (("2" (inst -1 r!1)
                                (("2" (lemma empty_0[posnat])
                                  (("2" (inst -1 r!1)
                                    (("2" (assert)
                                      (("2"
                                        (replace -1 -2)
                                        (("2"
                                          (rewrite o_assoc)
                                          (("2"
                                            (name-replace
                                             "q!2"
                                             "px3 o  #(first(r!1))"
                                             :hide?
                                             nil)
                                            (("2"
                                              (lemma pos_ax)
                                              (("2"
                                                (inst -1 q!2 "rest(r!1)" x!1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -3 -4 -6 -7 3)
                                                    (("2"
                                                      (case
                                                       "add_last(px3, 1 + last(x!3)) = px3 o #(1 + last(x!3))")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (lemma
                                                           pos_subterm_ax)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             px3
                                                             "#(first(r!1))"
                                                             x!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide -2)
                                                                (("1"
                                                                  (lemma
                                                                   pos_o_term)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "px3"
                                                                     "#(1 + last(x!3))"
                                                                     "x!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("1"
                                                                            (reveal
                                                                             -10)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite
                                                                                 delete_is_position)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     empty_0)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           5)
                                                                          (("2"
                                                                            (lemma
                                                                             subterms_acc_arity)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "first(r!1)"
                                                                               "1 + last(x!3)"
                                                                               "subtermOF(x!1, px3)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide - 2 3 5)
                                                        (("2"
                                                          (expand o)
                                                          (("2"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand*
                                                               add_last
                                                               insert?
                                                               "#"
                                                               finseq_appl)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 nth_add_last[posnat])
                                                                (("1"
                                                                  (expand
                                                                   finseq_appl)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         px3
                                                                         "1 + last(x!3)"
                                                                         x!4)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         px3
                                                                         "1 + last(x!3)"
                                                                         x!4)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (replaces
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand*
                                                                                   last
                                                                                   finseq_appl
                                                                                   "#")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             x!4)
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               3
                                                                               4)
                                                                              (("2"
                                                                                (expand*
                                                                                 add_last
                                                                                 insert?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           x!4)
                                                                          (("2"
                                                                            (hide
                                                                             3
                                                                             4)
                                                                            (("2"
                                                                              (expand*
                                                                               add_last
                                                                               insert?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (expand*
                                                                   add_last
                                                                   insert?
                                                                   last
                                                                   "#"
                                                                   finseq_appl)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skosimp)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (expand left_without_children)
                            (("2" (skosimp)
                              (("2" (case "length(r!1) = length(px3)")
                                (("1" (lemma add_last_delete[posnat])
                                  (("1" (inst -1 x!3)
                                    (("1" (lemma empty_0[posnat])
                                      (("1"
                                        (inst -1 x!3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite add_last_delete_is_o)
                                            (("1"
                                              (replace -3 -1)
                                              (("1"
                                                (expand finseq_appl)
                                                (("1"
                                                  (replace -1 -5)
                                                  (("1"
                                                    (lemma o_equals_o[posnat])
                                                    (("1"
                                                      (inst
                                                       -1
                                                       px3
                                                       "#(x!3`seq(x!3`length - 1))"
                                                       r!1
                                                       p1!1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst 2 q1!1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "last(x!3) = first(p1!1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -4
                                                                  -6
                                                                  1
                                                                  2
                                                                  5
                                                                  7))
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     -2
                                                                     rl)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (expand*
                                                                         o
                                                                         last
                                                                         first
                                                                         delete
                                                                         "#"
                                                                         finseq_appl)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (decompose-equality
                                                                             -2)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!3`length - 1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1
                                                                                 2
                                                                                 4
                                                                                 5)
                                                                                (("2"
                                                                                  (expand*
                                                                                   "#"
                                                                                   delete)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("2"
                                                                                (expand*
                                                                                 "#"
                                                                                 delete)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (typepred
                                                                                 x!4)
                                                                                (("3"
                                                                                  (expand*
                                                                                   "#"
                                                                                   delete)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lemma add_last_delete[posnat])
                                  (("2" (inst -1 x!3)
                                    (("2" (lemma empty_0[posnat])
                                      (("2"
                                        (inst -1 x!3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite add_last_delete_is_o)
                                            (("2"
                                              (expand finseq_appl)
                                              (("2"
                                                (replace -2 -1)
                                                (("2"
                                                  (replace -1 -4)
                                                  (("2"
                                                    (case
                                                     "length(r!1) > length(px3)")
                                                    (("1"
                                                      (lemma
                                                       o_length_o[posnat])
                                                      (("1"
                                                        (inst
                                                         -1
                                                         px3
                                                         "#(x!3`seq(x!3`length - 1))"
                                                         r!1
                                                         p1!1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (replace -1 -5)
                                                              (("1"
                                                                (inst
                                                                 3
                                                                 "seq!1 o q1!1")
                                                                (("1"
                                                                  (rewrite
                                                                   o_assoc)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "seq!1 = empty_seq")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (rewrite
                                                                           seq_o_empty)
                                                                          (("1"
                                                                            (lemma
                                                                             o_equals_o[posnat])
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               px3
                                                                               "#(x!3`seq(x!3`length - 1))"
                                                                               r!1
                                                                               p1!1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           seq!1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               first_compo)
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 -6)
                                                                                (("2"
                                                                                  (lemma
                                                                                   equal_prefix[posnat])
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     px3
                                                                                     "#(x!3`seq(x!3`length - 1))"
                                                                                     "seq!1 o p1!1")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       o_assoc)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            1
                                                                                            9))
                                                                                          (("2"
                                                                                            (expand*
                                                                                             "#"
                                                                                             o)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   empty_0[posnat])
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     p1!1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       o_length_o[posnat])
                                                      (("2"
                                                        (inst
                                                         -1
                                                         r!1
                                                         p1!1
                                                         px3
                                                         "#(x!3`seq(x!3`length - 1))")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (case
                                                               "seq!1 = empty_seq")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1 -2 3))
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     seq_o_empty)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1
                                                                 -5)
                                                                (("2"
                                                                  (lemma
                                                                   equal_prefix[posnat])
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     r!1
                                                                     "seq!1 o  #(x!3`seq(x!3`length - 1))"
                                                                     p1!1)
                                                                    (("2"
                                                                      (rewrite
                                                                       o_assoc)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           6
                                                                           r!1
                                                                           seq!1
                                                                           q1!1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -7
                                                                                1
                                                                                6))
                                                                              (("2"
                                                                                (case
                                                                                 "first(seq!1) = first(p1!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1
                                                                                    2))
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       first_compo)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         2)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             empty_0)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp)
                          (("3" (lemma empty_0[posnat])
                            (("3" (inst -1 r!1)
                              (("3" (assert)
                                (("3" (replace -1 -2)
                                  (("3" (rewrite seq_o_empty)
                                    (("3" (hide -1 -3 1 3)
                                      (("3"
                                        (replaces -1)
                                        (("3"
                                          (expand left_without_children)
                                          (("3"
                                            (skosimp)
                                            (("3"
                                              (lemma add_last_delete[posnat])
                                              (("3"
                                                (inst -1 x!3)
                                                (("3"
                                                  (lemma empty_0[posnat])
                                                  (("3"
                                                    (inst -1 x!3)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         add_last_delete_is_o)
                                                        (("3"
                                                          (expand finseq_appl)
                                                          (("3"
                                                            (replace -2 -1)
                                                            (("3"
                                                              (replace -1 -4)
                                                              (("3"
                                                                (replace
                                                                 -3
                                                                 -4)
                                                                (("3"
                                                                  (lemma
                                                                   equal_prefix[posnat])
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     r!2
                                                                     "q1!1 o  #(x!3`seq(x!3`length - 1))"
                                                                     p1!1)
                                                                    (("3"
                                                                      (rewrite
                                                                       o_assoc)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (replace
                                                                           -1
                                                                           -6
                                                                           rl)
                                                                          (("3"
                                                                            (hide-all-but
                                                                             (-6
                                                                              3))
                                                                            (("3"
                                                                              (rewrite
                                                                               first_compo)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     empty_0)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (inst -5 p1!1)
                      (("2" (assert)
                        (("2" (hide-all-but (-1 -2 4))
                          (("2" (expand child)
                            (("2" (skosimp)
                              (("2" (inst 2 "add_last(p1!2, last(x!3))")
                                (("1" (prop)
                                  (("1" (hide-all-but -1)
                                    (("1" (grind) nil nil)) nil)
                                   ("2" (replaces -1)
                                    (("2" (lemma empty_0[posnat])
                                      (("2"
                                        (inst-cp -1 x!3)
                                        (("2"
                                          (inst -1 p1!2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand*
                                               delete
                                               o
                                               add_last
                                               insert?
                                               finseq_appl)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (decompose-equality -2)
                                                  (("2"
                                                    (decompose-equality 3)
                                                    (("1"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst -2 x!4)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst -2 x!4)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide -1)
                                                            (("3"
                                                              (typepred x!4)
                                                              (("3"
                                                                (expand*
                                                                 last
                                                                 finseq_appl)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand*
                                                             add_last
                                                             insert?
                                                             finseq_appl)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand*
                                                           add_last
                                                           insert?
                                                           finseq_appl)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide - 2)
                                  (("2" (flatten)
                                    (("2" (rewrite empty_0) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -4 -5 4)
                    (("3" (lemma next_position_TCC19)
                      (("3" (inst -1 x!1 x!2 x!3)
                        (("3" (assert)
                          (("3" (inst -1 px3)
                            (("3" (assert)
                              (("3" (inst -1 "add_last(px3, 1 + last(x!3))")
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1 1 rl)
                    (("2" (rewrite delete_is_position)
                      (("1" (rewrite delete_is_position)
                        (("1" (hide-all-but 1)
                          (("1" (lemma empty_0[posnat])
                            (("1" (inst -1 x!3) (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma empty_0[posnat])
                  (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("5" (hide -2 -3 -4 2)
              (("5"
                (name-replace "px3" "delete(x!3, length(x!3) - 1)" :hide? nil)
                (("1" (typepred q!1)
                  (("1" (hide -2)
                    (("1" (expand left_without_children)
                      (("1" (skosimp)
                        (("1" (lemma add_last_delete[posnat])
                          (("1" (inst -1 x!3)
                            (("1" (lemma empty_0[posnat])
                              (("1" (inst -1 x!3)
                                (("1" (assert)
                                  (("1" (rewrite add_last_delete_is_o)
                                    (("1" (expand finseq_appl)
                                      (("1"
                                        (replace -3 -1)
                                        (("1"
                                          (replace -1 -6)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (rewrite empty_o_seq)
                                              (("1"
                                                (copy -6)
                                                (("1"
                                                  (expand "#" -1)
                                                  (("1"
                                                    (expand o -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (lemma
                                                           empty_0[posnat])
                                                          (("1"
                                                            (inst -1 p1!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "p1!1`length = 1 AND r!1`length = 0")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     empty_0[posnat])
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       r!1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           (-9
                                                                            -10))
                                                                          (("1"
                                                                            (rewrite
                                                                             empty_o_seq)
                                                                            (("1"
                                                                              (rewrite
                                                                               empty_o_seq)
                                                                              (("1"
                                                                                (replace
                                                                                 -9
                                                                                 -11
                                                                                 rl)
                                                                                (("1"
                                                                                  (lemma
                                                                                   seq_first_rest_1[posnat])
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     q!1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       empty_0[posnat])
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         q!1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             pos_ax)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "#(first(q!1))"
                                                                                               "rest(q!1)"
                                                                                               x!1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "add_last(empty_seq, 1 + last(x!3)) = #(1 + last(x!3))")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "first(p1!1) = last(x!3)")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         4
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-2
                                                                                                            -14
                                                                                                            4))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             subterms_acc_arity)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "first(q!1)"
                                                                                                               "1 + first(p1!1)"
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-12
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand*
                                                                                                               first
                                                                                                               last
                                                                                                               "#"
                                                                                                               finseq_appl)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand*
                                                                                                       add_last
                                                                                                       insert?
                                                                                                       "#")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred x!3)
                  (("2" (hide-all-but (-3 1))
                    (("2" (lemma empty_0[posnat])
                      (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (skosimp)
        (("2" (expand child)
          (("2" (skosimp)
            (("2" (lemma pos_subterm_ax)
              (("2" (inst -1 "p1!1" "p1!2" "y!2")
                (("2" (assert)
                  (("2" (lemma not_var)
                    (("2" (lemma seq_first_rest[posnat])
                      (("2" (inst -1 p1!2)
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 p1!2)
                            (("2" (assert)
                              (("2"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skosimp)
        (("3" (lemma app_term)
          (("3" (inst -1 y!3 p1!1 y!1) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma next_position_TCC5)
        (("4" (inst -1 x!1 x!2 x!3) (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (hide 1) (("5" (rewrite empty_0) nil nil)) nil)
     ("6" (hide 2)
      (("6" (rewrite subterm_is_app)
        (("6" (flatten) (("6" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite delete_is_position)
        (("7" (flatten) (("7" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma empty_0[posnat])
        (("8" (inst -1 x!3) (("8" (assert) nil nil)) nil)) nil))
      nil)
     ("9" (hide 2)
      (("9" (lemma next_position_TCC5)
        (("9" (inst -1 y!1 y!2 y!3) (("9" (assert) nil nil)) nil)) nil))
      nil)
     ("10" (hide 1) (("10" (rewrite empty_0) nil nil)) nil)
     ("11" (hide 2)
      (("11" (rewrite subterm_is_app)
        (("11" (flatten) (("11" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("12" (hide 2)
      (("12" (rewrite delete_is_position)
        (("12" (flatten) (("12" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("13" (hide 2)
      (("13" (lemma empty_0[posnat])
        (("13" (inst -1 y!3) (("13" (assert) nil nil)) nil)) nil))
      nil)
     ("14" (hide-all-but 1)
      (("14" (skosimp)
        (("14" (expand child)
          (("14" (skosimp)
            (("14" (lemma pos_subterm_ax)
              (("14" (inst?)
                (("14" (inst?)
                  (("14" (assert)
                    (("14" (lemma seq_first_rest[posnat])
                      (("14" (inst -1 p1!1)
                        (("14" (lemma empty_0[posnat])
                          (("14" (inst -1 p1!1)
                            (("14" (assert)
                              (("14" (lemma not_var)
                                (("14" (inst?)
                                  (("14" (inst?) (("14" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide-all-but 1)
      (("15" (skosimp)
        (("15" (expand child)
          (("15" (skosimp)
            (("15" (lemma pos_subterm_ax)
              (("15" (inst?)
                (("15" (inst?)
                  (("15" (assert)
                    (("15" (lemma seq_first_rest[posnat])
                      (("15" (inst -1 p1!1)
                        (("15" (lemma empty_0[posnat])
                          (("15" (inst -1 p1!1)
                            (("15" (assert)
                              (("15" (lemma not_var)
                                (("15" (inst?)
                                  (("15" (inst?) (("15" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (hide-all-but 1)
      (("16" (skosimp)
        (("16" (expand child)
          (("16" (skosimp)
            (("16" (lemma pos_subterm_ax)
              (("16" (inst?)
                (("16" (inst?)
                  (("16" (assert)
                    (("16" (lemma seq_first_rest[posnat])
                      (("16" (inst -1 p1!2)
                        (("16" (lemma empty_0[posnat])
                          (("16" (inst -1 p1!2)
                            (("16" (assert)
                              (("16" (lemma not_var)
                                (("16" (inst?)
                                  (("16" (inst?) (("16" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide-all-but 1)
      (("17" (skosimp)
        (("17" (expand child)
          (("17" (skosimp)
            (("17" (lemma pos_subterm_ax)
              (("17" (inst?)
                (("17" (inst?)
                  (("17" (assert)
                    (("17" (lemma seq_first_rest[posnat])
                      (("17" (inst -1 p1!2)
                        (("17" (lemma empty_0[posnat])
                          (("17" (inst -1 p1!2)
                            (("17" (assert)
                              (("17" (lemma not_var)
                                (("17" (inst?)
                                  (("17" (inst?) (("17" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma next_position_TCC5)
        (("18" (inst?)
          (("18" (inst?) (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("19" (hide 1) (("19" (rewrite empty_0) (("19" (assert) nil nil)) nil))
      nil)
     ("20" (hide 2)
      (("20" (rewrite subterm_is_app)
        (("20" (flatten) (("20" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("21" (hide 2)
      (("21" (rewrite delete_is_position)
        (("21" (flatten) (("21" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("22" (hide 2)
      (("22" (lemma empty_0[posnat])
        (("22" (inst?) (("22" (assert) nil nil)) nil)) nil))
      nil)
     ("23" (hide 2)
      (("23" (lemma next_position_TCC5)
        (("23" (inst?)
          (("23" (inst?) (("23" (inst?) (("23" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("24" (hide 1) (("24" (rewrite empty_0) (("24" (assert) nil nil)) nil))
      nil)
     ("25" (hide 2)
      (("25" (rewrite subterm_is_app)
        (("25" (flatten) (("25" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("26" (hide 2)
      (("26" (rewrite delete_is_position)
        (("26" (flatten) (("26" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("27" (hide 2)
      (("27" (lemma empty_0[posnat])
        (("27" (inst?) (("27" (assert) nil nil)) nil)) nil))
      nil)
     ("28" (hide -1 2)
      (("28" (skosimp)
        (("28" (expand child)
          (("28" (skosimp)
            (("28" (lemma pos_subterm_ax)
              (("28" (inst -1 p1!1 p1!2 t!1)
                (("28" (assert)
                  (("28" (lemma seq_first_rest[posnat])
                    (("28" (inst -1 p1!2)
                      (("28" (lemma empty_0[posnat])
                        (("28" (inst -1 p1!2)
                          (("28" (assert)
                            (("28" (lemma not_var)
                              (("28"
                                (inst -1 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("28" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("29" (hide -1 2)
      (("29" (skosimp)
        (("29" (expand child)
          (("29" (skosimp)
            (("29" (lemma pos_subterm_ax)
              (("29" (inst -1 p1!1 p1!2 s!1)
                (("29" (assert)
                  (("29" (lemma seq_first_rest[posnat])
                    (("29" (inst -1 p1!2)
                      (("29" (lemma empty_0[posnat])
                        (("29" (inst -1 p1!2)
                          (("29" (assert)
                            (("29" (lemma not_var)
                              (("29"
                                (inst -1 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("29" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("30" (hide 2)
      (("30" (lemma next_position_TCC5)
        (("30" (inst -1 s!1 t!1 p!1) (("30" (assert) nil nil)) nil)) nil))
      nil)
     ("31" (hide 1) (("31" (rewrite empty_0) nil nil)) nil)
     ("32" (hide 2)
      (("32" (rewrite subterm_is_app)
        (("32" (flatten) (("32" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("33" (hide 2)
      (("33" (rewrite delete_is_position)
        (("33" (flatten) (("33" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("34" (hide 2)
      (("34" (lemma empty_0[posnat])
        (("34" (inst -1 p!1) (("34" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((subterm_is_app formula-decl nil subterm nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (app_term formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (not_var formula-decl nil positions nil)
    (o_length_o formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (pos_ax formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subterms_acc_arity formula-decl nil positions nil)
    (delete_is_position formula-decl nil positions nil)
    (x!4 skolem-const-decl "below[add_last(px3, 1 + last(x!3))`length]"
     robinsonunificationEF nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (q1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (first const-decl "T" seq_extras structures)
    (x!4 skolem-const-decl "below[x!3`length]" robinsonunificationEF nil)
    (p1!1 skolem-const-decl
     "{p1: position | positionsOF(x!1)(p1) AND positionsOF(x!2)(p1)}"
     robinsonunificationEF nil)
    (p1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (next_position_TCC19 termination-tcc nil robinsonunificationEF nil)
    (px3 skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (next_position_TCC15 subtype-tcc nil robinsonunificationEF nil)
    (pos_subterm formula-decl nil subterm nil)
    (lwc_add_last_delete formula-decl nil positions nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (O const-decl "finseq" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (add_last_delete formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (add_last_delete_is_o formula-decl nil seq_extras structures)
    (nth_add_last formula-decl nil seq_extras structures)
    (x!4 skolem-const-decl
     "below[add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)`length]"
     robinsonunificationEF nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x!3 skolem-const-decl "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}"
     robinsonunificationEF nil)
    (x!4 skolem-const-decl
     "below[add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))`length]"
     robinsonunificationEF nil)
    (p1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_position_TCC17 termination-tcc nil robinsonunificationEF nil)
    (nx3 skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (add_last const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (TRUE const-decl "bool" booleans nil)
    (left_without_children const-decl "bool" positions nil)
    (child const-decl "bool" positions nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (< const-decl "bool" reals nil) (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)
  (next_pos_empty_equal_subterm-1 nil 3511874617
   (""
    (measure-induct+ "lex2(length(p),
                      arity(f(subtermOF(s,
                                     delete(p,length(p) - 1)))) - last(p))"
     ("s" "t" "p"))
    (("1" (skosimp)
      (("1" (expand next_position -2)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide-all-but (-1 -3 1))
              (("1" (replaces -1)
                (("1" (inst -1 empty_seq)
                  (("1" (assert)
                    (("1" (hide 1)
                      (("1" (expand child)
                        (("1" (inst 1 x!3)
                          (("1" (assert) (("1" (rewrite empty_o_seq) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (split)
                      (("1" (expand positionsOF)
                        (("1" (lift-if)
                          (("1" (expand* only_empty_seq union member) nil
                            nil))
                          nil))
                        nil)
                       ("2" (expand positionsOF)
                        (("2" (lift-if)
                          (("2" (expand* only_empty_seq union member) nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but -1) (("2" (grind) nil nil)) nil)
             ("3"
              (name-replace "nx3"
               "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))" :hide?
               nil)
              (("1" (inst -6 x!1 x!2 nx3)
                (("1" (prop)
                  (("1" (case "q!1 = nx3")
                    (("1" (assert) nil nil)
                     ("2" (case "child(q!1, nx3)")
                      (("1" (hide-all-but (-1 -4 2))
                        (("1" (expand child)
                          (("1" (skosimp)
                            (("1" (replace -1 2)
                              (("1" (rewrite pos_subterm)
                                (("1" (rewrite pos_subterm)
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "left_without_children(nx3, q!1)")
                        (("1" (inst -2 q!1) (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but (-2 -8 1 2 3))
                          (("2" (lemma lwc_add_last_delete)
                            (("2" (inst -1 x!3 q!1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (inst -7 p1!1)
                      (("2" (assert)
                        (("2" (hide-all-but (-1 -2 2))
                          (("2" (expand child)
                            (("2" (skosimp)
                              (("2"
                                (inst 2
                                 "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1)")
                                (("1" (split)
                                  (("1" (hide-all-but 1)
                                    (("1" (grind) nil nil)) nil)
                                   ("2" (replaces -1)
                                    (("2"
                                      (case
                                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3)) = delete(x!3, length(x!3) - 1) o #(1 + last(x!3))")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "add_last(delete(p1!2, length(p1!2) - 1), last(p1!2) - 1) = delete(p1!2, length(p1!2) - 1) o #(last(p1!2) - 1)")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma add_last_delete[posnat])
                                              (("1"
                                                (inst -1 x!3)
                                                (("1"
                                                  (lemma empty_0[posnat])
                                                  (("1"
                                                    (inst -1 x!3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         add_last_delete_is_o)
                                                        (("1"
                                                          (expand finseq_appl)
                                                          (("1"
                                                            (lemma
                                                             add_last_delete[posnat])
                                                            (("1"
                                                              (inst -1 p1!2)
                                                              (("1"
                                                                (lemma
                                                                 empty_0[posnat])
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   p1!2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       add_last_delete_is_o)
                                                                      (("1"
                                                                        (expand
                                                                         finseq_appl)
                                                                        (("1"
                                                                          (rewrite
                                                                           o_assoc)
                                                                          (("1"
                                                                            (expand*
                                                                             last
                                                                             finseq_appl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -3)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   o_assoc)
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "pi1"
                                                                                     "delete(x!3, x!3`length - 1)"
                                                                                     :hide?
                                                                                     nil)
                                                                                    (("1"
                                                                                      (name-replace
                                                                                       "pi2"
                                                                                       "(p1!1 o delete(p1!2, p1!2`length - 1))"
                                                                                       :hide?
                                                                                       nil)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         o_equals_o[posnat])
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           pi1
                                                                                           "#(1 + x!3`seq(x!3`length - 1))"
                                                                                           pi2
                                                                                           "#(p1!2`seq(p1!2`length - 1))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "x!3`seq(x!3`length - 1) = p1!2`seq(p1!2`length - 1) - 1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   equal_prefix[posnat])
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     pi1
                                                                                                     "#(1 + x!3`seq(x!3`length - 1))"
                                                                                                     "#(p1!2`seq(p1!2`length - 1))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "#"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (decompose-equality
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             0)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   o)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "#")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 3))
                                            (("2"
                                              (lemma nth_add_last[posnat])
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (expand finseq_appl)
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1" (grind) nil nil))
                                                      nil)
                                                     ("2"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (typepred x!4)
                                                        (("1"
                                                          (inst -2 x!4)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replaces -2)
                                                              (("1"
                                                                (expand o)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "#")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (expand o)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (hide
                                                                       2
                                                                       4)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2 3)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (lemma
                                                           empty_0[posnat])
                                                          (("2"
                                                            (inst -1 p1!2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -1)
                                                      (("3"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("3"
                                                          (inst -1 p1!2)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma empty_0[posnat])
                                                    (("2"
                                                      (inst -1 p1!2)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (lemma empty_0[posnat])
                                                    (("3"
                                                      (inst -1 p1!2)
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but (1 3))
                                            (("3"
                                              (lemma empty_0[posnat])
                                              (("3"
                                                (inst -1 p1!2)
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide-all-but (1 3))
                                            (("4"
                                              (lemma empty_0[posnat])
                                              (("4"
                                                (inst -1 p1!2)
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (lemma nth_add_last[posnat])
                                          (("2"
                                            (expand finseq_appl)
                                            (("2"
                                              (decompose-equality 1)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (typepred x!4)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replaces -2)
                                                          (("1"
                                                            (expand o)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "#")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand o)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1 1 3))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3 4)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (lemma
                                                         empty_0[posnat])
                                                        (("2"
                                                          (inst -1 x!3)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 3))
                                                  (("2"
                                                    (lemma empty_0[posnat])
                                                    (("2"
                                                      (inst -1 x!3)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (lemma empty_0[posnat])
                                                  (("3"
                                                    (inst -1 x!3)
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (lemma empty_0[posnat])
                                          (("3"
                                            (inst -1 x!3)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lemma empty_0[posnat])
                                  (("2" (inst-cp -1 p1!2)
                                    (("2" (inst -1 x!3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "last(p1!2) = 1 + last(x!3)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (hide 4)
                                              (("2"
                                                (expand*
                                                 add_last
                                                 insert?
                                                 o
                                                 finseq_appl)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (decompose-equality -2)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "length(delete(x!3, length(x!3) - 1))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand last 1 1)
                                                          (("2"
                                                            (expand
                                                             finseq_appl)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (hide-all-but (1 2))
                                  (("3" (flatten)
                                    (("3" (rewrite empty_0) nil nil)) nil))
                                  nil)
                                 ("4" (hide-all-but (1 2))
                                  (("4" (lemma empty_0[posnat])
                                    (("4" (inst -1 p1!2)
                                      (("4" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -6 -7 2)
                    (("3" (lemma next_position_TCC17)
                      (("3" (inst -1 x!1 x!2 x!3)
                        (("3" (assert)
                          (("3" (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert)
                              (("1" (inst -1 nx3)
                                (("1" (assert)
                                  (("1" (lift-if)
                                    (("1" (prop)
                                      (("1"
                                        (hide-all-but (-1 -3))
                                        (("1"
                                          (replaces -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (lemma empty_0[posnat])
                                (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (prop)
                    (("1" (lemma next_position_TCC15)
                      (("1" (inst -1 x!1 x!2 x!3)
                        (("1" (assert)
                          (("1" (inst -1 "delete(x!3, length(x!3) - 1)")
                            (("1" (assert)
                              (("1" (inst -1 nx3) (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (lemma empty_0[posnat])
                                (("2" (inst -1 x!3) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2))
                      (("2" (replaces -1) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma empty_0[posnat])
                  (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("4"
              (name-replace "px3" "delete(x!3, length(x!3) - 1)" :hide? nil)
              (("1" (inst -4 x!1 x!2 px3)
                (("1" (prop)
                  (("1" (hide-all-but (-2 -6 2))
                    (("1" (typepred x!3 q!1)
                      (("1" (hide -2 -5)
                        (("1" (flatten)
                          (("1" (lemma lwc_more_left_not_pos)
                            (("1" (inst -1 x!3 q!1 x!1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (inst -5 p1!1)
                      (("2" (assert)
                        (("2" (hide-all-but (-1 -2 4))
                          (("2" (expand child)
                            (("2" (skosimp)
                              (("2" (inst 2 "add_last(p1!2, last(x!3))")
                                (("1" (prop)
                                  (("1" (hide-all-but -1)
                                    (("1" (grind) nil nil)) nil)
                                   ("2" (replaces -1)
                                    (("2" (lemma empty_0[posnat])
                                      (("2"
                                        (inst-cp -1 x!3)
                                        (("2"
                                          (inst -1 p1!2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand*
                                               delete
                                               o
                                               add_last
                                               insert?
                                               finseq_appl)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (decompose-equality -2)
                                                  (("2"
                                                    (decompose-equality 3)
                                                    (("1"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst -2 x!4)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst -2 x!4)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide -1)
                                                            (("3"
                                                              (typepred x!4)
                                                              (("3"
                                                                (expand*
                                                                 last
                                                                 finseq_appl)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand*
                                                             add_last
                                                             insert?
                                                             finseq_appl)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand*
                                                           add_last
                                                           insert?
                                                           finseq_appl)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide - 2)
                                  (("2" (flatten)
                                    (("2" (rewrite empty_0) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -4 -5 4)
                    (("3" (lemma next_position_TCC19)
                      (("3" (inst -1 x!1 x!2 x!3)
                        (("3" (assert)
                          (("3" (inst -1 px3)
                            (("3" (assert)
                              (("3" (inst -1 "add_last(px3, 1 + last(x!3))")
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1 1 rl)
                    (("2" (rewrite delete_is_position)
                      (("1" (rewrite delete_is_position)
                        (("1" (hide-all-but 1)
                          (("1" (lemma empty_0[posnat])
                            (("1" (inst -1 x!3) (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma empty_0[posnat])
                  (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("5" (hide-all-but (-5 1))
              (("5" (typepred x!3 q!1)
                (("5" (hide -2 -5)
                  (("5" (flatten)
                    (("5" (lemma lwc_more_left_not_pos)
                      (("5" (inst -1 x!3 q!1 x!1) (("5" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (skosimp)
        (("2" (expand child)
          (("2" (skosimp)
            (("2" (lemma pos_subterm_ax)
              (("2" (inst -1 "p1!1" "p1!2" "y!2")
                (("2" (assert)
                  (("2" (lemma not_var)
                    (("2" (lemma seq_first_rest[posnat])
                      (("2" (inst -1 p1!2)
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 p1!2)
                            (("2" (assert)
                              (("2"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skosimp)
        (("3" (expand child)
          (("3" (skosimp)
            (("3" (lemma pos_subterm_ax)
              (("3" (inst -1 "p1!1" "p1!2" "y!1")
                (("3" (assert)
                  (("3" (lemma not_var)
                    (("3" (lemma seq_first_rest[posnat])
                      (("3" (inst -1 p1!2)
                        (("3" (lemma empty_0[posnat])
                          (("3" (inst -1 p1!2)
                            (("3" (assert)
                              (("3"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma next_position_TCC5)
        (("4" (inst -1 x!1 x!2 x!3) (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (hide 1) (("5" (rewrite empty_0) nil nil)) nil)
     ("6" (hide 2)
      (("6" (rewrite subterm_is_app)
        (("6" (flatten) (("6" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite delete_is_position)
        (("7" (flatten) (("7" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma empty_0[posnat])
        (("8" (inst -1 x!3) (("8" (assert) nil nil)) nil)) nil))
      nil)
     ("9" (hide 2)
      (("9" (lemma next_position_TCC5)
        (("9" (inst -1 y!1 y!2 y!3) (("9" (assert) nil nil)) nil)) nil))
      nil)
     ("10" (hide 1) (("10" (rewrite empty_0) nil nil)) nil)
     ("11" (hide 2)
      (("11" (rewrite subterm_is_app)
        (("11" (flatten) (("11" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("12" (hide 2)
      (("12" (rewrite delete_is_position)
        (("12" (flatten) (("12" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("13" (hide 2)
      (("13" (lemma empty_0[posnat])
        (("13" (inst -1 y!3) (("13" (assert) nil nil)) nil)) nil))
      nil)
     ("14" (hide-all-but 1)
      (("14" (skosimp)
        (("14" (expand child)
          (("14" (skosimp)
            (("14" (lemma pos_subterm_ax)
              (("14" (inst?)
                (("14" (inst?)
                  (("14" (assert)
                    (("14" (lemma seq_first_rest[posnat])
                      (("14" (inst -1 p1!1)
                        (("14" (lemma empty_0[posnat])
                          (("14" (inst -1 p1!1)
                            (("14" (assert)
                              (("14" (lemma not_var)
                                (("14" (inst?)
                                  (("14" (inst?) (("14" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide-all-but 1)
      (("15" (skosimp)
        (("15" (expand child)
          (("15" (skosimp)
            (("15" (lemma pos_subterm_ax)
              (("15" (inst?)
                (("15" (inst?)
                  (("15" (assert)
                    (("15" (lemma seq_first_rest[posnat])
                      (("15" (inst -1 p1!1)
                        (("15" (lemma empty_0[posnat])
                          (("15" (inst -1 p1!1)
                            (("15" (assert)
                              (("15" (lemma not_var)
                                (("15" (inst?)
                                  (("15" (inst?) (("15" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (hide-all-but 1)
      (("16" (skosimp)
        (("16" (expand child)
          (("16" (skosimp)
            (("16" (lemma pos_subterm_ax)
              (("16" (inst?)
                (("16" (inst?)
                  (("16" (assert)
                    (("16" (lemma seq_first_rest[posnat])
                      (("16" (inst -1 p1!2)
                        (("16" (lemma empty_0[posnat])
                          (("16" (inst -1 p1!2)
                            (("16" (assert)
                              (("16" (lemma not_var)
                                (("16" (inst?)
                                  (("16" (inst?) (("16" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide-all-but 1)
      (("17" (skosimp)
        (("17" (expand child)
          (("17" (skosimp)
            (("17" (lemma pos_subterm_ax)
              (("17" (inst?)
                (("17" (inst?)
                  (("17" (assert)
                    (("17" (lemma seq_first_rest[posnat])
                      (("17" (inst -1 p1!2)
                        (("17" (lemma empty_0[posnat])
                          (("17" (inst -1 p1!2)
                            (("17" (assert)
                              (("17" (lemma not_var)
                                (("17" (inst?)
                                  (("17" (inst?) (("17" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma next_position_TCC5)
        (("18" (inst?)
          (("18" (inst?) (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("19" (hide 1) (("19" (rewrite empty_0) (("19" (assert) nil nil)) nil))
      nil)
     ("20" (hide 2)
      (("20" (rewrite subterm_is_app)
        (("20" (flatten) (("20" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("21" (hide 2)
      (("21" (rewrite delete_is_position)
        (("21" (flatten) (("21" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("22" (hide 2)
      (("22" (lemma empty_0[posnat])
        (("22" (inst?) (("22" (assert) nil nil)) nil)) nil))
      nil)
     ("23" (hide 2)
      (("23" (lemma next_position_TCC5)
        (("23" (inst?)
          (("23" (inst?) (("23" (inst?) (("23" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("24" (hide 1) (("24" (rewrite empty_0) (("24" (assert) nil nil)) nil))
      nil)
     ("25" (hide 2)
      (("25" (rewrite subterm_is_app)
        (("25" (flatten) (("25" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("26" (hide 2)
      (("26" (rewrite delete_is_position)
        (("26" (flatten) (("26" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("27" (hide 2)
      (("27" (lemma empty_0[posnat])
        (("27" (inst?) (("27" (assert) nil nil)) nil)) nil))
      nil)
     ("28" (hide -1 2)
      (("28" (skosimp)
        (("28" (expand child)
          (("28" (skosimp)
            (("28" (lemma pos_subterm_ax)
              (("28" (inst -1 p1!1 p1!2 t!1)
                (("28" (assert)
                  (("28" (lemma seq_first_rest[posnat])
                    (("28" (inst -1 p1!2)
                      (("28" (lemma empty_0[posnat])
                        (("28" (inst -1 p1!2)
                          (("28" (assert)
                            (("28" (lemma not_var)
                              (("28"
                                (inst -1 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("28" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("29" (hide -1 2)
      (("29" (skosimp)
        (("29" (expand child)
          (("29" (skosimp)
            (("29" (lemma pos_subterm_ax)
              (("29" (inst -1 p1!1 p1!2 s!1)
                (("29" (assert)
                  (("29" (lemma seq_first_rest[posnat])
                    (("29" (inst -1 p1!2)
                      (("29" (lemma empty_0[posnat])
                        (("29" (inst -1 p1!2)
                          (("29" (assert)
                            (("29" (lemma not_var)
                              (("29"
                                (inst -1 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("29" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("30" (hide 2)
      (("30" (lemma next_position_TCC5)
        (("30" (inst -1 s!1 t!1 p!1) (("30" (assert) nil nil)) nil)) nil))
      nil)
     ("31" (hide 1) (("31" (rewrite empty_0) nil nil)) nil)
     ("32" (hide 2)
      (("32" (rewrite subterm_is_app)
        (("32" (flatten) (("32" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("33" (hide 2)
      (("33" (rewrite delete_is_position)
        (("33" (flatten) (("33" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("34" (hide 2)
      (("34" (lemma empty_0[posnat])
        (("34" (inst -1 p!1) (("34" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (position type-eq-decl nil positions nil)
    (child const-decl "bool" positions nil)
    (left_without_children const-decl "bool" positions nil)
    (only_empty_seq const-decl "positions" positions nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (lwc_add_last_delete formula-decl nil positions nil)
    (pos_subterm formula-decl nil subterm nil)
    (delete_is_position formula-decl nil positions nil)
    (not_var formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (subterm_is_app formula-decl nil subterm nil))
   shostak))
 (next_pos_equal_subterm_TCC1 0
  (next_pos_equal_subterm_TCC1-1 nil 3511984083
   ("" (skosimp*)
    (("" (expand child)
      (("" (skosimp)
        (("" (lemma pos_subterm_ax)
          (("" (inst -1 p1!1 p1!2 s!1)
            (("" (assert)
              (("" (lemma not_var)
                (("" (lemma seq_first_rest[posnat])
                  (("" (inst -1 p1!2)
                    (("" (lemma empty_0[posnat])
                      (("" (inst -1 p1!2)
                        (("" (assert)
                          ((""
                            (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                             "subtermOF(s!1, p1!1)")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((child const-decl "bool" positions nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (not_var formula-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (next_pos_equal_subterm subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_pos_equal_subterm_TCC2 0
  (next_pos_equal_subterm_TCC2-1 nil 3511984083
   ("" (skosimp*)
    (("" (expand child)
      (("" (skosimp)
        (("" (lemma pos_subterm_ax)
          (("" (inst -1 p1!1 p1!2 t!1)
            (("" (assert)
              (("" (lemma not_var)
                (("" (lemma seq_first_rest[posnat])
                  (("" (inst -1 p1!2)
                    (("" (lemma empty_0[posnat])
                      (("" (inst -1 p1!2)
                        (("" (assert)
                          ((""
                            (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                             "subtermOF(t!1, p1!1)")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((child const-decl "bool" positions nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (not_var formula-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (next_pos_equal_subterm subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (next_pos_equal_subterm 0
  (next_pos_equal_subterm-1 nil 3514113068
   (""
    (measure-induct+ "lex2(length(p),
                                arity(f(subtermOF(s,
                                               delete(p,length(p) - 1)))) - last(p))"
     ("s" "t" "p"))
    (("1" (typepred x!3)
      (("1" (hide -1 -2)
        (("1" (flatten)
          (("1" (skosimp)
            (("1"
              (name-replace "np" "next_position(x!1, x!2, x!3)" :hide? nil)
              (("1" (expand next_position -1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but (-1 -3 1 2 3))
                      (("1" (inst -2 np)
                        (("1" (assert)
                          (("1" (hide 1)
                            (("1" (expand child)
                              (("1" (inst 2 "#(last(x!3))")
                                (("1" (lemma add_last_delete[posnat])
                                  (("1" (inst -1 x!3)
                                    (("1" (lemma empty_0[posnat])
                                      (("1"
                                        (inst -1 x!3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite add_last_is_o)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide-all-but -3)
                                                    (("1"
                                                      (expand* "#" empty_seq)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (rewrite empty_0) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2 4)
                          (("2" (replace -1 1 rl)
                            (("2" (rewrite delete_is_position)
                              (("1" (rewrite delete_is_position)
                                (("1" (hide -1 2)
                                  (("1" (flatten)
                                    (("1" (rewrite empty_0) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (hide -1 2)
                                (("2" (flatten)
                                  (("2" (rewrite empty_0) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (hide -3 -4 -5 1)
                        (("2" (case "left_without_children(q!1, x!3)")
                          (("1" (inst -4 q!1) (("1" (assert) nil nil)) nil)
                           ("2" (case "x!3 <= q!1")
                            (("1" (expand "<=")
                              (("1" (skosimp)
                                (("1" (case "p1!1 = empty_seq")
                                  (("1" (replaces -1)
                                    (("1" (rewrite seq_o_empty)
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (hide -2 -3 -4 -6 2 4)
                                    (("2" (lemma pos_subterm)
                                      (("2"
                                        (inst-cp -1 x!3 p1!1 x!2)
                                        (("2"
                                          (inst -1 x!3 p1!1 x!1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 -5 1 2 3))
                              (("2" (lemma lwc_add_last_delete1)
                                (("2" (inst -1 q!1 x!3)
                                  (("2" (assert)
                                    (("2" (replace -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand* child <=)
                                            (("1"
                                              (skosimp)
                                              (("1" (inst 2 p1!1) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand <=)
                                            (("2"
                                              (inst 1 empty_seq)
                                              (("2"
                                                (rewrite seq_o_empty)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (name-replace "pi"
                       "add_last(delete(x!3, length(x!3) - 1), 1 + last(x!3))"
                       :hide? nil)
                      (("1" (inst -6 x!1 x!2 pi)
                        (("1" (lemma next_position_TCC17)
                          (("1" (inst -1 x!1 x!2 x!3)
                            (("1" (assert)
                              (("1" (inst -1 "delete(x!3, length(x!3) - 1)")
                                (("1" (assert)
                                  (("1" (inst -1 pi)
                                    (("1" (assert)
                                      (("1"
                                        (case "pi = empty_seq")
                                        (("1"
                                          (hide-all-but (-1 -3))
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand*
                                               add_last
                                               insert?
                                               empty_seq)
                                              (("1"
                                                (flatten)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst -1 q!1)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2 -3 -5 -7 -8 -9 4 5)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst -4 p1!1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 1)
                                                          (("2"
                                                            (lemma
                                                             add_last_delete[posnat])
                                                            (("2"
                                                              (inst -1 x!3)
                                                              (("2"
                                                                (lemma
                                                                 empty_0[posnat])
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   x!3)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       add_last_is_o)
                                                                      (("2"
                                                                        (name-replace
                                                                         "dp"
                                                                         "delete(x!3, length(x!3) - 1)")
                                                                        (("2"
                                                                          (rewrite
                                                                           add_last_is_o)
                                                                          (("2"
                                                                            (expand
                                                                             child)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (case
                                                                                 "length(p1!1) = length(dp)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   o_equals_o[posnat])
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     dp
                                                                                     "#(1 + last(x!3))"
                                                                                     p1!1
                                                                                     p1!2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         5
                                                                                         "#(last(x!3))")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             5)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand*
                                                                                                 "#"
                                                                                                 empty_seq)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "length(p1!1) < length(dp)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     o_length_o[posnat])
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       p1!1
                                                                                       p1!2
                                                                                       dp
                                                                                       "#(1 + last(x!3))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -3)
                                                                                            (("1"
                                                                                              (inst
                                                                                               6
                                                                                               "seq!1 o  #(last(x!3))")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 o_assoc)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     6)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand*
                                                                                                         o
                                                                                                         "#"
                                                                                                         empty_seq)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -4
                                                                                     5
                                                                                     7)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand*
                                                                                         "#"
                                                                                         o)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               empty_0[posnat])
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 p1!2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -2 -3 -5 -6 -9 4 5)
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (case
                                                       "left_without_children(q!2, x!3)")
                                                      (("1"
                                                        (inst -5 q!2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "x!3 <= q!2")
                                                        (("1"
                                                          (expand "<=")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (case
                                                               "p1!1 = empty_seq")
                                                              (("1"
                                                                (replaces -1)
                                                                (("1"
                                                                  (rewrite
                                                                   seq_o_empty)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace -1 3)
                                                                (("2"
                                                                  (rewrite
                                                                   pos_subterm)
                                                                  (("2"
                                                                    (rewrite
                                                                     pos_subterm)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-6 3))
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 -2 1 2 5))
                                                          (("2"
                                                            (lemma
                                                             lwc_add_last_delete1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               q!2
                                                               x!3)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace -3)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand*
                                                                         child
                                                                         <=)
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             p1!1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         <=)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           empty_seq)
                                                                          (("2"
                                                                            (rewrite
                                                                             seq_o_empty)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but (1 2))
                                  (("2" (lemma empty_0[posnat])
                                    (("2" (inst -1 x!3)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide -2 -6 -7 -8 -9 4)
                            (("2" (lemma next_position_TCC15)
                              (("2" (inst -1 x!1 x!2 x!3)
                                (("2" (assert)
                                  (("2"
                                    (inst -1 "delete(x!3, length(x!3) - 1)")
                                    (("1" (assert)
                                      (("1"
                                        (inst -1 pi)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-2 1))
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand*
                                                   add_last
                                                   insert?
                                                   empty_seq)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -2)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but (1 3))
                                      (("2"
                                        (lemma empty_0[posnat])
                                        (("2"
                                          (inst -1 x!3)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 2))
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4"
                      (name-replace "dp" "delete(x!3, length(x!3) - 1)" :hide?
                       nil)
                      (("1"
                        (name-replace "pi" "add_last(dp, 1 + last(x!3))"
                         :hide? nil)
                        (("1" (inst -5 x!1 x!2 dp)
                          (("1" (lemma next_position_TCC19)
                            (("1" (inst -1 x!1 x!2 x!3)
                              (("1" (assert)
                                (("1" (inst -1 dp)
                                  (("1" (assert)
                                    (("1" (inst -1 pi)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst -1 q!1)
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (hide-all-but
                                                   (-1 -3 -6 1 2 4))
                                                  (("2"
                                                    (inst -3 p1!1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 1)
                                                        (("2"
                                                          (expand child)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (lemma
                                                               add_last_delete[posnat])
                                                              (("2"
                                                                (inst -1 x!3)
                                                                (("2"
                                                                  (lemma
                                                                   empty_0[posnat])
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     x!3)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         add_last_is_o)
                                                                        (("2"
                                                                          (replace
                                                                           -3)
                                                                          (("2"
                                                                            (replace
                                                                             -2
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               5
                                                                               "p1!2 o  #(last(x!3))")
                                                                              (("2"
                                                                                (rewrite
                                                                                 o_assoc)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     5)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand*
                                                                                         "#"
                                                                                         o
                                                                                         empty_seq)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (-2 -6 1 2 4))
                                                (("3"
                                                  (skosimp)
                                                  (("3"
                                                    (inst -3 q!2)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (hide 1)
                                                        (("3"
                                                          (expand
                                                           "left_without_children")
                                                          (("3"
                                                            (skosimp)
                                                            (("3"
                                                              (lemma
                                                               add_last_delete[posnat])
                                                              (("3"
                                                                (inst -1 x!3)
                                                                (("3"
                                                                  (lemma
                                                                   empty_0[posnat])
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     x!3)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (replace
                                                                         -5)
                                                                        (("3"
                                                                          (rewrite
                                                                           add_last_is_o)
                                                                          (("3"
                                                                            (replace
                                                                             -2
                                                                             -1)
                                                                            (("3"
                                                                              (inst
                                                                               6
                                                                               r!1
                                                                               p1!1
                                                                               "q1!1 o  #(last(x!3))")
                                                                              (("3"
                                                                                (rewrite
                                                                                 o_assoc)
                                                                                (("3"
                                                                                  (rewrite
                                                                                   first_compo)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       6)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand*
                                                                                           "#"
                                                                                           o
                                                                                           empty_seq)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      3))
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         empty_0)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (lemma equal_term)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "subtermOF(x!1, dp)"
                                                   "subtermOF(x!2, dp)"
                                                   "#(last(x!3))")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (typepred q!2)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1
                                                            -3
                                                            -4
                                                            -5
                                                            3
                                                            4
                                                            5))
                                                          (("1"
                                                            (expand
                                                             left_without_children)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (rewrite
                                                                 add_last_is_o)
                                                                (("1"
                                                                  (replace
                                                                   -5
                                                                   4
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     pos_o_term)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-6
                                                                        1
                                                                        3))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           delete_is_position)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "r!1 = empty_seq")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (rewrite
                                                                           empty_o_seq)
                                                                          (("1"
                                                                            (rewrite
                                                                             empty_o_seq)
                                                                            (("1"
                                                                              (lemma
                                                                               seq_first_rest_1[posnat])
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 q1!1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   empty_0[posnat])
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     q1!1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         -5)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           first_compo)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               first
                                                                                               -4
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 finseq_appl)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "#"
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     pos_ax)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "#(first(q1!1))"
                                                                                                       "rest(q1!1)"
                                                                                                       "subtermOF(x!1, dp)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           subterms_acc_arity)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "first(q1!1)"
                                                                                                             "1 + last(x!3)"
                                                                                                             "subtermOF(x!1, dp)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-4
                                                                                                                  -5
                                                                                                                  1))
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "last(x!3) = first(p1!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     -2
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (expand*
                                                                                                                           first
                                                                                                                           finseq_appl)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "#")
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "#")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-3
                                                                          1
                                                                          4))
                                                                        (("2"
                                                                          (expand*
                                                                           "#"
                                                                           o)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (lemma
                                                                                 empty_0[posnat])
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   r!1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     p1!1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (case
                                                         "left_without_children(dp o q!2, x!3)")
                                                        (("1"
                                                          (inst -8 "dp o q!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide-all-but
                                                               (-4 -8 1))
                                                              (("1"
                                                                (typepred q!2)
                                                                (("1"
                                                                  (rewrite
                                                                   pos_subterm)
                                                                  (("1"
                                                                    (rewrite
                                                                     pos_subterm)
                                                                    (("1"
                                                                      (hide
                                                                       -4
                                                                       2)
                                                                      (("1"
                                                                        (rewrite
                                                                         pos_o_term)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             delete_is_position)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -4
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       pos_o_term)
                                                                      (("2"
                                                                        (replace
                                                                         -3
                                                                         1
                                                                         rl)
                                                                        (("2"
                                                                          (rewrite
                                                                           delete_is_position)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (rewrite
                                                                               empty_0)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-4 1 6))
                                                            (("2"
                                                              (typepred q!2)
                                                              (("2"
                                                                (rewrite
                                                                 pos_o_term)
                                                                (("1"
                                                                  (rewrite
                                                                   pos_o_term)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       delete_is_position)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (rewrite
                                                                           empty_0)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -3
                                                                   1
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     delete_is_position)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (rewrite
                                                                         empty_0)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 -3 1 4 6))
                                                          (("2"
                                                            (expand
                                                             left_without_children)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (case
                                                                 "r!1 = empty_seq")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     empty_o_seq)
                                                                    (("1"
                                                                      (rewrite
                                                                       empty_o_seq)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         dp
                                                                         p1!1
                                                                         q1!1)
                                                                        (("1"
                                                                          (lemma
                                                                           add_last_delete[posnat])
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             x!3)
                                                                            (("1"
                                                                              (lemma
                                                                               empty_0[posnat])
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 x!3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     add_last_is_o)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1 1 3))
                                                                  (("2"
                                                                    (expand*
                                                                     "#"
                                                                     o)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (lemma
                                                                           empty_0[posnat])
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             r!1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               q1!1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (lemma pos_subterm)
                                                        (("3"
                                                          (inst-cp
                                                           -1
                                                           dp
                                                           p1!1
                                                           x!1)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             dp
                                                             p1!1
                                                             x!2)
                                                            (("3"
                                                              (split)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -4
                                                                       -6
                                                                       -7
                                                                       -9
                                                                       -10
                                                                       -11
                                                                       2
                                                                       4
                                                                       6
                                                                       7)
                                                                      (("1"
                                                                        (case
                                                                         "child(x!3, dp o p1!1)")
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "dp o p1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (typepred
                                                                               p1!1)
                                                                              (("2"
                                                                                (rewrite
                                                                                 pos_o_term)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   pos_o_term)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     2)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1
                                                                                       rl)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         delete_is_position)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           2)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               empty_0)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       delete_is_position)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         2)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             empty_0)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -3
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             child)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (case
                                                                                 "p1!1 = empty_seq")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     empty_o_seq)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       seq_o_empty)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         p1!2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             add_last_delete[posnat])
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               x!3)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 empty_0[posnat])
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   x!3)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         add_last_is_o)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1
                                                                                    3))
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "#"
                                                                                     o)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           empty_0[posnat])
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             p1!1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               p1!2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-4 1 6))
                                                                  (("2"
                                                                    (typepred
                                                                     p1!1)
                                                                    (("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (rewrite
                                                                         pos_o_term)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           1
                                                                           rl)
                                                                          (("2"
                                                                            (rewrite
                                                                             delete_is_position)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (rewrite
                                                                                 empty_0)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-4 1 6))
                                                                (("2"
                                                                  (typepred
                                                                   p1!1)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       pos_o_term)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         1
                                                                         rl)
                                                                        (("2"
                                                                          (rewrite
                                                                           delete_is_position)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (rewrite
                                                                               empty_0)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide-all-but
                                                       (-2 -7 1 5))
                                                      (("4"
                                                        (lemma
                                                         add_last_delete[posnat])
                                                        (("4"
                                                          (inst -1 x!3)
                                                          (("4"
                                                            (lemma
                                                             empty_0[posnat])
                                                            (("4"
                                                              (inst -1 x!3)
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (replace -2)
                                                                  (("4"
                                                                    (rewrite
                                                                     add_last_is_o)
                                                                    (("4"
                                                                      (lemma
                                                                       pos_subterm)
                                                                      (("4"
                                                                        (inst-cp
                                                                         -1
                                                                         dp
                                                                         "#(last(x!3))"
                                                                         x!2)
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           dp
                                                                           "#(last(x!3))"
                                                                           x!1)
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (hide-all-but -1)
                                                      (("5"
                                                        (expand*
                                                         "#"
                                                         empty_seq)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but (-2 1 5))
                                                    (("2"
                                                      (lemma
                                                       add_last_delete[posnat])
                                                      (("2"
                                                        (inst -1 x!3)
                                                        (("2"
                                                          (lemma
                                                           empty_0[posnat])
                                                          (("2"
                                                            (inst -1 x!3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace -2)
                                                                (("2"
                                                                  (rewrite
                                                                   add_last_is_o)
                                                                  (("2"
                                                                    (rewrite
                                                                     pos_subterm_ax)
                                                                    (("2"
                                                                      (rewrite
                                                                       pos_subterm_ax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-2 1 2 4))
                            (("2" (assert)
                              (("2" (replace -1 1 rl)
                                (("2" (rewrite delete_is_position)
                                  (("1" (rewrite delete_is_position)
                                    (("1" (hide-all-but (1 4))
                                      (("1"
                                        (flatten)
                                        (("1" (rewrite empty_0) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (1 4))
                                    (("2" (flatten)
                                      (("2" (rewrite empty_0) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 4))
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 x!3) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide-all-but (-2 3)) (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide -1 2)
      (("2" (skosimp)
        (("2" (lemma app_term)
          (("2" (inst -1 y!3 p1!1 y!2) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (hide -1 2)
      (("3" (skosimp)
        (("3" (lemma app_term)
          (("3" (inst -1 y!3 p1!1 y!1) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma next_position_TCC5)
        (("4" (inst -1 x!1 x!2 x!3) (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (hide 1) (("5" (rewrite empty_0) nil nil)) nil)
     ("6" (hide 2)
      (("6" (lemma next_position_TCC3)
        (("6" (inst -1 x!1 x!2 x!3) (("6" (assert) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite delete_is_position)
        (("7" (hide 2) (("7" (flatten) (("7" (rewrite empty_0) nil nil)) nil))
          nil))
        nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma empty_0[posnat])
        (("8" (inst -1 x!3) (("8" (assert) nil nil)) nil)) nil))
      nil)
     ("9" (hide 2)
      (("9" (lemma next_position_TCC5)
        (("9" (inst -1 y!1 y!2 y!3) (("9" (assert) nil nil)) nil)) nil))
      nil)
     ("10" (hide 1) (("10" (rewrite empty_0) nil nil)) nil)
     ("11" (hide 2)
      (("11" (lemma app_term)
        (("11" (inst -1 "y!3" "delete(y!3, length(y!3) - 1)" "y!1")
          (("1" (assert)
            (("1" (hide 2)
              (("1" (rewrite delete_is_position)
                (("1"
                  (name-replace "dp" "delete(y!3, length(y!3) - 1)" :hide?
                   nil)
                  (("1" (lemma add_last_delete[posnat])
                    (("1" (inst -1 y!3)
                      (("1" (lemma empty_0[posnat])
                        (("1" (inst -1 y!3)
                          (("1" (assert)
                            (("1" (replace -2)
                              (("1" (rewrite add_last_is_o)
                                (("1" (expand child)
                                  (("1" (inst 2 "#(last(y!3))")
                                    (("1" (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand* "#" empty_seq)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma empty_0[posnat])
                      (("2" (inst -1 y!3) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (flatten) (("2" (rewrite empty_0) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma empty_0[posnat])
              (("2" (inst -1 y!3) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (rewrite delete_is_position)
        (("12" (flatten) (("12" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("13" (hide 2)
      (("13" (lemma empty_0[posnat])
        (("13" (inst -1 y!3) (("13" (assert) nil nil)) nil)) nil))
      nil)
     ("14" (hide -1 2)
      (("14" (skosimp)
        (("14" (lemma app_term)
          (("14" (inst -1 "x!1`3" "p11!1" "x!1`2") (("14" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide -1 2)
      (("15" (skosimp)
        (("15" (lemma app_term)
          (("15" (inst -1 "x!1`3" "p11!1" "x!1`1") (("15" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (hide -1 2)
      (("16" (skosimp)
        (("16" (lemma app_term)
          (("16" (inst -1 "y!1`3" "p1!1" "y!1`2") (("16" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide -1 2)
      (("17" (skosimp)
        (("17" (lemma app_term)
          (("17" (inst -1 "y!1`3" "p1!1" "y!1`1") (("17" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma next_position_TCC5)
        (("18" (inst -1 "x!1`1" "x!1`2" "x!1`3") (("18" (assert) nil nil))
          nil))
        nil))
      nil)
     ("19" (hide 1) (("19" (rewrite empty_0) (("19" (assert) nil nil)) nil))
      nil)
     ("20" (hide 2)
      (("20" (name-replace "dp" "delete(x!1`3, length(x!1`3) - 1)" :hide? nil)
        (("1" (lemma add_last_delete[posnat])
          (("1" (inst -1 "x!1`3")
            (("1" (lemma empty_0[posnat])
              (("1" (inst -1 "x!1`3")
                (("1" (assert)
                  (("1" (replace -2)
                    (("1" (rewrite add_last_is_o)
                      (("1" (lemma app_term)
                        (("1" (inst -1 "x!1`3" "dp" "x!1`1")
                          (("1" (assert)
                            (("1" (split)
                              (("1" (replace -2 1 rl)
                                (("1" (rewrite delete_is_position) nil nil))
                                nil)
                               ("2" (hide 3)
                                (("2" (expand child)
                                  (("2" (inst 1 "#(last(x!1`3))")
                                    (("2" (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand* "#" empty_seq)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma empty_0[posnat])
            (("2" (inst -1 "x!1`3") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("21" (hide 2)
      (("21" (rewrite delete_is_position)
        (("21" (flatten) (("21" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("22" (hide 2)
      (("22" (lemma empty_0[posnat])
        (("22" (inst -1 "x!1`3") (("22" (assert) nil nil)) nil)) nil))
      nil)
     ("23" (hide 2)
      (("23" (lemma next_position_TCC5)
        (("23" (inst -1 "y!1`1" "y!1`2" "y!1`3") (("23" (assert) nil nil))
          nil))
        nil))
      nil)
     ("24" (hide 1) (("24" (rewrite empty_0) (("24" (assert) nil nil)) nil))
      nil)
     ("25" (hide 2)
      (("25" (lemma empty_0[posnat])
        (("25" (inst -1 "y!1`3")
          (("25" (assert)
            (("25"
              (name-replace "dp" "delete(y!1`3, length(y!1`3) - 1)" :hide?
               nil)
              (("25" (lemma add_last_delete[posnat])
                (("25" (inst -1 "y!1`3")
                  (("25" (assert)
                    (("25" (replace -2)
                      (("25" (rewrite add_last_is_o)
                        (("25" (lemma app_term)
                          (("25" (inst -1 "y!1`3" "dp" "y!1`1")
                            (("25" (assert)
                              (("25" (split)
                                (("1" (replace -2 1 rl)
                                  (("1" (rewrite delete_is_position) nil nil))
                                  nil)
                                 ("2" (hide 3)
                                  (("2" (expand child)
                                    (("2" (inst 1 "#(last(y!1`3))")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand* "#" empty_seq)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("26" (hide 2)
      (("26" (rewrite delete_is_position)
        (("26" (flatten) (("26" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("27" (hide 2)
      (("27" (lemma empty_0[posnat])
        (("27" (inst -1 "y!1`3") (("27" (assert) nil nil)) nil)) nil))
      nil)
     ("28" (hide 2)
      (("28" (lemma app_term)
        (("28" (inst -1 p!1 p1!1 t!1) (("28" (assert) nil nil)) nil)) nil))
      nil)
     ("29" (hide 2)
      (("29" (lemma app_term)
        (("29" (inst -1 p!1 p1!1 s!1) (("29" (assert) nil nil)) nil)) nil))
      nil)
     ("30" (hide 2)
      (("30" (lemma next_position_TCC5)
        (("30" (inst -1 s!1 t!1 p!1) (("30" (assert) nil nil)) nil)) nil))
      nil)
     ("31" (hide 1) (("31" (rewrite empty_0) nil nil)) nil)
     ("32" (hide 2)
      (("32" (lemma empty_0[posnat])
        (("32" (inst -1 p!1)
          (("32" (assert)
            (("32"
              (name-replace "dp" "delete(p!1, length(p!1) - 1)" :hide? nil)
              (("32" (lemma add_last_delete[posnat])
                (("32" (inst -1 p!1)
                  (("32" (assert)
                    (("32" (replace -2)
                      (("32" (rewrite add_last_is_o)
                        (("32" (lemma app_term)
                          (("32" (inst -1 p!1 dp s!1)
                            (("32" (assert)
                              (("32" (split)
                                (("1" (replace -2 1 rl)
                                  (("1" (rewrite delete_is_position) nil nil))
                                  nil)
                                 ("2" (hide 3)
                                  (("2" (expand child)
                                    (("2" (inst 1 "#(last(p!1))")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand* "#" empty_seq)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("33" (hide 2)
      (("33" (rewrite delete_is_position)
        (("33" (flatten) (("33" (rewrite empty_0) nil nil)) nil)) nil))
      nil)
     ("34" (hide 2)
      (("34" (lemma empty_0[posnat])
        (("34" (inst -1 p!1) (("34" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((y!1 skolem-const-decl "term" robinsonunificationEF nil)
    (y!2 skolem-const-decl "term" robinsonunificationEF nil)
    (y!3 skolem-const-decl "{p: position |
   positionsOF(y!1)(p) AND positionsOF(y!2)(p) AND p /= empty_seq}"
     robinsonunificationEF nil)
    (next_position_TCC3 subtype-tcc nil robinsonunificationEF nil)
    (next_position_TCC5 subtype-tcc nil robinsonunificationEF nil)
    (app_term formula-decl nil subterm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dp skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (first_compo formula-decl nil seq_extras structures)
    (p1!1 skolem-const-decl "{q: position[variable, symbol, arity] |
   positionsOF(subtermOF(x!1, dp))(q) AND
    positionsOF(subtermOF(x!2, dp))(q)}" robinsonunificationEF nil)
    (q!2 skolem-const-decl "{q: position[variable, symbol, arity] |
   positionsOF(subtermOF(x!1, dp))(q) AND
    positionsOF(subtermOF(x!2, dp))(q)}" robinsonunificationEF nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (subterms_acc_arity formula-decl nil positions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pos_ax formula-decl nil positions nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (pos_o_term formula-decl nil subterm nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (equal_term formula-decl nil subterm nil)
    (next_position_TCC19 termination-tcc nil robinsonunificationEF nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add_last const-decl "finseq" seq_extras structures)
    (next_position_TCC15 subtype-tcc nil robinsonunificationEF nil)
    (next_position_TCC17 termination-tcc nil robinsonunificationEF nil)
    (O const-decl "finseq" finite_sequences nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (o_length_o formula-decl nil seq_extras structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (pi skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lwc_add_last_delete1 formula-decl nil positions nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (TRUE const-decl "bool" booleans nil)
    (pos_subterm formula-decl nil subterm nil)
    (<= const-decl "bool" positions nil)
    (delete_is_position formula-decl nil positions nil)
    (add_last_delete formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (add_last_is_o formula-decl nil seq_extras structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (x!3 skolem-const-decl "{p: position |
   positionsOF(x!1)(p) AND positionsOF(x!2)(p) AND p /= empty_seq}"
     robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (np skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (left_without_children const-decl "bool" positions nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (child const-decl "bool" positions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (delete const-decl "finseq" seq_extras structures)
    (< const-decl "bool" reals nil) (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (fd_equal_subterm 0
  (fd_equal_subterm-2 "" 3790333763
   ("" (measure-induct+ "length(first_diff(s, t))" ("s" "t"))
    (("" (skosimp)
      (("" (name-replace "fd" "first_diff(x!1, x!2)" :hide? nil)
        (("" (expand first_diff -1)
          (("" (lift-if)
            (("" (prop)
              (("1" (hide-all-but (-2 -4))
                (("1" (replace -1 -2 rl)
                  (("1" (hide -1)
                    (("1" (expand left_without_children)
                      (("1" (skosimp)
                        (("1" (lemma seq_empty[posnat])
                          (("1" (inst -1 r!1 q1!1)
                            (("1" (assert)
                              (("1" (flatten)
                                (("1" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -4))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (expand left_without_children)
                      (("2" (skosimp)
                        (("2" (lemma seq_empty[posnat])
                          (("2" (inst -1 r!1 q1!1)
                            (("2" (assert)
                              (("2" (flatten)
                                (("2" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but (-2 -4))
                (("3" (replace -1 -2 rl)
                  (("3" (hide -1)
                    (("3" (expand left_without_children)
                      (("3" (skosimp)
                        (("3" (lemma seq_empty[posnat])
                          (("3" (inst -1 r!1 q1!1)
                            (("3" (assert)
                              (("3" (flatten)
                                (("3" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4"
                (name-replace "k1" "min({kk: below[length(args(x!2))] |
                                                      subtermOF(x!1,  #(kk + 1)) /=
                                                       subtermOF(x!2,  #(kk + 1))})"
                 :hide? nil)
                (("1" (assert)
                  (("1" (expand left_without_children)
                    (("1" (skosimp)
                      (("1" (case "r!1 = empty_seq")
                        (("1" (hide -5)
                          (("1" (replaces -1)
                            (("1" (rewrite empty_o_seq)
                              (("1" (rewrite empty_o_seq)
                                (("1" (replace -4 (-6 4) rl)
                                  (("1" (replace -5 (-6 5) rl)
                                    (("1" (hide -4 -5)
                                      (("1"
                                        (rewrite add_first_is_o)
                                        (("1"
                                          (replace -3 -4 rl)
                                          (("1"
                                            (rewrite first_compo)
                                            (("1"
                                              (lemma seq_first_rest_1[posnat])
                                              (("1"
                                                (inst -1 p!1)
                                                (("1"
                                                  (lemma empty_0[posnat])
                                                  (("1"
                                                    (inst -1 p!1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1 -5)
                                                        (("1"
                                                          (rewrite
                                                           first_compo)
                                                          (("1"
                                                            (expand
                                                             first
                                                             -5
                                                             1)
                                                            (("1"
                                                              (expand
                                                               finseq_appl)
                                                              (("1"
                                                                (expand
                                                                 "#"
                                                                 -5
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   7)
                                                                  (("1"
                                                                    (rewrite
                                                                     pos_subterm)
                                                                    (("1"
                                                                      (rewrite
                                                                       pos_subterm)
                                                                      (("1"
                                                                        (case
                                                                         "subtermOF(x!1,  #(first(p!1))) = subtermOF(x!2,  #(first(p!1)))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           8)
                                                                          (("2"
                                                                            (expand
                                                                             first
                                                                             -5
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               finseq_appl)
                                                                              (("2"
                                                                                (expand
                                                                                 "#"
                                                                                 -5)
                                                                                (("2"
                                                                                  (name-replace
                                                                                   "B"
                                                                                   "length(args(x!2))"
                                                                                   :hide?
                                                                                   nil)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "min_def[below[B]]")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "k1"
                                                                                       "{kk: below[length(args(x!2))] |
             NOT subtermOF(x!1,  #(1 + kk)) = subtermOF(x!2,  #(1 + kk))}")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "minimum?")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -2
                                                                                             "first(p!1) -1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -3
                                                                                              1))
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "k1")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!3")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -4
                                                                                                     -1
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -3
                                                                                                       "x!3")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "k1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "k1")
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -3
                                                                                                 -1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1))
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (lemma
                                                                                           "positions_of_arg")
                                                                                          (("4"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!2"
                                                                                             "kk!1")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (skosimp*)
                                                                                        (("5"
                                                                                          (rewrite
                                                                                           "positions_of_arg")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (typepred
                                                                                         "k1")
                                                                                        (("6"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -3
                                                                                            2))
                                                                                          (("6"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 7))
                                                            (("2"
                                                              (expand*
                                                               "#"
                                                               first
                                                               finseq_appl)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "#")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst -4 "subtermOF(x!1,  #(1 + k1))"
                           "subtermOF(x!2,  #(1 + k1))")
                          (("2" (replace -3 -4 rl)
                            (("2" (expand add_first -4)
                              (("2" (expand insert? -4)
                                (("2" (inst -4 "rest(p!1)")
                                  (("1" (split)
                                    (("1" (lemma seq_first_rest_1[posnat])
                                      (("1"
                                        (inst -1 p!1)
                                        (("1"
                                          (split)
                                          (("1"
                                            (case "first(p!1) = 1 + k1")
                                            (("1"
                                              (replace -1 -2)
                                              (("1"
                                                (replace -2 7)
                                                (("1"
                                                  (rewrite pos_subterm)
                                                  (("1"
                                                    (rewrite pos_subterm)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 -2 -3 -4 -8 3 4 5 8)
                                              (("2"
                                                (replace -3 1)
                                                (("2"
                                                  (rewrite first_compo)
                                                  (("1"
                                                    (replace -2 -1)
                                                    (("1"
                                                      (rewrite add_first_is_o)
                                                      (("1"
                                                        (expand*
                                                         first
                                                         finseq_appl)
                                                        (("1"
                                                          (expand "#" -1 1)
                                                          (("1"
                                                            (expand o -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                (("1"
                                                                  (inst -1 0)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       empty_0[posnat])
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         r!1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite empty_0)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-6 1 2 7))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (rewrite empty_0)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (lemma seq_empty[posnat])
                                                    (("2"
                                                      (inst -1 r!1 p1!1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (rewrite empty_0)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but (-3 -4 -5 -6 1 2 6 7))
                                      (("2"
                                        (lemma seq_first_rest_1[posnat])
                                        (("2"
                                          (inst -1 r!1)
                                          (("2"
                                            (lemma empty_0[posnat])
                                            (("2"
                                              (inst -1 r!1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   2
                                                   "rest(r!1)"
                                                   "p1!1"
                                                   "q1!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite add_first_is_o)
                                                      (("2"
                                                        (lemma
                                                         o_equals_o[posnat])
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "#(1 + k1)"
                                                           "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                                                           "#(first(r!1))"
                                                           "rest(r!1) o q1!1")
                                                          (("2"
                                                            (rewrite o_assoc)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (lemma
                                                                   equal_prefix[posnat])
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "#(1 + k1)"
                                                                     "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                                                                     "rest(r!1) o q1!1")
                                                                    (("1"
                                                                      (rewrite
                                                                       o_assoc)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -4
                                                                           -5
                                                                           4)
                                                                          (("1"
                                                                            (lemma
                                                                             seq_first_rest_1[posnat])
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               p!1)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     -3)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         o_equals_o[posnat])
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "#(first(p!1))"
                                                                                           "rest(p!1)"
                                                                                           "#(first(r!1))"
                                                                                           "rest(r!1) o p1!1")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             o_assoc)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     equal_prefix[posnat])
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "#(first(r!1))"
                                                                                                       "rest(p!1)"
                                                                                                       "rest(r!1) o p1!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           o_assoc)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "#"
                                                                                                     first
                                                                                                     finseq_appl)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    1
                                                                                    4
                                                                                    5))
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       empty_0)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           seq_empty[posnat])
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             r!1
                                                                                             p1!1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand*
                                                                     "#"
                                                                     first
                                                                     finseq_appl)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "p!1 = #(1 + k1) o rest(p!1)")
                                    (("1" (hide-all-but (-1 1))
                                      (("1"
                                        (rewrite pos_subterm_ax)
                                        (("1"
                                          (rewrite pos_subterm_ax)
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1 -2 -6 2 4 5 6 9)
                                      (("2"
                                        (rewrite add_first_is_o)
                                        (("2"
                                          (lemma seq_first_rest_1[posnat])
                                          (("2"
                                            (inst -1 r!1)
                                            (("2"
                                              (lemma empty_0[posnat])
                                              (("2"
                                                (inst -1 r!1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1 (-3 -4))
                                                    (("2"
                                                      (replace -3 -2)
                                                      (("2"
                                                        (hide -3)
                                                        (("2"
                                                          (lemma
                                                           o_equals_o[posnat])
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "#(1 + k1)"
                                                             "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                                                             "#(first(r!1))"
                                                             "rest(r!1) o q1!1")
                                                            (("2"
                                                              (rewrite
                                                               o_assoc)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -4
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         seq_first_rest_1[posnat])
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           p!1)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (lemma
                                                                               o_equals_o[posnat])
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "#(first(p!1))"
                                                                                 "rest(p!1)"
                                                                                 "#(1 + k1)"
                                                                                 "rest(r!1) o p1!1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   o_assoc)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand*
                                                                                         "#"
                                                                                         first
                                                                                         finseq_appl)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2
                                                                               3
                                                                               4)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   empty_0)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       seq_empty[posnat])
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "#(1 + k1) o rest(r!1)"
                                                                                         "p1!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               empty_0
                                                                                               -2)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (expand*
                                                                       "#"
                                                                       first
                                                                       finseq_appl)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 1 2 3 4))
                  (("2" (lemma first_diff_TCC3)
                    (("2" (inst -1 x!1 x!2 "f(x!1)" "args(x!1)")
                      (("2" (assert)
                        (("2" (case "x!1 = app(f(x!1), args(x!1))")
                          (("1" (assert)
                            (("1" (inst -2 "f(x!2)" "args(x!2)")
                              (("1" (case "x!2 = app(f(x!2), args(x!2))")
                                (("1" (assert) nil nil)
                                 ("2" (hide-all-but (1 3))
                                  (("2" (decompose-equality) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 5))
                            (("2" (decompose-equality) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp) (("3" (rewrite positions_of_arg) nil nil))
                  nil)
                 ("4" (hide -2 -3 -4 5)
                  (("4" (skosimp)
                    (("4" (rewrite positions_of_arg)
                      (("4" (typepred kk!1)
                        (("4" (typepred "args(x!2)") (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide-all-but (-1 -3))
                (("5" (replace -1 -2 rl)
                  (("5" (hide -1)
                    (("5" (expand left_without_children)
                      (("5" (skosimp)
                        (("5" (lemma seq_empty[posnat])
                          (("5" (inst -1 r!1 q1!1)
                            (("5" (assert)
                              (("5" (flatten)
                                (("5" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (fd_equal_subterm-1 nil 3516551572
   ("" (measure-induct+ "length(first_diff(s, t))" ("s" "t"))
    (("" (skosimp)
      (("" (name-replace "fd" "first_diff(x!1, x!2)" :hide? nil)
        (("" (expand first_diff -1)
          (("" (lift-if)
            (("" (prop)
              (("1" (hide-all-but (-2 -4))
                (("1" (replace -1 -2 rl)
                  (("1" (hide -1)
                    (("1" (expand left_without_children)
                      (("1" (skosimp)
                        (("1" (lemma seq_empty[posnat])
                          (("1" (inst -1 r!1 q1!1)
                            (("1" (assert)
                              (("1" (flatten)
                                (("1" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -4))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (expand left_without_children)
                      (("2" (skosimp)
                        (("2" (lemma seq_empty[posnat])
                          (("2" (inst -1 r!1 q1!1)
                            (("2" (assert)
                              (("2" (flatten)
                                (("2" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but (-2 -4))
                (("3" (replace -1 -2 rl)
                  (("3" (hide -1)
                    (("3" (expand left_without_children)
                      (("3" (skosimp)
                        (("3" (lemma seq_empty[posnat])
                          (("3" (inst -1 r!1 q1!1)
                            (("3" (assert)
                              (("3" (flatten)
                                (("3" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4"
                (name-replace "k1" "min({kk: below[length(args(x!2))] |
                                                      subtermOF(x!1,  #(kk + 1)) /=
                                                       subtermOF(x!2,  #(kk + 1))})"
                 :hide? nil)
                (("1" (assert)
                  (("1" (expand left_without_children)
                    (("1" (skosimp)
                      (("1" (case "r!1 = empty_seq")
                        (("1" (hide -5)
                          (("1" (replaces -1)
                            (("1" (rewrite empty_o_seq)
                              (("1" (rewrite empty_o_seq)
                                (("1" (replace -4 (-6 4) rl)
                                  (("1" (replace -5 (-6 5) rl)
                                    (("1" (hide -4 -5)
                                      (("1"
                                        (rewrite add_first_is_o)
                                        (("1"
                                          (replace -3 -4 rl)
                                          (("1"
                                            (rewrite first_compo)
                                            (("1"
                                              (lemma seq_first_rest_1[posnat])
                                              (("1"
                                                (inst -1 p!1)
                                                (("1"
                                                  (lemma empty_0[posnat])
                                                  (("1"
                                                    (inst -1 p!1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1 -5)
                                                        (("1"
                                                          (rewrite
                                                           first_compo)
                                                          (("1"
                                                            (expand
                                                             first
                                                             -5
                                                             1)
                                                            (("1"
                                                              (expand
                                                               finseq_appl)
                                                              (("1"
                                                                (expand
                                                                 "#"
                                                                 -5
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   7)
                                                                  (("1"
                                                                    (rewrite
                                                                     pos_subterm)
                                                                    (("1"
                                                                      (rewrite
                                                                       pos_subterm)
                                                                      (("1"
                                                                        (case
                                                                         "subtermOF(x!1,  #(first(p!1))) = subtermOF(x!2,  #(first(p!1)))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           8)
                                                                          (("2"
                                                                            (expand
                                                                             first
                                                                             -5
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               finseq_appl)
                                                                              (("2"
                                                                                (expand
                                                                                 "#"
                                                                                 -5)
                                                                                (("2"
                                                                                  (name-replace
                                                                                   "B"
                                                                                   "length(args(x!2))"
                                                                                   :hide?
                                                                                   nil)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "min_def[below[B]]")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "k1"
                                                                                       "{kk: below[length(args(x!2))] |
             NOT subtermOF(x!1,  #(1 + kk)) = subtermOF(x!2,  #(1 + kk))}")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "minimum?")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -2
                                                                                             "first(p!1) -1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -3
                                                                                              1))
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "k1")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!3")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -4
                                                                                                     -1
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -3
                                                                                                       "x!3")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "k1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "k1")
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -3
                                                                                                 -1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1))
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (lemma
                                                                                           "positions_of_arg")
                                                                                          (("4"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!2"
                                                                                             "kk!1")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (skosimp*)
                                                                                        (("5"
                                                                                          (rewrite
                                                                                           "positions_of_arg")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (typepred
                                                                                         "k1")
                                                                                        (("6"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -3
                                                                                            2))
                                                                                          (("6"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 7))
                                                            (("2"
                                                              (expand*
                                                               "#"
                                                               first
                                                               finseq_appl)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "#")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst -4 "subtermOF(x!1,  #(1 + k1))"
                           "subtermOF(x!2,  #(1 + k1))")
                          (("2" (replace -3 -4 rl)
                            (("2" (expand add_first -4)
                              (("2" (expand insert? -4)
                                (("2" (inst -4 "rest(p!1)")
                                  (("1" (split)
                                    (("1" (lemma seq_first_rest_1[posnat])
                                      (("1"
                                        (inst -1 p!1)
                                        (("1"
                                          (split)
                                          (("1"
                                            (case "first(p!1) = 1 + k1")
                                            (("1"
                                              (replace -1 -2)
                                              (("1"
                                                (replace -2 7)
                                                (("1"
                                                  (rewrite pos_subterm)
                                                  (("1"
                                                    (rewrite pos_subterm)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 -2 -3 -4 -8 3 4 5 8)
                                              (("2"
                                                (replace -3 1)
                                                (("2"
                                                  (rewrite first_compo)
                                                  (("1"
                                                    (replace -2 -1)
                                                    (("1"
                                                      (rewrite add_first_is_o)
                                                      (("1"
                                                        (expand*
                                                         first
                                                         finseq_appl)
                                                        (("1"
                                                          (expand "#" -1 1)
                                                          (("1"
                                                            (expand o -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                (("1"
                                                                  (inst -1 0)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       empty_0[posnat])
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         r!1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite empty_0)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-6 1 2 7))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (rewrite empty_0)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (lemma seq_empty[posnat])
                                                    (("2"
                                                      (inst -1 r!1 p1!1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (rewrite empty_0)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but (-3 -4 -5 -6 1 2 6 7))
                                      (("2"
                                        (lemma seq_first_rest_1[posnat])
                                        (("2"
                                          (inst -1 r!1)
                                          (("2"
                                            (lemma empty_0[posnat])
                                            (("2"
                                              (inst -1 r!1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   2
                                                   "rest(r!1)"
                                                   "p1!1"
                                                   "q1!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite add_first_is_o)
                                                      (("2"
                                                        (lemma
                                                         o_equals_o[posnat])
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "#(1 + k1)"
                                                           "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                                                           "#(first(r!1))"
                                                           "rest(r!1) o q1!1")
                                                          (("2"
                                                            (rewrite o_assoc)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (lemma
                                                                   equal_prefix[posnat])
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "#(1 + k1)"
                                                                     "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                                                                     "rest(r!1) o q1!1")
                                                                    (("1"
                                                                      (rewrite
                                                                       o_assoc)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -4
                                                                           -5
                                                                           4)
                                                                          (("1"
                                                                            (lemma
                                                                             seq_first_rest_1[posnat])
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               p!1)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     -3)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         o_equals_o[posnat])
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "#(first(p!1))"
                                                                                           "rest(p!1)"
                                                                                           "#(first(r!1))"
                                                                                           "rest(r!1) o p1!1")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             o_assoc)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     equal_prefix[posnat])
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "#(first(r!1))"
                                                                                                       "rest(p!1)"
                                                                                                       "rest(r!1) o p1!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           o_assoc)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "#"
                                                                                                     first
                                                                                                     finseq_appl)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    1
                                                                                    4
                                                                                    5))
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       empty_0)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           seq_empty[posnat])
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             r!1
                                                                                             p1!1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand*
                                                                     "#"
                                                                     first
                                                                     finseq_appl)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "p!1 = #(1 + k1) o rest(p!1)")
                                    (("1" (hide-all-but (-1 1))
                                      (("1"
                                        (rewrite pos_subterm_ax)
                                        (("1"
                                          (rewrite pos_subterm_ax)
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1 -2 -6 2 4 5 6 9)
                                      (("2"
                                        (rewrite add_first_is_o)
                                        (("2"
                                          (lemma seq_first_rest_1[posnat])
                                          (("2"
                                            (inst -1 r!1)
                                            (("2"
                                              (lemma empty_0[posnat])
                                              (("2"
                                                (inst -1 r!1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1 (-3 -4))
                                                    (("2"
                                                      (replace -3 -2)
                                                      (("2"
                                                        (hide -3)
                                                        (("2"
                                                          (lemma
                                                           o_equals_o[posnat])
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "#(1 + k1)"
                                                             "first_diff(subtermOF(x!1,  #(1 + k1)), subtermOF(x!2,  #(1 + k1)))"
                                                             "#(first(r!1))"
                                                             "rest(r!1) o q1!1")
                                                            (("2"
                                                              (rewrite
                                                               o_assoc)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -4
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         seq_first_rest_1[posnat])
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           p!1)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (lemma
                                                                               o_equals_o[posnat])
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "#(first(p!1))"
                                                                                 "rest(p!1)"
                                                                                 "#(1 + k1)"
                                                                                 "rest(r!1) o p1!1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   o_assoc)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand*
                                                                                         "#"
                                                                                         first
                                                                                         finseq_appl)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2
                                                                               3
                                                                               4)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   empty_0)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       seq_empty[posnat])
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "#(1 + k1) o rest(r!1)"
                                                                                         "p1!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               empty_0
                                                                                               -2)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (expand*
                                                                       "#"
                                                                       first
                                                                       finseq_appl)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 1 2 3 4))
                  (("2" (lemma first_diff_TCC3)
                    (("2" (inst -1 x!1 x!2 "f(x!1)" "args(x!1)")
                      (("2" (assert)
                        (("2" (case "x!1 = app(f(x!1), args(x!1))")
                          (("1" (assert)
                            (("1" (inst -2 "f(x!2)" "args(x!2)")
                              (("1" (case "x!2 = app(f(x!2), args(x!2))")
                                (("1" (assert)
                                  (("1" (hide -3)
                                    (("1" (lemma "first_diff_TCC7")
                                      (("1"
                                        (inst
                                         -1
                                         "x!1"
                                         "x!2"
                                         "f(x!1)"
                                         "args(x!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -1 "f(x!2)" "args(x!2)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but (1 3))
                                  (("2" (decompose-equality) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 5))
                            (("2" (decompose-equality) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp) (("3" (rewrite positions_of_arg) nil nil))
                  nil)
                 ("4" (hide -2 -3 -4 5)
                  (("4" (skosimp)
                    (("4" (rewrite positions_of_arg)
                      (("4" (typepred kk!1)
                        (("4" (typepred "args(x!2)") (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide-all-but (-1 -3))
                (("5" (replace -1 -2 rl)
                  (("5" (hide -1)
                    (("5" (expand left_without_children)
                      (("5" (skosimp)
                        (("5" (lemma seq_empty[posnat])
                          (("5" (inst -1 r!1 q1!1)
                            (("5" (assert)
                              (("5" (flatten)
                                (("5" (rewrite empty_0 -2) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq_empty formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (term_app_extensionality formula-decl nil term_adt nil)
    (first_diff_TCC3 subtype-tcc nil robinsonunification nil)
    (add_first const-decl "finseq" seq_extras structures)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (O const-decl "finseq" finite_sequences nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (insert? const-decl "finseq" seq_extras structures)
    (empty_o_seq formula-decl nil seq_extras structures)
    (seq_first_rest_1 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (x!2 skolem-const-decl "{t: term | x!1 /= t}" robinsonunificationEF nil)
    (k1 skolem-const-decl "{a |
   NOT subtermOF(x!1,  #(1 + a)) = subtermOF(x!2,  #(1 + a)) AND
    FORALL (x: below[length(args(x!2))]):
      NOT subtermOF(x!1,  #(1 + x)) = subtermOF(x!2,  #(1 + x)) IMPLIES
       a <= x}" robinsonunificationEF nil)
    (B skolem-const-decl "nat" robinsonunificationEF nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (p!1 skolem-const-decl
     "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}"
     robinsonunificationEF nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (x!3 skolem-const-decl "below[B]" robinsonunificationEF nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minimum? const-decl "bool" min_nat nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (positions_of_arg formula-decl nil positions nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (min_def formula-decl nil min_nat nil)
    (pos_subterm formula-decl nil subterm nil)
    (first_compo formula-decl nil seq_extras structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (add_first_is_o formula-decl nil seq_extras structures)
    (TRUE const-decl "bool" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (<= const-decl "bool" reals nil) (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (left_without_children const-decl "bool" positions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (first_diff def-decl "position" robinsonunification nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (child_p_o_fd_TCC1 0
  (child_p_o_fd_TCC1-1 nil 3516271212
   ("" (skosimp*)
    (("" (assert)
      (("" (lemma app_term)
        (("" (inst -1 p!1 q!1 s!1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (/= const-decl "boolean" notequal nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (app_term formula-decl nil subterm nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil))
   nil
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (child_p_o_fd_TCC2 0
  (child_p_o_fd_TCC2-1 nil 3516271212
   ("" (skosimp*)
    (("" (lemma app_term)
      (("" (inst -1 p!1 q!1 t!1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (app_term formula-decl nil subterm nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (/= const-decl "boolean" notequal nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (child_p_o_fd_TCC3 0
  (child_p_o_fd_TCC3-1 nil 3516271212
   ("" (skosimp*)
    (("" (lemma app_term)
      (("" (inst -1 "p!1 o fd!1" q1!1 "ext(sig!1)(s!1)")
        (("" (assert)
          (("" (hide -1 -3 2)
            (("" (typepred p!1)
              (("" (hide -2 -3)
                (("" (lemma position_s_first_diff)
                  ((""
                    (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
                     "fd!1")
                    (("" (assert)
                      (("" (lemma pos_o_term)
                        (("" (inst -1 p!1 fd!1 s!1)
                          (("" (assert)
                            (("" (rewrite ext_preserv_pos) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (app_term formula-decl nil subterm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (/= const-decl "boolean" notequal nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (child_p_o_fd_TCC4 0
  (child_p_o_fd_TCC4-1 nil 3516271212
   ("" (skosimp*)
    (("" (lemma app_term)
      (("" (inst -1 "p!1 o fd!1" q1!1 "ext(sig!1)(t!1)")
        (("" (assert)
          (("" (hide -1 -3 2)
            (("" (typepred p!1)
              (("" (hide -1 -3)
                (("" (lemma position_t_first_diff)
                  ((""
                    (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
                     "fd!1")
                    (("" (assert)
                      (("" (lemma pos_o_term)
                        (("" (inst -1 p!1 fd!1 t!1)
                          (("" (assert)
                            (("" (rewrite ext_preserv_pos) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (app_term formula-decl nil subterm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (/= const-decl "boolean" notequal nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (child_p_o_fd subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.q)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (child_p_o_fd 0
  (child_p_o_fd-1 nil 3516287505
   ("" (skosimp)
    (("" (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
      (("" (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
        (("" (name-replace "fd" "first_diff(sp, tp)" :hide? nil)
          (("" (assert)
            (("" (prop)
              (("" (skosimp)
                (("" (case "child(p!1, q!1)")
                  (("1" (inst -5 q!1)
                    (("1" (assert)
                      (("1" (lemma ext_preserve_symbol)
                        (("1" (inst-cp -1 t!1 sig!1 q!1)
                          (("1" (inst -1 s!1 sig!1 q!1)
                            (("1" (lemma app_term)
                              (("1" (inst-cp -1 p!1 q!1 t!1)
                                (("1" (inst -1 p!1 q!1 s!1)
                                  (("1" (assert)
                                    (("1" (split -1)
                                      (("1"
                                        (split -2)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide-all-but (-4 1))
                                          (("2"
                                            (expand child)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (lemma pos_ax)
                                                (("2"
                                                  (inst -1 q!1 p1!1 t!1)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-4 1))
                                        (("2"
                                          (expand child)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (lemma pos_ax)
                                              (("2"
                                                (inst -1 q!1 p1!1 s!1)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (expand child)
                        (("2" (skosimp)
                          (("2" (lemma pos_ax)
                            (("2" (inst-cp -1 q!1 p1!1 t!1)
                              (("2" (inst -1 q!1 p1!1 s!1)
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -4)
                    (("2" (lemma fd_equal_symbol)
                      (("2" (expand child -5)
                        (("2" (skosimp)
                          (("2" (case "length(p!1) < length(q!1)")
                            (("1" (lemma o_length_o[posnat])
                              (("1" (inst -1 p!1 fd q!1 p1!1)
                                (("1" (assert)
                                  (("1" (skosimp)
                                    (("1" (replace -1 -7)
                                      (("1"
                                        (lemma equal_prefix[posnat])
                                        (("1"
                                          (inst -1 p!1 fd "seq!1 o  p1!1")
                                          (("1"
                                            (rewrite o_assoc)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -4 sp tp seq!1)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (replace -7 -1 rl)
                                                      (("1"
                                                        (replace -6 -1 rl)
                                                        (("1"
                                                          (lemma pos_subterm)
                                                          (("1"
                                                            (inst-cp
                                                             -1
                                                             p!1
                                                             seq!1
                                                             s!1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               p!1
                                                               seq!1
                                                               t!1)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -3
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -3
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -5
                                                                         -3
                                                                         rl)
                                                                        (("1"
                                                                          (lemma
                                                                           ext_preserve_symbol)
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             s!1
                                                                             sig!1
                                                                             q!1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               t!1
                                                                               sig!1
                                                                               q!1)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-6
                                                                                      -8
                                                                                      -9
                                                                                      -10
                                                                                      -11
                                                                                      1
                                                                                      3))
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1
                                                                                       -5
                                                                                       rl)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           app_term)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "p!1 o fd"
                                                                                             "q!1"
                                                                                             "s!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -4
                                                                                                   2
                                                                                                   3)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     p!1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         position_s_first_diff)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           sp
                                                                                                           tp
                                                                                                           fd)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               pos_o_term)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 p!1
                                                                                                                 fd
                                                                                                                 s!1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     p!1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         position_s_first_diff)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           sp
                                                                                                           tp
                                                                                                           fd)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               pos_o_term)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 p!1
                                                                                                                 fd
                                                                                                                 s!1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     pos_ax)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       q!1
                                                                                                                       p1!1
                                                                                                                       s!1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide-all-but
                                                                                                   (-4
                                                                                                    1
                                                                                                    3))
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     child)
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       1
                                                                                                       p1!1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-6
                                                                                    -8
                                                                                    -9
                                                                                    -10
                                                                                    -11
                                                                                    1
                                                                                    3))
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     -5
                                                                                     rl)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         app_term)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "p!1 o fd"
                                                                                           "q!1"
                                                                                           "t!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               p!1)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   position_t_first_diff)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     sp
                                                                                                     tp
                                                                                                     fd)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         pos_o_term)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           p!1
                                                                                                           fd
                                                                                                           t!1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               pos_ax)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 q!1
                                                                                                                 p1!1
                                                                                                                 t!1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-8
                                                                                                                      1
                                                                                                                      3))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       child)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         p1!1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-4
                                                                      -6
                                                                      -7
                                                                      -8
                                                                      -9
                                                                      1))
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       (-5 1)
                                                                       rl)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (typepred
                                                                           p!1)
                                                                          (("2"
                                                                            (hide
                                                                             -2
                                                                             -3)
                                                                            (("2"
                                                                              (lemma
                                                                               position_s_first_diff)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 sp
                                                                                 tp
                                                                                 fd)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     pos_o_term)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       p!1
                                                                                       fd
                                                                                       s!1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -7
                                                                                           -1)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             pos_ax)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               q!1
                                                                                               p1!1
                                                                                               s!1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-4
                                                                    -6
                                                                    -7
                                                                    -8
                                                                    -9
                                                                    1))
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     (-5 1)
                                                                     rl)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         p!1)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -3)
                                                                          (("2"
                                                                            (lemma
                                                                             position_t_first_diff)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               sp
                                                                               tp
                                                                               fd)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   pos_o_term)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     p!1
                                                                                     fd
                                                                                     t!1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -7
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           pos_ax)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             q!1
                                                                                             p1!1
                                                                                             t!1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (-1 1 3))
                                                      (("2"
                                                        (expand child)
                                                        (("2"
                                                          (inst 1 p1!1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -6 1 rl)
                                                  (("2"
                                                    (replace -5 1 rl)
                                                    (("2"
                                                      (rewrite pos_subterm_ax)
                                                      (("1"
                                                        (rewrite
                                                         pos_subterm_ax)
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 -4 -5 -6 -7 1))
                                                          (("1"
                                                            (replace
                                                             -1
                                                             (-5 1)
                                                             rl)
                                                            (("1"
                                                              (typepred p!1)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (lemma
                                                                   position_t_first_diff)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     sp
                                                                     tp
                                                                     fd)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         pos_o_term)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           p!1
                                                                           fd
                                                                           t!1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -7
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 pos_ax)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   q!1
                                                                                   p1!1
                                                                                   t!1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-2 -4 -5 -6 -7 1))
                                                        (("2"
                                                          (replace
                                                           -1
                                                           (-5 1)
                                                           rl)
                                                          (("2"
                                                            (typepred p!1)
                                                            (("2"
                                                              (hide -2 -3 -4)
                                                              (("2"
                                                                (lemma
                                                                 position_s_first_diff)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   sp
                                                                   tp
                                                                   fd)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       pos_o_term)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         p!1
                                                                         fd
                                                                         s!1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -7
                                                                             -1)
                                                                            (("2"
                                                                              (lemma
                                                                               pos_ax)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 q!1
                                                                                 p1!1
                                                                                 s!1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "length(q!1) < length(p!1)")
                              (("1" (hide-all-but (-1 -6 1 2))
                                (("1" (lemma o_length_o[posnat])
                                  (("1" (inst -1 q!1 p1!1 p!1 fd)
                                    (("1" (assert)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (expand child)
                                          (("1"
                                            (inst 2 seq!1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replaces -3)
                                                  (("1"
                                                    (rewrite seq_o_empty)
                                                    (("1"
                                                      (decompose-equality -1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (lemma o_equals_o[posnat])
                                (("2" (inst -1 q!1 p1!1 p!1 fd)
                                  (("2" (assert)
                                    (("2" (inst -2 sp tp empty_seq)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (split)
                                          (("1"
                                            (rewrite subterm_empty_seq)
                                            (("1"
                                              (rewrite subterm_empty_seq)
                                              (("1"
                                                (replace -5 -1 rl)
                                                (("1"
                                                  (replace -4 -1 rl)
                                                  (("1"
                                                    (lemma
                                                     ext_preserve_symbol)
                                                    (("1"
                                                      (inst-cp
                                                       -1
                                                       s!1
                                                       sig!1
                                                       p!1)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         t!1
                                                         sig!1
                                                         p!1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "fd /= empty_seq")
                                                              (("1"
                                                                (lemma
                                                                 app_term)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p!1 o fd"
                                                                   p!1
                                                                   s!1)
                                                                  (("1"
                                                                    (lemma
                                                                     pos_o_term)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       p!1
                                                                       fd
                                                                       s!1)
                                                                      (("1"
                                                                        (lemma
                                                                         position_s_first_diff)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           sp
                                                                           tp
                                                                           fd)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               child
                                                                               1)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 fd)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-3 -7 1 6))
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         equal_prefix[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           p!1
                                                                           empty_seq
                                                                           p1!1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "fd /= empty_seq")
                                                            (("1"
                                                              (lemma app_term)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p!1 o fd"
                                                                 p!1
                                                                 t!1)
                                                                (("1"
                                                                  (lemma
                                                                   pos_o_term)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     p!1
                                                                     fd
                                                                     t!1)
                                                                    (("1"
                                                                      (lemma
                                                                       position_t_first_diff)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         sp
                                                                         tp
                                                                         fd)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             child
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               fd)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-3 -7 1 6))
                                                              (("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       equal_prefix[posnat])
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         p!1
                                                                         empty_seq
                                                                         p1!1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "fd /= empty_seq")
                                            (("1"
                                              (hide-all-but (-1 1))
                                              (("1"
                                                (expand child)
                                                (("1"
                                                  (inst 1 fd)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite empty_o_seq)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -5 1 6))
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (lemma
                                                       equal_prefix[posnat])
                                                      (("2"
                                                        (inst
                                                         -1
                                                         p!1
                                                         empty_seq
                                                         p1!1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (split)
                                          (("1"
                                            (expand positionsOF)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (expand*
                                                 only_empty_seq
                                                 union
                                                 member)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand positionsOF)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (expand*
                                                 only_empty_seq
                                                 union
                                                 member)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (first_diff def-decl "position" robinsonunification nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (child const-decl "bool" positions nil)
    (app_term formula-decl nil subterm nil)
    (pos_ax formula-decl nil positions nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (q!1 skolem-const-decl "{q: position |
   positionsOF(ext(sig!1)(s!1))(q) AND positionsOF(ext(sig!1)(t!1))(q)}"
     robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sp skolem-const-decl "term[variable, symbol, arity]"
     robinsonunificationEF nil)
    (seq!1 skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (tp skolem-const-decl "term[variable, symbol, arity]"
     robinsonunificationEF nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil))
   shostak))
 (separation_lwc_pos 0
  (separation_lwc_pos-1 nil 3517238341
   ("" (skosimp)
    (("" (expand left_without_children -1)
      (("" (skosimp)
        (("" (case "length(p!1) > length(r!1)")
          (("1" (lemma o_length_o[posnat])
            (("1" (inst -1 r!1 q1!1 p!1 p1!1)
              (("1" (assert)
                (("1" (skosimp)
                  (("1" (lemma equal_prefix[posnat])
                    (("1" (inst -1 r!1 "seq!1 o p1!1" q1!1)
                      (("1" (rewrite o_assoc)
                        (("1" (assert)
                          (("1" (replace -1 -6 rl)
                            (("1" (rewrite first_compo)
                              (("1" (expand left_without_children 3)
                                (("1" (inst 3 r!1 p1!2 seq!1)
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (replace -7 -2)
                                        (("1"
                                          (rewrite seq_o_empty)
                                          (("1"
                                            (decompose-equality -2)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (rewrite empty_0 -1)
                                  (("2" (replace -1 -3)
                                    (("2" (rewrite seq_o_empty)
                                      (("2" (decompose-equality -3) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "EXISTS (seq : position) : r!1 = p!1 o seq")
            (("1" (skosimp)
              (("1" (inst 5 "seq!1 o p1!2")
                (("1" (rewrite o_assoc)
                  (("1" (assert)
                    (("1" (lemma equal_prefix[posnat])
                      (("1" (inst -1 p!1 p1!1 "seq!1 o q1!1")
                        (("1" (rewrite o_assoc)
                          (("1" (assert)
                            (("1" (expand left_without_children 5)
                              (("1" (inst 5 seq!1 p1!2 q1!1)
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1 2))
              (("2" (lemma o_length_o[posnat])
                (("2" (inst -1 p!1 p1!1 r!1 q1!1)
                  (("2" (assert)
                    (("2" (prop)
                      (("2" (lemma o_equals_o[posnat])
                        (("2" (inst -1 p!1 p1!1 r!1 q1!1)
                          (("2" (assert)
                            (("2" (inst 2 empty_seq)
                              (("2" (rewrite seq_o_empty)
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((left_without_children const-decl "bool" positions nil)
    (position type-eq-decl nil positions nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (first_compo formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty_0 formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (o_length_o formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (o_equals_o formula-decl nil seq_extras structures))
   shostak))
 (lwc_o_fd_empty_seq 0
  (lwc_o_fd_empty_seq-1 nil 3517238602
   ("" (skosimp)
    (("" (name-replace "fd" "first_diff(s!1, t!1)" :hide? nil)
      (("" (assert)
        (("" (prop)
          (("" (name-replace "x1" "subtermOF(t!1, p1!1)" :hide? nil)
            (("" (copy -3)
              (("" (expand left_without_children -1)
                (("" (skosimp)
                  (("" (case "length(p1!1) > length(r!1)")
                    (("1" (lemma o_length_o[posnat])
                      (("1" (inst -1 r!1 p1!2 p1!1 p2!1)
                        (("1" (assert)
                          (("1" (skosimp)
                            (("1" (lemma equal_prefix[posnat])
                              (("1" (inst -1 r!1 "seq!1 o p2!1" p1!2)
                                (("1" (rewrite o_assoc)
                                  (("1" (assert)
                                    (("1" (replace -1 -6 rl)
                                      (("1"
                                        (rewrite first_compo)
                                        (("1"
                                          (lemma fd_equal_subterm)
                                          (("1"
                                            (inst -1 s!1 t!1 p1!1)
                                            (("1"
                                              (replace -9)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (replace -8)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -11 -12 -14 3))
                                                      (("1"
                                                        (replaces -3)
                                                        (("1"
                                                          (lemma
                                                           pos_subterm_ax)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             p1!1
                                                             p2!1
                                                             s!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 positionsOF
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   only_empty_seq)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 -3 -4 -6 1 2))
                                                    (("2"
                                                      (expand
                                                       left_without_children)
                                                      (("2"
                                                        (inst
                                                         1
                                                         r!1
                                                         seq!1
                                                         q1!1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (rewrite
                                                                 seq_o_empty)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-10 -11 1))
                                              (("2"
                                                (lemma pos_ax)
                                                (("2"
                                                  (inst -1 p1!1 p2!1 s!1)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-2 -3 1))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite empty_0)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (rewrite seq_o_empty)
                                                  (("2"
                                                    (decompose-equality -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "EXISTS(seq : position): r!1 = p1!1 o seq")
                      (("1" (skosimp)
                        (("1" (replace -1 -2)
                          (("1" (hide-all-but (-2 -5 -6 -11 2))
                            (("1" (lemma position_t_first_diff)
                              (("1" (inst -1 s!1 t!1 fd)
                                (("1" (assert)
                                  (("1" (lemma pos_subterm_ax)
                                    (("1"
                                      (inst -1 "p1!1" "seq!1 o q1!1" "t!1")
                                      (("1"
                                        (rewrite o_assoc)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand positionsOF -1)
                                            (("1"
                                              (expand only_empty_seq)
                                              (("1"
                                                (lemma seq_empty[posnat])
                                                (("1"
                                                  (inst -1 seq!1 q1!1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite empty_0 -2)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-2 -8 1 2))
                        (("2" (replaces -1)
                          (("2" (lemma o_length_o[posnat])
                            (("2" (inst -1 p1!1 p2!1 r!1 p1!2)
                              (("2" (assert)
                                (("2" (prop)
                                  (("2" (lemma o_equals_o[posnat])
                                    (("2" (inst -1 p1!1 p2!1 r!1 p1!2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst 2 empty_seq)
                                          (("2"
                                            (rewrite seq_o_empty)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil) (/= const-decl "boolean" notequal nil)
    (first_diff def-decl "position" robinsonunification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (o_length_o formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (fd_equal_subterm formula-decl nil robinsonunificationEF nil)
    (pos_ax formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (only_empty_seq const-decl "positions" positions nil)
    (TRUE const-decl "bool" booleans nil) (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (p1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (first_compo formula-decl nil seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (left_without_children const-decl "bool" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil))
   shostak))
 (lwc_p_o_fd 0
  (lwc_p_o_fd-1 nil 3516916753
   ("" (skosimp)
    (("" (name-replace "sp" "subtermOF(s!1, p!1)" :hide? nil)
      (("" (name-replace "tp" "subtermOF(t!1, p!1)" :hide? nil)
        (("" (name-replace "fd" "first_diff(sp, tp)" :hide? nil)
          (("" (assert)
            (("" (prop)
              (("" (skosimp)
                (("" (case "left_without_children(q!1, p!1)")
                  (("1" (lemma positions_of_ext)
                    (("1" (inst-cp -1 sig!1 s!1)
                      (("1" (inst -1 sig!1 t!1)
                        (("1" (decompose-equality -1)
                          (("1" (decompose-equality -2)
                            (("1" (inst -1 q!1)
                              (("1" (inst -2 q!1)
                                (("1" (assert)
                                  (("1" (expand* union member)
                                    (("1" (prop)
                                      (("1"
                                        (inst -7 q!1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite subterm_ext_commute)
                                            (("1"
                                              (rewrite subterm_ext_commute)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (expand left_without_children -6)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (case
                                               "length(p1!1) <= length(r!1)")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -2 -3 -4 -7 -8 2 3))
                                                (("1"
                                                  (typepred p!1)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (lemma
                                                       o_equals_o[posnat])
                                                      (("1"
                                                        (inst
                                                         -1
                                                         p1!1
                                                         p2!1
                                                         r!1
                                                         p1!2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -7
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 -4
                                                                 -8)
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     pos_subterm_ax)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       p1!1
                                                                       q1!1
                                                                       t!1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           positionsOF
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             only_empty_seq)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               o_length_o[posnat])
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 p1!1
                                                                 p2!1
                                                                 r!1
                                                                 p1!2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -7)
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -3
                                                                         -4
                                                                         -8
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           -4
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             pos_subterm_ax)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "p1!1"
                                                                               "seq!1 o q1!1"
                                                                               "t!1")
                                                                              (("2"
                                                                                (rewrite
                                                                                 o_assoc)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     positionsOF
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       only_empty_seq)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         seq_empty[posnat])
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           seq!1
                                                                                           q1!1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 empty_0
                                                                                                 -2)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -12 p1!1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (replace -2 5)
                                                    (("1"
                                                      (rewrite pos_subterm)
                                                      (("1"
                                                        (rewrite pos_subterm)
                                                        (("1"
                                                          (lemma
                                                           subterm_ext_commute)
                                                          (("1"
                                                            (inst-cp
                                                             -1
                                                             p1!1
                                                             t!1
                                                             sig!1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               p1!1
                                                               s!1
                                                               sig!1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-3
                                                                      -7
                                                                      1))
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         pos_ax)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           p1!1
                                                                           p2!1
                                                                           s!1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 -6 -7 -8 1 2 4 5))
                                                    (("2"
                                                      (lemma
                                                       o_length_o[posnat])
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "r!1"
                                                         "p1!2"
                                                         "p1!1"
                                                         "p2!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (case
                                                               "seq!1 = empty_seq")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1 -2 2))
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     seq_o_empty)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -4
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     equal_prefix[posnat])
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "r!1"
                                                                       "p1!2"
                                                                       "seq!1 o p2!1")
                                                                      (("2"
                                                                        (rewrite
                                                                         o_assoc)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             -6)
                                                                            (("2"
                                                                              (rewrite
                                                                               first_compo)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  -4
                                                                                  -6
                                                                                  1
                                                                                  2
                                                                                  4))
                                                                                (("1"
                                                                                  (expand
                                                                                   left_without_children)
                                                                                  (("1"
                                                                                    (inst
                                                                                     2
                                                                                     r!1
                                                                                     seq!1
                                                                                     q1!1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  2))
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     empty_0)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but (-1 -5 1))
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (lemma pos_ax)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           p1!1
                                                           p2!1
                                                           s!1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skosimp)
                                        (("3"
                                          (expand left_without_children -6)
                                          (("3"
                                            (skosimp)
                                            (("3"
                                              (case
                                               "length(p1!1) <= length(r!1)")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -3 -4 -5 -7 -8 2 3))
                                                (("1"
                                                  (typepred p!1)
                                                  (("1"
                                                    (hide -2 -3)
                                                    (("1"
                                                      (lemma
                                                       o_equals_o[posnat])
                                                      (("1"
                                                        (inst
                                                         -1
                                                         p1!1
                                                         p2!1
                                                         r!1
                                                         p1!2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -7
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 -4
                                                                 -8)
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     pos_subterm_ax)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       p1!1
                                                                       q1!1
                                                                       s!1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           positionsOF
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             only_empty_seq)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               o_length_o[posnat])
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 p1!1
                                                                 p2!1
                                                                 r!1
                                                                 p1!2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -7)
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -3
                                                                         -4
                                                                         -8
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           -4
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             pos_subterm_ax)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "p1!1"
                                                                               "seq!1 o q1!1"
                                                                               "s!1")
                                                                              (("2"
                                                                                (rewrite
                                                                                 o_assoc)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     positionsOF
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       only_empty_seq)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         seq_empty[posnat])
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           seq!1
                                                                                           q1!1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 empty_0
                                                                                                 -2)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -12 p1!1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (replace -3 5)
                                                    (("1"
                                                      (rewrite pos_subterm)
                                                      (("1"
                                                        (rewrite pos_subterm)
                                                        (("1"
                                                          (lemma
                                                           subterm_ext_commute)
                                                          (("1"
                                                            (inst-cp
                                                             -1
                                                             p1!1
                                                             t!1
                                                             sig!1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               p1!1
                                                               s!1
                                                               sig!1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-3 -4 1))
                                                                  (("1"
                                                                    (replaces
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       pos_ax)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         p1!1
                                                                         p2!1
                                                                         t!1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 -6 -7 -8 1 2 4 5))
                                                    (("2"
                                                      (lemma
                                                       o_length_o[posnat])
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "r!1"
                                                         "p1!2"
                                                         "p1!1"
                                                         "p2!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (case
                                                               "seq!1 = empty_seq")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1 -2 2))
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     seq_o_empty)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -4
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     equal_prefix[posnat])
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "r!1"
                                                                       "p1!2"
                                                                       "seq!1 o p2!1")
                                                                      (("2"
                                                                        (rewrite
                                                                         o_assoc)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             -6)
                                                                            (("2"
                                                                              (rewrite
                                                                               first_compo)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  -4
                                                                                  -6
                                                                                  1
                                                                                  2
                                                                                  4))
                                                                                (("1"
                                                                                  (expand
                                                                                   left_without_children)
                                                                                  (("1"
                                                                                    (inst
                                                                                     2
                                                                                     r!1
                                                                                     seq!1
                                                                                     q1!1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  2))
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     empty_0)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but (-1 -2 1))
                                                    (("2"
                                                      (replaces -2)
                                                      (("2"
                                                        (lemma pos_ax)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           p1!1
                                                           p2!1
                                                           t!1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (skosimp*)
                                        (("4"
                                          (expand left_without_children -9)
                                          (("4"
                                            (skosimp)
                                            (("4"
                                              (case
                                               "length(p1!1) <= length(r!1) OR length(p1!2) <= length(r!1)")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -2 -3 -4 -10 -11 1 2))
                                                  (("1"
                                                    (typepred p!1)
                                                    (("1"
                                                      (hide -1 -3)
                                                      (("1"
                                                        (lemma
                                                         o_equals_o[posnat])
                                                        (("1"
                                                          (inst
                                                           -1
                                                           p1!1
                                                           p2!1
                                                           r!1
                                                           p1!3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -7
                                                                 rl)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -3
                                                                   -4
                                                                   -8)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       pos_subterm_ax)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         p1!1
                                                                         q1!1
                                                                         t!1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             positionsOF
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               only_empty_seq)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 o_length_o[posnat])
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   p1!1
                                                                   p2!1
                                                                   r!1
                                                                   p1!3)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         -7)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -3
                                                                           -4
                                                                           -8
                                                                           1)
                                                                          (("2"
                                                                            (replace
                                                                             -4
                                                                             -1)
                                                                            (("2"
                                                                              (lemma
                                                                               pos_subterm_ax)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "p1!1"
                                                                                 "seq!1 o q1!1"
                                                                                 "t!1")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   o_assoc)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       positionsOF
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         only_empty_seq)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           seq_empty[posnat])
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             seq!1
                                                                                             q1!1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   empty_0
                                                                                                   -2)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -6 -7 -8 -10 -11 1 2))
                                                  (("2"
                                                    (typepred p!1)
                                                    (("2"
                                                      (hide -2 -3)
                                                      (("2"
                                                        (lemma
                                                         o_equals_o[posnat])
                                                        (("2"
                                                          (inst
                                                           -1
                                                           p1!2
                                                           p2!2
                                                           r!1
                                                           p1!3)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -7
                                                                 rl)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -3
                                                                   -4
                                                                   -8)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       pos_subterm_ax)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         p1!2
                                                                         q1!1
                                                                         s!1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             positionsOF
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               only_empty_seq)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 o_length_o[posnat])
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   p1!2
                                                                   p2!2
                                                                   r!1
                                                                   p1!3)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         -7)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -3
                                                                           -4
                                                                           -8
                                                                           1)
                                                                          (("2"
                                                                            (replace
                                                                             -4
                                                                             -1)
                                                                            (("2"
                                                                              (lemma
                                                                               pos_subterm_ax)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "p1!2"
                                                                                 "seq!1 o q1!1"
                                                                                 "s!1")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   o_assoc)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       positionsOF
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         only_empty_seq)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           seq_empty[posnat])
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             seq!1
                                                                                             q1!1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   empty_0
                                                                                                   -2)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (case
                                                   "length(p1!1) <= length(p1!2)")
                                                  (("1"
                                                    (lemma o_equals_o[posnat])
                                                    (("1"
                                                      (inst
                                                       -1
                                                       p1!1
                                                       p2!1
                                                       p1!2
                                                       p2!2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (inst -16 p1!2)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -3
                                                                    -4
                                                                    -6
                                                                    -8
                                                                    -10
                                                                    5))
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (rewrite
                                                                       pos_subterm)
                                                                      (("1"
                                                                        (rewrite
                                                                         pos_subterm)
                                                                        (("1"
                                                                          (lemma
                                                                           subterm_ext_commute)
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             p1!2
                                                                             s!1
                                                                             sig!1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               p1!2
                                                                               t!1
                                                                               sig!1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-2
                                                                    -10
                                                                    -11
                                                                    -12
                                                                    1
                                                                    2
                                                                    4
                                                                    5))
                                                                  (("2"
                                                                    (lemma
                                                                     o_length_o[posnat])
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       r!1
                                                                       p1!3
                                                                       p1!2
                                                                       p2!1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (case
                                                                             "seq!1 = empty_seq")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                2))
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   seq_o_empty)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -4
                                                                               -2)
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 -2)
                                                                                (("2"
                                                                                  (lemma
                                                                                   equal_prefix[posnat])
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     r!1
                                                                                     p1!3
                                                                                     "seq!1 o p2!1")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       o_assoc)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           -6)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             first_compo)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                -4
                                                                                                -6
                                                                                                1
                                                                                                2
                                                                                                4))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 left_without_children)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   2
                                                                                                   r!1
                                                                                                   seq!1
                                                                                                   q1!1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                2))
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   empty_0)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             o_length_o[posnat])
                                                            (("2"
                                                              (inst
                                                               -1
                                                               p1!1
                                                               p2!1
                                                               p1!2
                                                               p2!2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (lemma
                                                                     pos_ax)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       p1!1
                                                                       seq!1
                                                                       s!1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -18
                                                                           p1!1)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -5
                                                                                -6
                                                                                -8
                                                                                -12
                                                                                6))
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   pos_subterm)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     pos_subterm)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       subterm_ext_commute)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         p1!1
                                                                                         s!1
                                                                                         sig!1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           p1!1
                                                                                           t!1
                                                                                           sig!1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-4
                                                                                -12
                                                                                -13
                                                                                -14
                                                                                1
                                                                                3
                                                                                5
                                                                                6))
                                                                              (("2"
                                                                                (lemma
                                                                                 o_length_o[posnat])
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   r!1
                                                                                   p1!3
                                                                                   p1!1
                                                                                   p2!1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (case
                                                                                         "seq!2 = empty_seq")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -2
                                                                                            2))
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               seq_o_empty)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 -1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -4
                                                                                           -2)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             -2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               equal_prefix[posnat])
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 r!1
                                                                                                 p1!3
                                                                                                 "seq!2 o p2!1")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   o_assoc)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         first_compo)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-2
                                                                                                            -4
                                                                                                            -6
                                                                                                            1
                                                                                                            2
                                                                                                            4))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             left_without_children)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               2
                                                                                                               r!1
                                                                                                               seq!2
                                                                                                               q1!1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (1
                                                                                                            2))
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               empty_0)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma o_length_o[posnat])
                                                    (("2"
                                                      (inst
                                                       -1
                                                       p1!2
                                                       p2!2
                                                       p1!1
                                                       p2!1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (lemma pos_ax)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               p1!2
                                                               seq!1
                                                               t!1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -17
                                                                   p1!2)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -2
                                                                        -7
                                                                        -8
                                                                        -9
                                                                        -11
                                                                        6))
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (rewrite
                                                                           pos_subterm)
                                                                          (("1"
                                                                            (rewrite
                                                                             pos_subterm)
                                                                            (("1"
                                                                              (lemma
                                                                               subterm_ext_commute)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 p1!2
                                                                                 s!1
                                                                                 sig!1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   p1!2
                                                                                   t!1
                                                                                   sig!1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-7
                                                                        -11
                                                                        -12
                                                                        -13
                                                                        1
                                                                        4
                                                                        5
                                                                        6))
                                                                      (("2"
                                                                        (lemma
                                                                         o_length_o[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           r!1
                                                                           p1!3
                                                                           p1!2
                                                                           p2!2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (case
                                                                                 "seq!2 = empty_seq")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -2
                                                                                    2))
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       seq_o_empty)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -4
                                                                                   -2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     -2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       equal_prefix[posnat])
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         r!1
                                                                                         p1!3
                                                                                         "seq!2 o p2!2")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           o_assoc)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               -6)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 first_compo)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-2
                                                                                                    -4
                                                                                                    -6
                                                                                                    1
                                                                                                    2
                                                                                                    4))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     left_without_children)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       2
                                                                                                       r!1
                                                                                                       seq!2
                                                                                                       q1!1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    2))
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       empty_0)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma separation_lwc_pos)
                    (("2" (inst -1 p!1 fd q!1)
                      (("2" (assert)
                        (("2" (skosimp)
                          (("2" (hide -6)
                            (("2" (lemma fd_equal_subterm)
                              (("2" (lemma positions_of_ext)
                                (("2" (replace -3 2)
                                  (("2" (rewrite pos_subterm)
                                    (("2" (rewrite pos_subterm)
                                      (("2"
                                        (rewrite subterm_ext_commute)
                                        (("2"
                                          (lemma subterm_ext_commute)
                                          (("2"
                                            (inst -1 p!1 t!1 sig!1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1 2)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (replace -7 2)
                                                    (("2"
                                                      (replace -6 2)
                                                      (("2"
                                                        (lemma pos_subterm_ax)
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           p!1
                                                           q1!1
                                                           "ext(sig!1)(s!1)")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             p!1
                                                             q1!1
                                                             "ext(sig!1)(t!1)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 subterm_ext_commute)
                                                                (("2"
                                                                  (rewrite
                                                                   subterm_ext_commute)
                                                                  (("2"
                                                                    (replace
                                                                     -8
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -9
                                                                       -2)
                                                                      (("2"
                                                                        (hide
                                                                         -5
                                                                         -8
                                                                         -9
                                                                         -10
                                                                         1)
                                                                        (("2"
                                                                          (inst-cp
                                                                           -3
                                                                           sig!1
                                                                           sp)
                                                                          (("2"
                                                                            (inst
                                                                             -3
                                                                             sig!1
                                                                             tp)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               -3)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 -4)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   q1!1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     q1!1)
                                                                                    (("2"
                                                                                      (expand*
                                                                                       union
                                                                                       member)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -5
                                                                                             sp
                                                                                             tp
                                                                                             q1!1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 subterm_ext_commute)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   subterm_ext_commute)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (case
                                                                                               "p2!1 = empty_seq")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   seq_o_empty)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -9
                                                                                                     sp
                                                                                                     tp
                                                                                                     q1!1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (rewrite
                                                                                                       subterm_ext_commute)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -3
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 lwc_o_fd_empty_seq)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   q1!1
                                                                                                   p1!1
                                                                                                   p2!1
                                                                                                   sp
                                                                                                   tp)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (case
                                                                                               "p2!1 = empty_seq")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   seq_o_empty)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -3
                                                                                                     -4
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -9
                                                                                                       sp
                                                                                                       tp
                                                                                                       q1!1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 lwc_o_fd_empty_seq)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   q1!1
                                                                                                   p1!1
                                                                                                   p2!1
                                                                                                   tp
                                                                                                   sp)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       comutative_first_diff)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         sp
                                                                                                         tp
                                                                                                         fd)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (case
                                                                                               "length(p1!1) = length(p1!2)")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 o_equals_o[posnat])
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   p1!1
                                                                                                   p2!1
                                                                                                   p1!2
                                                                                                   p2!2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       equal_prefix[posnat])
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         p1!1
                                                                                                         p2!1
                                                                                                         p2!2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 left_without_children
                                                                                                                 -12)
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "EXISTS(seq:position) : r!1 = p1!2 o seq")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          -7
                                                                                                                          -8
                                                                                                                          -13
                                                                                                                          -16
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           position_s_first_diff)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             sp
                                                                                                                             tp
                                                                                                                             fd)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -2
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     pos_subterm_ax)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       p1!2
                                                                                                                                       "seq!1 o q1!2"
                                                                                                                                       sp)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         o_assoc)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             positionsOF
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               only_empty_seq)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 seq_empty[posnat])
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   seq!1
                                                                                                                                                   q1!2)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (rewrite
                                                                                                                                                         empty_0
                                                                                                                                                         -2)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (lemma
                                                                                                                       o_length_o[posnat])
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         r!1
                                                                                                                         p1!3
                                                                                                                         p1!2
                                                                                                                         p2!2)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (skosimp)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -12
                                                                                                                                 sp
                                                                                                                                 tp
                                                                                                                                 p1!2)
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -3
                                                                                                                                     4)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       pos_subterm)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         pos_subterm)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           subterm_ext_commute)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             subterm_ext_commute)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               p1!2
                                                                                                                                               tp
                                                                                                                                               sig!1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (replace
                                                                                                                                     -15)
                                                                                                                                    (("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -2
                                                                                                                                        -12
                                                                                                                                        -13
                                                                                                                                        -14
                                                                                                                                        1
                                                                                                                                        2
                                                                                                                                        3
                                                                                                                                        4))
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -2)
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -2
                                                                                                                                           -4)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             equal_prefix[posnat])
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               r!1
                                                                                                                                               "seq!1 o p2!2"
                                                                                                                                               p1!3)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 o_assoc)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     -6
                                                                                                                                                     rl)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       first_compo)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -1
                                                                                                                                                         -3
                                                                                                                                                         -5)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           left_without_children)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             1
                                                                                                                                                             r!1
                                                                                                                                                             seq!1
                                                                                                                                                             q1!2)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replaces
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     seq_o_empty)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       1
                                                                                                                                                                       empty_seq)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         seq_o_empty)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (rewrite
                                                                                                                                                           empty_0)
                                                                                                                                                          (("2"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             (-1
                                                                                                                                                              -3
                                                                                                                                                              2))
                                                                                                                                                            (("2"
                                                                                                                                                              (replaces
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 1
                                                                                                                                                                 empty_seq)
                                                                                                                                                                (("2"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   seq_o_empty)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     seq_o_empty)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide-all-but
                                                                                                                               (-1
                                                                                                                                -13
                                                                                                                                1
                                                                                                                                2))
                                                                                                                              (("2"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   o_length_o[posnat])
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     p1!2
                                                                                                                                     p2!2
                                                                                                                                     r!1
                                                                                                                                     p1!3)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (prop)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           o_equals_o[posnat])
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             p1!2
                                                                                                                                             p2!2
                                                                                                                                             r!1
                                                                                                                                             p1!3)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 3
                                                                                                                                                 empty_seq)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   seq_o_empty)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 o_length_o[posnat])
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   p1!1
                                                                                                   p2!1
                                                                                                   p1!2
                                                                                                   p2!2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           lwc_o_fd_empty_seq)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             p1!2
                                                                                                             p1!1
                                                                                                             seq!1
                                                                                                             sp
                                                                                                             tp)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -15)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (-1
                                                                                                                        -2
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           seq_o_empty)
                                                                                                                          (("1"
                                                                                                                            (decompose-equality
                                                                                                                             -1)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       left_without_children
                                                                                                                       -13)
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "length(p1!2) <= length(r!1)")
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             o_equals_o[posnat])
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               p1!2
                                                                                                                               p2!2
                                                                                                                               r!1
                                                                                                                               p1!3)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      -3
                                                                                                                                      -5
                                                                                                                                      -6
                                                                                                                                      -15
                                                                                                                                      3))
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       position_t_first_diff)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         sp
                                                                                                                                         tp
                                                                                                                                         fd)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -6
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (replaces
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (replaces
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   pos_subterm_ax)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     p1!1
                                                                                                                                                     "seq!1 o q1!2"
                                                                                                                                                     tp)
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       o_assoc)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           positionsOF
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             only_empty_seq)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               seq_empty[posnat])
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 seq!1
                                                                                                                                                                 q1!2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       empty_0
                                                                                                                                                                       -2)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (lemma
                                                                                                                                     o_length_o[posnat])
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       p1!2
                                                                                                                                       p2!2
                                                                                                                                       r!1
                                                                                                                                       p1!3)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp)
                                                                                                                                          (("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             (-1
                                                                                                                                              -3
                                                                                                                                              -5
                                                                                                                                              -6
                                                                                                                                              -15
                                                                                                                                              4))
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               position_t_first_diff)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 sp
                                                                                                                                                 tp
                                                                                                                                                 fd)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -6
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (replaces
                                                                                                                                                       -2)
                                                                                                                                                      (("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -2)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           pos_subterm_ax)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             p1!1
                                                                                                                                                             "seq!1 o seq!2 o q1!2"
                                                                                                                                                             tp)
                                                                                                                                                            (("2"
                                                                                                                                                              (rewrite
                                                                                                                                                               o_assoc)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 o_assoc)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     positionsOF
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       only_empty_seq)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (lemma
                                                                                                                                                                         seq_empty[posnat])
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -1
                                                                                                                                                                           "seq!1 o seq!2"
                                                                                                                                                                           q1!2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 empty_0
                                                                                                                                                                                 -2)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (lemma
                                                                                                                             o_length_o[posnat])
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               r!1
                                                                                                                               p1!3
                                                                                                                               p1!2
                                                                                                                               p2!2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      -7
                                                                                                                                      -14
                                                                                                                                      -15
                                                                                                                                      -16
                                                                                                                                      1
                                                                                                                                      2
                                                                                                                                      4
                                                                                                                                      5))
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       left_without_children)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         2
                                                                                                                                         r!1
                                                                                                                                         seq!2
                                                                                                                                         q1!2)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             equal_prefix[posnat])
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               r!1
                                                                                                                                               "seq!2 o p2!2"
                                                                                                                                               p1!3)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 o_assoc)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     -6
                                                                                                                                                     rl)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       first_compo)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (replaces
                                                                                                                                                             -3)
                                                                                                                                                            (("1"
                                                                                                                                                              (rewrite
                                                                                                                                                               seq_o_empty)
                                                                                                                                                              (("1"
                                                                                                                                                                (decompose-equality
                                                                                                                                                                 -2)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (rewrite
                                                                                                                                                           empty_0)
                                                                                                                                                          (("2"
                                                                                                                                                            (replaces
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (rewrite
                                                                                                                                                               seq_o_empty)
                                                                                                                                                              (("2"
                                                                                                                                                                (decompose-equality
                                                                                                                                                                 -2)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         o_length_o[posnat])
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           p1!2
                                                                                                           p2!2
                                                                                                           p1!1
                                                                                                           p2!1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (skosimp)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 lwc_o_fd_empty_seq)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   p1!1
                                                                                                                   p1!2
                                                                                                                   seq!1
                                                                                                                   tp
                                                                                                                   sp)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     comutative_first_diff)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       sp
                                                                                                                       tp
                                                                                                                       fd)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             -2
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -3
                                                                                                                                  2))
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     seq_o_empty)
                                                                                                                                    (("1"
                                                                                                                                      (decompose-equality
                                                                                                                                       -1)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (expand
                                                                                                                                 left_without_children
                                                                                                                                 -14)
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "length(p1!1) <= length(r!1)")
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       o_equals_o[posnat])
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         p1!1
                                                                                                                                         p2!1
                                                                                                                                         r!1
                                                                                                                                         p1!3)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                -4
                                                                                                                                                -10
                                                                                                                                                -11
                                                                                                                                                -16
                                                                                                                                                4))
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 position_s_first_diff)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   sp
                                                                                                                                                   tp
                                                                                                                                                   fd)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -6
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             pos_subterm_ax)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               p1!2
                                                                                                                                                               "seq!1 o q1!2"
                                                                                                                                                               sp)
                                                                                                                                                              (("1"
                                                                                                                                                                (rewrite
                                                                                                                                                                 o_assoc)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     positionsOF
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       only_empty_seq)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         seq_empty[posnat])
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -1
                                                                                                                                                                           seq!1
                                                                                                                                                                           q1!2)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 empty_0
                                                                                                                                                                                 -2)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (lemma
                                                                                                                                               o_length_o[posnat])
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 p1!1
                                                                                                                                                 p2!1
                                                                                                                                                 r!1
                                                                                                                                                 p1!3)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (skosimp)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       (-1
                                                                                                                                                        -4
                                                                                                                                                        -10
                                                                                                                                                        -11
                                                                                                                                                        -16
                                                                                                                                                        5))
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         position_s_first_diff)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           sp
                                                                                                                                                           tp
                                                                                                                                                           fd)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -6
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (replaces
                                                                                                                                                                 -2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (replaces
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     pos_subterm_ax)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       p1!2
                                                                                                                                                                       "seq!1 o seq!2 o q1!2"
                                                                                                                                                                       sp)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         o_assoc)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           o_assoc)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               positionsOF
                                                                                                                                                                               -1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 only_empty_seq)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   seq_empty[posnat])
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "seq!1 o seq!2"
                                                                                                                                                                                     q1!2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           empty_0
                                                                                                                                                                                           -2)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (lemma
                                                                                                                                       o_length_o[posnat])
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         r!1
                                                                                                                                         p1!3
                                                                                                                                         p1!1
                                                                                                                                         p2!1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp)
                                                                                                                                            (("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                -4
                                                                                                                                                -15
                                                                                                                                                -16
                                                                                                                                                -17
                                                                                                                                                1
                                                                                                                                                2
                                                                                                                                                5
                                                                                                                                                6))
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 left_without_children)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   2
                                                                                                                                                   r!1
                                                                                                                                                   seq!2
                                                                                                                                                   q1!2)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       equal_prefix[posnat])
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         r!1
                                                                                                                                                         "seq!2 o p2!1"
                                                                                                                                                         p1!3)
                                                                                                                                                        (("2"
                                                                                                                                                          (rewrite
                                                                                                                                                           o_assoc)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               -6
                                                                                                                                                               rl)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 first_compo)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         seq_o_empty)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (decompose-equality
                                                                                                                                                                           -2)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     empty_0)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         seq_o_empty)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (decompose-equality
                                                                                                                                                                           -2)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (first_diff def-decl "position" robinsonunification nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (left_without_children const-decl "bool" positions nil)
    (union const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (q!1 skolem-const-decl "{q: position |
   positionsOF(ext(sig!1)(s!1))(q) AND positionsOF(ext(sig!1)(t!1))(q)}"
     robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (<= const-decl "bool" reals nil)
    (o_equals_o formula-decl nil seq_extras structures)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (o_length_o formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (only_empty_seq const-decl "positions" positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (TRUE const-decl "bool" booleans nil)
    (pos_ax formula-decl nil positions nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (first_compo formula-decl nil seq_extras structures)
    (equal_prefix formula-decl nil seq_extras structures)
    (p1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (p1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (member const-decl "bool" sets nil)
    (positions_of_ext formula-decl nil substitution nil)
    (fd_equal_subterm formula-decl nil robinsonunificationEF nil)
    (tp skolem-const-decl "term[variable, symbol, arity]"
     robinsonunificationEF nil)
    (q1!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (sp skolem-const-decl "term[variable, symbol, arity]"
     robinsonunificationEF nil)
    (lwc_o_fd_empty_seq formula-decl nil robinsonunificationEF nil)
    (comutative_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (separation_lwc_pos formula-decl nil robinsonunificationEF nil))
   shostak))
 (np_p_o_fd_empty_unifiable_term_TCC1 0
  (np_p_o_fd_empty_unifiable_term_TCC1-1 nil 3512073554
   ("" (skosimp*)
    (("" (lemma position_s_first_diff)
      (("" (lemma position_t_first_diff)
        (("" (inst?)
          (("" (inst?)
            (("" (assert)
              (("" (typepred p!1)
                (("" (hide -3)
                  (("" (lemma pos_o_term)
                    (("" (inst-cp -1 p!1 fd!1 t!1)
                      (("" (inst -1 p!1 fd!1 s!1)
                        (("" (assert)
                          (("" (rewrite ext_preserv_pos)
                            (("" (rewrite ext_preserv_pos) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (term type-decl nil term_adt nil) (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (position_t_first_diff formula-decl nil robinsonunification nil))
   nil
   (np_p_o_fd_empty_unifiable_term subtype
    "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunificationEF.fd)"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}")))
 (np_p_o_fd_empty_unifiable_term 0
  (np_p_o_fd_empty_unifiable_term-1 nil 3514628084
   ("" (skosimp)
    ((""
      (name-replace "fd"
       "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide? nil)
      ((""
        (name-replace "sig1"
         "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
         nil)
        (("" (assert)
          ((""
            (name-replace "np"
             "next_position(ext(sig1)(s!1), ext(sig1)(t!1), p!1 o fd)" :hide?
             nil)
            (("" (prop)
              (("" (lemma child_p_o_fd)
                (("" (inst -1 sig1 s!1 t!1 p!1)
                  (("" (replace -4)
                    (("" (assert)
                      (("" (ground)
                        (("" (hide -7)
                          (("" (lemma lwc_p_o_fd)
                            (("" (inst -1 sig1 s!1 t!1 p!1)
                              (("" (replace -5)
                                (("" (assert)
                                  (("" (ground)
                                    (("" (hide -7)
                                      ((""
                                        (lemma next_pos_empty_equal_subterm)
                                        ((""
                                          (inst
                                           -1
                                           "ext(sig1)(s!1)"
                                           "ext(sig1)(t!1)"
                                           "p!1 o fd")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (case
                                                 "NOT p!1 o fd = empty_seq")
                                                (("1"
                                                  (case
                                                   "subtermOF(ext(sig1)(s!1), p!1 o fd) = subtermOF(ext(sig1)(t!1), p!1 o fd)")
                                                  (("1"
                                                    (lemma equal_term)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "ext(sig1)(s!1)"
                                                       "ext(sig1)(t!1)"
                                                       "p!1 o fd")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 -2 -3 -4 -7 4)
                                                    (("2"
                                                      (typepred p!1)
                                                      (("2"
                                                        (lemma
                                                         position_s_first_diff)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "subtermOF(s!1, p!1)"
                                                           "subtermOF(t!1, p!1)"
                                                           "fd")
                                                          (("2"
                                                            (lemma
                                                             position_t_first_diff)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "subtermOF(s!1, p!1)"
                                                               "subtermOF(t!1, p!1)"
                                                               "fd")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   pos_o_term)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     p!1
                                                                     fd
                                                                     s!1)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       p!1
                                                                       fd
                                                                       t!1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           pos_subterm)
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             p!1
                                                                             fd
                                                                             s!1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               p!1
                                                                               fd
                                                                               t!1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   subterm_ext_commute)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     subterm_ext_commute)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("2"
                                                                                          (name-replace
                                                                                           "sp"
                                                                                           "subtermOF(s!1, p!1)")
                                                                                          (("2"
                                                                                            (name-replace
                                                                                             "tp"
                                                                                             "subtermOF(t!1, p!1)")
                                                                                            (("2"
                                                                                              (copy
                                                                                               -10)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 link_of_frst_diff
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -12)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     member)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (decompose-equality
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "subtermOF(sp, fd)")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               ext
                                                                                                               3
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 3
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   idemp_sub_term_empty_inter)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "subtermOF(tp, fd)"
                                                                                                                     "sig1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand*
                                                                                                                         empty?
                                                                                                                         intersection
                                                                                                                         member)
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             dom_link_of_frst_diff_is)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               fd
                                                                                                                               sp
                                                                                                                               tp)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -14)
                                                                                                                                (("1"
                                                                                                                                  (expand*
                                                                                                                                   restrict
                                                                                                                                   singleton)
                                                                                                                                  (("1"
                                                                                                                                    (decompose-equality
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       x!1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (decompose-equality
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "subtermOF(tp, fd)")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               ext
                                                                                                               4
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 4
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   idemp_sub_term_empty_inter)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "subtermOF(sp, fd)"
                                                                                                                     "sig1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand*
                                                                                                                         empty?
                                                                                                                         intersection
                                                                                                                         member)
                                                                                                                        (("2"
                                                                                                                          (skosimp)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             dom_link_of_frst_diff_is)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               fd
                                                                                                                               sp
                                                                                                                               tp)
                                                                                                                              (("2"
                                                                                                                                (expand*
                                                                                                                                 restrict
                                                                                                                                 singleton)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -14)
                                                                                                                                  (("2"
                                                                                                                                    (decompose-equality
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       x!1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide
                                                     -1
                                                     -2
                                                     -3
                                                     -4
                                                     -5
                                                     -7
                                                     2
                                                     3
                                                     4)
                                                    (("3"
                                                      (typepred p!1)
                                                      (("3"
                                                        (hide -3)
                                                        (("3"
                                                          (lemma
                                                           position_s_first_diff)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "subtermOF(s!1, p!1)"
                                                             "subtermOF(t!1, p!1)"
                                                             fd)
                                                            (("3"
                                                              (lemma
                                                               position_t_first_diff)
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "subtermOF(s!1, p!1)"
                                                                 "subtermOF(t!1, p!1)"
                                                                 fd)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (lemma
                                                                     pos_o_term)
                                                                    (("3"
                                                                      (inst-cp
                                                                       -1
                                                                       p!1
                                                                       fd
                                                                       s!1)
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         p!1
                                                                         fd
                                                                         t!1)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (rewrite
                                                                             ext_preserv_pos)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide
                                                     -1
                                                     -2
                                                     -3
                                                     -4
                                                     -5
                                                     -7
                                                     2
                                                     3
                                                     4)
                                                    (("4"
                                                      (typepred p!1)
                                                      (("4"
                                                        (hide -2 -3)
                                                        (("4"
                                                          (lemma
                                                           position_s_first_diff)
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "subtermOF(s!1, p!1)"
                                                             "subtermOF(t!1, p!1)"
                                                             fd)
                                                            (("4"
                                                              (lemma
                                                               pos_o_term)
                                                              (("4"
                                                                (inst
                                                                 -1
                                                                 p!1
                                                                 fd
                                                                 s!1)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       ext_preserv_pos)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2 -3 -4 -5 -8)
                                                  (("2"
                                                    (lemma seq_empty[posnat])
                                                    (("2"
                                                      (inst -1 p!1 fd)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (rewrite
                                                             empty_0
                                                             -2)
                                                            (("2"
                                                              (hide -3)
                                                              (("2"
                                                                (rewrite
                                                                 empty_0
                                                                 -1)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     subterm_empty_seq)
                                                                    (("2"
                                                                      (rewrite
                                                                       subterm_empty_seq)
                                                                      (("2"
                                                                        (copy
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           link_of_frst_diff
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 subterm_empty_seq)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   subterm_empty_seq)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           s!1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             ext
                                                                                             3
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               3
                                                                                               rl)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 idemp_sub_term_empty_inter)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   t!1
                                                                                                   sig1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand*
                                                                                                       empty?
                                                                                                       intersection
                                                                                                       member)
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           dom_link_of_frst_diff_is)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             fd
                                                                                                             s!1
                                                                                                             t!1)
                                                                                                            (("1"
                                                                                                              (expand*
                                                                                                               restrict
                                                                                                               singleton)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   subterm_empty_seq)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     subterm_empty_seq)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -7)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (decompose-equality
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             x!1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           t!1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             ext
                                                                                             4
                                                                                             2)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               4
                                                                                               rl)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 idemp_sub_term_empty_inter)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   s!1
                                                                                                   sig1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand*
                                                                                                       empty?
                                                                                                       intersection
                                                                                                       member)
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           dom_link_of_frst_diff_is)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             fd
                                                                                                             s!1
                                                                                                             t!1)
                                                                                                            (("2"
                                                                                                              (expand*
                                                                                                               restrict
                                                                                                               singleton)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -6)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   subterm_empty_seq)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     subterm_empty_seq)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (decompose-equality
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             x!1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (prop)
                                            (("1"
                                              (hide -1 -2 -3 -4 -6 2 3)
                                              (("1"
                                                (lemma position_s_first_diff)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "subtermOF(s!1, p!1)"
                                                   "subtermOF(t!1, p!1)"
                                                   "fd")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred p!1)
                                                      (("1"
                                                        (hide -2 -3)
                                                        (("1"
                                                          (lemma pos_o_term)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             p!1
                                                             fd
                                                             s!1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 ext_preserv_pos)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 -2 -3 -4 -6 2 3)
                                              (("2"
                                                (lemma position_t_first_diff)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "subtermOF(s!1, p!1)"
                                                   "subtermOF(t!1, p!1)"
                                                   "fd")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred p!1)
                                                      (("2"
                                                        (hide -1 -3)
                                                        (("2"
                                                          (lemma pos_o_term)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             p!1
                                                             fd
                                                             t!1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 ext_preserv_pos)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide -2 -3 -4 -7)
                                              (("3"
                                                (lemma seq_empty[posnat])
                                                (("3"
                                                  (inst -1 p!1 fd)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (rewrite empty_0 -2)
                                                        (("3"
                                                          (hide -3)
                                                          (("3"
                                                            (rewrite
                                                             empty_0
                                                             -1)
                                                            (("3"
                                                              (replaces -1)
                                                              (("3"
                                                                (rewrite
                                                                 subterm_empty_seq)
                                                                (("3"
                                                                  (rewrite
                                                                   subterm_empty_seq)
                                                                  (("3"
                                                                    (copy -2)
                                                                    (("3"
                                                                      (expand
                                                                       link_of_frst_diff
                                                                       -1)
                                                                      (("3"
                                                                        (replace
                                                                         -4)
                                                                        (("3"
                                                                          (replace
                                                                           -2)
                                                                          (("3"
                                                                            (rewrite
                                                                             subterm_empty_seq)
                                                                            (("3"
                                                                              (rewrite
                                                                               subterm_empty_seq)
                                                                              (("3"
                                                                                (lift-if)
                                                                                (("3"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       s!1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         ext
                                                                                         3
                                                                                         1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           3
                                                                                           rl)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             idemp_sub_term_empty_inter)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               t!1
                                                                                               sig1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand*
                                                                                                   empty?
                                                                                                   intersection
                                                                                                   member)
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       dom_link_of_frst_diff_is)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         fd
                                                                                                         s!1
                                                                                                         t!1)
                                                                                                        (("1"
                                                                                                          (expand*
                                                                                                           restrict
                                                                                                           singleton)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               subterm_empty_seq)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 subterm_empty_seq)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (decompose-equality
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         x!1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (decompose-equality
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       t!1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         ext
                                                                                         4
                                                                                         2)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           4
                                                                                           rl)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             idemp_sub_term_empty_inter)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               s!1
                                                                                               sig1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand*
                                                                                                   empty?
                                                                                                   intersection
                                                                                                   member)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       dom_link_of_frst_diff_is)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         fd
                                                                                                         s!1
                                                                                                         t!1)
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           restrict
                                                                                                           singleton)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -6)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               subterm_empty_seq)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 subterm_empty_seq)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -7)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (decompose-equality
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         x!1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil) (/= const-decl "boolean" notequal nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sig1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (p!1 skolem-const-decl "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}"
     robinsonunificationEF nil)
    (fd skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_empty formula-decl nil seq_extras structures)
    (equal_term formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (pos_subterm formula-decl nil subterm nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (idemp_sub_term_empty_inter formula-decl nil substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (restrict const-decl "R" restrict nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (next_pos_empty_equal_subterm formula-decl nil robinsonunificationEF nil)
    (lwc_p_o_fd formula-decl nil robinsonunificationEF nil)
    (child_p_o_fd formula-decl nil robinsonunificationEF nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (np_p_o_fd_equal_subterm 0
  (np_p_o_fd_equal_subterm-1 nil 3516285690
   ("" (skosimp)
    ((""
      (name-replace "fd"
       "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide? nil)
      ((""
        (name-replace "sig1"
         "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
         nil)
        (("" (assert)
          ((""
            (name-replace "np"
             "next_position(ext(sig1)(s!1), ext(sig1)(t!1), p!1 o fd)" :hide?
             nil)
            (("" (prop)
              (("" (lemma child_p_o_fd)
                (("" (inst -1 sig1 s!1 t!1 p!1)
                  (("" (replace -4)
                    (("" (assert)
                      (("" (ground)
                        (("" (hide -6)
                          (("" (lemma lwc_p_o_fd)
                            (("" (inst -1 sig1 s!1 t!1 p!1)
                              (("" (replace -5)
                                (("" (assert)
                                  (("" (ground)
                                    (("" (hide -6)
                                      ((""
                                        (case
                                         "subtermOF(ext(sig1)(s!1), p!1 o fd) = subtermOF(ext(sig1)(t!1), p!1 o fd)")
                                        (("1"
                                          (lemma next_pos_equal_subterm)
                                          (("1"
                                            (inst
                                             -1
                                             "ext(sig1)(s!1)"
                                             "ext(sig1)(t!1)"
                                             "p!1 o fd")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -5)
                                                (("1" (ground) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -2 -3 -4 3)
                                              (("2"
                                                (typepred p!1)
                                                (("2"
                                                  (lemma
                                                   position_s_first_diff)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "subtermOF(s!1, p!1)"
                                                     "subtermOF(t!1, p!1)"
                                                     "fd")
                                                    (("2"
                                                      (lemma
                                                       position_t_first_diff)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "subtermOF(s!1, p!1)"
                                                         "subtermOF(t!1, p!1)"
                                                         "fd")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma pos_o_term)
                                                            (("2"
                                                              (inst-cp
                                                               -1
                                                               p!1
                                                               fd
                                                               s!1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 p!1
                                                                 fd
                                                                 t!1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     ext_preserv_pos)
                                                                    (("2"
                                                                      (rewrite
                                                                       ext_preserv_pos)
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (replace
                                                                           -7)
                                                                          (("2"
                                                                            (rewrite
                                                                             subterm_empty_seq)
                                                                            (("2"
                                                                              (rewrite
                                                                               subterm_empty_seq)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-8
                                                                                  3))
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2 -3 3 4)
                                          (("2"
                                            (lemma position_s_first_diff)
                                            (("2"
                                              (inst
                                               -1
                                               "subtermOF(s!1, p!1)"
                                               "subtermOF(t!1, p!1)"
                                               fd)
                                              (("2"
                                                (lemma position_t_first_diff)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "subtermOF(s!1, p!1)"
                                                   "subtermOF(t!1, p!1)"
                                                   fd)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma pos_o_term)
                                                      (("2"
                                                        (inst-cp
                                                         -1
                                                         p!1
                                                         fd
                                                         s!1)
                                                        (("2"
                                                          (inst -1 p!1 fd t!1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               subterm_ext_commute)
                                                              (("2"
                                                                (rewrite
                                                                 subterm_ext_commute)
                                                                (("2"
                                                                  (lemma
                                                                   pos_subterm)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     p!1
                                                                     fd
                                                                     s!1)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       p!1
                                                                       fd
                                                                       t!1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (name-replace
                                                                               "sp"
                                                                               "subtermOF(s!1, p!1)")
                                                                              (("2"
                                                                                (name-replace
                                                                                 "tp"
                                                                                 "subtermOF(t!1, p!1)")
                                                                                (("2"
                                                                                  (copy
                                                                                   -7)
                                                                                  (("2"
                                                                                    (expand
                                                                                     link_of_frst_diff
                                                                                     -1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -9)
                                                                                      (("2"
                                                                                        (expand
                                                                                         member)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "subtermOF(sp, fd)")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   ext
                                                                                                   2
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     2
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       idemp_sub_term_empty_inter)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "subtermOF(tp, fd)"
                                                                                                         "sig1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand*
                                                                                                             empty?
                                                                                                             intersection
                                                                                                             member)
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 dom_link_of_frst_diff_is)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   fd
                                                                                                                   sp
                                                                                                                   tp)
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     restrict
                                                                                                                     singleton)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -12)
                                                                                                                      (("1"
                                                                                                                        (decompose-equality
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           x!1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (decompose-equality
                                                                                               -1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "subtermOF(tp, fd)")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   ext
                                                                                                   3
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     3
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       idemp_sub_term_empty_inter)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "subtermOF(sp, fd)"
                                                                                                         "sig1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand*
                                                                                                             empty?
                                                                                                             intersection
                                                                                                             member)
                                                                                                            (("2"
                                                                                                              (skosimp)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 dom_link_of_frst_diff_is)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   fd
                                                                                                                   sp
                                                                                                                   tp)
                                                                                                                  (("2"
                                                                                                                    (expand*
                                                                                                                     restrict
                                                                                                                     singleton)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -12)
                                                                                                                      (("2"
                                                                                                                        (decompose-equality
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           x!1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -1 -2 -3 -4 2 3 4)
                                          (("3"
                                            (lemma position_t_first_diff)
                                            (("3"
                                              (inst
                                               -1
                                               "subtermOF(s!1, p!1)"
                                               "subtermOF(t!1, p!1)"
                                               "fd")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (typepred p!1)
                                                  (("3"
                                                    (hide -1 -3)
                                                    (("3"
                                                      (lemma pos_o_term)
                                                      (("3"
                                                        (inst -1 p!1 fd t!1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (rewrite
                                                             ext_preserv_pos)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide -1 -2 -3 -4 2 3 4)
                                          (("4"
                                            (lemma position_s_first_diff)
                                            (("4"
                                              (inst
                                               -1
                                               "subtermOF(s!1, p!1)"
                                               "subtermOF(t!1, p!1)"
                                               "fd")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (typepred p!1)
                                                  (("4"
                                                    (hide -2 -3)
                                                    (("4"
                                                      (lemma pos_o_term)
                                                      (("4"
                                                        (inst -1 p!1 fd s!1)
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (rewrite
                                                             ext_preserv_pos)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil) (/= const-decl "boolean" notequal nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm_ext_commute formula-decl nil substitution nil)
    (pos_subterm formula-decl nil subterm nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (idemp_sub_term_empty_inter formula-decl nil substitution nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (restrict const-decl "R" restrict nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (next_pos_equal_subterm formula-decl nil robinsonunificationEF nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (fd skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (p!1 skolem-const-decl "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}"
     robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (sig1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (lwc_p_o_fd formula-decl nil robinsonunificationEF nil)
    (child_p_o_fd formula-decl nil robinsonunificationEF nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (robinson_unification_algorithm_aux_TCC1 0
  (robinson_unification_algorithm_aux_TCC1-1 nil 3496419653
   ("" (skosimp)
    (("" (rewrite "finite_union")
      (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil)) nil)
       ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil)) nil))
      nil))
    nil)
   ((finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.s), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.t))"
    "finite_set[(V[variable, symbol, arity])]")))
 (robinson_unification_algorithm_aux_TCC2 0
  (robinson_unification_algorithm_aux_TCC2-1 nil 3496419653
   ("" (skosimp)
    (("" (lemma right_pos_subset)
      (("" (inst -1 "s!1" "p!1")
        (("" (lemma finite_subset[position])
          (("" (inst -1 "positionsOF(s!1)" "right_pos(s!1, p!1)")
            (("1" (assert) nil nil)
             ("2" (hide -1 2)
              (("2" (rewrite positions_of_terms_finite) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_pos_subset formula-decl nil robinsonunificationEF nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "robinsonunificationEF.right_pos(robinsonunificationEF.s, robinsonunificationEF.p)"
    "finite_set[position[variable, symbol, arity]]")))
 (robinson_unification_algorithm_aux_TCC3 0
  (robinson_unification_algorithm_aux_TCC3-1 nil 3496419653
   ("" (skosimp)
    (("" (rewrite "finite_union")
      (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil)) nil)
       ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil)) nil))
      nil))
    nil)
   ((finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.z`1), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.z`2))"
    "finite_set[(V[variable, symbol, arity])]")))
 (robinson_unification_algorithm_aux_TCC4 0
  (robinson_unification_algorithm_aux_TCC4-1 nil 3496419653
   ("" (skosimp)
    (("" (lemma right_pos_subset)
      (("" (inst -1 "z!1`1" "z!1`3")
        (("" (lemma finite_subset[position])
          (("" (inst -1 "positionsOF(z!1`1)" "right_pos(z!1`1, z!1`3)")
            (("1" (assert) nil nil)
             ("2" (hide -1 2)
              (("2" (rewrite positions_of_terms_finite) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_pos_subset formula-decl nil robinsonunificationEF nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (z!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "robinsonunificationEF.right_pos(robinsonunificationEF.z`1, robinsonunificationEF.z`3)"
    "finite_set[position[variable, symbol, arity]]")))
 (robinson_unification_algorithm_aux_TCC5 0
  (robinson_unification_algorithm_aux_TCC5-1 nil 3496419653
   ("" (skosimp)
    (("" (rewrite "finite_union")
      (("1" (hide 2) (("1" (rewrite "vars_of_term_finite") nil nil)) nil)
       ("2" (hide 2) (("2" (rewrite "vars_of_term_finite") nil nil)) nil))
      nil))
    nil)
   ((finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "sets[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].union(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.s), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].Vars(robinsonunificationEF.t))"
    "finite_set[(V[variable, symbol, arity])]")))
 (robinson_unification_algorithm_aux_TCC6 0
  (robinson_unification_algorithm_aux_TCC6-1 nil 3496419653
   ("" (skosimp*) (("" (hide -) (("" (rewrite iden_subs) nil nil)) nil)) nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (iden_subs formula-decl nil substitution nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "identity[(variables_term[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].V)].identity"
    "Sub[variable, symbol, arity]")))
 (robinson_unification_algorithm_aux_TCC7 0
  (robinson_unification_algorithm_aux_TCC7-1 nil 3496419653
   ("" (skosimp*)
    (("" (lemma next_position_is_position)
      (("" (inst-cp -1 s!1 t!1 p!1)
        (("" (inst -1 t!1 s!1 p!1)
          (("" (lemma next_position_commute)
            (("" (inst -1 s!1 t!1 p!1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((next_position_is_position formula-decl nil robinsonunificationEF nil)
    (next_position_commute formula-decl nil robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   nil
   (robinson_unification_algorithm_aux subtype "robinsonunificationEF.pi"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")))
 (robinson_unification_algorithm_aux_TCC8 0
  (robinson_unification_algorithm_aux_TCC8-1 nil 3496419653
   ("" (skosimp*)
    (("" (rewrite lex2_lt)
      (("" (lemma next_pos_to_the_right)
        (("" (inst -1 s!1 t!1 p!1)
          (("1" (assert) nil nil)
           ("2" (expand next_position -2) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil) (union const-decl "set" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positionsOF def-decl "positions" positions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (p!1 skolem-const-decl
     "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}"
     robinsonunificationEF nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (next_pos_to_the_right formula-decl nil robinsonunificationEF nil))
   nil
   (robinson_unification_algorithm_aux termination
    "robinsonunificationEF.robinson_unification_algorithm_aux(robinsonunificationEF.s, robinsonunificationEF.t, robinsonunificationEF.pi)"
    "nil")))
 (robinson_unification_algorithm_aux_TCC9 0
  (robinson_unification_algorithm_aux_TCC9-1 nil 3496419653
   ("" (skosimp) (("" (skosimp) nil nil)) nil) nil nil
   (robinson_unification_algorithm_aux subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)"
    "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p) /= t}")))
 (robinson_unification_algorithm_aux_TCC10 0
  (robinson_unification_algorithm_aux_TCC10-1 nil 3503934511
   ("" (skosimp*)
    ((""
      (name-replace "p!2"
       "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide? nil)
      (("" (lemma position_s_first_diff)
        (("" (lemma position_t_first_diff)
          (("" (inst -2 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
            (("" (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)" "p!2")
              (("" (assert)
                (("" (typepred p!1)
                  (("" (lemma pos_o_term)
                    (("" (inst-cp -1 p!1 p!2 s!1)
                      (("" (inst -1 p!1 p!2 t!1)
                        (("" (assert)
                          (("" (rewrite ext_preserv_pos)
                            (("" (rewrite ext_preserv_pos) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil) (/= const-decl "boolean" notequal nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunification[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].first_diff(subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p), subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)))"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}")))
 (robinson_unification_algorithm_aux_TCC11 0
  (robinson_unification_algorithm_aux_TCC11-1 nil 3503934511
   ("" (skosimp*)
    ((""
      (name-replace "q!1"
       "p!1 o first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
       nil)
      (("" (lemma next_position_is_position)
        (("" (inst-cp -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "q!1")
          (("" (inst -1 "ext(sig!1)(t!1)" "ext(sig!1)(s!1)" "q!1")
            (("1" (lemma next_position_commute)
              (("1" (inst -1 "ext(sig!1)(s!1)" "ext(sig!1)(t!1)" "q!1")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (lemma robinson_unification_algorithm_aux_TCC10)
              (("2" (inst -1 s!1 t!1 p!1)
                (("2" (replace -3 -1)
                  (("2" (assert)
                    (("2" (inst -1 sig!1)
                      (("2" (assert)
                        (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (O const-decl "finseq" finite_sequences nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (/= const-decl "boolean" notequal nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (robinson_unification_algorithm_aux_TCC10 subtype-tcc nil
     robinsonunificationEF nil)
    (next_position_commute formula-decl nil robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (q!1 skolem-const-decl "finseq[posnat]" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (next_position_is_position formula-decl nil robinsonunificationEF nil))
   nil
   (robinson_unification_algorithm_aux subtype "robinsonunificationEF.pi"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t))(p))}")))
 (robinson_unification_algorithm_aux_TCC12 0
  (robinson_unification_algorithm_aux_TCC12-1 nil 3503934511
   ("" (skosimp*)
    (("" (rewrite lex2_lt)
      (("" (flatten)
        (("" (hide 5)
          (("" (lemma termination_lemma_subterm)
            (("" (inst -1 s!1 t!1 p!1)
              (("1" (assert) (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but (1 2)) (("2" (flatten) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil) (union const-decl "set" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positionsOF def-decl "positions" positions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (p!1 skolem-const-decl
     "{p: position | positionsOF(s!1)(p) AND positionsOF(t!1)(p)}"
     robinsonunificationEF nil)
    (termination_lemma_subterm formula-decl nil robinsonunificationEF nil))
   nil
   (robinson_unification_algorithm_aux termination
    "robinsonunificationEF.robinson_unification_algorithm_aux(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.s), substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig)(robinsonunificationEF.t), robinsonunificationEF.pi)"
    "nil")))
 (robinson_unification_algorithm_aux_TCC13 0
  (robinson_unification_algorithm_aux_TCC13-1 nil 3503934511
   ("" (skosimp*) (("" (hide-all-but 5) (("" (rewrite subs_o) nil nil)) nil))
    nil)
   ((arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (subs_o formula-decl nil substitution nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].comp(robinsonunificationEF.sigma, robinsonunificationEF.sig)"
    "Sub[variable, symbol, arity]")))
 (robinson_unification_algorithm_aux_TCC14 0
  (robinson_unification_algorithm_aux_TCC14-1 nil 3516702576
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (robinson_unification_algorithm_aux subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p)"
    "{t: term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].term | subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p) /= t}")))
 (robinson_unification_algorithm_EF_TCC1 0
  (robinson_unification_algorithm_EF_TCC1-1 nil 3495978980
   ("" (skosimp*)
    (("" (split)
      (("1" (expand positionsOF)
        (("1" (lift-if)
          (("1" (expand* union IUnion member only_empty_seq) nil nil)) nil))
        nil)
       ("2" (expand positionsOF)
        (("2" (lift-if)
          (("2" (expand* union IUnion member only_empty_seq) nil nil)) nil))
        nil))
      nil))
    nil)
   ((only_empty_seq const-decl "positions" positions nil)
    (member const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (union const-decl "set" sets nil)
    (positionsOF def-decl "positions" positions nil))
   nil
   (robinson_unification_algorithm_EF subtype
    "finite_sequences[posnat].empty_seq"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.s)(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(robinsonunificationEF.t)(p))}")))
 (unifiable_implies_not_fail1 0
  (unifiable_implies_not_fail1-1 nil 3510532128
   ("" (skosimp)
    (("" (assert)
      ((""
        (name "sig!1"
              "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
        (("" (prop)
          (("" (expand link_of_frst_diff -3)
            (("" (lift-if)
              (("" (prop)
                (("1"
                  (name "p!2"
                        "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                  (("1" (replace -1)
                    (("1" (decompose-equality -2)
                      (("1" (case "xx = subtermOF(subtermOF(s!1, p!1), p!2)")
                        (("1" (inst -2 "xx")
                          (("1" (assert)
                            (("1" (expand fail -2)
                              (("1" (replace -1 1 rl)
                                (("1" (replace -2 1)
                                  (("1" (hide-all-but 1)
                                    (("1" (expand* member Vars)
                                      (("1"
                                        (inst 1 "#(1)")
                                        (("1"
                                          (expand subtermOF 1)
                                          (("1"
                                            (rewrite empty_0)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1" (grind) nil nil))
                                                  nil)
                                                 ("2"
                                                  (expand finseq_appl)
                                                  (("2"
                                                    (case
                                                     "#(xx)`seq(first( #(1)) - 1) = xx")
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (case
                                                         "rest( #(1)) = empty_seq")
                                                        (("1"
                                                          (replace -1 2)
                                                          (("1"
                                                            (hide-all-but 2)
                                                            (("1"
                                                              (expand
                                                               subtermOF)
                                                              (("1"
                                                                (rewrite
                                                                 empty_0)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (lemma
                                                             length_rest_0[posnat])
                                                            (("2"
                                                              (inst -1 "#(1)")
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1 2))
                                                                  (("1"
                                                                    (rewrite
                                                                     empty_0)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "#"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   "#"
                                                                   1)
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "#")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand positionsOF)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand* union IUnion member)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand "#")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1 2)
                                                  (("2"
                                                    (inst 1 1)
                                                    (("1"
                                                      (expand catenate)
                                                      (("1"
                                                        (expand finseq_appl)
                                                        (("1"
                                                          (inst 1 empty_seq)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (expand member)
                                                              (("1"
                                                                (expand
                                                                 positionsOF)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       only_empty_seq)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       only_empty_seq)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand*
                                                                       union
                                                                       IUnion
                                                                       member
                                                                       only_empty_seq)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -1 "subtermOF(subtermOF(s!1, p!1), p!2)")
                          (("2" (expand fail)
                            (("2" (assert)
                              (("2" (expand id)
                                (("2" (hide 1 2)
                                  (("2" (lemma first_diff_has_diff_argument)
                                    (("2"
                                      (inst
                                       -1
                                       "subtermOF(s!1, p!1)"
                                       "subtermOF(t!1, p!1)"
                                       "p!2")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma var_term_unifiable_not_var_in_term)
                  (("2"
                    (name "p!2"
                          "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2"
                          (inst -1 "subtermOF(subtermOF(s!1, p!1), p!2)"
                           "subtermOF(subtermOF(t!1, p!1), p!2)")
                          (("2" (assert)
                            (("2" (hide -1 -2)
                              (("2" (split)
                                (("1" (reveal -4)
                                  (("1" (lemma "position_s_first_diff")
                                    (("1"
                                      (inst
                                       -1
                                       "subtermOF(s!1, p!1)"
                                       "subtermOF(t!1, p!1)"
                                       "p!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "position_t_first_diff")
                                          (("1"
                                            (inst
                                             -1
                                             "subtermOF(s!1, p!1)"
                                             "subtermOF(t!1, p!1)"
                                             "p!2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "pos_o_term")
                                                (("1"
                                                  (inst -1 "p!1" "p!2" "s!1")
                                                  (("1"
                                                    (lemma "pos_o_term")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "p!1"
                                                       "p!2"
                                                       "t!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "pos_subterm")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p!1"
                                                             "p!2"
                                                             "s!1")
                                                            (("1"
                                                              (lemma
                                                               "pos_subterm")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p!1"
                                                                 "p!2"
                                                                 "t!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       rl)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-9
                                                                          1))
                                                                        (("1"
                                                                          (lemma
                                                                           unifiable_terms_unifiable_args)
                                                                          (("1"
                                                                            (expand
                                                                             unifiable)
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 sigma!1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "sigma!1"
                                                                                   "s!1"
                                                                                   "t!1"
                                                                                   "p!1 o p!2")
                                                                                  (("1"
                                                                                    (expand*
                                                                                     member
                                                                                     U)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (reveal -6)
                                    (("2" (lemma first_diff_has_diff_argument)
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (decompose-equality -1)
                  (("3"
                    (name "p!2"
                          "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))")
                    (("3" (replace -1)
                      (("3" (case "xx = subtermOF(subtermOF(t!1, p!1), p!2)")
                        (("1" (inst -3 "subtermOF(subtermOF(t!1, p!1), p!2)")
                          (("1" (expand fail)
                            (("1" (assert)
                              (("1" (replace -1 1 rl)
                                (("1" (replace -3 1)
                                  (("1" (hide-all-but 1)
                                    (("1" (expand* member Vars)
                                      (("1"
                                        (inst 1 "#(1)")
                                        (("1"
                                          (expand subtermOF 1)
                                          (("1"
                                            (rewrite empty_0)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but -1)
                                                  (("1" (grind) nil nil))
                                                  nil)
                                                 ("2"
                                                  (expand finseq_appl)
                                                  (("2"
                                                    (case
                                                     "#(xx)`seq(first( #(1)) - 1) = xx")
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (case
                                                         "rest( #(1)) = empty_seq")
                                                        (("1"
                                                          (replace -1 2)
                                                          (("1"
                                                            (hide-all-but 2)
                                                            (("1"
                                                              (expand
                                                               subtermOF)
                                                              (("1"
                                                                (rewrite
                                                                 empty_0)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (lemma
                                                             length_rest_0[posnat])
                                                            (("2"
                                                              (inst -1 "#(1)")
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1 2))
                                                                  (("1"
                                                                    (rewrite
                                                                     empty_0)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "#"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   "#"
                                                                   1)
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "#")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand positionsOF)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand* union IUnion member)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide 1)
                                                  (("1" (grind) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1 2)
                                                  (("2"
                                                    (inst 1 1)
                                                    (("1"
                                                      (expand catenate)
                                                      (("1"
                                                        (expand finseq_appl)
                                                        (("1"
                                                          (inst 1 empty_seq)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (expand member)
                                                              (("1"
                                                                (expand
                                                                 positionsOF)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       only_empty_seq)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       only_empty_seq)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand*
                                                                       union
                                                                       IUnion
                                                                       member
                                                                       only_empty_seq)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "subtermOF(subtermOF(t!1, p!1), p!2)")
                          (("2" (expand fail)
                            (("2" (assert)
                              (("2" (expand id)
                                (("2" (hide 1 2 3 -3 -4)
                                  (("2" (lemma first_diff_has_diff_argument)
                                    (("2"
                                      (inst
                                       -1
                                       "subtermOF(s!1, p!1)"
                                       "subtermOF(t!1, p!1)"
                                       "p!2")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (lemma var_term_unifiable_not_var_in_term)
                  (("4"
                    (name-replace "p!2"
                     "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
                     :hide? nil)
                    (("4"
                      (inst -2 "subtermOF(subtermOF(t!1, p!1), p!2)"
                       "subtermOF(subtermOF(s!1, p!1), p!2)")
                      (("4" (assert)
                        (("4" (hide (-2 -3 -4 2))
                          (("4" (lemma "position_s_first_diff")
                            (("4"
                              (inst -1 "subtermOF(s!1, p!1)"
                               "subtermOF(t!1, p!1)" "p!2")
                              (("4" (assert)
                                (("4" (lemma "position_t_first_diff")
                                  (("4"
                                    (inst -1 "subtermOF(s!1, p!1)"
                                     "subtermOF(t!1, p!1)" "p!2")
                                    (("4" (assert)
                                      (("4"
                                        (lemma "pos_o_term")
                                        (("4"
                                          (inst -1 "p!1" "p!2" "s!1")
                                          (("4"
                                            (lemma "pos_o_term")
                                            (("4"
                                              (inst -1 "p!1" "p!2" "t!1")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (lemma "pos_subterm")
                                                  (("4"
                                                    (inst
                                                     -1
                                                     "p!1"
                                                     "p!2"
                                                     "s!1")
                                                    (("4"
                                                      (lemma "pos_subterm")
                                                      (("4"
                                                        (inst
                                                         -1
                                                         "p!1"
                                                         "p!2"
                                                         "t!1")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (replace -1 1 rl)
                                                            (("4"
                                                              (replace
                                                               -2
                                                               1
                                                               rl)
                                                              (("4"
                                                                (hide-all-but
                                                                 (-8 1))
                                                                (("4"
                                                                  (lemma
                                                                   unifiable_terms_unifiable_args)
                                                                  (("4"
                                                                    (expand
                                                                     unifiable)
                                                                    (("4"
                                                                      (skosimp)
                                                                      (("4"
                                                                        (inst
                                                                         1
                                                                         sigma!1)
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "sigma!1"
                                                                           "s!1"
                                                                           "t!1"
                                                                           "p!1 o p!2")
                                                                          (("4"
                                                                            (expand*
                                                                             member
                                                                             U)
                                                                            (("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (hide
                                                                                 -2)
                                                                                (("4"
                                                                                  (expand
                                                                                   "unifier")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5"
                  (name-replace "p!2"
                   "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
                   :hide? nil)
                  (("5" (lemma first_diff_unifiable_vars)
                    (("5"
                      (inst -1 "subtermOF(s!1, p!1)" "subtermOF(t!1, p!1)"
                       "p!2")
                      (("5" (assert)
                        (("5" (hide-all-but (-3 1))
                          (("5" (lemma unifiable_terms_unifiable_args)
                            (("5" (expand unifiable)
                              (("5" (skosimp)
                                (("5" (inst 1 sigma!1)
                                  (("5" (inst -1 "sigma!1" "s!1" "t!1" "p!1")
                                    (("5" (expand* member U)
                                      (("5" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((first_diff_unifiable_vars formula-decl nil robinsonunification nil)
    (unifier const-decl "bool" unification nil)
    (var_term_unifiable_not_var_in_term formula-decl nil unification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (pos_subterm formula-decl nil subterm nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (O const-decl "finseq" finite_sequences nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (unifiable const-decl "bool" unification nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (first_diff def-decl "position" robinsonunification nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fail const-decl "Sub" robinsonunification nil)
    (first_diff_has_diff_argument formula-decl nil robinsonunification nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (member const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (union const-decl "set" sets nil)
    (catenate const-decl "positions" positions nil)
    (insert? const-decl "finseq" seq_extras structures)
    (add_first const-decl "finseq" seq_extras structures)
    (only_empty_seq const-decl "positions" positions nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (length_rest_0 formula-decl nil seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (empty_0 formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (ff const-decl "{f: symbol | arity(f) = 1}" robinsonunification nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (xx const-decl "(V)" robinsonunification nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (preserving_generality1 0
  (preserving_generality1-1 nil 3510536726
   ("" (skosimp)
    (("" (assert)
      (("" (inst 1 rho!1)
        ((""
          (name-replace "sig!1"
           "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
           :hide? nil)
          (("" (decompose-equality 1)
            (("" (copy -1)
              (("" (expand link_of_frst_diff -1)
                (("" (lift-if)
                  (("" (prop)
                    (("1"
                      (name-replace "p!2"
                       "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
                       :hide? nil)
                      (("1" (decompose-equality -2)
                        (("1" (inst -1 x!1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1" (expand comp 2)
                                (("1" (replace -2 2 rl)
                                  (("1" (replace -1 2)
                                    (("1"
                                      (lemma unifiable_terms_unifiable_args)
                                      (("1"
                                        (inst -1 rho!1 s!1 t!1 p!1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             unifiable_terms_unifiable_args)
                                            (("1"
                                              (inst
                                               -1
                                               "rho!1"
                                               "subtermOF(s!1, p!1)"
                                               "subtermOF(t!1, p!1)"
                                               "p!2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (-1 -5 2))
                                                  (("1"
                                                    (expand* member U unifier)
                                                    (("1"
                                                      (expand ext -1 1)
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-4 1))
                                                (("2"
                                                  (lemma
                                                   "position_t_first_diff")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "subtermOF(s!1, p!1)"
                                                     "subtermOF(t!1, p!1)"
                                                     "p!2")
                                                    (("2"
                                                      (lemma
                                                       "position_s_first_diff")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "subtermOF(s!1, p!1)"
                                                         "subtermOF(t!1, p!1)"
                                                         "p!2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand comp 3)
                                (("2" (replace -1 3 rl)
                                  (("2" (hide-all-but 3)
                                    (("2" (typepred x!1)
                                      (("2"
                                        (expand V)
                                        (("2"
                                          (expand ext)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 -3 1)
                      (("2" (lemma "unifiable_implies_not_fail1")
                        (("2" (inst?)
                          (("2" (replaces -3)
                            (("2" (assert)
                              (("2" (prop)
                                (("1" (assert) nil nil)
                                 ("2" (expand* "member" "U" "unifiable")
                                  (("2" (inst 1 "rho!1") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3"
                      (name-replace "p!2"
                       "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
                       :hide? nil)
                      (("3" (decompose-equality -2)
                        (("3" (inst -1 x!1)
                          (("3" (lift-if)
                            (("3" (prop)
                              (("1" (expand comp 3)
                                (("1" (replace -2 3 rl)
                                  (("1" (replace -1 3)
                                    (("1"
                                      (lemma unifiable_terms_unifiable_args)
                                      (("1"
                                        (inst -1 rho!1 s!1 t!1 p!1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             unifiable_terms_unifiable_args)
                                            (("1"
                                              (inst
                                               -1
                                               "rho!1"
                                               "subtermOF(s!1, p!1)"
                                               "subtermOF(t!1, p!1)"
                                               "p!2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (-1 -6 3))
                                                  (("1"
                                                    (expand* member U unifier)
                                                    (("1"
                                                      (expand ext -1 2)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-4 1))
                                                (("2"
                                                  (lemma
                                                   "position_t_first_diff")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "subtermOF(s!1, p!1)"
                                                     "subtermOF(t!1, p!1)"
                                                     "p!2")
                                                    (("2"
                                                      (lemma
                                                       "position_s_first_diff")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "subtermOF(s!1, p!1)"
                                                         "subtermOF(t!1, p!1)"
                                                         "p!2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand comp 4)
                                (("2" (replace -1 4 rl)
                                  (("2" (hide-all-but 4)
                                    (("2" (typepred x!1)
                                      (("2"
                                        (expand V)
                                        (("2"
                                          (expand ext)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide -1 -3 1 2)
                      (("4" (lemma "unifiable_implies_not_fail1")
                        (("4" (inst?)
                          (("4" (replaces -3)
                            (("4" (assert)
                              (("4" (prop)
                                (("1" (assert) nil nil)
                                 ("2" (expand* "member" "U" "unifiable")
                                  (("2" (inst 1 "rho!1") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide-all-but (-3 1 2))
                      (("5" (lemma first_diff_unifiable_vars)
                        (("5"
                          (name-replace "p!2"
                           "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))"
                           :hide? nil)
                          (("5"
                            (inst -2 "subtermOF(s!1, p!1)"
                             "subtermOF(t!1, p!1)" "p!2")
                            (("5" (assert)
                              (("5" (hide (-1 2 3))
                                (("5" (lemma "unifiable_terms_unifiable_args")
                                  (("5" (inst -1 "rho!1" "s!1" "t!1" "p!1")
                                    (("5" (assert)
                                      (("5"
                                        (expand* "member" "U" "unifiable")
                                        (("5" (inst 1 "rho!1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (first_diff_unifiable_vars formula-decl nil robinsonunification nil)
    (p!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (unifiable const-decl "bool" unification nil)
    (TRUE const-decl "bool" booleans nil)
    (unifiable_implies_not_fail1 formula-decl nil robinsonunificationEF nil)
    (first_diff def-decl "position" robinsonunification nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (p!1 skolem-const-decl "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}"
     robinsonunificationEF nil)
    (p!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (ext def-decl "term" substitution nil) (member const-decl "bool" sets nil)
    (unifier const-decl "bool" unification nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (comp const-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   shostak))
 (unifiable_preserves_unifiability1 0
  (unifiable_preserves_unifiability1-1 nil 3510434111
   ("" (skosimp)
    (("" (assert)
      (("" (prop)
        ((""
          (name-replace "sig!1" "link_of_frst_diff(subtermOF(s!1, p!1),
                                        subtermOF(t!1, p!1))")
          (("" (lemma preserving_generality)
            (("" (expand unifiable -2)
              (("" (skosimp)
                ((""
                  (inst -1 "sigma!1" "subtermOF(s!1, p!1)"
                   "subtermOF(t!1, p!1)")
                  (("" (lemma "unifiable_terms_unifiable_args")
                    (("" (inst?)
                      (("" (expand* "member" "U")
                        (("" (assert)
                          (("" (skosimp)
                            (("" (expand unifiable)
                              (("" (reveal -3)
                                (("" (replaces -1)
                                  (("" (inst 1 theta!1)
                                    (("" (hide -1)
                                      ((""
                                        (expand unifier)
                                        ((""
                                          (replaces -1)
                                          ((""
                                            (rewrite ext_o)
                                            ((""
                                              (expand o)
                                              (("" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unifiable const-decl "bool" unification nil)
    (TRUE const-decl "bool" booleans nil)
    (O const-decl "T3" function_props nil)
    (ext_o formula-decl nil substitution nil)
    (unifier const-decl "bool" unification nil)
    (member const-decl "bool" sets nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (preserving_generality formula-decl nil robinsonunification nil))
   shostak))
 (dom_ruaEF_subset_union_vars_aux 0
  (dom_ruaEF_subset_union_vars_aux-1 nil 3510458363
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                          Card(right_pos(s,p)))" ("s" "t" "p"))
    (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
      (("1" (expand robinson_unification_algorithm_aux 1)
        (("1" (assert)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide -3)
                (("1" (expand* subset? union member)
                  (("1" (skosimp)
                    (("1" (hide-all-but -2)
                      (("1" (expand Dom)
                        (("1" (flatten)
                          (("1" (expand identity) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 x!1 x!2 "next_position(x!1, x!2, x!3)")
                (("2" (lemma robinson_unification_algorithm_aux_TCC8)
                  (("2" (inst -1 x!1 x!2 x!3)
                    (("2" (assert)
                      (("2" (inst -1 "next_position(x!1, x!2, x!3)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand robinson_unification_algorithm_aux 2)
        (("2" (assert)
          (("2"
            (name-replace "p!1"
             "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :hide? nil)
            (("2"
              (name-replace "sig!1"
               "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))"
               :hide? nil)
              (("2"
                (name-replace "np"
                 "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)"
                 :hide? nil)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but (-1 -3 -6 2))
                      (("1" (lemma unifiable_implies_not_fail1)
                        (("1" (inst -1 "x!1" "x!2" "x!3")
                          (("1" (replace -3) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-3 -4 1 2 3))
                      (("2" (lemma "dom_link_of_frst_diff_is")
                        (("2"
                          (inst -1 "p!1" "subtermOF(x!1, x!3)"
                           "subtermOF(x!2, x!3)")
                          (("2" (assert)
                            (("2" (replace -2)
                              (("2" (replace -3)
                                (("2" (assert)
                                  (("2" (prop)
                                    (("1" (replaces -2)
                                      (("1"
                                        (expand "subset?")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand* "restrict" "union")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand "singleton")
                                                      (("1"
                                                        (expand "Vars")
                                                        (("1"
                                                          (lemma
                                                           "pos_subterm")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (lemma
                                                               "pos_o_term")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (lemma
                                                                   "position_s_first_diff")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "subtermOF(x!1, x!3)"
                                                                     "subtermOF(x!2, x!3)"
                                                                     "p!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -3
                                                                         -5
                                                                         rl)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-2
                                                                            -5
                                                                            1))
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "x!3 o p!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replaces -1)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (expand* "restrict" "union")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide (1 2))
                                                    (("2"
                                                      (expand "singleton")
                                                      (("2"
                                                        (expand "Vars")
                                                        (("2"
                                                          (lemma
                                                           "pos_subterm")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (lemma
                                                               "pos_o_term")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (lemma
                                                                   "position_t_first_diff")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "subtermOF(x!1, x!3)"
                                                                     "subtermOF(x!2, x!3)"
                                                                     "p!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -3
                                                                         -4
                                                                         rl)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-2
                                                                            -4
                                                                            1))
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "x!3 o p!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                      (("3" (lemma "robinson_unification_algorithm_aux_TCC12")
                        (("3" (inst -1 "x!1" "x!2" "x!3")
                          (("3" (assert)
                            (("3" (inst -1 "sig!1")
                              (("3" (assert)
                                (("3" (replace -5 -1)
                                  (("3" (inst -1 "np")
                                    (("3" (assert)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (replaces -1)
                                          (("3"
                                            (lemma
                                             "unifiable_preserves_unifiability1")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (replace -3)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (case
                                                     "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))), union(Vars(x!1), Vars(x!2)))")
                                                    (("1"
                                                      (hide-all-but (-1 -6 1))
                                                      (("1"
                                                        (expand subset?)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst -1 "x!4")
                                                            (("1"
                                                              (inst -3 "x!4")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "vars_ext_link_s_subset")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "x!1"
                                                         "x!2"
                                                         "x!3")
                                                        (("2"
                                                          (replace -4)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "vars_ext_link_t_subset")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x!1"
                                                                 "x!2"
                                                                 "x!3")
                                                                (("2"
                                                                  (replace -5)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -2
                                                                        1))
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             x!4)
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               x!4)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   3)
                                                                                  (("2"
                                                                                    (expand*
                                                                                     union
                                                                                     member)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (inst -4 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                      (("4" (lemma "robinson_unification_algorithm_aux_TCC12")
                        (("4" (inst -1 "x!1" "x!2" "x!3")
                          (("4" (assert)
                            (("4" (inst -1 "sig!1")
                              (("4" (assert)
                                (("4" (replace -4 -1)
                                  (("4" (inst -1 "np")
                                    (("4" (assert)
                                      (("4"
                                        (hide -1)
                                        (("4"
                                          (lemma
                                           "unifiable_preserves_unifiability1")
                                          (("4"
                                            (inst?)
                                            (("4"
                                              (replace -3)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (case
                                                   "subset?(union(Vars(ext(sig!1)(x!1)), Vars(ext(sig!1)(x!2))),union(Vars(x!1), Vars(x!2)))")
                                                  (("1"
                                                    (case
                                                     "subset?(Dom(sig!1), union(Vars(x!1), Vars(x!2)))")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -2 -7 2))
                                                      (("1"
                                                        (name-replace
                                                         "RU"
                                                         "robinson_unification_algorithm_aux(ext(sig!1)(x!1),
                                                                                      ext(sig!1)(x!2),
                                                                                      np)")
                                                        (("1"
                                                          (case
                                                           "subset?(union(Dom(RU),Dom(sig!1)), union(Vars(x!1), Vars(x!2)))")
                                                          (("1"
                                                            (hide (-2 -3 -4))
                                                            (("1"
                                                              (lemma "dom_o")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (expand*
                                                                   "subset?"
                                                                   "member")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x!4")
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "x!4")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand*
                                                               "subset?"
                                                               "member")
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "x!4")
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "x!4")
                                                                    (("2"
                                                                      (inst
                                                                       -4
                                                                       "x!4")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           (1
                                                                            3))
                                                                          (("2"
                                                                            (expand*
                                                                             "union"
                                                                             "member")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 -2 -6 -7 2 3))
                                                      (("2"
                                                        (lemma
                                                         "dom_link_of_frst_diff_is")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "p!1"
                                                           "subtermOF(x!1, x!3)"
                                                           "subtermOF(x!2, x!3)")
                                                          (("2"
                                                            (replace -3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("1"
                                                                    (expand*
                                                                     "subset?"
                                                                     "member")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x!4")
                                                                        (("1"
                                                                          (iff)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide
                                                                               (-1
                                                                                -4))
                                                                              (("1"
                                                                                (expand*
                                                                                 "restrict"
                                                                                 "singleton")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "position_s_first_diff")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "p!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "pos_o_term")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "pos_subterm")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       (-4
                                                                                                        -5)
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-4
                                                                                                          -5
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (expand*
                                                                                                           "union"
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "Vars"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "x!3 o p!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("2"
                                                                    (expand*
                                                                     "subset?"
                                                                     "member")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x!4")
                                                                        (("2"
                                                                          (iff)
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (hide
                                                                               (-1
                                                                                -3))
                                                                              (("2"
                                                                                (expand*
                                                                                 "restrict"
                                                                                 "singleton")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "position_t_first_diff")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "p!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "pos_o_term")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "pos_subterm")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       -4
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-4
                                                                                                          2))
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           "union"
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "Vars"
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "x!3 o p!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (-1 -5 -6 2 3))
                                                    (("2"
                                                      (lemma
                                                       "vars_ext_link_s_subset")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "vars_ext_link_t_subset")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (replace -4)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -2
                                                                        1))
                                                                      (("2"
                                                                        (expand*
                                                                         "subset?"
                                                                         "member")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x!4")
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "x!4")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   3)
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "union"
                                                                                     "member")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-3 -4 3))
                  (("2" (lemma "position_s_first_diff")
                    (("2"
                      (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                       "p!1")
                      (("2" (assert)
                        (("2" (lemma "pos_o_term")
                          (("2" (inst -1 "x!3" "p!1" "x!1")
                            (("2" (assert)
                              (("2" (lemma "position_t_first_diff")
                                (("2"
                                  (inst -1 "subtermOF(x!1, x!3)"
                                   "subtermOF(x!2, x!3)" "p!1")
                                  (("2" (assert)
                                    (("2" (lemma "pos_o_term")
                                      (("2"
                                        (inst -1 "x!3" "p!1" "x!2")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (-1 -3 1))
                                            (("2"
                                              (lemma "ext_preserv_pos")
                                              (("2"
                                                (inst
                                                 -1
                                                 "x!3 o p!1"
                                                 "x!1"
                                                 "sig!1")
                                                (("2"
                                                  (lemma "ext_preserv_pos")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "x!3 o p!1"
                                                     "x!2"
                                                     "sig!1")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "right_pos_subset")
        (("2" (inst?)
          (("2" (lemma "positions_of_terms_finite")
            (("2" (inst?)
              (("2" (lemma "finite_sets[position].finite_subset")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "right_pos_subset")
        (("4" (inst?)
          (("4" (lemma "positions_of_terms_finite")
            (("4" (inst?)
              (("4" (lemma "finite_sets[position].finite_subset")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "right_pos_subset")
        (("6" (inst?)
          (("6" (lemma "positions_of_terms_finite")
            (("6" (inst?)
              (("6" (lemma "finite_sets[position].finite_subset")
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma "right_pos_subset")
        (("8" (inst?)
          (("8" (lemma "positions_of_terms_finite")
            (("8" (inst?)
              (("8" (lemma "finite_sets[position].finite_subset")
                (("8" (inst?) (("8" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide 2)
      (("9" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil)
     ("10" (hide 2)
      (("10" (lemma "right_pos_subset")
        (("10" (inst?)
          (("10" (lemma "positions_of_terms_finite")
            (("10" (inst?)
              (("10" (lemma "finite_sets[position].finite_subset")
                (("10" (inst?) (("10" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide 2)
      (("11" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil))
    nil)
   ((s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (y!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (x!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (y!1 skolem-const-decl "term" robinsonunificationEF nil)
    (vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (right_pos_subset formula-decl nil robinsonunificationEF nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (robinson_unification_algorithm_aux_TCC8 termination-tcc nil
     robinsonunificationEF nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (singleton? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[term]" robinsonunificationEF nil)
    (finite_restrict application-judgement "finite_set[S]" restrict_set_props
     nil)
    (dom_o formula-decl nil substitution nil)
    (vars_ext_link_s_subset formula-decl nil robinsonunificationEF nil)
    (vars_ext_link_t_subset formula-decl nil robinsonunificationEF nil)
    (unifiable_preserves_unifiability1 formula-decl nil robinsonunificationEF
     nil)
    (robinson_unification_algorithm_aux_TCC12 termination-tcc nil
     robinsonunificationEF nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (TRUE const-decl "bool" booleans nil)
    (restrict const-decl "R" restrict nil)
    (singleton const-decl "(singleton?)" sets nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (unifiable_implies_not_fail1 formula-decl nil robinsonunificationEF nil)
    (ext def-decl "term" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (first_diff def-decl "position" robinsonunification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unifiable const-decl "bool" unification nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (robinson_unification_algorithm_aux def-decl "Sub" robinsonunificationEF
     nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (Vars const-decl "set[(V)]" subterm nil) (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (dom_ruaEF_subset_union_vars 0
  (dom_ruaEF_subset_union_vars-1 nil 3510458932
   ("" (skosimp)
    (("" (assert)
      (("" (expand "robinson_unification_algorithm_EF")
        (("" (lemma "dom_ruaEF_subset_union_vars_aux")
          (("" (inst -1 "s!1" "t!1" "empty_seq") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (dom_ruaEF_subset_union_vars_aux formula-decl nil robinsonunificationEF
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (robinson_unification_algorithm_EF const-decl "Sub" robinsonunificationEF
     nil))
   shostak))
 (vran_ruaEF_subset_union_aux_TCC1 0
  (vran_ruaEF_subset_union_aux_TCC1-1 nil 3510540476
   ("" (skosimp*)
    (("" (typepred "p!1")
      (("" (lemma "position_s_first_diff")
        (("" (inst?)
          (("" (assert)
            (("" (lemma "position_t_first_diff")
              (("" (inst?)
                (("" (assert)
                  (("" (lemma "pos_o_term")
                    (("" (inst -1 "p!1" "pi!1" "s!1")
                      (("" (lemma "pos_o_term")
                        (("" (inst -1 "p!1" "pi!1" "t!1")
                          (("" (assert)
                            (("" (hide-all-but (-1 -2 1))
                              (("" (lemma "ext_preserv_pos")
                                (("" (inst -1 "p!1 o pi!1" "s!1" "sig1!1")
                                  (("" (lemma "ext_preserv_pos")
                                    (("" (inst -1 "p!1 o pi!1" "t!1" "sig1!1")
                                      (("" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_s_first_diff formula-decl nil robinsonunification nil))
   nil
   (vran_ruaEF_subset_union_aux subtype
    "finite_sequences[posnat].o(robinsonunificationEF.p, robinsonunificationEF.pi)"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.t))(p))}")))
 (vran_ruaEF_subset_union_aux_TCC2 0
  (vran_ruaEF_subset_union_aux_TCC2-1 nil 3510618083
   ("" (skosimp*)
    (("" (lemma "next_position_is_position")
      (("" (inst -1 "ext(sig1!1)(s!1)" "ext(sig1!1)(t!1)" "p!1 o pi!1")
        (("" (replace -4 -1 rl)
          (("" (assert)
            (("" (lemma "next_position_is_position")
              ((""
                (inst -1 "ext(sig1!1)(t!1)" "ext(sig1!1)(s!1)" "p!1 o pi!1")
                (("1" (lemma "next_position_commute")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (hide 2)
                  (("2" (lemma "vran_ruaEF_subset_union_aux_TCC1")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (inst -1 "sig1!1")
                          (("2" (assert) (("2" (prop) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_position_is_position formula-decl nil robinsonunificationEF nil)
    (vran_ruaEF_subset_union_aux_TCC1 subtype-tcc nil robinsonunificationEF
     nil)
    (next_position_commute formula-decl nil robinsonunificationEF nil)
    (sig1!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (p!1 skolem-const-decl "{p: position |
   positionsOF(s!1)(p) AND
    positionsOF(t!1)(p) AND subtermOF(s!1, p) /= subtermOF(t!1, p)}"
     robinsonunificationEF nil)
    (pi!1 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (/= const-decl "boolean" notequal nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (ext def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil))
   nil
   (vran_ruaEF_subset_union_aux subtype "robinsonunificationEF.np"
    "{p: positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].position | booleans.AND(positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.s))(p), positions[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].positionsOF(substitution[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].ext(robinsonunificationEF.sig1)(robinsonunificationEF.t))(p))}")))
 (vran_ruaEF_subset_union_aux 0
  (vran_ruaEF_subset_union_aux-1 nil 3510540476
   ("" (skosimp)
    ((""
      (name-replace "sig!1"
       "link_of_frst_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide?
       nil)
      ((""
        (name-replace "pi!1"
         "first_diff(subtermOF(s!1, p!1), subtermOF(t!1, p!1))" :hide? nil)
        ((""
          (name-replace "np!1"
           "next_position(ext(sig!1)(s!1), ext(sig!1)(t!1), p!1 o pi!1)"
           :hide? nil)
          (("1"
            (name-replace "sig!2"
             "robinson_unification_algorithm_aux(ext(sig!1)(s!1), ext(sig!1)(t!1), np!1)"
             :hide? nil)
            (("1" (assert)
              (("1" (replace -2)
                (("1" (replace -1)
                  (("1" (prop)
                    (("1" (expand* "subset?" "union" "difference" "member")
                      (("1" (skosimp)
                        (("1" (split)
                          (("1" (expand* "VRan" "IUnion")
                            (("1" (skosimp)
                              (("1" (expand "comp")
                                (("1" (lemma "dom_o")
                                  (("1" (inst -1 "sig!2" "sig!1")
                                    (("1" (expand* "subset?" "union" "member")
                                      (("1"
                                        (inst -1 "i!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split)
                                            (("1"
                                              (case "Dom(sig!1)(i!1)")
                                              (("1"
                                                (lemma
                                                 "dom_ruaEF_subset_union_vars_aux")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "ext(sig!1)(s!1)"
                                                   "ext(sig!1)(t!1)"
                                                   "np!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (lemma
                                                         "unifiable_preserves_unifiability1")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           s!1
                                                           t!1
                                                           p!1)
                                                          (("1"
                                                            (replace -8)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "subset?")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "i!1")
                                                                  (("1"
                                                                    (expand*
                                                                     "union"
                                                                     "member")
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (lemma
                                                                         "ext_link_remove_x")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "i!1"
                                                                           "s!1"
                                                                           "t!1"
                                                                           "p!1")
                                                                          (("1"
                                                                            (replace
                                                                             -9)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "unifiable_implies_not_fail1")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "s!1"
                                                                                   "t!1"
                                                                                   "p!1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -10)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "ext_link_remove_x")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "i!1"
                                                                           "s!1"
                                                                           "t!1"
                                                                           "p!1")
                                                                          (("2"
                                                                            (replace
                                                                             -9)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "unifiable_implies_not_fail1")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "s!1"
                                                                                   "t!1"
                                                                                   "p!1")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -10)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "Dom" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (typepred "i!1")
                                                      (("2"
                                                        (expand "V")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             (-4 -10 2))
                                                            (("2"
                                                              (inst 1 "i!1")
                                                              (("2"
                                                                (expand "ext")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "NOT member(x!1, Vars(sig!1(i!1)))")
                                              (("1"
                                                (lemma
                                                 "var_ext_term_exists_var_term")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "sig!1(i!1)"
                                                   "sig!2"
                                                   "x!1")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (typepred "y!1")
                                                        (("1"
                                                          (case
                                                           "Dom(sig!2)(y!1)")
                                                          (("1"
                                                            (inst 3 "y!1")
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand "Dom" 1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (expand
                                                                   "Vars"
                                                                   -4)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (case
                                                                       "p!2 = empty_seq")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           " subtermOF"
                                                                           -5)
                                                                          (("1"
                                                                            (rewrite
                                                                             "empty_0"
                                                                             -5)
                                                                            (("1"
                                                                              (replace
                                                                               -5
                                                                               -4)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "p!2")
                                                                        (("2"
                                                                          (case
                                                                           "positionsOF(y!1) = only_empty_seq")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "only_empty_seq")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand*
                                                                               "V"
                                                                               "positionsOF")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst 1 "i!1")
                                                (("2"
                                                  (expand "member")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand* "VRan" "IUnion")
                            (("2" (skosimp)
                              (("2" (lemma "dom_o")
                                (("2" (inst -1 "sig!2" "sig!1")
                                  (("2" (expand* "subset?" "union" "member")
                                    (("2" (inst -1 "i!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split)
                                          (("1"
                                            (case "NOT Dom(sig!1)(i!1)")
                                            (("1"
                                              (expand "Dom" 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "comp")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide-all-but (-2 -9 1))
                                                      (("1"
                                                        (typepred "i!1")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (expand*
                                                             "V"
                                                             "ext")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst 1 "i!1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "dom_ruaEF_subset_union_vars_aux")
                                              (("2"
                                                (inst
                                                 -1
                                                 "ext(sig!1)(s!1)"
                                                 "ext(sig!1)(t!1)"
                                                 "np!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -5)
                                                    (("2"
                                                      (lemma
                                                       "unifiable_preserves_unifiability1")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "s!1"
                                                         "t!1"
                                                         "p!1")
                                                        (("2"
                                                          (replace -9)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand*
                                                               "subset?"
                                                               "union"
                                                               "member")
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "i!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "ext_link_remove_x")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "i!1"
                                                                       "s!1"
                                                                       "t!1"
                                                                       "p!1")
                                                                      (("2"
                                                                        (replace
                                                                         -10)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "unifiable_implies_not_fail1")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "s!1"
                                                                               "t!1"
                                                                               "p!1")
                                                                              (("2"
                                                                                (replace
                                                                                 -11)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "var_ext_term_exists_var_term")
                                            (("2"
                                              (expand "comp" -9)
                                              (("2"
                                                (inst
                                                 -1
                                                 "sig!1(i!1)"
                                                 "sig!2"
                                                 "x!1")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (case
                                                         "Dom(sig!2)(y!1)")
                                                        (("1"
                                                          (inst 1 "y!1")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand "Dom" 1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (replace -1 -3)
                                                              (("2"
                                                                (expand
                                                                 "Vars"
                                                                 -3)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (case
                                                                     "p!2 = empty_seq")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -4)
                                                                      (("1"
                                                                        (expand
                                                                         "subtermOF"
                                                                         -4)
                                                                        (("1"
                                                                          (rewrite
                                                                           "empty_0"
                                                                           -4)
                                                                          (("1"
                                                                            (expand
                                                                             "Dom"
                                                                             -6)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "p!2")
                                                                      (("2"
                                                                        (case
                                                                         "positionsOF(y!1) = only_empty_seq")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "only_empty_seq")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (typepred
                                                                             "y!1")
                                                                            (("2"
                                                                              (expand*
                                                                               "V"
                                                                               "positionsOF")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (hide 2)
                  (("2" (lemma "robinson_unification_algorithm_aux_TCC11")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (inst -1 "sig!1")
                          (("2" (lemma "unifiable_implies_not_fail1")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (inst -1 "np!1")
                                  (("2" (assert)
                                    (("2" (prop)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide-all-but 1)
                                          (("1"
                                            (expand "positionsOF")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand "only_empty_seq")
                                                  (("1" (propax) nil nil))
                                                  nil)
                                                 ("2"
                                                  (expand "only_empty_seq")
                                                  (("2" (propax) nil nil))
                                                  nil)
                                                 ("3"
                                                  (expand "union")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide (1 3 4))
                                                      (("3"
                                                        (expand*
                                                         "member"
                                                         "only_empty_seq")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 1)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "positionsOF")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand "only_empty_seq")
                                                  (("1" (propax) nil nil))
                                                  nil)
                                                 ("2"
                                                  (expand "only_empty_seq")
                                                  (("2" (propax) nil nil))
                                                  nil)
                                                 ("3"
                                                  (expand "union")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide-all-but 2)
                                                      (("3"
                                                        (expand*
                                                         "member"
                                                         "only_empty_seq")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (flatten)
              (("2" (hide 2)
                (("2" (lemma "robinson_unification_algorithm_aux_TCC10")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (inst -1 "sig!1")
                        (("2" (lemma "unifiable_implies_not_fail1")
                          (("2" (inst?)
                            (("2" (assert) (("2" (replaces -2) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (ext def-decl "term" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (robinson_unification_algorithm_aux_TCC11 subtype-tcc nil
     robinsonunificationEF nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (dom_o formula-decl nil substitution nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (y!1 skolem-const-decl "(V)" robinsonunificationEF nil)
    (sig!2 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty_0 formula-decl nil seq_extras structures)
    (only_empty_seq const-decl "positions" positions nil)
    (var_ext_term_exists_var_term formula-decl nil robinsonunification nil)
    (i!1 skolem-const-decl "{x | Dom(comp(sig!2, sig!1))(x)}"
     robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (unifiable_implies_not_fail1 formula-decl nil robinsonunificationEF nil)
    (ext_link_remove_x formula-decl nil robinsonunificationEF nil)
    (unifiable_preserves_unifiability1 formula-decl nil robinsonunificationEF
     nil)
    (dom_ruaEF_subset_union_vars_aux formula-decl nil robinsonunificationEF
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (comp const-decl "term" substitution nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (y!1 skolem-const-decl "(V)" robinsonunificationEF nil)
    (robinson_unification_algorithm_aux def-decl "Sub" robinsonunificationEF
     nil)
    (robinson_unification_algorithm_aux_TCC10 subtype-tcc nil
     robinsonunificationEF nil)
    (first_diff def-decl "position" robinsonunification nil))
   shostak))
 (dom_ran_ruaEF_disjoint 0
  (dom_ran_ruaEF_disjoint-1 nil 3510565835
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                            Card(right_pos(s,p)))" ("s" "t" "p"))
    (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
      (("1" (expand "robinson_unification_algorithm_aux" 1)
        (("1" (assert)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide -3)
                (("1" (expand "subset?")
                  (("1" (skosimp)
                    (("1" (hide-all-but -2)
                      (("1" (expand* "member" "VRan" "IUnion")
                        (("1" (skosimp)
                          (("1" (typepred "i!1")
                            (("1" (hide (-1 -3))
                              (("1" (expand* "Dom" "identity") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 x!1 x!2 "next_position(x!1, x!2, x!3)")
                (("2" (lemma "robinson_unification_algorithm_aux_TCC8")
                  (("2" (inst -1 "x!1" "x!2" "x!3")
                    (("2" (assert)
                      (("2" (inst -1 "next_position(x!1, x!2, x!3)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand robinson_unification_algorithm_aux 2)
        (("2" (assert)
          (("2"
            (name-replace "p!1"
             "first_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))" :hide? nil)
            (("2"
              (name-replace "sig!1"
               "link_of_frst_diff(subtermOF(x!1, x!3),subtermOF(x!2, x!3))"
               :hide? nil)
              (("2"
                (name-replace "np"
                 "next_position(ext(sig!1)(x!1),ext(sig!1)(x!2), x!3 o p!1)"
                 :hide? nil)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but (-1 -3 -6 2))
                      (("1" (lemma "unifiable_implies_not_fail1")
                        (("1" (inst -1 "x!1" "x!2" "x!3")
                          (("1" (replace -3) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-3 -4 1 2 3))
                      (("2" (expand "subset?")
                        (("2" (skosimp*)
                          (("2" (expand "member")
                            (("2" (expand* "VRan" "difference")
                              (("2" (expand "member")
                                (("2" (expand "IUnion")
                                  (("2" (skosimp*)
                                    (("2" (expand "union")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "Vars")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (expand "link_of_frst_diff")
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (inst -1 "i!1")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (typepred
                                                                 "p!2")
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -
                                                                   rl)
                                                                  (("1"
                                                                    (lemma
                                                                     "position_t_first_diff")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "subtermOF(x!1, x!3)"
                                                                       "subtermOF(x!2, x!3)"
                                                                       "p!1")
                                                                      (("1"
                                                                        (replace
                                                                         -7)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -6
                                                                            3))
                                                                          (("1"
                                                                            (lemma
                                                                             "pos_o_term")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p!1"
                                                                               "p!2"
                                                                               "subtermOF(x!2, x!3)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "pos_o_term")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!3"
                                                                                     "p!1 o p!2"
                                                                                     "x!2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "pos_subterm")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "p!1"
                                                                                           "p!2"
                                                                                           "subtermOF(x!2, x!3)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "pos_subterm")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "p!1 o p!2"
                                                                                                 "x!2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -2
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -7
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-7
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "x!3 o (p!1 o p!2)")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 -1)
                                                                (("2"
                                                                  (typepred
                                                                   "i!1")
                                                                  (("2"
                                                                    (expand
                                                                     "Dom")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil)
                                                       ("3"
                                                        (decompose-equality
                                                         -1)
                                                        (("3"
                                                          (inst -1 "i!1")
                                                          (("3"
                                                            (lift-if)
                                                            (("3"
                                                              (prop)
                                                              (("1"
                                                                (typepred
                                                                 "p!2")
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -
                                                                   rl)
                                                                  (("1"
                                                                    (lemma
                                                                     "position_s_first_diff")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "subtermOF(x!1, x!3)"
                                                                       "subtermOF(x!2, x!3)"
                                                                       "p!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -6
                                                                            3))
                                                                          (("1"
                                                                            (lemma
                                                                             "pos_o_term")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p!1"
                                                                               "p!2"
                                                                               "subtermOF(x!1, x!3)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "pos_o_term")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!3"
                                                                                     "p!1 o p!2"
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "pos_subterm")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "p!1"
                                                                                           "p!2"
                                                                                           "subtermOF(x!1, x!3)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "pos_subterm")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!3"
                                                                                                 "p!1 o p!2"
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -2
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -7
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-7
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "x!3 o (p!1 o p!2)")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 -1)
                                                                (("2"
                                                                  (typepred
                                                                   "i!1")
                                                                  (("2"
                                                                    (expand
                                                                     "Dom")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4" (assert) nil nil)
                                                       ("5" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x!4")
                                            (("2"
                                              (expand "V")
                                              (("2"
                                                (copy -4)
                                                (("2"
                                                  (expand
                                                   "link_of_frst_diff"
                                                   -1)
                                                  (("2"
                                                    (replace -6)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (inst -1 "x!4")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       rl)
                                                                      (("1"
                                                                        (typepred
                                                                         "i!1")
                                                                        (("1"
                                                                          (lemma
                                                                           "dom_link_of_frst_diff_is")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p!1"
                                                                             "subtermOF(x!1, x!3)"
                                                                             "subtermOF(x!2, x!3)")
                                                                            (("1"
                                                                              (replace
                                                                               -10
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (expand*
                                                                                         "restrict"
                                                                                         "singleton")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "Dom")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (decompose-equality
                                                           -1)
                                                          (("3"
                                                            (inst -1 "x!4")
                                                            (("3"
                                                              (lift-if)
                                                              (("3"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (hide -3)
                                                                    (("1"
                                                                      (lemma
                                                                       "dom_link_of_frst_diff_is")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p!1"
                                                                         "subtermOF(x!1, x!3)"
                                                                         "subtermOF(x!2, x!3)")
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -8
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "i!1")
                                                                                    (("1"
                                                                                      (expand*
                                                                                       "restrict"
                                                                                       "singleton")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "Dom")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                      (("3" (replace -1)
                        (("3"
                          (lemma "robinson_unification_algorithm_aux_TCC12")
                          (("3" (inst -1 "x!1" "x!2" "x!3")
                            (("3" (assert)
                              (("3" (inst -1 "sig!1")
                                (("3" (assert)
                                  (("3" (replace -5 -1)
                                    (("3" (inst -1 "np")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide -1)
                                          (("3"
                                            (hide -1)
                                            (("3"
                                              (lemma
                                               "unifiable_preserves_unifiability1")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (replace -3)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand*
                                                       "subset?"
                                                       "difference"
                                                       "union"
                                                       "member")
                                                      (("3"
                                                        (skosimp)
                                                        (("3"
                                                          (inst -6 "x!4")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (prop)
                                                              (("1"
                                                                (lemma
                                                                 "vars_ext_link_s_subset")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replace
                                                                     -6)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand*
                                                                         "subset?"
                                                                         "member")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "x!4")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1
                                                                                2))
                                                                              (("1"
                                                                                (expand*
                                                                                 "union"
                                                                                 "member")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "vars_ext_link_t_subset")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand*
                                                                         "subset?"
                                                                         "member")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "x!4")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1
                                                                                2))
                                                                              (("2"
                                                                                (expand*
                                                                                 "union"
                                                                                 "member")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4"
                      (name-replace "sig!2"
                       "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                       :hide? nil)
                      (("4" (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" np)
                        (("4" (lemma robinson_unification_algorithm_aux_TCC12)
                          (("4" (inst -1 x!1 x!2 x!3)
                            (("4" (assert)
                              (("4" (inst -1 sig!1)
                                (("4" (assert)
                                  (("4" (replace -5)
                                    (("4" (inst -1 np)
                                      (("4"
                                        (assert)
                                        (("4"
                                          (hide -1)
                                          (("4"
                                            (replace -1)
                                            (("4"
                                              (lemma
                                               unifiable_preserves_unifiability1)
                                              (("4"
                                                (inst -1 x!1 x!2 x!3)
                                                (("4"
                                                  (replace -4)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (expand*
                                                       subset?
                                                       difference
                                                       union
                                                       member)
                                                      (("4"
                                                        (skosimp)
                                                        (("4"
                                                          (lemma
                                                           vran_ruaEF_subset_union_aux)
                                                          (("4"
                                                            (inst
                                                             -1
                                                             x!1
                                                             x!2
                                                             x!3)
                                                            (("4"
                                                              (replace -7)
                                                              (("4"
                                                                (replace -6)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (replace
                                                                     -5)
                                                                    (("4"
                                                                      (replace
                                                                       -3)
                                                                      (("4"
                                                                        (expand
                                                                         subset?)
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           x!4)
                                                                          (("4"
                                                                            (expand*
                                                                             difference
                                                                             union
                                                                             member)
                                                                            (("4"
                                                                              (prop)
                                                                              (("1"
                                                                                (inst
                                                                                 -8
                                                                                 x!4)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -7
                                                                                        1
                                                                                        5))
                                                                                      (("1"
                                                                                        (lemma
                                                                                         vars_ext_link_s_subset)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           x!1
                                                                                           x!2
                                                                                           x!3)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 subset?)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   x!4)
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     union
                                                                                                     member)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -7
                                                                                        2
                                                                                        5))
                                                                                      (("2"
                                                                                        (lemma
                                                                                         vars_ext_link_t_subset)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           x!1
                                                                                           x!2
                                                                                           x!3)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 subset?)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   x!4)
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     union
                                                                                                     member)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -9
                                                                                 "x!4")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "dom_o")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "sig!2"
                                                                                         "sig!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!4")
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "union"
                                                                                               "member")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ext_link_remove_x")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!4"
                                                                                                     "x!1"
                                                                                                     "x!2"
                                                                                                     "x!3")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -10)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           member)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "dom_o")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "sig!2"
                                                                                         "sig!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!4")
                                                                                            (("2"
                                                                                              (expand*
                                                                                               "union"
                                                                                               "member")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "ext_link_remove_x")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!4"
                                                                                                     "x!1"
                                                                                                     "x!2"
                                                                                                     "x!3")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -10)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (lemma
                                                                                 "dom_link_of_frst_diff_is")
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "p!1"
                                                                                   "subtermOF(x!1, x!3)"
                                                                                   "subtermOF(x!2, x!3)")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (replace
                                                                                       -7)
                                                                                      (("3"
                                                                                        (expand*
                                                                                         "restrict"
                                                                                         "singleton")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "VRan"
                                                                                           -2)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "IUnion")
                                                                                            (("3"
                                                                                              (skosimp)
                                                                                              (("3"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -8
                                                                                                         -3
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "link_of_frst_diff"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -9)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "Vars"
                                                                                                                 (-1
                                                                                                                  3))
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "p!2")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "position_t_first_diff")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "subtermOF(x!1, x!3)"
                                                                                                                         "subtermOF(x!2, x!3)"
                                                                                                                         "p!1")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -11)
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-1
                                                                                                                              -2
                                                                                                                              -3
                                                                                                                              3))
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "pos_o_term")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "p!1"
                                                                                                                                 "p!2"
                                                                                                                                 "subtermOF(x!2, x!3)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "pos_o_term")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "x!3"
                                                                                                                                       "p!1 o p!2"
                                                                                                                                       "x!2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "pos_subterm")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "p!1"
                                                                                                                                             "p!2"
                                                                                                                                             "subtermOF(x!2, x!3)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "pos_subterm")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "x!3"
                                                                                                                                                   "p!1 o p!2"
                                                                                                                                                   "x!2")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       -2
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -2
                                                                                                                                                         -7
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           (-7
                                                                                                                                                            1))
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             1
                                                                                                                                                             "x!3 o (p!1 o p!2)")
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "link_of_frst_diff"
                                                                                                                 -9)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (decompose-equality
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -7
                                                                                                         -2
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "link_of_frst_diff"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -8)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "vars?(subtermOF(subtermOF(x!2, x!3), p!1))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "Vars"
                                                                                                                     (-1
                                                                                                                      3))
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "p!2")
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "position_s_first_diff")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "subtermOF(x!1, x!3)"
                                                                                                                             "subtermOF(x!2, x!3)"
                                                                                                                             "p!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -3
                                                                                                                                  3))
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "pos_o_term")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "p!1"
                                                                                                                                     "p!2"
                                                                                                                                     "subtermOF(x!1, x!3)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "pos_o_term")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "x!3"
                                                                                                                                           "p!1 o p!2"
                                                                                                                                           "x!1")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "pos_subterm")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "p!1"
                                                                                                                                                 "p!2"
                                                                                                                                                 "subtermOF(x!1, x!3)")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "pos_subterm")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x!3"
                                                                                                                                                       "p!1 o p!2"
                                                                                                                                                       "x!1")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           -2
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -2
                                                                                                                                                             -7
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-7
                                                                                                                                                                1))
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 1
                                                                                                                                                                 "x!3 o (p!1 o p!2)")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "link_of_frst_diff"
                                                                                                                     -9)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 (-8
                                                                                                                  -10
                                                                                                                  1
                                                                                                                  2))
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "first_diff_unifiable_vars")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "subtermOF(x!1, x!3)"
                                                                                                                     "subtermOF(x!2, x!3)"
                                                                                                                     "p!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-2
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "unifiable")
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "sigma!1")
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "unifiable_terms_unifiable_args")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "sigma!1"
                                                                                                                                   "x!1"
                                                                                                                                   "x!2"
                                                                                                                                   "x!3")
                                                                                                                                  (("2"
                                                                                                                                    (expand*
                                                                                                                                     "member"
                                                                                                                                     "U")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-10
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "position_t_first_diff")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "subtermOF(x!1, x!3)"
                                                                                                         "subtermOF(x!2, x!3)"
                                                                                                         "p!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (lemma
                                                                                 "dom_o")
                                                                                (("4"
                                                                                  (inst
                                                                                   -1
                                                                                   "sig!2"
                                                                                   "sig!1")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "subset?")
                                                                                    (("4"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!4")
                                                                                      (("4"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (expand*
                                                                                             "union"
                                                                                             "member")
                                                                                            (("4"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -3
                                                                                                -8
                                                                                                3
                                                                                                4))
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 "dom_ran_link_disjoint")
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "subtermOF(x!1, x!3)"
                                                                                                   "subtermOF(x!2, x!3)")
                                                                                                  (("4"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      (("4"
                                                                                                        (expand*
                                                                                                         "VRan"
                                                                                                         "IUnion")
                                                                                                        (("4"
                                                                                                          (skosimp)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x!4"
                                                                                                             "sig!1(i!1)")
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (-2
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "member")
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand*
                                                                                                               "member"
                                                                                                               "Ran")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "i!1")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "i!1")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-3 3))
                  (("2" (lemma "position_s_first_diff")
                    (("2"
                      (inst -1 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                       "p!1")
                      (("2" (assert)
                        (("2" (lemma "pos_o_term")
                          (("2" (inst -1 "x!3" "p!1" "x!1")
                            (("2" (assert)
                              (("2" (rewrite "ext_preserv_pos")
                                (("2" (lemma "position_t_first_diff")
                                  (("2"
                                    (inst -1 "subtermOF(x!1, x!3)"
                                     "subtermOF(x!2, x!3)" "p!1")
                                    (("2" (assert)
                                      (("2"
                                        (lemma "pos_o_term")
                                        (("2"
                                          (inst -1 "x!3" "p!1" "x!2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite "ext_preserv_pos")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "right_pos_subset")
        (("2" (inst?)
          (("2" (lemma "positions_of_terms_finite")
            (("2" (inst?)
              (("2" (lemma "finite_sets[position].finite_subset")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "right_pos_subset")
        (("4" (inst?)
          (("4" (lemma "positions_of_terms_finite")
            (("4" (inst?)
              (("4" (lemma "finite_sets[position].finite_subset")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma "right_pos_subset")
        (("6" (inst?)
          (("6" (lemma "positions_of_terms_finite")
            (("6" (inst?)
              (("6" (lemma "finite_sets[position].finite_subset")
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil)
     ("8" (hide 2)
      (("8" (lemma "right_pos_subset")
        (("8" (inst?)
          (("8" (lemma "positions_of_terms_finite")
            (("8" (inst?)
              (("8" (lemma "finite_sets[position].finite_subset")
                (("8" (inst?) (("8" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide 2)
      (("9" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil)
     ("10" (hide 2)
      (("10" (lemma "right_pos_subset")
        (("10" (inst?)
          (("10" (lemma "positions_of_terms_finite")
            (("10" (inst?)
              (("10" (lemma "finite_sets[position].finite_subset")
                (("10" (inst?) (("10" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide 2)
      (("11" (rewrite finite_union)
        (("1" (rewrite vars_of_term_finite) nil nil)
         ("2" (rewrite vars_of_term_finite) nil nil))
        nil))
      nil))
    nil)
   ((s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (y!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (x!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (y!1 skolem-const-decl "term" robinsonunificationEF nil)
    (vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (right_pos_subset formula-decl nil robinsonunificationEF nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (robinson_unification_algorithm_aux_TCC8 termination-tcc nil
     robinsonunificationEF nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (vran_ruaEF_subset_union_aux formula-decl nil robinsonunificationEF nil)
    (dom_o formula-decl nil substitution nil)
    (ext_link_remove_x formula-decl nil robinsonunificationEF nil)
    (vars? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (first_diff_unifiable_vars formula-decl nil robinsonunification nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (unifiable_terms_unifiable_args formula-decl nil unification nil)
    (Ran const-decl "set[term[variable, symbol, arity]]" substitution nil)
    (i!1 skolem-const-decl "{x | Dom(sig!1)(x)}" robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (x!4 skolem-const-decl "(V[variable, symbol, arity])"
     robinsonunificationEF nil)
    (dom_ran_link_disjoint formula-decl nil robinsonunification nil)
    (robinson_unification_algorithm_aux_TCC12 termination-tcc nil
     robinsonunificationEF nil)
    (unifiable_preserves_unifiability1 formula-decl nil robinsonunificationEF
     nil)
    (vars_ext_link_s_subset formula-decl nil robinsonunificationEF nil)
    (vars_ext_link_t_subset formula-decl nil robinsonunificationEF nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (dom_link_of_frst_diff_is formula-decl nil robinsonunification nil)
    (finite_restrict application-judgement "finite_set[S]" restrict_set_props
     nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[term]" robinsonunificationEF nil)
    (restrict const-decl "R" restrict nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (unifiable_implies_not_fail1 formula-decl nil robinsonunificationEF nil)
    (ext def-decl "term" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (first_diff def-decl "position" robinsonunification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (robinson_unification_algorithm_aux def-decl "Sub" robinsonunificationEF
     nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (difference const-decl "set" sets nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (subset? const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (Vars const-decl "set[(V)]" subterm nil) (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (ruaEF_fails_iff_non_unifiable_aux_TCC1 0
  (ruaEF_fails_iff_non_unifiable_aux_TCC1-1 nil 3514128796
   ("" (skosimp*)
    (("" (hide -1)
      (("" (lemma app_term)
        (("" (inst -1 p!1 p1!1 s!1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (app_term formula-decl nil subterm nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil))
   nil
   (ruaEF_fails_iff_non_unifiable_aux subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.s, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (ruaEF_fails_iff_non_unifiable_aux_TCC2 0
  (ruaEF_fails_iff_non_unifiable_aux_TCC2-1 nil 3514128796
   ("" (skosimp*)
    (("" (hide -1)
      (("" (lemma app_term)
        (("" (inst -1 p!1 p1!1 t!1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (app_term formula-decl nil subterm nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil))
   nil
   (ruaEF_fails_iff_non_unifiable_aux subtype
    "subterm[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].subtermOF(robinsonunificationEF.t, robinsonunificationEF.p1)"
    "(term_adt[robinsonunificationEF.variable, robinsonunificationEF.symbol, robinsonunificationEF.arity].app?)")))
 (ruaEF_fails_iff_non_unifiable_aux 0
  (ruaEF_fails_iff_non_unifiable_aux-2 nil 3512383964
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                                               Card(right_pos(s,p)))"
     ("s" "t" "p"))
    (("1" (split)
      (("1" (prop)
        (("1" (expand robinson_unification_algorithm_aux 2)
          (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
            (("1" (assert)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (case "x!3 = empty_seq")
                    (("1" (hide -2 -4 -5 -6 1)
                      (("1" (replaces -1)
                        (("1" (expand subtermOF)
                          (("1" (rewrite empty_0)
                            (("1" (expand* unifiable unifier)
                              (("1" (inst 1 identity)
                                (("1" (assert) nil nil)
                                 ("2" (rewrite iden_subs) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3)
                      (("2" (lemma next_pos_empty_equal_subterm)
                        (("2" (inst -1 x!1 x!2 x!3)
                          (("1" (assert)
                            (("1" (split)
                              (("1" (lemma equal_term)
                                (("1" (inst -1 x!1 x!2 x!3)
                                  (("1" (ground)
                                    (("1" (hide-all-but (-1 3))
                                      (("1"
                                        (expand* unifiable unifier)
                                        (("1"
                                          (inst 1 identity)
                                          (("1" (rewrite iden_subs) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (name-replace "np" "next_position(x!1, x!2, x!3)" :hide?
                     nil)
                    (("2" (inst -3 x!1 x!2 np)
                      (("2" (lemma robinson_unification_algorithm_aux_TCC8)
                        (("2" (inst -1 x!1 x!2 x!3)
                          (("2" (assert)
                            (("2" (inst -1 np)
                              (("2" (assert)
                                (("2" (hide -1)
                                  (("2" (split)
                                    (("1" (skosimp)
                                      (("1"
                                        (lemma next_pos_equal_subterm)
                                        (("1"
                                          (inst -1 x!1 x!2 x!3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst -1 q!1)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 1 3))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (expand next_position)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skosimp)
                                      (("2"
                                        (lemma child_np_child_p)
                                        (("2"
                                          (inst -1 x!1 x!2 x!3 p1!1)
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (inst -6 p1!1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (name-replace "sig!1"
                 "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                 :hide? nil)
                (("2"
                  (name-replace "fd"
                   "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                   :hide? nil)
                  (("2"
                    (name-replace "np"
                     "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
                     :hide? nil)
                    (("1"
                      (name-replace "sig!2"
                       "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                       :hide? nil)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (hide -6)
                            (("1" (lemma np_p_o_fd_empty_unifiable_term)
                              (("1" (inst -1 x!1 x!2 x!3)
                                (("1" (replace -5)
                                  (("1" (replace -6)
                                    (("1" (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (hide-all-but (-1 3))
                                            (("1"
                                              (expand* unifiable unifier)
                                              (("1" (inst 1 sig!1) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                            (("2"
                              (lemma robinson_unification_algorithm_aux_TCC12)
                              (("2" (inst -1 x!1 x!2 x!3)
                                (("2" (replace -2)
                                  (("2" (assert)
                                    (("2" (replace -5)
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (inst -1 sig!1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (inst -1 np)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but (-1 6))
                                                        (("1"
                                                          (expand*
                                                           unifiable
                                                           unifier)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "comp(sigma!1, sig!1)")
                                                              (("1"
                                                                (rewrite
                                                                 ext_o)
                                                                (("1"
                                                                  (expand o)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 subs_o)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         np_p_o_fd_equal_subterm)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           x!1
                                                           x!2
                                                           x!3)
                                                          (("2"
                                                            (replace -5)
                                                            (("2"
                                                              (replace -4)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -1 -5 2 3)
                                                        (("3"
                                                          (skosimp)
                                                          (("3"
                                                            (lemma
                                                             child_np_child_p)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "ext(sig!1)(x!1)"
                                                               "ext(sig!1)(x!2)"
                                                               "x!3 o fd"
                                                               "p1!1")
                                                              (("3"
                                                                (replace -3)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (case
                                                                     "x!3 <= p1!1")
                                                                    (("1"
                                                                      (lemma
                                                                       "fd_equal_symbol")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "subtermOF(x!1, x!3)"
                                                                         "subtermOF(x!2, x!3)")
                                                                        (("1"
                                                                          (replace
                                                                           -6)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               <=)
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   p1!2)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       pos_subterm)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         x!3
                                                                                         p1!2
                                                                                         x!1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           pos_o_term)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             x!3
                                                                                             p1!2
                                                                                             x!1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     -3
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -4
                                                                                                       -3
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         pos_subterm)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           x!3
                                                                                                           p1!2
                                                                                                           x!2)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             pos_o_term)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               x!3
                                                                                                               p1!2
                                                                                                               x!2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2
                                                                                                                       -5
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -6
                                                                                                                         -5
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           ext_preserve_symbol)
                                                                                                                          (("1"
                                                                                                                            (inst-cp
                                                                                                                             -1
                                                                                                                             "x!1"
                                                                                                                             "sig!1"
                                                                                                                             "p1!1")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "x!2"
                                                                                                                               "sig!1"
                                                                                                                               "p1!1")
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-8
                                                                                                                                      -11
                                                                                                                                      1
                                                                                                                                      5))
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       child)
                                                                                                                                      (("2"
                                                                                                                                        (skosimp)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           x!3)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               position_s_first_diff)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "subtermOF(x!1, x!3)"
                                                                                                                                                 "subtermOF(x!2, x!3)"
                                                                                                                                                 "fd")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     pos_o_term)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       x!3
                                                                                                                                                       fd
                                                                                                                                                       x!1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (name-replace
                                                                                                                                                           "p!1"
                                                                                                                                                           "x!3 o fd")
                                                                                                                                                          (("2"
                                                                                                                                                            (hide
                                                                                                                                                             -5)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               not_var)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 seq_first_rest[posnat])
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   pos_subterm_ax)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     p1!1
                                                                                                                                                                     p1!3
                                                                                                                                                                     x!1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -2
                                                                                                                                                                       p1!3)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -3
                                                                                                                                                                         "first(p1!3)"
                                                                                                                                                                         "p1!3"
                                                                                                                                                                         "rest(p1!3)"
                                                                                                                                                                         "subtermOF(x!1, p1!1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           empty_0[posnat])
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             p1!3)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           (1
                                                                                                                                                                            3))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               empty_0)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-8
                                                                                                                                    -11
                                                                                                                                    1
                                                                                                                                    5))
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     child)
                                                                                                                                    (("2"
                                                                                                                                      (skosimp)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         x!3)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             position_t_first_diff)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "subtermOF(x!1, x!3)"
                                                                                                                                               "subtermOF(x!2, x!3)"
                                                                                                                                               "fd")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   pos_o_term)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     x!3
                                                                                                                                                     fd
                                                                                                                                                     x!2)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (name-replace
                                                                                                                                                         "p!1"
                                                                                                                                                         "x!3 o fd")
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           -5)
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             pos_subterm_ax)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               p1!1
                                                                                                                                                               p1!3
                                                                                                                                                               x!2)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   not_var)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     seq_first_rest[posnat])
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       p1!3)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (lemma
                                                                                                                                                                         empty_0[posnat])
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -1
                                                                                                                                                                           p1!3)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -2
                                                                                                                                                                               "first(p1!3)"
                                                                                                                                                                               "p1!3"
                                                                                                                                                                               "rest(p1!3)"
                                                                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-5
                                                                                                                      -6
                                                                                                                      -9
                                                                                                                      1
                                                                                                                      5))
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       position_t_first_diff)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "subtermOF(x!1, x!3)"
                                                                                                                         "subtermOF(x!2, x!3)"
                                                                                                                         fd)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             x!3)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 pos_o_term)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   x!3
                                                                                                                                   fd
                                                                                                                                   x!2)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (name-replace
                                                                                                                                       "p!1"
                                                                                                                                       "x!3 o fd")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         child)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -4
                                                                                                                                             -5)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               pos_subterm_ax)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 x!3
                                                                                                                                                 "p1!2 o p1!3"
                                                                                                                                                 x!2)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   o_assoc)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       (-1
                                                                                                                                                        1
                                                                                                                                                        2))
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         pos_ax)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-3
                                                                                                    -4
                                                                                                    -7
                                                                                                    1
                                                                                                    5))
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     position_s_first_diff)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "subtermOF(x!1, x!3)"
                                                                                                       "subtermOF(x!2, x!3)"
                                                                                                       fd)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           x!3)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               pos_o_term)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 x!3
                                                                                                                 fd
                                                                                                                 x!1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (name-replace
                                                                                                                     "p!1"
                                                                                                                     "x!3 o fd")
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2
                                                                                                                       -3
                                                                                                                       -6
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         child)
                                                                                                                        (("2"
                                                                                                                          (skosimp)
                                                                                                                          (("2"
                                                                                                                            (replaces
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               pos_subterm_ax)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 x!3
                                                                                                                                 "p1!2 o p1!3"
                                                                                                                                 x!1)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   o_assoc)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       pos_ax)
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -2
                                                                                        1))
                                                                                      (("2"
                                                                                        (expand
                                                                                         child)
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             -2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               equal_prefix[posnat])
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 x!3
                                                                                                 fd
                                                                                                 "p1!2 o p1!3")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   o_assoc)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         p1!3)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -5
                                                                                      1
                                                                                      5))
                                                                                    (("2"
                                                                                      (lemma
                                                                                       position_s_first_diff)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         position_t_first_diff)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "subtermOF(x!1, x!3)"
                                                                                           "subtermOF(x!2, x!3)"
                                                                                           fd)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -2
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             fd)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               x!3)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 pos_o_term)
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   x!3
                                                                                                   fd
                                                                                                   x!1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     x!3
                                                                                                     fd
                                                                                                     x!2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (name-replace
                                                                                                           "p!1"
                                                                                                           "x!3 o fd")
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -2
                                                                                                              -7
                                                                                                              -8
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               child)
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -3)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     pos_subterm_ax)
                                                                                                                    (("2"
                                                                                                                      (inst-cp
                                                                                                                       -1
                                                                                                                       x!3
                                                                                                                       "p1!2 o p1!3"
                                                                                                                       x!1)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         x!3
                                                                                                                         "p1!2 o p1!3"
                                                                                                                         x!2)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           o_assoc)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               pos_ax)
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1
                                                                                                                                     -2
                                                                                                                                     -4
                                                                                                                                     -5
                                                                                                                                     -6
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       pos_ax)
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -6
                                                                       p1!1)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (lemma
                                                                           ext_preserve_symbol)
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             x!1
                                                                             sig!1
                                                                             p1!1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               x!2
                                                                               sig!1
                                                                               p1!1)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-3
                                                                                      -6
                                                                                      1
                                                                                      6))
                                                                                    (("2"
                                                                                      (typepred
                                                                                       x!3)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           position_s_first_diff)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             fd)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 pos_o_term)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   x!3
                                                                                                   fd
                                                                                                   x!1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (name-replace
                                                                                                       "p!1"
                                                                                                       "x!3 o fd")
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          -4
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           child)
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               pos_subterm_ax)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 p1!1
                                                                                                                 p1!2
                                                                                                                 x!1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     not_var)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       seq_first_rest[posnat])
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         p1!2)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           empty_0[posnat])
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             p1!2)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "first(p1!2)"
                                                                                                                                 "p1!2"
                                                                                                                                 "rest(p1!2)"
                                                                                                                                 "subtermOF(x!1, p1!1)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-3
                                                                                    -6
                                                                                    1
                                                                                    6))
                                                                                  (("2"
                                                                                    (typepred
                                                                                     x!3)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         position_t_first_diff)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "subtermOF(x!1, x!3)"
                                                                                           "subtermOF(x!2, x!3)"
                                                                                           fd)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               pos_o_term)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 x!3
                                                                                                 fd
                                                                                                 x!2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "p!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -4
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         child)
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             pos_subterm_ax)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               p1!1
                                                                                                               p1!2
                                                                                                               x!2)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   not_var)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     seq_first_rest[posnat])
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       p1!2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         empty_0[posnat])
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           p1!2)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "first(p1!2)"
                                                                                                                               "p1!2"
                                                                                                                               "rest(p1!2)"
                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1
                                                                            2))
                                                                          (("2"
                                                                            (expand
                                                                             child
                                                                             -1)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (case
                                                                                 "x!3 = p1!1")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    2))
                                                                                  (("1"
                                                                                    (expand
                                                                                     <=)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       empty_seq)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         seq_o_empty)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "length(x!3) < length(p1!1)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     o_length_o[posnat])
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (expand
                                                                                             <=)
                                                                                            (("1"
                                                                                              (inst
                                                                                               3
                                                                                               seq!1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     o_length_o[posnat])
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       p1!1
                                                                                       p1!2
                                                                                       x!3
                                                                                       fd)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           o_equals_o[posnat])
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   child)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     4
                                                                                                     seq!1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             seq_o_empty)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -4
                                                                          1
                                                                          2
                                                                          6))
                                                                        (("2"
                                                                          (typepred
                                                                           x!3)
                                                                          (("2"
                                                                            (lemma
                                                                             position_s_first_diff)
                                                                            (("2"
                                                                              (lemma
                                                                               position_t_first_diff)
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "subtermOF(x!1, x!3)"
                                                                                 "subtermOF(x!2, x!3)"
                                                                                 fd)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "subtermOF(x!1, x!3)"
                                                                                   "subtermOF(x!2, x!3)"
                                                                                   fd)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       pos_o_term)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "x!3"
                                                                                         "fd"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!3"
                                                                                           "fd"
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (name-replace
                                                                                               "p!1"
                                                                                               "x!3 o fd")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -3
                                                                                                 -4
                                                                                                 -5
                                                                                                 -6
                                                                                                 -8
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   child)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       2
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         pos_ax)
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           p1!1
                                                                                                           p1!2
                                                                                                           x!1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             p1!1
                                                                                                             p1!2
                                                                                                             x!2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 -5 -6 4)
                        (("2" (lemma next_position_is_position)
                          (("2"
                            (inst-cp -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                             "x!3 o fd")
                            (("2"
                              (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                               "x!3 o fd")
                              (("1" (lemma next_position_commute)
                                (("1"
                                  (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                                   "x!3 o fd")
                                  (("1" (replace -1 -2)
                                    (("1" (hide -1)
                                      (("1"
                                        (replace -3)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -1 2)
                                (("2" (lemma position_s_first_diff)
                                  (("2" (lemma position_t_first_diff)
                                    (("2"
                                      (inst
                                       -2
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       fd)
                                      (("2"
                                        (inst
                                         -1
                                         "subtermOF(x!1, x!3)"
                                         "subtermOF(x!2, x!3)"
                                         fd)
                                        (("2"
                                          (typepred x!3)
                                          (("2"
                                            (lemma pos_o_term)
                                            (("2"
                                              (inst-cp -1 x!3 fd x!1)
                                              (("2"
                                                (inst -1 x!3 fd x!2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       ext_preserv_pos)
                                                      (("2"
                                                        (rewrite
                                                         ext_preserv_pos)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3 -4 -5 4)
                      (("2" (lemma position_s_first_diff)
                        (("2" (lemma position_t_first_diff)
                          (("2"
                            (inst -2 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" fd)
                            (("2"
                              (inst -1 "subtermOF(x!1, x!3)"
                               "subtermOF(x!2, x!3)" fd)
                              (("2" (typepred x!3)
                                (("2" (lemma pos_o_term)
                                  (("2" (inst-cp -1 x!3 fd x!1)
                                    (("2" (inst -1 x!3 fd x!2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite ext_preserv_pos)
                                            (("2"
                                              (rewrite ext_preserv_pos)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -)
        (("2" (prop)
          (("2" (lemma dom_ran_ruaEF_disjoint)
            (("2" (inst -1 x!1 x!2 x!3)
              (("2" (assert)
                (("2"
                  (name-replace "sig!1"
                   "robinson_unification_algorithm_aux(x!1, x!2, x!3)")
                  (("2" (expand* subset? difference union member)
                    (("2" (decompose-equality -2)
                      (("2" (inst -2 xx)
                        (("2" (inst -1 xx)
                          (("2" (prop)
                            (("1" (expand fail)
                              (("1" (expand Dom)
                                (("1" (flatten)
                                  (("1" (hide -1 -4)
                                    (("1" (replaces -1)
                                      (("1"
                                        (typepred xx)
                                        (("1"
                                          (expand V)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand fail)
                              (("2" (expand Dom)
                                (("2" (flatten)
                                  (("2" (hide -1 -4)
                                    (("2" (replaces -1)
                                      (("2"
                                        (typepred xx)
                                        (("2"
                                          (expand V)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand VRan)
                              (("3" (expand IUnion)
                                (("3" (inst 1 xx)
                                  (("1" (expand fail)
                                    (("1" (hide -2)
                                      (("1"
                                        (expand Vars)
                                        (("1"
                                          (inst 1 "#(1)")
                                          (("1"
                                            (expand subtermOF)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -2 1)
                                                  (("1"
                                                    (expand "#")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand finseq_appl)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (hide 1)
                                                      (("2"
                                                        (case
                                                         "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (case
                                                             "rest( #(1)) = empty_seq")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (expand
                                                                 subtermOF)
                                                                (("1"
                                                                  (rewrite
                                                                   empty_0)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand rest)
                                                                (("2"
                                                                  (expand "#")
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand "#")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (expand first)
                                                            (("3"
                                                              (expand
                                                               finseq_appl)
                                                              (("3"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand "#")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand positionsOF)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (decompose-equality -2)
                                                  (("2"
                                                    (hide -1 -2 +)
                                                    (("2"
                                                      (expand "#")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1 1)
                                                  (("3"
                                                    (expand*
                                                     union
                                                     IUnion
                                                     member
                                                     only_empty_seq)
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (hide 1)
                                                        (("3"
                                                          (inst 1 1)
                                                          (("1"
                                                            (expand catenate)
                                                            (("1"
                                                              (inst
                                                               1
                                                               empty_seq)
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     finseq_appl)
                                                                    (("1"
                                                                      (expand
                                                                       positionsOF)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (expand*
                                                                           union
                                                                           IUnion
                                                                           member
                                                                           only_empty_seq)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (expand*
                                                                       "#"
                                                                       add_first
                                                                       insert?)
                                                                      (("2"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           empty_seq)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (reveal -1)
                                                            (("2"
                                                              (decompose-equality
                                                               -1)
                                                              (("2"
                                                                (hide -1 -2)
                                                                (("2"
                                                                  (expand "#")
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2)
                                    (("2" (expand Dom)
                                      (("2"
                                        (expand fail)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (typepred xx)
                                              (("2"
                                                (expand V)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide - 2)
      (("2" (skosimp)
        (("2" (expand child)
          (("2" (skosimp)
            (("2" (lemma pos_subterm_ax)
              (("2" (inst -1 p1!1 p1!2 y!2)
                (("2" (assert)
                  (("2" (lemma not_var)
                    (("2" (lemma seq_first_rest[posnat])
                      (("2" (inst -1 p1!2)
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 p1!2)
                            (("2" (assert)
                              (("2"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide - 2)
      (("3" (skosimp)
        (("3" (expand child)
          (("3" (skosimp)
            (("3" (lemma pos_subterm_ax)
              (("3" (inst -1 p1!1 p1!2 y!1)
                (("3" (assert)
                  (("3" (lemma not_var)
                    (("3" (lemma seq_first_rest[posnat])
                      (("3" (inst -1 p1!2)
                        (("3" (lemma empty_0[posnat])
                          (("3" (inst -1 p1!2)
                            (("3" (assert)
                              (("3"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma right_pos_subset)
        (("4" (inst?)
          (("4" (lemma positions_of_terms_finite)
            (("4" (inst?)
              (("4" (lemma finite_subset[position])
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma right_pos_subset)
        (("6" (inst?)
          (("6" (lemma positions_of_terms_finite)
            (("6" (inst?)
              (("6" (lemma finite_subset[position])
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("8" (hide - 2)
      (("8" (skosimp)
        (("8" (expand child)
          (("8" (skosimp)
            (("8" (lemma pos_subterm_ax)
              (("8" (inst -1 "p11!1" "p1!1" "x!1`2")
                (("8" (assert)
                  (("8" (lemma not_var)
                    (("8" (lemma seq_first_rest[posnat])
                      (("8" (inst -1 p1!1)
                        (("8" (lemma empty_0[posnat])
                          (("8" (inst -1 p1!1)
                            (("8" (assert)
                              (("8"
                                (inst -2 "first(p1!1)" "p1!1" "rest(p1!1)"
                                 "subtermOF(x!1`2, p11!1)")
                                (("8" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide - 2)
      (("9" (skosimp)
        (("9" (expand child)
          (("9" (skosimp)
            (("9" (lemma pos_subterm_ax)
              (("9" (inst -1 "p11!1" "p1!1" "x!1`1")
                (("9" (assert)
                  (("9" (lemma not_var)
                    (("9" (lemma seq_first_rest[posnat])
                      (("9" (inst -1 p1!1)
                        (("9" (lemma empty_0[posnat])
                          (("9" (inst -1 p1!1)
                            (("9" (assert)
                              (("9"
                                (inst -2 "first(p1!1)" "p1!1" "rest(p1!1)"
                                 "subtermOF(x!1`1, p11!1)")
                                (("9" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide - 2)
      (("10" (skosimp)
        (("10" (expand child)
          (("10" (skosimp)
            (("10" (lemma pos_subterm_ax)
              (("10" (inst -1 "p1!1" "p1!2" "y!1`2")
                (("10" (assert)
                  (("10" (lemma not_var)
                    (("10" (lemma seq_first_rest[posnat])
                      (("10" (inst -1 p1!2)
                        (("10" (lemma empty_0[posnat])
                          (("10" (inst -1 p1!2)
                            (("10" (assert)
                              (("10"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1`2, p1!1)")
                                (("10" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide - 2)
      (("11" (skosimp)
        (("11" (expand child)
          (("11" (skosimp)
            (("11" (lemma pos_subterm_ax)
              (("11" (inst -1 "p1!1" "p1!2" "y!1`1")
                (("11" (assert)
                  (("11" (lemma not_var)
                    (("11" (lemma seq_first_rest[posnat])
                      (("11" (inst -1 p1!2)
                        (("11" (lemma empty_0[posnat])
                          (("11" (inst -1 p1!2)
                            (("11" (assert)
                              (("11"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1`1, p1!1)")
                                (("11" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (lemma right_pos_subset)
        (("12" (inst?)
          (("12" (lemma positions_of_terms_finite)
            (("12" (inst?)
              (("12" (lemma finite_subset[position])
                (("12" (inst?) (("12" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (lemma right_pos_subset)
        (("14" (inst?)
          (("14" (lemma positions_of_terms_finite)
            (("14" (inst?)
              (("14" (lemma finite_subset[position])
                (("14" (inst?) (("14" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("16" (hide - 2)
      (("16" (skosimp)
        (("16" (expand child)
          (("16" (skosimp)
            (("16" (lemma pos_subterm_ax)
              (("16" (inst -1 "p1!1" "p1!2" "t!1")
                (("16" (assert)
                  (("16" (lemma not_var)
                    (("16" (lemma seq_first_rest[posnat])
                      (("16" (inst -1 p1!2)
                        (("16" (lemma empty_0[posnat])
                          (("16" (inst -1 p1!2)
                            (("16" (assert)
                              (("16"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("16" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide - 2)
      (("17" (skosimp)
        (("17" (expand child)
          (("17" (skosimp)
            (("17" (lemma pos_subterm_ax)
              (("17" (inst -1 "p1!1" "p1!2" "s!1")
                (("17" (assert)
                  (("17" (lemma not_var)
                    (("17" (lemma seq_first_rest[posnat])
                      (("17" (inst -1 p1!2)
                        (("17" (lemma empty_0[posnat])
                          (("17" (inst -1 p1!2)
                            (("17" (assert)
                              (("17"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("17" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma right_pos_subset)
        (("18" (inst?)
          (("18" (lemma positions_of_terms_finite)
            (("18" (inst?)
              (("18" (lemma finite_subset[position])
                (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 2)
      (("19" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil))
    nil)
   ((s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (y!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (x!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (y!1 skolem-const-decl "term" robinsonunificationEF nil)
    (vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (right_pos_subset formula-decl nil robinsonunificationEF nil)
    (first_diff def-decl "position" robinsonunification nil)
    (np_p_o_fd_empty_unifiable_term formula-decl nil robinsonunificationEF
     nil)
    (robinson_unification_algorithm_aux_TCC12 termination-tcc nil
     robinsonunificationEF nil)
    (comp const-decl "term" substitution nil)
    (sigma!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (O const-decl "T3" function_props nil)
    (ext_o formula-decl nil substitution nil)
    (subs_o formula-decl nil substitution nil)
    (np_p_o_fd_equal_subterm formula-decl nil robinsonunificationEF nil)
    (p1!1 skolem-const-decl "{p1: position |
   positionsOF(ext(sig!1)(x!1))(p1) AND positionsOF(ext(sig!1)(x!2))(p1)}"
     robinsonunificationEF nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (o_length_o formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (p1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (not_var formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (p1!3 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (pos_ax formula-decl nil positions nil)
    (<= const-decl "bool" positions nil)
    (next_position_is_position formula-decl nil robinsonunificationEF nil)
    (fd skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (next_position_commute formula-decl nil robinsonunificationEF nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (ext def-decl "term" substitution nil)
    (O const-decl "finseq" finite_sequences nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (x!3 skolem-const-decl
     "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}"
     robinsonunificationEF nil)
    (equal_term formula-decl nil subterm nil)
    (next_pos_empty_equal_subterm formula-decl nil robinsonunificationEF nil)
    (unifier const-decl "bool" unification nil)
    (iden_subs formula-decl nil substitution nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (empty_0 formula-decl nil seq_extras structures)
    (TRUE const-decl "bool" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (child_np_child_p formula-decl nil robinsonunificationEF nil)
    (next_pos_equal_subterm formula-decl nil robinsonunificationEF nil)
    (robinson_unification_algorithm_aux_TCC8 termination-tcc nil
     robinsonunificationEF nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ff const-decl "{f: symbol | arity(f) = 1}" robinsonunification nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (add_first const-decl "finseq" seq_extras structures)
    (insert? const-decl "finseq" seq_extras structures)
    (catenate const-decl "positions" positions nil)
    (only_empty_seq const-decl "positions" positions nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (xx const-decl "(V)" robinsonunification nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (dom_ran_ruaEF_disjoint formula-decl nil robinsonunificationEF nil)
    (fail const-decl "Sub" robinsonunification nil)
    (robinson_unification_algorithm_aux def-decl "Sub" robinsonunificationEF
     nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (child const-decl "bool" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (left_without_children const-decl "bool" positions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (Vars const-decl "set[(V)]" subterm nil) (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (ruaEF_fails_iff_non_unifiable_aux-1 nil 3510658166
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                                         Card(right_pos(s,p)))" ("s" "t" "p"))
    (("1" (split)
      (("1" (prop)
        (("1" (expand robinson_unification_algorithm_aux 2)
          (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
            (("1" (assert)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (case "x!3 = empty_seq")
                    (("1" (hide -2 -4 -5 -6 1)
                      (("1" (replaces -1)
                        (("1" (expand subtermOF)
                          (("1" (rewrite empty_0)
                            (("1" (expand* unifiable unifier)
                              (("1" (inst 1 identity)
                                (("1" (assert) nil nil)
                                 ("2" (rewrite iden_subs) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3)
                      (("2" (lemma next_pos_empty_equal_subterm)
                        (("2" (inst -1 x!1 x!2 x!3)
                          (("2" (assert)
                            (("2" (split)
                              (("1" (lemma equal_term)
                                (("1" (inst -1 x!1 x!2 x!3)
                                  (("1" (ground)
                                    (("1" (hide-all-but (-1 3))
                                      (("1"
                                        (expand* unifiable unifier)
                                        (("1"
                                          (inst 1 identity)
                                          (("1" (rewrite iden_subs) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (name-replace "np" "next_position(x!1, x!2, x!3)" :hide?
                     nil)
                    (("2" (inst -3 x!1 x!2 np)
                      (("2" (lemma robinson_unification_algorithm_aux_TCC8)
                        (("2" (inst -1 x!1 x!2 x!3)
                          (("2" (assert)
                            (("2" (inst -1 np)
                              (("2" (assert)
                                (("2" (hide -1)
                                  (("2" (split)
                                    (("1" (skosimp)
                                      (("1"
                                        (lemma next_pos_equal_subterm)
                                        (("1"
                                          (inst -1 x!1 x!2 x!3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst -1 q!1)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 -4 4))
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (expand*
                                                       subtermOF
                                                       unifiable
                                                       unifier)
                                                      (("2"
                                                        (rewrite empty_0)
                                                        (("2"
                                                          (inst 1 identity)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             iden_subs)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skosimp)
                                      (("2"
                                        (lemma child_np_child_p)
                                        (("2"
                                          (inst -1 x!1 x!2 x!3 p1!1)
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (inst -6 p1!1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2"
                (name-replace "sig!1"
                 "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                 :hide? nil)
                (("2"
                  (name-replace "fd"
                   "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
                   :hide? nil)
                  (("2"
                    (name-replace "np"
                     "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
                     :hide? nil)
                    (("1"
                      (name-replace "sig!2"
                       "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                       :hide? nil)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (hide -6)
                            (("1" (lemma np_p_o_fd_empty_unifiable_term)
                              (("1" (inst -1 x!1 x!2 x!3)
                                (("1" (replace -5)
                                  (("1" (replace -6)
                                    (("1" (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (hide-all-but (-1 3))
                                            (("1"
                                              (expand* unifiable unifier)
                                              (("1" (inst 1 sig!1) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                            (("2"
                              (lemma robinson_unification_algorithm_aux_TCC12)
                              (("2" (inst -1 x!1 x!2 x!3)
                                (("2" (replace -2)
                                  (("2" (assert)
                                    (("2" (replace -5)
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (inst -1 sig!1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (inst -1 np)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but (-1 6))
                                                        (("1"
                                                          (expand*
                                                           unifiable
                                                           unifier)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "comp(sigma!1, sig!1)")
                                                              (("1"
                                                                (rewrite
                                                                 ext_o)
                                                                (("1"
                                                                  (expand o)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 subs_o)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         np_p_o_fd_equal_subterm)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           x!1
                                                           x!2
                                                           x!3)
                                                          (("2"
                                                            (replace -5)
                                                            (("2"
                                                              (replace -4)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -1 -5 2 3)
                                                        (("3"
                                                          (skosimp)
                                                          (("3"
                                                            (lemma
                                                             child_np_child_p)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "ext(sig!1)(x!1)"
                                                               "ext(sig!1)(x!2)"
                                                               "x!3 o fd"
                                                               "p1!1")
                                                              (("3"
                                                                (replace -3)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (case
                                                                     "x!3 <= p1!1")
                                                                    (("1"
                                                                      (lemma
                                                                       "fd_equal_symbol")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "subtermOF(x!1, x!3)"
                                                                         "subtermOF(x!2, x!3)")
                                                                        (("1"
                                                                          (replace
                                                                           -6)
                                                                          (("1"
                                                                            (replace
                                                                             -7)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 <=)
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     p1!2)
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         pos_subterm)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           x!3
                                                                                           p1!2
                                                                                           x!1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             pos_o_term)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               x!3
                                                                                               p1!2
                                                                                               x!1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -3
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         -3
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           pos_subterm)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             x!3
                                                                                                             p1!2
                                                                                                             x!2)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               pos_o_term)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 x!3
                                                                                                                 p1!2
                                                                                                                 x!2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         -5
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -6
                                                                                                                           -5
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             ext_preserve_symbol)
                                                                                                                            (("1"
                                                                                                                              (inst-cp
                                                                                                                               -1
                                                                                                                               "x!1"
                                                                                                                               "sig!1"
                                                                                                                               "p1!1")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "x!2"
                                                                                                                                 "sig!1"
                                                                                                                                 "p1!1")
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-8
                                                                                                                                        -11
                                                                                                                                        1
                                                                                                                                        5))
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         child)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             x!3)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               -2)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 position_s_first_diff)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "subtermOF(x!1, x!3)"
                                                                                                                                                   "subtermOF(x!2, x!3)"
                                                                                                                                                   "fd")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       pos_o_term)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         x!3
                                                                                                                                                         fd
                                                                                                                                                         x!1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (name-replace
                                                                                                                                                             "p!1"
                                                                                                                                                             "x!3 o fd")
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               -5)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 not_var)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   seq_first_rest[posnat])
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     pos_subterm_ax)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       p1!1
                                                                                                                                                                       p1!3
                                                                                                                                                                       x!1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -2
                                                                                                                                                                         p1!3)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -3
                                                                                                                                                                           "first(p1!3)"
                                                                                                                                                                           "p1!3"
                                                                                                                                                                           "rest(p1!3)"
                                                                                                                                                                           "subtermOF(x!1, p1!1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             empty_0[posnat])
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               p1!3)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (hide-all-but
                                                                                                                                                                             (1
                                                                                                                                                                              3))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 empty_0)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-8
                                                                                                                                      -11
                                                                                                                                      1
                                                                                                                                      5))
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       child)
                                                                                                                                      (("2"
                                                                                                                                        (skosimp)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           x!3)
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               position_t_first_diff)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "subtermOF(x!1, x!3)"
                                                                                                                                                 "subtermOF(x!2, x!3)"
                                                                                                                                                 "fd")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     pos_o_term)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       x!3
                                                                                                                                                       fd
                                                                                                                                                       x!2)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (name-replace
                                                                                                                                                           "p!1"
                                                                                                                                                           "x!3 o fd")
                                                                                                                                                          (("2"
                                                                                                                                                            (hide
                                                                                                                                                             -5)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               pos_subterm_ax)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 p1!1
                                                                                                                                                                 p1!3
                                                                                                                                                                 x!2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     not_var)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       seq_first_rest[posnat])
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         p1!3)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           empty_0[posnat])
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             p1!3)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -2
                                                                                                                                                                                 "first(p1!3)"
                                                                                                                                                                                 "p1!3"
                                                                                                                                                                                 "rest(p1!3)"
                                                                                                                                                                                 "subtermOF(x!2, p1!1)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-5
                                                                                                                        -6
                                                                                                                        -9
                                                                                                                        1
                                                                                                                        5))
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         position_t_first_diff)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "subtermOF(x!1, x!3)"
                                                                                                                           "subtermOF(x!2, x!3)"
                                                                                                                           fd)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               x!3)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   pos_o_term)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     x!3
                                                                                                                                     fd
                                                                                                                                     x!2)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (name-replace
                                                                                                                                         "p!1"
                                                                                                                                         "x!3 o fd")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           child)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -4
                                                                                                                                               -5)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 pos_subterm_ax)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   x!3
                                                                                                                                                   "p1!2 o p1!3"
                                                                                                                                                   x!2)
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     o_assoc)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (-1
                                                                                                                                                          1
                                                                                                                                                          2))
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           pos_o_pos)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-3
                                                                                                      -4
                                                                                                      -7
                                                                                                      1
                                                                                                      5))
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       position_s_first_diff)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "subtermOF(x!1, x!3)"
                                                                                                         "subtermOF(x!2, x!3)"
                                                                                                         fd)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             x!3)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 pos_o_term)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   x!3
                                                                                                                   fd
                                                                                                                   x!1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (name-replace
                                                                                                                       "p!1"
                                                                                                                       "x!3 o fd")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -6
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           child)
                                                                                                                          (("2"
                                                                                                                            (skosimp)
                                                                                                                            (("2"
                                                                                                                              (replaces
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 pos_subterm_ax)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   x!3
                                                                                                                                   "p1!2 o p1!3"
                                                                                                                                   x!1)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     o_assoc)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         pos_o_pos)
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          1))
                                                                                        (("2"
                                                                                          (expand
                                                                                           child)
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               -2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 equal_prefix[posnat])
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   x!3
                                                                                                   fd
                                                                                                   "p1!2 o p1!3")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     o_assoc)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           1
                                                                                                           p1!3)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -2
                                                                                        -5
                                                                                        1
                                                                                        5))
                                                                                      (("2"
                                                                                        (lemma
                                                                                         position_s_first_diff)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           position_t_first_diff)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             fd)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -2
                                                                                               "subtermOF(x!1, x!3)"
                                                                                               "subtermOF(x!2, x!3)"
                                                                                               fd)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 x!3)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   pos_o_term)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     x!3
                                                                                                     fd
                                                                                                     x!1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       x!3
                                                                                                       fd
                                                                                                       x!2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (name-replace
                                                                                                             "p!1"
                                                                                                             "x!3 o fd")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                -2
                                                                                                                -7
                                                                                                                -8
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 child)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       pos_subterm_ax)
                                                                                                                      (("2"
                                                                                                                        (inst-cp
                                                                                                                         -1
                                                                                                                         x!3
                                                                                                                         "p1!2 o p1!3"
                                                                                                                         x!1)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           x!3
                                                                                                                           "p1!2 o p1!3"
                                                                                                                           x!2)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             o_assoc)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 pos_o_pos)
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1
                                                                                                                                       -2
                                                                                                                                       -4
                                                                                                                                       -5
                                                                                                                                       -6
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         pos_o_pos)
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -6
                                                                       p1!1)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (lemma
                                                                           ext_preserve_symbol)
                                                                          (("1"
                                                                            (inst-cp
                                                                             -1
                                                                             x!1
                                                                             sig!1
                                                                             p1!1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               x!2
                                                                               sig!1
                                                                               p1!1)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-3
                                                                                      -6
                                                                                      1
                                                                                      6))
                                                                                    (("2"
                                                                                      (typepred
                                                                                       x!3)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           position_s_first_diff)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             fd)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 pos_o_term)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   x!3
                                                                                                   fd
                                                                                                   x!1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (name-replace
                                                                                                       "p!1"
                                                                                                       "x!3 o fd")
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          -4
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           child)
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               pos_subterm_ax)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 p1!1
                                                                                                                 p1!2
                                                                                                                 x!1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     not_var)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       seq_first_rest[posnat])
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         p1!2)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           empty_0[posnat])
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             p1!2)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "first(p1!2)"
                                                                                                                                 "p1!2"
                                                                                                                                 "rest(p1!2)"
                                                                                                                                 "subtermOF(x!1, p1!1)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-3
                                                                                    -6
                                                                                    1
                                                                                    6))
                                                                                  (("2"
                                                                                    (typepred
                                                                                     x!3)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         position_t_first_diff)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "subtermOF(x!1, x!3)"
                                                                                           "subtermOF(x!2, x!3)"
                                                                                           fd)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               pos_o_term)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 x!3
                                                                                                 fd
                                                                                                 x!2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "p!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -4
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         child)
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             pos_subterm_ax)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               p1!1
                                                                                                               p1!2
                                                                                                               x!2)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   not_var)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     seq_first_rest[posnat])
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       p1!2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         empty_0[posnat])
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           p1!2)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "first(p1!2)"
                                                                                                                               "p1!2"
                                                                                                                               "rest(p1!2)"
                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1
                                                                            2))
                                                                          (("2"
                                                                            (expand
                                                                             child
                                                                             -1)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (case
                                                                                 "x!3 = p1!1")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    2))
                                                                                  (("1"
                                                                                    (expand
                                                                                     <=)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       empty_seq)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         seq_o_empty)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "length(x!3) < length(p1!1)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     o_length_o[posnat])
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (expand
                                                                                             <=)
                                                                                            (("1"
                                                                                              (inst
                                                                                               3
                                                                                               seq!1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     o_length_o[posnat])
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       p1!1
                                                                                       p1!2
                                                                                       x!3
                                                                                       fd)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           o_equals_o[posnat])
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   child)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     4
                                                                                                     seq!1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             seq_o_empty)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -4
                                                                          1
                                                                          2
                                                                          6))
                                                                        (("2"
                                                                          (typepred
                                                                           x!3)
                                                                          (("2"
                                                                            (lemma
                                                                             position_s_first_diff)
                                                                            (("2"
                                                                              (lemma
                                                                               position_t_first_diff)
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "subtermOF(x!1, x!3)"
                                                                                 "subtermOF(x!2, x!3)"
                                                                                 fd)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "subtermOF(x!1, x!3)"
                                                                                   "subtermOF(x!2, x!3)"
                                                                                   fd)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       pos_o_term)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "x!3"
                                                                                         "fd"
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!3"
                                                                                           "fd"
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (name-replace
                                                                                               "p!1"
                                                                                               "x!3 o fd")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -3
                                                                                                 -4
                                                                                                 -5
                                                                                                 -6
                                                                                                 -8
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   child)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       2
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         pos_o_pos)
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           p1!1
                                                                                                           p1!2
                                                                                                           x!1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             p1!1
                                                                                                             p1!2
                                                                                                             x!2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 -5 -6 4)
                        (("2" (lemma next_position_is_position)
                          (("2"
                            (inst-cp -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                             "x!3 o fd")
                            (("2"
                              (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                               "x!3 o fd")
                              (("1" (lemma next_position_commute)
                                (("1"
                                  (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                                   "x!3 o fd")
                                  (("1" (replace -1 -2)
                                    (("1" (hide -1)
                                      (("1"
                                        (replace -3)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -1 2)
                                (("2" (lemma position_s_first_diff)
                                  (("2" (lemma position_t_first_diff)
                                    (("2"
                                      (inst
                                       -2
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       fd)
                                      (("2"
                                        (inst
                                         -1
                                         "subtermOF(x!1, x!3)"
                                         "subtermOF(x!2, x!3)"
                                         fd)
                                        (("2"
                                          (typepred x!3)
                                          (("2"
                                            (lemma pos_o_term)
                                            (("2"
                                              (inst-cp -1 x!3 fd x!1)
                                              (("2"
                                                (inst -1 x!3 fd x!2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       ext_preserv_pos)
                                                      (("2"
                                                        (rewrite
                                                         ext_preserv_pos)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3 -4 -5 4)
                      (("2" (lemma position_s_first_diff)
                        (("2" (lemma position_t_first_diff)
                          (("2"
                            (inst -2 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" fd)
                            (("2"
                              (inst -1 "subtermOF(x!1, x!3)"
                               "subtermOF(x!2, x!3)" fd)
                              (("2" (typepred x!3)
                                (("2" (lemma pos_o_term)
                                  (("2" (inst-cp -1 x!3 fd x!1)
                                    (("2" (inst -1 x!3 fd x!2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite ext_preserv_pos)
                                            (("2"
                                              (rewrite ext_preserv_pos)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -)
        (("2" (prop)
          (("2" (lemma dom_ran_ruaEF_disjoint)
            (("2" (inst -1 x!1 x!2 x!3)
              (("2" (assert)
                (("2"
                  (name-replace "sig!1"
                   "robinson_unification_algorithm_aux(x!1, x!2, x!3)")
                  (("2" (expand* subset? difference union member)
                    (("2" (decompose-equality -2)
                      (("2" (inst -2 xx)
                        (("2" (inst -1 xx)
                          (("2" (prop)
                            (("1" (expand fail)
                              (("1" (expand Dom)
                                (("1" (flatten)
                                  (("1" (hide -1 -4)
                                    (("1" (replaces -1)
                                      (("1"
                                        (typepred xx)
                                        (("1"
                                          (expand V)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand fail)
                              (("2" (expand Dom)
                                (("2" (flatten)
                                  (("2" (hide -1 -4)
                                    (("2" (replaces -1)
                                      (("2"
                                        (typepred xx)
                                        (("2"
                                          (expand V)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand VRan)
                              (("3" (expand IUnion)
                                (("3" (inst 1 xx)
                                  (("1" (expand fail)
                                    (("1" (hide -2)
                                      (("1"
                                        (expand Vars)
                                        (("1"
                                          (inst 1 "#(1)")
                                          (("1"
                                            (expand subtermOF)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -2 1)
                                                  (("1"
                                                    (expand "#")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand finseq_appl)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (hide 1)
                                                      (("2"
                                                        (case
                                                         "args(app(ff,  #(xx)))`seq(first( #(1)) - 1) = xx")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (case
                                                             "rest( #(1)) = empty_seq")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (expand
                                                                 subtermOF)
                                                                (("1"
                                                                  (rewrite
                                                                   empty_0)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand rest)
                                                                (("2"
                                                                  (expand "#")
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand "#")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (expand first)
                                                            (("3"
                                                              (expand
                                                               finseq_appl)
                                                              (("3"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand "#")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand positionsOF)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (decompose-equality -2)
                                                  (("2"
                                                    (hide -1 -2 +)
                                                    (("2"
                                                      (expand "#")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1 1)
                                                  (("3"
                                                    (expand*
                                                     union
                                                     IUnion
                                                     member
                                                     only_empty_seq)
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (hide 1)
                                                        (("3"
                                                          (inst 1 1)
                                                          (("1"
                                                            (expand catenate)
                                                            (("1"
                                                              (inst
                                                               1
                                                               empty_seq)
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     finseq_appl)
                                                                    (("1"
                                                                      (expand
                                                                       positionsOF)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (expand*
                                                                           union
                                                                           IUnion
                                                                           member
                                                                           only_empty_seq)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (expand*
                                                                       "#"
                                                                       add_first
                                                                       insert?)
                                                                      (("2"
                                                                        (lemma
                                                                         empty_0[posnat])
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           empty_seq)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (reveal -1)
                                                            (("2"
                                                              (decompose-equality
                                                               -1)
                                                              (("2"
                                                                (hide -1 -2)
                                                                (("2"
                                                                  (expand "#")
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2)
                                    (("2" (expand Dom)
                                      (("2"
                                        (expand fail)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (typepred xx)
                                              (("2"
                                                (expand V)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide - 2)
      (("2" (skosimp)
        (("2" (expand child)
          (("2" (skosimp)
            (("2" (lemma pos_subterm_ax)
              (("2" (inst -1 p1!1 p1!2 y!2)
                (("2" (assert)
                  (("2" (lemma not_var)
                    (("2" (lemma seq_first_rest[posnat])
                      (("2" (inst -1 p1!2)
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 p1!2)
                            (("2" (assert)
                              (("2"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide - 2)
      (("3" (skosimp)
        (("3" (expand child)
          (("3" (skosimp)
            (("3" (lemma pos_subterm_ax)
              (("3" (inst -1 p1!1 p1!2 y!1)
                (("3" (assert)
                  (("3" (lemma not_var)
                    (("3" (lemma seq_first_rest[posnat])
                      (("3" (inst -1 p1!2)
                        (("3" (lemma empty_0[posnat])
                          (("3" (inst -1 p1!2)
                            (("3" (assert)
                              (("3"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma right_pos_subset)
        (("4" (inst?)
          (("4" (lemma positions_of_terms_finite)
            (("4" (inst?)
              (("4" (lemma finite_subset[position])
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma right_pos_subset)
        (("6" (inst?)
          (("6" (lemma positions_of_terms_finite)
            (("6" (inst?)
              (("6" (lemma finite_subset[position])
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("8" (hide - 2)
      (("8" (skosimp)
        (("8" (expand child)
          (("8" (skosimp)
            (("8" (lemma pos_subterm_ax)
              (("8" (inst -1 "p11!1" "p1!1" "x!1`2")
                (("8" (assert)
                  (("8" (lemma not_var)
                    (("8" (lemma seq_first_rest[posnat])
                      (("8" (inst -1 p1!1)
                        (("8" (lemma empty_0[posnat])
                          (("8" (inst -1 p1!1)
                            (("8" (assert)
                              (("8"
                                (inst -2 "first(p1!1)" "p1!1" "rest(p1!1)"
                                 "subtermOF(x!1`2, p11!1)")
                                (("8" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide - 2)
      (("9" (skosimp)
        (("9" (expand child)
          (("9" (skosimp)
            (("9" (lemma pos_subterm_ax)
              (("9" (inst -1 "p11!1" "p1!1" "x!1`1")
                (("9" (assert)
                  (("9" (lemma not_var)
                    (("9" (lemma seq_first_rest[posnat])
                      (("9" (inst -1 p1!1)
                        (("9" (lemma empty_0[posnat])
                          (("9" (inst -1 p1!1)
                            (("9" (assert)
                              (("9"
                                (inst -2 "first(p1!1)" "p1!1" "rest(p1!1)"
                                 "subtermOF(x!1`1, p11!1)")
                                (("9" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide - 2)
      (("10" (skosimp)
        (("10" (expand child)
          (("10" (skosimp)
            (("10" (lemma pos_subterm_ax)
              (("10" (inst -1 "p1!1" "p1!2" "y!1`2")
                (("10" (assert)
                  (("10" (lemma not_var)
                    (("10" (lemma seq_first_rest[posnat])
                      (("10" (inst -1 p1!2)
                        (("10" (lemma empty_0[posnat])
                          (("10" (inst -1 p1!2)
                            (("10" (assert)
                              (("10"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1`2, p1!1)")
                                (("10" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide - 2)
      (("11" (skosimp)
        (("11" (expand child)
          (("11" (skosimp)
            (("11" (lemma pos_subterm_ax)
              (("11" (inst -1 "p1!1" "p1!2" "y!1`1")
                (("11" (assert)
                  (("11" (lemma not_var)
                    (("11" (lemma seq_first_rest[posnat])
                      (("11" (inst -1 p1!2)
                        (("11" (lemma empty_0[posnat])
                          (("11" (inst -1 p1!2)
                            (("11" (assert)
                              (("11"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1`1, p1!1)")
                                (("11" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (lemma right_pos_subset)
        (("12" (inst?)
          (("12" (lemma positions_of_terms_finite)
            (("12" (inst?)
              (("12" (lemma finite_subset[position])
                (("12" (inst?) (("12" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (lemma right_pos_subset)
        (("14" (inst?)
          (("14" (lemma positions_of_terms_finite)
            (("14" (inst?)
              (("14" (lemma finite_subset[position])
                (("14" (inst?) (("14" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide 2)
      (("15" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("16" (hide - 2)
      (("16" (skosimp)
        (("16" (expand child)
          (("16" (skosimp)
            (("16" (lemma pos_subterm_ax)
              (("16" (inst -1 "p1!1" "p1!2" "t!1")
                (("16" (assert)
                  (("16" (lemma not_var)
                    (("16" (lemma seq_first_rest[posnat])
                      (("16" (inst -1 p1!2)
                        (("16" (lemma empty_0[posnat])
                          (("16" (inst -1 p1!2)
                            (("16" (assert)
                              (("16"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("16" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide - 2)
      (("17" (skosimp)
        (("17" (expand child)
          (("17" (skosimp)
            (("17" (lemma pos_subterm_ax)
              (("17" (inst -1 "p1!1" "p1!2" "s!1")
                (("17" (assert)
                  (("17" (lemma not_var)
                    (("17" (lemma seq_first_rest[posnat])
                      (("17" (inst -1 p1!2)
                        (("17" (lemma empty_0[posnat])
                          (("17" (inst -1 p1!2)
                            (("17" (assert)
                              (("17"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("17" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma right_pos_subset)
        (("18" (inst?)
          (("18" (lemma positions_of_terms_finite)
            (("18" (inst?)
              (("18" (lemma finite_subset[position])
                (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 2)
      (("19" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (term type-decl nil term_adt nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil) (union const-decl "set" sets nil)
    (Vars const-decl "set[(V)]" subterm nil)
    (left_without_children const-decl "bool" positions nil)
    (positions? type-eq-decl nil positions nil)
    (subtermOF def-decl "term" subterm nil)
    (child const-decl "bool" positions nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (unifiable const-decl "bool" unification nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (fail const-decl "Sub" robinsonunification nil)
    (difference const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (xx const-decl "(V)" robinsonunification nil)
    (Dom const-decl "set[(V)]" substitution nil)
    (only_empty_seq const-decl "positions" positions nil)
    (catenate const-decl "positions" positions nil)
    (upto? nonempty-type-eq-decl nil IUnion_extra nil)
    (args adt-accessor-decl
          "[d: (app?) -> {args: finite_sequence[term] | args`length = arity(f(d))}]"
          term_adt nil)
    (app adt-constructor-decl
     "[[f: symbol, {args: finite_sequence[term] | args`length = arity(f)}] ->
   (app?)]" term_adt nil)
    (ff const-decl "{f: symbol | arity(f) = 1}" robinsonunification nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (VRan const-decl "set[(V)]" substitution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (iden_subs formula-decl nil substitution nil)
    (unifier const-decl "bool" unification nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (O const-decl "finseq" finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (<= const-decl "bool" positions nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (not_var formula-decl nil positions nil)
    (pos_subterm_ax formula-decl nil subterm nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (subs_o formula-decl nil substitution nil)
    (ext_o formula-decl nil substitution nil)
    (comp const-decl "term" substitution nil)
    (first_diff def-decl "position" robinsonunification nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (vars_of_term_finite formula-decl nil subterm nil))
   shostak))
 (ruaEF_gives_unifier_aux 0
  (ruaEF_gives_unifier_aux-1 nil 3512386375
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                                                 Card(right_pos(s,p)))"
     ("s" "t" "p"))
    (("1" (prop)
      (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
        (("1" (case "x!3 = empty_seq")
          (("1" (hide -4 -5 -6)
            (("1" (expand "robinson_unification_algorithm_aux")
              (("1" (assert)
                (("1" (replaces -1)
                  (("1" (expand next_position 1 1)
                    (("1" (hide -2)
                      (("1" (rewrite subterm_empty_seq)
                        (("1" (rewrite subterm_empty_seq)
                          (("1" (expand* member U unifier)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand robinson_unification_algorithm_aux 2)
            (("2" (assert)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide -4)
                    (("1" (lemma next_pos_empty_equal_subterm)
                      (("1" (inst -1 x!1 x!2 x!3)
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (lemma equal_term)
                              (("1" (inst -1 x!1 x!2 x!3)
                                (("1" (ground)
                                  (("1" (hide-all-but (-1 1))
                                    (("1" (expand* member U unifier)
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -3 x!1 x!2 "next_position(x!1, x!2, x!3)")
                    (("2" (lemma robinson_unification_algorithm_aux_TCC8)
                      (("2" (inst -1 x!1 x!2 x!3)
                        (("2" (assert)
                          (("2" (inst -1 "next_position(x!1, x!2, x!3)")
                            (("2" (assert)
                              (("2" (hide -1 2)
                                (("2" (prop)
                                  (("1" (skosimp)
                                    (("1" (lemma next_pos_equal_subterm)
                                      (("1"
                                        (inst -1 x!1 x!2 x!3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst -1 q!1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp)
                                    (("2" (lemma child_np_child_p)
                                      (("2"
                                        (inst -1 x!1 x!2 x!3 p1!1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -6 p1!1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand robinson_unification_algorithm_aux 2)
          (("2" (assert)
            (("2"
              (name-replace "sig!1"
               "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
               :hide? nil)
              (("2"
                (name-replace "fd"
                 "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :hide?
                 nil)
                (("2"
                  (name-replace "np"
                   "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
                   :hide? nil)
                  (("1"
                    (name-replace "sig!2"
                     "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                     :hide? nil)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but (-1 -5 -6 2))
                          (("1" (lemma unifiable_implies_not_fail1)
                            (("1" (inst -1 x!1 x!2 x!3)
                              (("1" (replace -3) (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -7)
                          (("2" (lemma np_p_o_fd_empty_unifiable_term)
                            (("2" (inst -1 x!1 x!2 x!3)
                              (("2" (replace -6)
                                (("2" (replace -5)
                                  (("2" (assert)
                                    (("2" (assert)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (expand* member U unifier)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -7)
                          (("3" (lemma ruaEF_fails_iff_non_unifiable_aux)
                            (("3" (inst -1 x!1 x!2 x!3)
                              (("3" (assert)
                                (("3" (ground)
                                  (("3"
                                    (expand robinson_unification_algorithm_aux
                                            1)
                                    (("3" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4"
                          (inst -6 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                          (("4" (replace -1)
                            (("4"
                              (lemma robinson_unification_algorithm_aux_TCC12)
                              (("4" (inst -1 x!1 x!2 x!3)
                                (("4" (replace -5)
                                  (("4" (assert)
                                    (("4" (replace -4)
                                      (("4"
                                        (inst -1 sig!1)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (replace -3)
                                            (("4"
                                              (inst -1 np)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (hide -1)
                                                  (("4"
                                                    (split)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but (-2 2))
                                                        (("1"
                                                          (lemma unifier_o)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             x!1
                                                             sig!2
                                                             x!2
                                                             sig!1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-4 -5 2 7))
                                                        (("2"
                                                          (lemma
                                                           unifiable_preserves_unifiability1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             x!1
                                                             x!2
                                                             x!3)
                                                            (("2"
                                                              (replace -2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (lemma
                                                         np_p_o_fd_equal_subterm)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           x!1
                                                           x!2
                                                           x!3)
                                                          (("2"
                                                            (replace -5)
                                                            (("2"
                                                              (replace -6)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       q!1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (lemma
                                                         child_np_child_p)
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "ext(sig!1)(x!1)"
                                                           "ext(sig!1)(x!2)"
                                                           "x!3 o fd"
                                                           "p1!1")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (case
                                                               "x!3 <= p1!1")
                                                              (("1"
                                                                (lemma
                                                                 fd_equal_symbol)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "subtermOF(x!1, x!3)"
                                                                   "subtermOF(x!2, x!3)")
                                                                  (("1"
                                                                    (replace
                                                                     -7)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         <=)
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             p1!2)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (lemma
                                                                                 pos_subterm)
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   x!3
                                                                                   p1!2
                                                                                   x!1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     x!3
                                                                                     p1!2
                                                                                     x!2)
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -3
                                                                                           rl)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             -3
                                                                                             rl)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 -1
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   ext_preserve_symbol)
                                                                                                  (("1"
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     x!1
                                                                                                     sig!1
                                                                                                     p1!1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       x!2
                                                                                                       sig!1
                                                                                                       p1!1)
                                                                                                      (("1"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-3
                                                                                                              -4
                                                                                                              -8
                                                                                                              1
                                                                                                              7))
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               position_s_first_diff)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "subtermOF(x!1, x!3)"
                                                                                                                 "subtermOF(x!2, x!3)"
                                                                                                                 fd)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     x!3)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         pos_o_term)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           x!3
                                                                                                                           fd
                                                                                                                           x!1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "q!1"
                                                                                                                               "x!3 o fd")
                                                                                                                              (("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  -5
                                                                                                                                  1))
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   child)
                                                                                                                                  (("2"
                                                                                                                                    (skosimp)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       not_var)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         seq_first_rest[posnat])
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           p1!3)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             empty_0[posnat])
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               p1!3)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -2
                                                                                                                                                   "first(p1!3)"
                                                                                                                                                   "p1!3"
                                                                                                                                                   "rest(p1!3)"
                                                                                                                                                   "subtermOF(x!1, p1!1)")
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     pos_subterm_ax)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       p1!1
                                                                                                                                                       p1!3
                                                                                                                                                       x!1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (-3
                                                                                                            -4
                                                                                                            -8
                                                                                                            1
                                                                                                            7))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             position_t_first_diff)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "subtermOF(x!1, x!3)"
                                                                                                               "subtermOF(x!2, x!3)"
                                                                                                               fd)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   x!3)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       pos_o_term)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         x!3
                                                                                                                         fd
                                                                                                                         x!2)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (name-replace
                                                                                                                             "q!1"
                                                                                                                             "x!3 o fd")
                                                                                                                            (("2"
                                                                                                                              (hide-all-but
                                                                                                                               (-1
                                                                                                                                -5
                                                                                                                                1))
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 child)
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     not_var)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       seq_first_rest[posnat])
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         p1!3)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           empty_0[posnat])
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             p1!3)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -2
                                                                                                                                                 "first(p1!3)"
                                                                                                                                                 "p1!3"
                                                                                                                                                 "rest(p1!3)"
                                                                                                                                                 "subtermOF(x!2, p1!1)")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     pos_subterm_ax)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       p1!1
                                                                                                                                                       p1!3
                                                                                                                                                       x!2)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-3
                                                                                            -4
                                                                                            -8
                                                                                            1
                                                                                            7))
                                                                                          (("2"
                                                                                            (lemma
                                                                                             position_s_first_diff)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "subtermOF(x!1, x!3)"
                                                                                               "subtermOF(x!2, x!3)"
                                                                                               "fd")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   x!3)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       pos_o_term)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         x!3
                                                                                                         fd
                                                                                                         x!1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (name-replace
                                                                                                             "q!1"
                                                                                                             "x!3 o fd")
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2
                                                                                                               -3
                                                                                                               -6
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 child)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     1
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         pos_ax)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           p1!1
                                                                                                                           p1!3
                                                                                                                           x!1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-3
                                                                                          -4
                                                                                          -8
                                                                                          1
                                                                                          7))
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               position_t_first_diff)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "subtermOF(x!1, x!3)"
                                                                                                 "subtermOF(x!2, x!3)"
                                                                                                 fd)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     x!3)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         pos_o_term)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           x!3
                                                                                                           fd
                                                                                                           x!2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (name-replace
                                                                                                               "q!1"
                                                                                                               "x!3 o fd")
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -2
                                                                                                                 -3
                                                                                                                 -5
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   child)
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       pos_ax)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         p1!1
                                                                                                                         p1!3
                                                                                                                         x!2)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  1))
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     child)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         equal_prefix[posnat])
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           x!3
                                                                                           fd
                                                                                           "p1!2 o p1!3")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             o_assoc)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   p1!3)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6
                                                                                1
                                                                                7))
                                                                              (("2"
                                                                                (lemma
                                                                                 position_s_first_diff)
                                                                                (("2"
                                                                                  (lemma
                                                                                   position_t_first_diff)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "subtermOF(x!1, x!3)"
                                                                                     "subtermOF(x!2, x!3)"
                                                                                     "fd")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "subtermOF(x!1, x!3)"
                                                                                       "subtermOF(x!2, x!3)"
                                                                                       "fd")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           x!3)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             pos_o_term)
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               x!3
                                                                                               fd
                                                                                               x!2)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 x!3
                                                                                                 fd
                                                                                                 x!1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "q!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -2
                                                                                                        -7
                                                                                                        -8
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           child)
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               pos_subterm_ax)
                                                                                                              (("2"
                                                                                                                (inst-cp
                                                                                                                 -1
                                                                                                                 x!3
                                                                                                                 "p1!2 o p1!3"
                                                                                                                 x!2)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   x!3
                                                                                                                   "p1!2 o p1!3"
                                                                                                                   x!1)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     o_assoc)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           pos_ax)
                                                                                                                          (("2"
                                                                                                                            (inst-cp
                                                                                                                             -1
                                                                                                                             p1!2
                                                                                                                             p1!3
                                                                                                                             "subtermOF(x!2, x!3)")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               p1!2
                                                                                                                               p1!3
                                                                                                                               "subtermOF(x!1, x!3)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst -9 p1!1)
                                                                (("1"
                                                                  (lemma
                                                                   ext_preserve_symbol)
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     x!1
                                                                     sig!1
                                                                     p1!1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       x!2
                                                                       sig!1
                                                                       p1!1)
                                                                      (("1"
                                                                        (split
                                                                         -11)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (split
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-3
                                                                                -7
                                                                                1
                                                                                8))
                                                                              (("2"
                                                                                (lemma
                                                                                 position_s_first_diff)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "subtermOF(x!1, x!3)"
                                                                                   "subtermOF(x!2, x!3)"
                                                                                   fd)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       x!3)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           pos_o_term)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             x!3
                                                                                             fd
                                                                                             x!1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (name-replace
                                                                                                 "q!1"
                                                                                                 "x!3 o fd")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -2
                                                                                                   -3
                                                                                                   -5
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     child)
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         not_var)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           seq_first_rest[posnat])
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             p1!2)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               empty_0[posnat])
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 p1!2)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "first(p1!2)"
                                                                                                                     "p1!2"
                                                                                                                     "rest(p1!2)"
                                                                                                                     "subtermOF(x!1, p1!1)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         pos_subterm_ax)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           p1!1
                                                                                                                           p1!2
                                                                                                                           x!1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              -7
                                                                              1
                                                                              8))
                                                                            (("2"
                                                                              (lemma
                                                                               position_t_first_diff)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "subtermOF(x!1, x!3)"
                                                                                 "subtermOF(x!2, x!3)"
                                                                                 fd)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     x!3)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         pos_o_term)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           x!3
                                                                                           fd
                                                                                           x!2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (name-replace
                                                                                               "q!1"
                                                                                               "x!3 o fd")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -2
                                                                                                 -3
                                                                                                 -5
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   child)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       not_var)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         seq_first_rest[posnat])
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           p1!2)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             empty_0[posnat])
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               p1!2)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "first(p1!2)"
                                                                                                                   "p1!2"
                                                                                                                   "rest(p1!2)"
                                                                                                                   "subtermOF(x!2, p1!1)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       pos_subterm_ax)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         p1!1
                                                                                                                         p1!2
                                                                                                                         x!2)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-3
                                                                            1
                                                                            2))
                                                                          (("2"
                                                                            (expand
                                                                             child)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (expand
                                                                                 <=)
                                                                                (("2"
                                                                                  (case
                                                                                   "length(x!3) < length(p1!1)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     o_length_o[posnat])
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "length(p1!1) < length(x!3)")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       o_length_o[posnat])
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         p1!1
                                                                                         p1!2
                                                                                         x!3
                                                                                         fd)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               2
                                                                                               seq!1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     2
                                                                                                     seq!1)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         seq_o_empty)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           seq_o_empty)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       o_equals_o[posnat])
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         x!3
                                                                                         fd
                                                                                         p1!1
                                                                                         p1!2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             4
                                                                                             empty_seq)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               seq_o_empty)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-2
                                                                          -6
                                                                          1
                                                                          8))
                                                                        (("2"
                                                                          (lemma
                                                                           position_t_first_diff)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "subtermOF(x!1, x!3)"
                                                                             "subtermOF(x!2, x!3)"
                                                                             fd)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 x!3)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     pos_o_term)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       x!3
                                                                                       fd
                                                                                       x!2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (name-replace
                                                                                           "q!1"
                                                                                           "x!3 o fd")
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2
                                                                                             -3
                                                                                             -5
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               child)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   pos_ax)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     p1!1
                                                                                                     p1!2
                                                                                                     x!2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -5
                                                                        1
                                                                        8))
                                                                      (("2"
                                                                        (lemma
                                                                         position_s_first_diff)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "subtermOF(x!1, x!3)"
                                                                           "subtermOF(x!2, x!3)"
                                                                           fd)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               x!3)
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (lemma
                                                                                   pos_o_term)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     x!3
                                                                                     fd
                                                                                     x!1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "q!1"
                                                                                         "x!3 o fd")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -2
                                                                                           -3
                                                                                           -5
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             child)
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 pos_ax)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   p1!1
                                                                                                   p1!2
                                                                                                   x!1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -5
                                                                    1
                                                                    8))
                                                                  (("2"
                                                                    (lemma
                                                                     position_t_first_diff)
                                                                    (("2"
                                                                      (lemma
                                                                       position_s_first_diff)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "subtermOF(x!1, x!3)"
                                                                         "subtermOF(x!2, x!3)"
                                                                         fd)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "subtermOF(x!1, x!3)"
                                                                           "subtermOF(x!2, x!3)"
                                                                           fd)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               x!3)
                                                                              (("2"
                                                                                (lemma
                                                                                 pos_o_term)
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   x!3
                                                                                   fd
                                                                                   x!2)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     x!3
                                                                                     fd
                                                                                     x!1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "q!1"
                                                                                         "x!3 o fd")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -3
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -8
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             child)
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 pos_ax)
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   p1!1
                                                                                                   p1!2
                                                                                                   x!2)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     p1!1
                                                                                                     p1!2
                                                                                                     x!1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2 1))
                      (("2" (lemma next_position_is_position)
                        (("2"
                          (inst-cp -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                           "x!3 o fd")
                          (("2"
                            (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                             "x!3 o fd")
                            (("1" (lemma next_position_commute)
                              (("1"
                                (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                                 "x!3 o fd")
                                (("1" (replace -4)
                                  (("1" (replace -1) (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2)
                              (("2" (lemma position_t_first_diff)
                                (("2" (lemma position_s_first_diff)
                                  (("2"
                                    (inst -1 "subtermOF(x!1, x!3)"
                                     "subtermOF(x!2, x!3)" fd)
                                    (("2"
                                      (inst
                                       -2
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       fd)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred x!3)
                                          (("2"
                                            (lemma pos_o_term)
                                            (("2"
                                              (inst-cp -1 x!3 fd x!2)
                                              (("2"
                                                (inst -1 x!3 fd x!1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but (-1 -2 1))
                                                    (("2"
                                                      (rewrite
                                                       ext_preserv_pos)
                                                      (("2"
                                                        (rewrite
                                                         ext_preserv_pos)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1))
                    (("2" (lemma position_t_first_diff)
                      (("2" (lemma position_s_first_diff)
                        (("2"
                          (inst -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                           fd)
                          (("2"
                            (inst -1 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" fd)
                            (("2" (assert)
                              (("2" (typepred x!3)
                                (("2" (lemma pos_o_term)
                                  (("2" (inst-cp -1 x!3 fd x!2)
                                    (("2" (inst -1 x!3 fd x!1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but (-1 -2 1))
                                          (("2"
                                            (rewrite ext_preserv_pos)
                                            (("2"
                                              (rewrite ext_preserv_pos)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -2 -3 -4)
        (("2"
          (name-replace "sig1"
           "robinson_unification_algorithm_aux(x!1, x!2, x!3)")
          (("2" (expand* member U unifiable unifier)
            (("2" (inst 1 sig1) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide - 2)
      (("2" (skosimp)
        (("2" (expand child)
          (("2" (skosimp)
            (("2" (lemma pos_subterm_ax)
              (("2" (inst -1 p1!1 p1!2 y!2)
                (("2" (assert)
                  (("2" (lemma not_var)
                    (("2" (lemma seq_first_rest[posnat])
                      (("2" (inst -1 p1!2)
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 p1!2)
                            (("2" (assert)
                              (("2"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide - 2)
      (("3" (skosimp)
        (("3" (expand child)
          (("3" (skosimp)
            (("3" (lemma pos_subterm_ax)
              (("3" (inst -1 p1!1 p1!2 y!1)
                (("3" (assert)
                  (("3" (lemma not_var)
                    (("3" (lemma seq_first_rest[posnat])
                      (("3" (inst -1 p1!2)
                        (("3" (lemma empty_0[posnat])
                          (("3" (inst -1 p1!2)
                            (("3" (assert)
                              (("3"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma right_pos_subset)
        (("4" (inst?)
          (("4" (lemma positions_of_terms_finite)
            (("4" (inst?)
              (("4" (lemma finite_subset[position])
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (lemma right_pos_subset)
        (("6" (inst?)
          (("6" (lemma positions_of_terms_finite)
            (("6" (inst?)
              (("6" (lemma finite_subset[position])
                (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (hide 2)
      (("7" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("8" (hide - 2)
      (("8" (skosimp)
        (("8" (expand child)
          (("8" (skosimp)
            (("8" (lemma pos_subterm_ax)
              (("8" (inst -1 "p11!1" "p1!1" "x!1`2")
                (("8" (assert)
                  (("8" (lemma not_var)
                    (("8" (lemma seq_first_rest[posnat])
                      (("8" (inst -1 p1!1)
                        (("8" (lemma empty_0[posnat])
                          (("8" (inst -1 p1!1)
                            (("8" (assert)
                              (("8"
                                (inst -2 "first(p1!1)" "p1!1" "rest(p1!1)"
                                 "subtermOF(x!1`2, p11!1)")
                                (("8" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (hide - 2)
      (("9" (skosimp)
        (("9" (expand child)
          (("9" (skosimp)
            (("9" (lemma pos_subterm_ax)
              (("9" (inst -1 "p11!1" "p1!1" "x!1`1")
                (("9" (assert)
                  (("9" (lemma not_var)
                    (("9" (lemma seq_first_rest[posnat])
                      (("9" (inst -1 p1!1)
                        (("9" (lemma empty_0[posnat])
                          (("9" (inst -1 p1!1)
                            (("9" (assert)
                              (("9"
                                (inst -2 "first(p1!1)" "p1!1" "rest(p1!1)"
                                 "subtermOF(x!1`1, p11!1)")
                                (("9" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (hide - 2)
      (("10" (skosimp)
        (("10" (expand child)
          (("10" (skosimp)
            (("10" (lemma pos_subterm_ax)
              (("10" (inst -1 "p1!1" "p1!2" "y!1`2")
                (("10" (assert)
                  (("10" (lemma not_var)
                    (("10" (lemma seq_first_rest[posnat])
                      (("10" (inst -1 p1!2)
                        (("10" (lemma empty_0[posnat])
                          (("10" (inst -1 p1!2)
                            (("10" (assert)
                              (("10"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1`2, p1!1)")
                                (("10" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide - 2)
      (("11" (skosimp)
        (("11" (expand child)
          (("11" (skosimp)
            (("11" (lemma pos_subterm_ax)
              (("11" (inst -1 "p1!1" "p1!2" "y!1`1")
                (("11" (assert)
                  (("11" (lemma not_var)
                    (("11" (lemma seq_first_rest[posnat])
                      (("11" (inst -1 p1!2)
                        (("11" (lemma empty_0[posnat])
                          (("11" (inst -1 p1!2)
                            (("11" (assert)
                              (("11"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1`1, p1!1)")
                                (("11" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (lemma right_pos_subset)
        (("12" (inst?)
          (("12" (lemma positions_of_terms_finite)
            (("12" (inst?)
              (("12" (lemma finite_subset[position])
                (("12" (inst?) (("12" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("14" (hide 2)
      (("14" (lemma right_pos_subset)
        (("14" (inst?)
          (("14" (lemma finite_subset[position])
            (("14" (inst?)
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (hide - 2)
                  (("2" (lemma pos_subterm_ax)
                    (("2" (assert)
                      (("2" (lemma not_var)
                        (("2" (lemma seq_first_rest[posnat])
                          (("2" (lemma empty_0[posnat])
                            (("2" (assert)
                              (("2" (hide - 2)
                                (("2" (lemma pos_subterm_ax)
                                  (("2" (lemma not_var)
                                    (("2" (lemma seq_first_rest[posnat])
                                      (("2"
                                        (lemma empty_0[posnat])
                                        (("2"
                                          (lemma right_pos_subset)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (lemma
                                               positions_of_terms_finite)
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (lemma finite_subset[position])
      (("15" (assert)
        (("15" (hide 2)
          (("15" (rewrite finite_union)
            (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
             ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (hide - 2)
      (("16" (skosimp)
        (("16" (expand child)
          (("16" (skosimp)
            (("16" (lemma pos_subterm_ax)
              (("16" (inst -1 "p1!1" "p1!2" "t!1")
                (("16" (assert)
                  (("16" (lemma not_var)
                    (("16" (lemma seq_first_rest[posnat])
                      (("16" (inst -1 p1!2)
                        (("16" (lemma empty_0[posnat])
                          (("16" (inst -1 p1!2)
                            (("16" (assert)
                              (("16"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(t!1, p1!1)")
                                (("16" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide - 2)
      (("17" (skosimp)
        (("17" (expand child)
          (("17" (skosimp)
            (("17" (lemma pos_subterm_ax)
              (("17" (inst -1 "p1!1" "p1!2" "s!1")
                (("17" (assert)
                  (("17" (lemma not_var)
                    (("17" (lemma seq_first_rest[posnat])
                      (("17" (inst -1 p1!2)
                        (("17" (lemma empty_0[posnat])
                          (("17" (inst -1 p1!2)
                            (("17" (assert)
                              (("17"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(s!1, p1!1)")
                                (("17" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma right_pos_subset)
        (("18" (inst?)
          (("18" (lemma positions_of_terms_finite)
            (("18" (inst?)
              (("18" (lemma finite_subset[position])
                (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 2)
      (("19" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil))
    nil)
   ((s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (y!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (x!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (y!1 skolem-const-decl "term" robinsonunificationEF nil)
    (vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (right_pos_subset formula-decl nil robinsonunificationEF nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (O const-decl "finseq" finite_sequences nil)
    (ext def-decl "term" substitution nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (next_position_commute formula-decl nil robinsonunificationEF nil)
    (fd skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (next_position_is_position formula-decl nil robinsonunificationEF nil)
    (robinson_unification_algorithm_aux_TCC12 termination-tcc nil
     robinsonunificationEF nil)
    (<= const-decl "bool" positions nil)
    (pos_ax formula-decl nil positions nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (not_var formula-decl nil positions nil)
    (rest const-decl "finseq" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_first_rest formula-decl nil seq_extras structures)
    (pos_o_term formula-decl nil subterm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos_subterm formula-decl nil subterm nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (p1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (x!3 skolem-const-decl
     "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}"
     robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (o_length_o formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (p1!1 skolem-const-decl "{p1: position |
   positionsOF(ext(sig!1)(x!1))(p1) AND positionsOF(ext(sig!1)(x!2))(p1)}"
     robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (np_p_o_fd_equal_subterm formula-decl nil robinsonunificationEF nil)
    (unifier_o formula-decl nil unification nil)
    (unifiable_preserves_unifiability1 formula-decl nil robinsonunificationEF
     nil)
    (ruaEF_fails_iff_non_unifiable_aux formula-decl nil robinsonunificationEF
     nil)
    (np_p_o_fd_empty_unifiable_term formula-decl nil robinsonunificationEF
     nil)
    (unifiable_implies_not_fail1 formula-decl nil robinsonunificationEF nil)
    (first_diff def-decl "position" robinsonunification nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (unifier const-decl "bool" unification nil)
    (subterm_empty_seq formula-decl nil subterm nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (next_pos_empty_equal_subterm formula-decl nil robinsonunificationEF nil)
    (equal_term formula-decl nil subterm nil)
    (/= const-decl "boolean" notequal nil)
    (robinson_unification_algorithm_aux_TCC8 termination-tcc nil
     robinsonunificationEF nil)
    (next_pos_equal_subterm formula-decl nil robinsonunificationEF nil)
    (child_np_child_p formula-decl nil robinsonunificationEF nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (robinson_unification_algorithm_aux def-decl "Sub" robinsonunificationEF
     nil)
    (member const-decl "bool" sets nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (unifiable const-decl "bool" unification nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (child const-decl "bool" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (left_without_children const-decl "bool" positions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (Vars const-decl "set[(V)]" subterm nil) (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (ruaEF_gives_mg_subs_aux 0
  (ruaEF_gives_mg_subs_aux-1 nil 3512504975
   (""
    (measure-induct+ "lex2(Card(union(Vars(s), Vars(t))),
                                                   Card(right_pos(s,p)))"
     ("s" "t" "p"))
    (("1" (skosimp)
      (("1" (case "subtermOF(x!1, x!3) = subtermOF(x!2, x!3)")
        (("1" (case "x!3 = empty_seq")
          (("1" (hide -3 -4 -5)
            (("1" (expand "robinson_unification_algorithm_aux")
              (("1" (assert)
                (("1" (replaces -1)
                  (("1" (expand next_position 1 1)
                    (("1" (hide -)
                      (("1" (expand <=)
                        (("1" (inst 1 rho!1)
                          (("1" (decompose-equality)
                            (("1" (expand comp)
                              (("1" (expand identity)
                                (("1" (typepred x!4)
                                  (("1" (expand* V ext)
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "robinson_unification_algorithm_aux" 2)
            (("2" (assert)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide-all-but 1)
                    (("1" (expand <=)
                      (("1" (inst 1 rho!1)
                        (("1" (decompose-equality)
                          (("1" (typepred x!4)
                            (("1" (expand* V comp ext identity)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (name-replace "np" "next_position(x!1, x!2, x!3)" :hide?
                     nil)
                    (("2"
                      (name-replace "sig!1"
                       "robinson_unification_algorithm_aux(x!1, x!2, np)"
                       :hide? nil)
                      (("2" (inst -4 x!1 x!2 np)
                        (("2" (inst -4 rho!1)
                          (("2" (assert)
                            (("2"
                              (lemma robinson_unification_algorithm_aux_TCC8)
                              (("2" (inst -1 x!1 x!2 x!3)
                                (("2" (assert)
                                  (("2" (inst -1 np)
                                    (("2" (assert)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (lemma next_pos_equal_subterm)
                                              (("1"
                                                (inst -1 x!1 x!2 x!3)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (replace -4)
                                                    (("1"
                                                      (inst -1 q!1)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (lemma child_np_child_p)
                                              (("2"
                                                (inst -1 x!1 x!2 x!3 p1!1)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst -7 p1!1)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand robinson_unification_algorithm_aux 2)
          (("2" (assert)
            (("2"
              (name-replace "sig!1"
               "link_of_frst_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))"
               :hide? nil)
              (("2"
                (name-replace "fd"
                 "first_diff(subtermOF(x!1, x!3), subtermOF(x!2, x!3))" :hide?
                 nil)
                (("2"
                  (name-replace "np"
                   "next_position(ext(sig!1)(x!1), ext(sig!1)(x!2), x!3 o fd)"
                   :hide? nil)
                  (("1"
                    (name-replace "sig!2"
                     "robinson_unification_algorithm_aux(ext(sig!1)(x!1), ext(sig!1)(x!2), np)"
                     :hide? nil)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but (-1 -5 -9))
                          (("1" (lemma unifiable_implies_not_fail1)
                            (("1" (inst -1 x!1 x!2 x!3)
                              (("1" (replace -3)
                                (("1" (assert)
                                  (("1" (assert)
                                    (("1" (hide -1 -2)
                                      (("1"
                                        (expand* member U unifiable unifier)
                                        (("1" (inst 1 rho!1) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-5 -9 1 3))
                          (("2" (lemma preserving_generality1)
                            (("2" (inst -1 rho!1 x!1 x!2 x!3)
                              (("2" (replace -2)
                                (("2" (assert)
                                  (("2" (skosimp)
                                    (("2" (expand <=)
                                      (("2" (inst 1 theta!1) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -6)
                          (("3" (lemma ruaEF_fails_iff_non_unifiable_aux)
                            (("3" (inst -1 x!1 x!2 x!3)
                              (("3" (ground)
                                (("1" (hide-all-but (-9 1))
                                  (("1" (expand* member U unifiable unifier)
                                    (("1" (inst 1 rho!1) nil nil)) nil))
                                  nil)
                                 ("2"
                                  (expand robinson_unification_algorithm_aux
                                          1)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4"
                          (inst -5 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)" "np")
                          (("4" (lemma preserving_generality1)
                            (("4" (inst -1 rho!1 x!1 x!2 x!3)
                              (("4" (assert)
                                (("4" (replace -5)
                                  (("4" (skosimp)
                                    (("4" (inst -6 theta!1)
                                      (("4"
                                        (lemma
                                         robinson_unification_algorithm_aux_TCC12)
                                        (("4"
                                          (inst -1 x!1 x!2 x!3)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (inst -1 sig!1)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (replace -5)
                                                  (("4"
                                                    (replace -4)
                                                    (("4"
                                                      (inst -1 np)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (hide -1)
                                                          (("4"
                                                            (replace -2)
                                                            (("4"
                                                              (ground)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1 -2 2))
                                                                (("1"
                                                                  (expand <=)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         tau!1)
                                                                        (("1"
                                                                          (rewrite
                                                                           o_ass)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1 -8 1))
                                                                (("2"
                                                                  (expand*
                                                                   member
                                                                   U
                                                                   unifier)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       ext_o)
                                                                      (("2"
                                                                        (expand
                                                                         o)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (lemma
                                                                   np_p_o_fd_equal_subterm)
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     x!1
                                                                     x!2
                                                                     x!3)
                                                                    (("3"
                                                                      (replace
                                                                       -6)
                                                                      (("3"
                                                                        (replace
                                                                         -7)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (replace
                                                                             -5)
                                                                            (("3"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skosimp)
                                                                (("4"
                                                                  (lemma
                                                                   child_np_child_p)
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "ext(sig!1)(x!1)"
                                                                     "ext(sig!1)(x!2)"
                                                                     "x!3 o fd"
                                                                     "p1!1")
                                                                    (("4"
                                                                      (replace
                                                                       -5)
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (case
                                                                           "x!3 <= p1!1")
                                                                          (("1"
                                                                            (hide
                                                                             -3
                                                                             -4
                                                                             -5
                                                                             -6
                                                                             -9
                                                                             -10
                                                                             -11
                                                                             2
                                                                             3
                                                                             4)
                                                                            (("1"
                                                                              (lemma
                                                                               fd_equal_symbol)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "subtermOF(x!1, x!3)"
                                                                                 "subtermOF(x!2, x!3)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -4)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       <=)
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           p1!2)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               pos_subterm)
                                                                                              (("1"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 x!3
                                                                                                 p1!2
                                                                                                 x!1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   x!3
                                                                                                   p1!2
                                                                                                   x!2)
                                                                                                  (("1"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         -3
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -3
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2
                                                                                                               -1
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 ext_preserve_symbol)
                                                                                                                (("1"
                                                                                                                  (inst-cp
                                                                                                                   -1
                                                                                                                   x!1
                                                                                                                   sig!1
                                                                                                                   p1!1)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     x!2
                                                                                                                     sig!1
                                                                                                                     p1!1)
                                                                                                                    (("1"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           (-3
                                                                                                                            -4
                                                                                                                            -5
                                                                                                                            1
                                                                                                                            4))
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             position_s_first_diff)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "subtermOF(x!1, x!3)"
                                                                                                                               "subtermOF(x!2, x!3)"
                                                                                                                               fd)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   x!3)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       pos_o_term)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         x!3
                                                                                                                                         fd
                                                                                                                                         x!1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (name-replace
                                                                                                                                             "q!1"
                                                                                                                                             "x!3 o fd")
                                                                                                                                            (("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                -5
                                                                                                                                                1))
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 child)
                                                                                                                                                (("2"
                                                                                                                                                  (skosimp)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     not_var)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       seq_first_rest[posnat])
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         p1!3)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           empty_0[posnat])
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             p1!3)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -2
                                                                                                                                                                 "first(p1!3)"
                                                                                                                                                                 "p1!3"
                                                                                                                                                                 "rest(p1!3)"
                                                                                                                                                                 "subtermOF(x!1, p1!1)")
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   pos_subterm_ax)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     p1!1
                                                                                                                                                                     p1!3
                                                                                                                                                                     x!1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-3
                                                                                                                          -4
                                                                                                                          -5
                                                                                                                          1
                                                                                                                          4))
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           position_t_first_diff)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "subtermOF(x!1, x!3)"
                                                                                                                             "subtermOF(x!2, x!3)"
                                                                                                                             fd)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 x!3)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     pos_o_term)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       x!3
                                                                                                                                       fd
                                                                                                                                       x!2)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (name-replace
                                                                                                                                           "q!1"
                                                                                                                                           "x!3 o fd")
                                                                                                                                          (("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             (-1
                                                                                                                                              -5
                                                                                                                                              1))
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               child)
                                                                                                                                              (("2"
                                                                                                                                                (skosimp)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   not_var)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     seq_first_rest[posnat])
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       p1!3)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         empty_0[posnat])
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           p1!3)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -2
                                                                                                                                                               "first(p1!3)"
                                                                                                                                                               "p1!3"
                                                                                                                                                               "rest(p1!3)"
                                                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   pos_subterm_ax)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     p1!1
                                                                                                                                                                     p1!3
                                                                                                                                                                     x!2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-3
                                                                                                          -4
                                                                                                          -5
                                                                                                          1
                                                                                                          4))
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           position_s_first_diff)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "subtermOF(x!1, x!3)"
                                                                                                             "subtermOF(x!2, x!3)"
                                                                                                             "fd")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 x!3)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     pos_o_term)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       x!3
                                                                                                                       fd
                                                                                                                       x!1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (name-replace
                                                                                                                           "q!1"
                                                                                                                           "x!3 o fd")
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -2
                                                                                                                             -3
                                                                                                                             -6
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               child)
                                                                                                                              (("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -2
                                                                                                                                   1
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       pos_ax)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         p1!1
                                                                                                                                         p1!3
                                                                                                                                         x!1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       (-3
                                                                                                        -4
                                                                                                        -5
                                                                                                        1
                                                                                                        4))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             position_t_first_diff)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "subtermOF(x!1, x!3)"
                                                                                                               "subtermOF(x!2, x!3)"
                                                                                                               fd)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   x!3)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       pos_o_term)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         x!3
                                                                                                                         fd
                                                                                                                         x!2)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (name-replace
                                                                                                                             "q!1"
                                                                                                                             "x!3 o fd")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -2
                                                                                                                               -3
                                                                                                                               -5
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 child)
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     pos_ax)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       p1!1
                                                                                                                                       p1!3
                                                                                                                                       x!2)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -2
                                                                                                1))
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   child)
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       equal_prefix[posnat])
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         x!3
                                                                                                         fd
                                                                                                         "p1!2 o p1!3")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           o_assoc)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 p1!3)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -2
                                                                                              -3
                                                                                              1
                                                                                              4))
                                                                                            (("2"
                                                                                              (lemma
                                                                                               position_s_first_diff)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 position_t_first_diff)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "subtermOF(x!1, x!3)"
                                                                                                   "subtermOF(x!2, x!3)"
                                                                                                   "fd")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "subtermOF(x!1, x!3)"
                                                                                                     "subtermOF(x!2, x!3)"
                                                                                                     "fd")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         x!3)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           pos_o_term)
                                                                                                          (("2"
                                                                                                            (inst-cp
                                                                                                             -1
                                                                                                             x!3
                                                                                                             fd
                                                                                                             x!2)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               x!3
                                                                                                               fd
                                                                                                               x!1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (name-replace
                                                                                                                   "q!1"
                                                                                                                   "x!3 o fd")
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      -7
                                                                                                                      -8
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (replaces
                                                                                                                       -3)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         child)
                                                                                                                        (("2"
                                                                                                                          (skosimp)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             pos_subterm_ax)
                                                                                                                            (("2"
                                                                                                                              (inst-cp
                                                                                                                               -1
                                                                                                                               x!3
                                                                                                                               "p1!2 o p1!3"
                                                                                                                               x!2)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 x!3
                                                                                                                                 "p1!2 o p1!3"
                                                                                                                                 x!1)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   o_assoc)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -3
                                                                                                                                       -4
                                                                                                                                       -5
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         pos_ax)
                                                                                                                                        (("2"
                                                                                                                                          (inst-cp
                                                                                                                                           -1
                                                                                                                                           p1!2
                                                                                                                                           p1!3
                                                                                                                                           "subtermOF(x!2, x!3)")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             p1!2
                                                                                                                                             p1!3
                                                                                                                                             "subtermOF(x!1, x!3)")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -9
                                                                             p1!1)
                                                                            (("1"
                                                                              (lemma
                                                                               ext_preserve_symbol)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 x!1
                                                                                 sig!1
                                                                                 p1!1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   x!2
                                                                                   sig!1
                                                                                   p1!1)
                                                                                  (("1"
                                                                                    (split
                                                                                     -11)
                                                                                    (("1"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (split
                                                                                         -3)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-3
                                                                                            -8
                                                                                            1
                                                                                            8))
                                                                                          (("2"
                                                                                            (lemma
                                                                                             position_s_first_diff)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "subtermOF(x!1, x!3)"
                                                                                               "subtermOF(x!2, x!3)"
                                                                                               fd)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   x!3)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       pos_o_term)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         x!3
                                                                                                         fd
                                                                                                         x!1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (name-replace
                                                                                                             "q!1"
                                                                                                             "x!3 o fd")
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2
                                                                                                               -3
                                                                                                               -5
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 child)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     not_var)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       seq_first_rest[posnat])
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         p1!2)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           empty_0[posnat])
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             p1!2)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -2
                                                                                                                                 "first(p1!2)"
                                                                                                                                 "p1!2"
                                                                                                                                 "rest(p1!2)"
                                                                                                                                 "subtermOF(x!1, p1!1)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     pos_subterm_ax)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       p1!1
                                                                                                                                       p1!2
                                                                                                                                       x!1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-3
                                                                                          -8
                                                                                          1
                                                                                          8))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           position_t_first_diff)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "subtermOF(x!1, x!3)"
                                                                                             "subtermOF(x!2, x!3)"
                                                                                             fd)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 x!3)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     pos_o_term)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       x!3
                                                                                                       fd
                                                                                                       x!2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (name-replace
                                                                                                           "q!1"
                                                                                                           "x!3 o fd")
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -2
                                                                                                             -3
                                                                                                             -5
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               child)
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   not_var)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     seq_first_rest[posnat])
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       p1!2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         empty_0[posnat])
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           p1!2)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "first(p1!2)"
                                                                                                                               "p1!2"
                                                                                                                               "rest(p1!2)"
                                                                                                                               "subtermOF(x!2, p1!1)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   pos_subterm_ax)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     p1!1
                                                                                                                                     p1!2
                                                                                                                                     x!2)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-3
                                                                                        1
                                                                                        2))
                                                                                      (("2"
                                                                                        (expand
                                                                                         child)
                                                                                        (("2"
                                                                                          (skosimp)
                                                                                          (("2"
                                                                                            (expand
                                                                                             <=)
                                                                                            (("2"
                                                                                              (case
                                                                                               "length(x!3) < length(p1!1)")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 o_length_o[posnat])
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "length(p1!1) < length(x!3)")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   o_length_o[posnat])
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     p1!1
                                                                                                     p1!2
                                                                                                     x!3
                                                                                                     fd)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           2
                                                                                                           seq!1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 seq!1)
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     seq_o_empty)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       seq_o_empty)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   o_equals_o[posnat])
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     x!3
                                                                                                     fd
                                                                                                     p1!1
                                                                                                     p1!2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         4
                                                                                                         empty_seq)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           seq_o_empty)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -7
                                                                                      1
                                                                                      8))
                                                                                    (("2"
                                                                                      (lemma
                                                                                       position_t_first_diff)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "subtermOF(x!1, x!3)"
                                                                                         "subtermOF(x!2, x!3)"
                                                                                         fd)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             x!3)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 pos_o_term)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   x!3
                                                                                                   fd
                                                                                                   x!2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (name-replace
                                                                                                       "q!1"
                                                                                                       "x!3 o fd")
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3
                                                                                                         -5
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           child)
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               pos_ax)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 p1!1
                                                                                                                 p1!2
                                                                                                                 x!2)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -6
                                                                                    1
                                                                                    8))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     position_s_first_diff)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "subtermOF(x!1, x!3)"
                                                                                       "subtermOF(x!2, x!3)"
                                                                                       fd)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           x!3)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               pos_o_term)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 x!3
                                                                                                 fd
                                                                                                 x!1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "q!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3
                                                                                                       -5
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         child)
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             pos_ax)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               p1!1
                                                                                                               p1!2
                                                                                                               x!1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -6
                                                                                1
                                                                                8))
                                                                              (("2"
                                                                                (lemma
                                                                                 position_t_first_diff)
                                                                                (("2"
                                                                                  (lemma
                                                                                   position_s_first_diff)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "subtermOF(x!1, x!3)"
                                                                                     "subtermOF(x!2, x!3)"
                                                                                     fd)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "subtermOF(x!1, x!3)"
                                                                                       "subtermOF(x!2, x!3)"
                                                                                       fd)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           x!3)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             pos_o_term)
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               x!3
                                                                                               fd
                                                                                               x!2)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 x!3
                                                                                                 fd
                                                                                                 x!1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "q!1"
                                                                                                     "x!3 o fd")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       -8
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         child)
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             pos_ax)
                                                                                                            (("2"
                                                                                                              (inst-cp
                                                                                                               -1
                                                                                                               p1!1
                                                                                                               p1!2
                                                                                                               x!2)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 p1!1
                                                                                                                 p1!2
                                                                                                                 x!1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2 1))
                      (("2" (lemma next_position_is_position)
                        (("2"
                          (inst-cp -1 "ext(sig!1)(x!1)" "ext(sig!1)(x!2)"
                           "x!3 o fd")
                          (("2"
                            (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                             "x!3 o fd")
                            (("1" (lemma next_position_commute)
                              (("1"
                                (inst -1 "ext(sig!1)(x!2)" "ext(sig!1)(x!1)"
                                 "x!3 o fd")
                                (("1" (replace -4)
                                  (("1" (replace -1) (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2)
                              (("2" (lemma position_t_first_diff)
                                (("2" (lemma position_s_first_diff)
                                  (("2"
                                    (inst -1 "subtermOF(x!1, x!3)"
                                     "subtermOF(x!2, x!3)" fd)
                                    (("2"
                                      (inst
                                       -2
                                       "subtermOF(x!1, x!3)"
                                       "subtermOF(x!2, x!3)"
                                       fd)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred x!3)
                                          (("2"
                                            (lemma pos_o_term)
                                            (("2"
                                              (inst-cp -1 x!3 fd x!2)
                                              (("2"
                                                (inst -1 x!3 fd x!1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but (-1 -2 1))
                                                    (("2"
                                                      (rewrite
                                                       ext_preserv_pos)
                                                      (("2"
                                                        (rewrite
                                                         ext_preserv_pos)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1))
                    (("2" (lemma position_t_first_diff)
                      (("2" (lemma position_s_first_diff)
                        (("2"
                          (inst -2 "subtermOF(x!1, x!3)" "subtermOF(x!2, x!3)"
                           fd)
                          (("2"
                            (inst -1 "subtermOF(x!1, x!3)"
                             "subtermOF(x!2, x!3)" fd)
                            (("2" (assert)
                              (("2" (typepred x!3)
                                (("2" (lemma pos_o_term)
                                  (("2" (inst-cp -1 x!3 fd x!2)
                                    (("2" (inst -1 x!3 fd x!1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but (-1 -2 1))
                                          (("2"
                                            (rewrite ext_preserv_pos)
                                            (("2"
                                              (rewrite ext_preserv_pos)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide - 2)
      (("2" (skosimp)
        (("2" (expand child)
          (("2" (skosimp)
            (("2" (lemma pos_subterm_ax)
              (("2" (inst -1 p1!1 p1!2 y!2)
                (("2" (assert)
                  (("2" (lemma not_var)
                    (("2" (lemma seq_first_rest[posnat])
                      (("2" (inst -1 p1!2)
                        (("2" (lemma empty_0[posnat])
                          (("2" (inst -1 p1!2)
                            (("2" (assert)
                              (("2"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!2, p1!1)")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide - 2)
      (("3" (skosimp)
        (("3" (expand child)
          (("3" (skosimp)
            (("3" (lemma pos_subterm_ax)
              (("3" (inst -1 p1!1 p1!2 y!1)
                (("3" (assert)
                  (("3" (lemma not_var)
                    (("3" (lemma seq_first_rest[posnat])
                      (("3" (inst -1 p1!2)
                        (("3" (lemma empty_0[posnat])
                          (("3" (inst -1 p1!2)
                            (("3" (assert)
                              (("3"
                                (inst -2 "first(p1!2)" "p1!2" "rest(p1!2)"
                                 "subtermOF(y!1, p1!1)")
                                (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide - 2)
      (("4" (lemma right_pos_subset)
        (("4" (inst?)
          (("4" (lemma positions_of_terms_finite)
            (("4" (inst?)
              (("4" (lemma finite_subset[position])
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 1 3)
      (("5" (lemma right_pos_subset)
        (("5" (inst?)
          (("5" (lemma positions_of_terms_finite)
            (("5" (inst?)
              (("5" (lemma finite_subset[position])
                (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide -1 2)
      (("6" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("7" (hide 1 3)
      (("7" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("8" (hide-all-but 1)
      (("8" (skosimp)
        (("8" (lemma app_term)
          (("8" (inst -1 y!3 p1!1 y!2) (("8" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("9" (hide-all-but 1)
      (("9" (skosimp)
        (("9" (lemma app_term)
          (("9" (inst -1 y!3 p1!1 y!1) (("9" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("10" (hide 2)
      (("10" (lemma right_pos_subset)
        (("10" (inst?)
          (("10" (lemma positions_of_terms_finite)
            (("10" (inst?)
              (("10" (lemma finite_subset[position])
                (("10" (inst?) (("10" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (hide 2)
      (("11" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("12" (hide 2)
      (("12" (lemma right_pos_subset)
        (("12" (inst?)
          (("12" (lemma positions_of_terms_finite)
            (("12" (inst?)
              (("12" (lemma finite_subset[position])
                (("12" (inst?) (("12" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (hide 2)
      (("13" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("14" (hide-all-but 1)
      (("14" (lemma app_term)
        (("14" (skosimp)
          (("14" (inst -1 "x!1`3" "p11!1" "x!1`2") (("14" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (hide-all-but 1)
      (("15" (skosimp)
        (("15" (lemma app_term)
          (("15" (inst -1 "x!1`3" "p11!1" "x!1`1") (("15" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("16" (hide-all-but 1)
      (("16" (skosimp)
        (("16" (lemma app_term)
          (("16" (inst -1 "y!1`3" "p1!1" "y!1`2") (("16" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (hide-all-but 1)
      (("17" (skosimp)
        (("17" (lemma app_term)
          (("17" (inst -1 "y!1`3" "p1!1" "y!1`1") (("17" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (hide 2)
      (("18" (lemma right_pos_subset)
        (("18" (inst?)
          (("18" (lemma positions_of_terms_finite)
            (("18" (inst?)
              (("18" (lemma finite_subset[position])
                (("18" (inst?) (("18" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (hide 2)
      (("19" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("20" (hide 2)
      (("20" (lemma right_pos_subset)
        (("20" (inst?)
          (("20" (lemma positions_of_terms_finite)
            (("20" (inst?)
              (("20" (lemma finite_subset[position])
                (("20" (inst?) (("20" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (hide 2)
      (("21" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil)
     ("22" (hide -1 2)
      (("22" (skosimp)
        (("22" (lemma app_term)
          (("22" (inst -1 p!1 p1!1 t!1) (("22" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("23" (hide -1 2)
      (("23" (skosimp)
        (("23" (lemma app_term)
          (("23" (inst -1 p!1 p1!1 s!1) (("23" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("24" (hide - 2 3)
      (("24" (lemma right_pos_subset)
        (("24" (inst?)
          (("24" (lemma positions_of_terms_finite)
            (("24" (inst?)
              (("24" (lemma finite_subset[position])
                (("24" (inst?) (("24" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("25" (hide - 2 3)
      (("25" (rewrite finite_union)
        (("1" (hide 2) (("1" (rewrite vars_of_term_finite) nil nil)) nil)
         ("2" (hide 2) (("2" (rewrite vars_of_term_finite) nil nil)) nil))
        nil))
      nil))
    nil)
   ((s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (y!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (x!1 skolem-const-decl
     "[s: term, t: term, {p: position | positionsOF(s)(p) AND positionsOF(t)(p)}]"
     robinsonunificationEF nil)
    (y!1 skolem-const-decl "term" robinsonunificationEF nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (app_term formula-decl nil subterm nil)
    (vars_of_term_finite formula-decl nil subterm nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (positions_of_terms_finite formula-decl nil positions nil)
    (right_pos_subset formula-decl nil robinsonunificationEF nil)
    (link_of_frst_diff const-decl "Sub" robinsonunification nil)
    (O const-decl "finseq" finite_sequences nil)
    (ext_preserv_pos formula-decl nil substitution nil)
    (next_position_commute formula-decl nil robinsonunificationEF nil)
    (fd skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (next_position_is_position formula-decl nil robinsonunificationEF nil)
    (o_ass formula-decl nil substitution nil)
    (ext_o formula-decl nil substitution nil)
    (O const-decl "T3" function_props nil)
    (np_p_o_fd_equal_subterm formula-decl nil robinsonunificationEF nil)
    (<= const-decl "bool" positions nil)
    (fd_equal_symbol formula-decl nil robinsonunification nil)
    (x!1 skolem-const-decl "term" robinsonunificationEF nil)
    (x!2 skolem-const-decl "term" robinsonunificationEF nil)
    (x!3 skolem-const-decl
     "{p: position | positionsOF(x!1)(p) AND positionsOF(x!2)(p)}"
     robinsonunificationEF nil)
    (p1!2 skolem-const-decl "position[variable, symbol, arity]"
     robinsonunificationEF nil)
    (equal_prefix formula-decl nil seq_extras structures)
    (o_assoc formula-decl nil finite_sequences nil)
    (pos_subterm formula-decl nil subterm nil)
    (pos_o_term formula-decl nil subterm nil)
    (seq_first_rest formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (pos_subterm_ax formula-decl nil subterm nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (not_var formula-decl nil positions nil)
    (position_s_first_diff formula-decl nil robinsonunification nil)
    (position_t_first_diff formula-decl nil robinsonunification nil)
    (ext_preserve_symbol formula-decl nil substitution nil)
    (pos_ax formula-decl nil positions nil) (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (o_length_o formula-decl nil seq_extras structures)
    (o_equals_o formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (p1!1 skolem-const-decl "{p1: position |
   positionsOF(ext(sig!1)(x!1))(p1) AND positionsOF(ext(sig!1)(x!2))(p1)}"
     robinsonunificationEF nil)
    (sig!1 skolem-const-decl "Sub[variable, symbol, arity]"
     robinsonunificationEF nil)
    (robinson_unification_algorithm_aux_TCC12 termination-tcc nil
     robinsonunificationEF nil)
    (ruaEF_fails_iff_non_unifiable_aux formula-decl nil robinsonunificationEF
     nil)
    (preserving_generality1 formula-decl nil robinsonunificationEF nil)
    (unifiable const-decl "bool" unification nil)
    (unifier const-decl "bool" unification nil)
    (unifiable_implies_not_fail1 formula-decl nil robinsonunificationEF nil)
    (first_diff def-decl "position" robinsonunification nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ext def-decl "term" substitution nil)
    (comp const-decl "term" substitution nil)
    (bijective? const-decl "bool" functions nil)
    (identity const-decl "(bijective?[T, T])" identity nil)
    (next_position def-decl "position" robinsonunificationEF nil)
    (robinson_unification_algorithm_aux_TCC8 termination-tcc nil
     robinsonunificationEF nil)
    (next_pos_equal_subterm formula-decl nil robinsonunificationEF nil)
    (/= const-decl "boolean" notequal nil)
    (child_np_child_p formula-decl nil robinsonunificationEF nil)
    (robinson_unification_algorithm_aux def-decl "Sub" robinsonunificationEF
     nil)
    (<= const-decl "bool" unification nil)
    (U const-decl "set[Sub[variable, symbol, arity]]" unification nil)
    (member const-decl "bool" sets nil)
    (f adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (child const-decl "bool" positions nil)
    (subtermOF def-decl "term" subterm nil)
    (positions? type-eq-decl nil positions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (left_without_children const-decl "bool" positions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded_le formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (right_pos def-decl "positions" robinsonunificationEF nil)
    (Vars const-decl "set[(V)]" subterm nil) (union const-decl "set" sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil) (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (ruaEF_fails_iff_non_unifiable 0
  (ruaEF_fails_iff_non_unifiable-1 nil 3510675455
   ("" (skosimp)
    (("" (prop)
      (("1" (lemma "ruaEF_fails_iff_non_unifiable_aux")
        (("1" (inst -1 "s!1" "t!1" "empty_seq")
          (("1" (split)
            (("1" (expand "robinson_unification_algorithm_EF")
              (("1" (assert) nil nil)) nil)
             ("2" (skosimp*)
              (("2" (hide +)
                (("2" (expand "left_without_children")
                  (("2" (skosimp*)
                    (("2" (lemma "seq_empty[posnat]")
                      (("2" (inst?)
                        (("2" (rewrite "empty_0")
                          (("2" (rewrite "empty_0") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*)
              (("3" (hide +)
                (("3" (expand "child")
                  (("3" (skosimp)
                    (("3" (lemma "seq_empty[posnat]")
                      (("3" (inst?)
                        (("3" (rewrite "empty_0")
                          (("3" (rewrite "empty_0") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide (2 3))
            (("2" (prop)
              (("1" (expand "positionsOF")
                (("1" (lift-if)
                  (("1" (expand* "only_empty_seq" "union" "member") nil nil))
                  nil))
                nil)
               ("2" (expand "positionsOF")
                (("2" (lift-if)
                  (("2" (expand* "only_empty_seq" "union" "member") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "robinson_unification_algorithm_EF")
        (("2" (lemma "ruaEF_fails_iff_non_unifiable_aux")
          (("2" (inst?)
            (("2" (split)
              (("1" (assert) nil nil)
               ("2" (skosimp*)
                (("2" (hide-all-but -1)
                  (("2" (expand "left_without_children")
                    (("2" (skosimp)
                      (("2" (lemma "seq_empty[posnat]")
                        (("2" (inst?)
                          (("2" (rewrite "empty_0")
                            (("2" (rewrite "empty_0") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skosimp*)
                (("3" (hide-all-but -1)
                  (("3" (expand "child")
                    (("3" (skosimp)
                      (("3" (lemma "seq_empty[posnat]")
                        (("3" (inst?)
                          (("3" (rewrite "empty_0")
                            (("3" (rewrite "empty_0") (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (child const-decl "bool" positions nil)
    (left_without_children const-decl "bool" positions nil)
    (seq_empty formula-decl nil seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (robinson_unification_algorithm_EF const-decl "Sub" robinsonunificationEF
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil)
    (ruaEF_fails_iff_non_unifiable_aux formula-decl nil robinsonunificationEF
     nil))
   shostak))
 (ruaEF_gives_unifier 0
  (ruaEF_gives_unifier-1 nil 3510656703
   ("" (skosimp)
    (("" (lemma ruaEF_gives_unifier_aux)
      (("" (prop)
        (("1" (inst -2 s!1 t!1 empty_seq)
          (("1" (prop)
            (("1" (expand robinson_unification_algorithm_EF)
              (("1" (propax) nil nil)) nil)
             ("2" (skosimp)
              (("2" (hide-all-but -1)
                (("2" (expand left_without_children)
                  (("2" (skosimp)
                    (("2" (lemma seq_empty[posnat])
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (flatten) (("2" (rewrite empty_0 -2) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (hide-all-but -1)
                (("3" (expand child)
                  (("3" (skosimp)
                    (("3" (lemma seq_empty[posnat])
                      (("3" (inst?)
                        (("3" (assert)
                          (("3" (flatten) (("3" (rewrite empty_0 -2) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (split)
              (("1" (expand positionsOF)
                (("1" (lift-if)
                  (("1" (expand* only_empty_seq union member) nil nil)) nil))
                nil)
               ("2" (expand positionsOF)
                (("2" (lift-if)
                  (("2" (expand* only_empty_seq union member) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst -2 s!1 t!1 empty_seq)
          (("1" (prop)
            (("1" (expand robinson_unification_algorithm_EF)
              (("1" (propax) nil nil)) nil)
             ("2" (skosimp)
              (("2" (hide-all-but -1)
                (("2" (expand left_without_children)
                  (("2" (skosimp)
                    (("2" (lemma seq_empty[posnat])
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (flatten) (("2" (rewrite empty_0 -2) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (hide-all-but -1)
                (("3" (expand child)
                  (("3" (skosimp)
                    (("3" (lemma seq_empty[posnat])
                      (("3" (inst?)
                        (("3" (assert)
                          (("3" (flatten) (("3" (rewrite empty_0 -2) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (split)
              (("1" (expand positionsOF)
                (("1" (lift-if)
                  (("1" (expand* only_empty_seq union member) nil nil)) nil))
                nil)
               ("2" (expand positionsOF)
                (("2" (lift-if)
                  (("2" (expand* only_empty_seq union member) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ruaEF_gives_unifier_aux formula-decl nil robinsonunificationEF nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (positionsOF def-decl "positions" positions nil)
    (positions type-eq-decl nil positions nil)
    (position type-eq-decl nil positions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil) (term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (child const-decl "bool" positions nil)
    (left_without_children const-decl "bool" positions nil)
    (seq_empty formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_0 formula-decl nil seq_extras structures)
    (robinson_unification_algorithm_EF const-decl "Sub" robinsonunificationEF
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (only_empty_seq const-decl "positions" positions nil))
   shostak))
 (ruaEF_gives_mg_subs 0
  (ruaEF_gives_mg_subs-1 nil 3508152404
   ("" (skosimp)
    (("" (lemma ruaEF_gives_mg_subs_aux)
      (("" (inst -1 rho!1 s!1 t!1 empty_seq)
        (("1" (prop)
          (("1" (expand robinson_unification_algorithm_EF)
            (("1" (propax) nil nil)) nil)
           ("2" (skosimp)
            (("2" (hide-all-but -1)
              (("2" (expand left_without_children)
                (("2" (skosimp)
                  (("2" (lemma seq_empty[posnat])
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (flatten) (("2" (rewrite empty_0 -2) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3" (hide-all-but -1)
              (("3" (expand child)
                (("3" (skosimp)
                  (("3" (lemma seq_empty[posnat])
                    (("3" (inst?)
                      (("3" (assert)
                        (("3" (flatten) (("3" (rewrite empty_0 -2) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (split)
            (("1" (expand positionsOF)
              (("1" (lift-if)
                (("1" (expand* only_empty_seq union member) nil nil)) nil))
              nil)
             ("2" (expand positionsOF)
              (("2" (lift-if)
                (("2" (expand* only_empty_seq union member) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ruaEF_gives_mg_subs_aux formula-decl nil robinsonunificationEF nil)
    (only_empty_seq const-decl "positions" positions nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (robinson_unification_algorithm_EF const-decl "Sub" robinsonunificationEF
     nil)
    (empty_0 formula-decl nil seq_extras structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (seq_empty formula-decl nil seq_extras structures)
    (left_without_children const-decl "bool" positions nil)
    (child const-decl "bool" positions nil)
    (Sub type-eq-decl nil substitution nil)
    (Sub? const-decl "bool" substitution nil)
    (V const-decl "set[term]" variables_term nil)
    (set type-eq-decl nil sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (term type-decl nil term_adt nil) (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (position type-eq-decl nil positions nil)
    (positions type-eq-decl nil positions nil)
    (positionsOF def-decl "positions" positions nil)
    (s!1 skolem-const-decl "term" robinsonunificationEF nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (t!1 skolem-const-decl "term" robinsonunificationEF nil))
   shostak))
 (completeness_ruaEF 0
  (completeness_ruaEF-1 nil 3508152087
   ("" (skosimp)
    (("" (prop)
      (("1" (expand mgu)
        (("1" (prop)
          (("1" (rewrite ruaEF_gives_unifier) nil nil)
           ("2" (skosimp) (("2" (rewrite ruaEF_gives_mg_subs) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma ruaEF_fails_iff_non_unifiable)
        (("2" (inst -1 s!1 t!1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (arity formal-const-decl "[symbol -> nat]" robinsonunificationEF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (symbol formal-nonempty-type-decl nil robinsonunificationEF nil)
    (variable formal-nonempty-type-decl nil robinsonunificationEF nil)
    (ruaEF_gives_unifier formula-decl nil robinsonunificationEF nil)
    (ruaEF_gives_mg_subs formula-decl nil robinsonunificationEF nil)
    (set type-eq-decl nil sets nil)
    (V const-decl "set[term]" variables_term nil)
    (Sub? const-decl "bool" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (mgu const-decl "bool" unification nil)
    (ruaEF_fails_iff_non_unifiable formula-decl nil robinsonunificationEF
     nil))
   shostak)))


(predicate_fseq2set
 (set2seq_seq2set_is_set 0
  (set2seq_seq2set_is_set-1 nil 3668014295
   ("" (skosimp)
    (("" (lemma "sets_lemmas[T].subset_antisymmetric")
      (("" (inst?)
        (("" (assert)
          (("" (prop)
            (("1" (hide 2)
              (("1" (expand* "subset?" "member")
                (("1" (skosimp)
                  (("1" (expand "seq2set")
                    (("1" (expand "finseq_appl")
                      (("1" (skosimp)
                        (("1" (lemma "set2seq_lem")
                          (("1" (inst?)
                            (("1" (expand "finseq_appl")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand* "subset?" "member")
                (("2" (skosimp)
                  (("2" (lemma "set2seq_exists")
                    (("2" (expand "finseq_appl")
                      (("2" (expand "seq2set")
                        (("2" (expand "finseq_appl")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil predicate_fseq2set nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set2seq_exists formula-decl nil set2seq "structures/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (set2seq_lem formula-decl nil set2seq "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (set2seq def-decl "finite_sequence[T]" set2seq "structures/")
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (seq2set_comp 0
  (seq2set_comp-1 nil 3667396788
   ("" (skosimp*)
    (("" (split)
      (("1" (flatten)
        (("1" (expand seq2set)
          (("1" (expand finseq_appl)
            (("1" (skosimp)
              (("1" (expand o)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (inst 1 kk!1) nil nil)
                     ("2" (inst 3 "kk!1 - fseq1!1`length")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand seq2set)
          (("2" (expand finseq_appl)
            (("2" (expand o)
              (("2" (split)
                (("1" (skosimp)
                  (("1" (inst 1 kk!1)
                    (("1" (lift-if) (("1" (assert) nil nil)) nil)
                     ("2" (expand o) (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (inst 1 "kk!1 + fseq1!1`length")
                    (("1" (assert) nil nil)
                     ("2" (expand o) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq2set const-decl "finite_set[T]" seq2set "structures/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (kk!1 skolem-const-decl "below(length(fseq1!1 o fseq2!1))"
     predicate_fseq2set nil)
    (fseq2!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (fseq1!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (kk!1 skolem-const-decl "below(length(fseq2!1))" predicate_fseq2set
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (kk!1 skolem-const-decl "below(length(fseq1!1))" predicate_fseq2set
     nil))
   shostak))
 (comp_subset 0
  (comp_subset-1 nil 3664809598
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (skosimp*)
        (("" (expand "member")
          (("" (expand* "union" "member")
            (("" (rewrite "seq2set_comp") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (seq2set_comp formula-decl nil predicate_fseq2set nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (union const-decl "set" sets nil))
   shostak))
 (comp_subset_comp 0
  (comp_subset_comp-1 nil 3665077762
   ("" (skosimp*)
    (("" (expand* "subset?" "member")
      (("" (skosimp)
        (("" (expand "seq2set")
          (("" (skosimp)
            (("" (expand "finseq_appl")
              (("" (expand "o")
                (("" (lift-if)
                  (("" (prop)
                    (("1" (inst 1 "kk!1 + fseq2!1`length")
                      (("1" (assert) nil nil)
                       ("2" (hide -2) (("2" (grind) nil nil)) nil))
                      nil)
                     ("2" (inst 2 "kk!1 - fseq1!1`length")
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (hide (-1 2))
                            (("1" (typepred "kk!1")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide -1)
                          (("2" (typepred "kk!1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (kk!1 skolem-const-decl "below(length(fseq1!1 o fseq2!1))"
     predicate_fseq2set nil)
    (below type-eq-decl nil naturalnumbers nil)
    (fseq1!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (fseq2!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (comp_same_set 0
  (comp_same_set-1 nil 3665077425
   ("" (skosimp*)
    (("" (lemma "sets_lemmas [T].subset_antisymmetric")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (lemma "comp_subset_comp")
              (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil predicate_fseq2set nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (comp_subset_comp formula-decl nil predicate_fseq2set nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (subseq_subset 0
  (subseq_subset-1 nil 3664711579
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (skosimp*)
        (("" (expand "member")
          (("" (expand "seq2set")
            (("" (skosimp*)
              (("" (expand "finseq_appl")
                (("" (expand "^")
                  (("" (lift-if)
                    (("" (prop)
                      (("1" (typepred "kk!1") (("1" (grind) nil nil))
                        nil)
                       ("2" (typepred "kk!1") (("2" (grind) nil nil))
                        nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/"))
   shostak))
 (subset_subseq 0
  (subset_subseq-1 nil 3667396022
   ("" (expand "finseq_appl")
    (("" (skosimp*)
      (("" (expand "subset?")
        (("" (inst?)
          (("" (expand "member")
            (("" (expand "seq2set")
              (("" (prop)
                (("1" (skosimp)
                  (("1" (expand "finseq_appl")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "finseq_appl") (("2" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil predicate_fseq2set nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (subseq_strict_subset 0
  (subseq_strict_subset-1 nil 3666466801
   ("" (skosimp*)
    (("" (expand* different_elements strict_subset?)
      (("" (expand "finseq_appl")
        (("" (prop)
          (("1" (hide (-1 -2))
            (("1" (lemma "subseq_subset") (("1" (inst?) nil nil)) nil))
            nil)
           ("2" (decompose-equality -1)
            (("2" (inst -1 "fseq!1`seq(0)")
              (("1" (iff)
                (("1" (prop)
                  (("1" (expand "seq2set")
                    (("1" (expand "finseq_appl")
                      (("1" (skosimp*)
                        (("1" (expand "^")
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (typepred "kk!1")
                                (("1"
                                  (hide -6)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "kk!1")
                                (("2"
                                  (hide -6)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (inst -5 "kk!1 + m!1" "0")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 -3 2))
                    (("2" (expand "seq2set")
                      (("2" (expand "finseq_appl")
                        (("2" (inst 1 "0") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (-1 -3 2)) (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("3" (hide -)
            (("3" (lemma "subseq_subset") (("3" (inst?) nil nil)) nil))
            nil)
           ("4" (decompose-equality -1)
            (("4" (inst -1 "fseq!1`seq(length(fseq!1) - 1)")
              (("1" (iff)
                (("1" (prop)
                  (("1" (expand "seq2set")
                    (("1" (expand "finseq_appl")
                      (("1" (skosimp*)
                        (("1" (expand "^")
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (typepred "kk!1")
                                (("1"
                                  (hide -7)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "kk!1")
                                (("2"
                                  (hide -7)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (inst
                                 -5
                                 "kk!1 + m!1"
                                 "length(fseq!1) - 1")
                                (("3"
                                  (prop)
                                  (("3"
                                    (hide (-2 -3))
                                    (("3"
                                      (typepred "kk!1")
                                      (("3"
                                        (expand "^")
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (prop)
                                            (("3"
                                              (expand "min")
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (prop)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 -3 2))
                    (("2" (expand "seq2set")
                      (("2" (expand "finseq_appl")
                        (("2" (inst 1 "length(fseq!1) - 1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (-1 -3)) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_subset? const-decl "bool" sets nil)
    (different_elements const-decl "bool" seq_extras "structures/")
    (subseq_subset formula-decl nil predicate_fseq2set nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (fseq!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (rest_subset 0
  (rest_subset-1 nil 3664806106
   ("" (skosimp*)
    (("" (expand "rest")
      (("" (lift-if)
        (("" (prop)
          (("1" (rewrite "sets_lemmas[T].subset_reflexive") nil nil)
           ("2" (lemma "subseq_subset")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((rest const-decl "finseq" seq_extras "structures/")
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_reflexive formula-decl nil sets_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fseq!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (subseq_subset formula-decl nil predicate_fseq2set nil))
   shostak))
 (subset_rest 0
  (subset_rest-1 nil 3667397488
   ("" (skosimp*)
    (("" (expand* "subset?" "member")
      (("" (skosimp)
        (("" (inst?)
          (("" (assert)
            (("" (hide -2)
              (("" (expand "seq2set")
                (("" (expand "finseq_appl")
                  (("" (skosimp)
                    (("" (lemma "rest_pos")
                      (("" (expand "finseq_appl")
                        (("" (inst?)
                          (("" (prop)
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide (-1 2))
                                (("2"
                                  (typepred "kk!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 1)
                              (("2"
                                (typepred "kk!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (rest_pos formula-decl nil seq_extras "structures/")
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (kk!1 skolem-const-decl "below(length(rest(fseq2!1)))"
     predicate_fseq2set nil)
    (below type-eq-decl nil naturalnumbers nil)
    (fseq2!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/"))
   shostak))
 (subseq_rest 0
  (subseq_rest-1 nil 3673548345
   ("" (skeep)
    (("" (expand subseq)
      (("" (skeep)
        (("" (inst -1 i)
          (("" (expand member_seq)
            (("" (expand finseq_appl)
              (("" (skosimp)
                (("" (typepred i!1)
                  (("" (expand rest (-1 -2))
                    (("" (expand* ^ min)
                      (("" (expand empty_seq -1)
                        (("" (lift-if)
                          (("" (assert)
                            (("" (prop) (("" (inst 7 "1+i!1") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subseq const-decl "bool" predicate_fseq2set nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (member_seq const-decl "bool" predicate_fseq2set nil))
   shostak))
 (member_seq_in_seq2set 0
  (member_seq_in_seq2set-1 nil 3673548395
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member_seq const-decl "bool" predicate_fseq2set nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/"))
   shostak))
 (rest_strict_subset 0
  (rest_strict_subset-1 nil 3667049442
   ("" (skosimp*)
    (("" (expand "rest")
      (("" (lift-if)
        (("" (prop)
          (("1" (assert) nil nil)
           ("2" (lemma "subseq_strict_subset")
            (("2" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest const-decl "finseq" seq_extras "structures/")
    (strict_subset_is_strict_order name-judgement
     "(strict_order?[set[T]])" sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fseq!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subseq_strict_subset formula-decl nil predicate_fseq2set nil))
   shostak))
 (delete_subset 0
  (delete_subset-1 nil 3664970510
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (skosimp*)
        (("" (expand "member")
          (("" (expand "seq2set")
            (("" (skosimp*)
              (("" (expand "finseq_appl")
                (("" (expand "delete")
                  (("" (lift-if)
                    (("" (prop)
                      (("1" (expand "finseq_appl")
                        (("1" (inst?) nil nil)) nil)
                       ("2" (expand "finseq_appl")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (delete const-decl "finseq" seq_extras "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/"))
   shostak))
 (delete_eq_seq2set 0
  (delete_eq_seq2set-1 nil 3667052006
   ("" (skosimp)
    (("" (expand "finseq_appl")
      (("" (lemma "sets_lemmas[T].subset_antisymmetric")
        (("" (inst?)
          (("" (prop)
            (("1" (hide (-1 2))
              (("1" (lemma "delete_subset") (("1" (inst?) nil nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp*)
                (("2" (expand "subset?")
                  (("2" (skosimp*)
                    (("2" (expand "member")
                      (("2" (expand "seq2set")
                        (("2" (expand "finseq_appl")
                          (("2" (skosimp*)
                            (("2" (expand "delete")
                              (("2"
                                (expand "finseq_appl")
                                (("2"
                                  (case "kk!1 < n!1")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide (-2 -3))
                                      (("2"
                                        (typepred "kk!1")
                                        (("2"
                                          (expand "delete")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "kk!1 > n!1")
                                    (("1"
                                      (inst 2 "kk!1 - 1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide (-2 -3))
                                        (("2"
                                          (typepred "kk!1" "n!1")
                                          (("2"
                                            (expand "delete")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "kk!1 = n!1")
                                      (("1"
                                        (replace -1 -2)
                                        (("1"
                                          (replace -2 -3)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (typepred "j!1")
                                              (("1"
                                                (case "j!1 < n!1")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -4)
                                                    (("2"
                                                      (expand "delete")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "j!1 > n!1")
                                                  (("1"
                                                    (inst 4 "j!1 - 1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide -4)
                                                      (("2"
                                                        (typepred
                                                         "n!1")
                                                        (("2"
                                                          (expand
                                                           "delete")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (-1 -3 5))
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (- 4))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (delete const-decl "finseq" seq_extras "structures/")
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (n!1 skolem-const-decl "below[fseq!1`length]" predicate_fseq2set
     nil)
    (kk!1 skolem-const-decl "below(length(fseq!1))" predicate_fseq2set
     nil)
    (fseq!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (j!1 skolem-const-decl "below[fseq!1`length]" predicate_fseq2set
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (> const-decl "bool" reals nil)
    (delete_subset formula-decl nil predicate_fseq2set nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (T formal-type-decl nil predicate_fseq2set nil))
   shostak))
 (seq_card_set 0
  (seq_card_set-1 nil 3665057118
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand* "different_elements" "finseq_appl")
        (("1" (lemma "card_bij_inv")
          (("1" (inst?)
            (("1" (assert)
              (("1" (hide 2)
                (("1"
                  (inst 1
                   "lambda (x:below[length(fseq!1)]): fseq!1(x)")
                  (("1" (expand "finseq_appl")
                    (("1" (expand "bijective?")
                      (("1" (prop)
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst -2 "x1!1" "x2!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide -1)
                          (("2" (expand "surjective?")
                            (("2" (skosimp*)
                              (("2"
                                (typepred "y!1")
                                (("2"
                                  (expand "seq2set")
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (skosimp*)
                      (("2" (lemma "seq2set_lem")
                        (("2" (expand "finseq_appl")
                          (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* "different_elements" "finseq_appl")
        (("2" (skosimp*)
          (("2" (lemma "delete_eq_seq2set")
            (("2" (inst -1 "fseq!1" "i!1")
              (("2" (expand "finseq_appl")
                (("2" (prop)
                  (("1" (replace -1 -2 rl)
                    (("1" (hide -1)
                      (("1" (lemma "card_seq2set")
                        (("1" (inst?)
                          (("1" (expand "delete" -1 2)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst?) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil predicate_fseq2set nil)
    (card_bij_inv formula-decl nil finite_sets nil)
    (fseq!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (< const-decl "bool" reals nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (seq2set_lem formula-decl nil seq2set "structures/")
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (different_elements const-decl "bool" seq_extras "structures/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (delete const-decl "finseq" seq_extras "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (card_seq2set formula-decl nil seq2set "structures/")
    (delete_eq_seq2set formula-decl nil predicate_fseq2set nil))
   shostak))
 (pred_subset 0
  (pred_subset-1 nil 3664578821
   ("" (skosimp*)
    (("" (expand* "pSeq?" "subset?" "member")
      (("" (expand "finseq_appl")
        (("" (skosimp*)
          (("" (inst -2 "fseq2!1`seq(i!1)")
            (("" (expand "seq2set")
              (("" (expand "finseq_appl")
                (("" (prop)
                  (("1" (skosimp*)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (hide (-1 2)) (("2" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (pSeq? const-decl "bool" predicate_fseq2set nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (pred_rest 0
  (pred_rest-1 nil 3664969883
   ("" (skosimp*)
    (("" (lemma "pred_subset")
      (("" (inst -1 "P1!1" "fseq!1" "rest(fseq!1)")
        (("" (assert)
          (("" (hide (-1 2)) (("" (rewrite "rest_subset") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred_subset formula-decl nil predicate_fseq2set nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (rest_subset formula-decl nil predicate_fseq2set nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil predicate_fseq2set nil))
   shostak))
 (pred_replace 0
  (pred_replace-1 nil 3664973002
   ("" (skosimp*)
    (("" (expand "pSeq?")
      (("" (skosimp*)
        (("" (expand "finseq_appl")
          (("" (expand "replace")
            (("" (prop)
              (("1" (expand "finseq_appl") (("1" (inst?) nil nil)) nil)
               ("2" (expand "finseq_appl") (("2" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pSeq? const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (replace const-decl "finseq" seq_extras "structures/"))
   shostak))
 (pred_insert 0
  (pred_insert-1 nil 3664972357
   ("" (skosimp*)
    (("" (expand "pSeq?")
      (("" (skosimp*)
        (("" (expand "finseq_appl")
          (("" (expand "insert?")
            (("" (prop)
              (("1" (expand "finseq_appl") (("1" (inst?) nil nil)) nil)
               ("2" (expand "finseq_appl")
                (("2" (inst -1 "i!1 - 1") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pSeq? const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "below[insert?(x!1, fseq!1, n!1)`length]"
     predicate_fseq2set nil)
    (n!1 skolem-const-decl "upto[fseq!1`length]" predicate_fseq2set
     nil)
    (fseq!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (x!1 skolem-const-decl "T" predicate_fseq2set nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (insert? const-decl "finseq" seq_extras "structures/"))
   shostak))
 (pred_add_first 0
  (pred_add_first-1 nil 3664969488
   ("" (skosimp*)
    (("" (expand "add_first")
      (("" (lemma "pred_insert")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((add_first const-decl "finseq" seq_extras "structures/")
    (T formal-type-decl nil predicate_fseq2set nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (pred_insert formula-decl nil predicate_fseq2set nil))
   shostak))
 (pred_add_last 0
  (pred_add_last-1 nil 3664969550
   ("" (skosimp*)
    (("" (expand "add_last")
      (("" (lemma "pred_insert")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((add_last const-decl "finseq" seq_extras "structures/")
    (T formal-type-decl nil predicate_fseq2set nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (pred_insert formula-decl nil predicate_fseq2set nil))
   shostak))
 (pred_delete 0
  (pred_delete-1 nil 3664970208
   ("" (skosimp*)
    (("" (lemma "pred_subset")
      (("" (inst -1 "P1!1" "fseq!1" "delete(fseq!1, n!1)")
        (("" (assert)
          (("" (hide (-1 2))
            (("" (lemma "delete_subset") (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred_subset formula-decl nil predicate_fseq2set nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (delete_subset formula-decl nil predicate_fseq2set nil)
    (delete const-decl "finseq" seq_extras "structures/")
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil predicate_fseq2set nil))
   shostak))
 (pred_replace_seq 0
  (pred_replace_seq-1 nil 3664973370
   ("" (skosimp*)
    (("" (expand "pSeq?")
      (("" (skosimp*)
        (("" (expand "finseq_appl")
          (("" (expand "replace_seq")
            (("" (prop)
              (("1" (hide (-1 -2)) (("1" (inst?) nil nil)) nil)
               ("2" (expand "finseq_appl")
                (("2" (hide (-1 -3 2)) (("2" (inst?) nil nil)) nil))
                nil)
               ("3" (expand "finseq_appl")
                (("3" (hide (-1 1 3)) (("3" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pSeq? const-decl "bool" predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (replace_seq const-decl "finseq" seq_extras "structures/"))
   shostak))
 (pred_comp 0
  (pred_comp-1 nil 3664811065
   ("" (skosimp*)
    (("" (expand "pSeq?")
      (("" (expand "finseq_appl")
        (("" (skosimp*)
          (("" (expand "o")
            (("" (prop)
              (("1" (inst?) nil nil)
               ("2" (hide -1)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pSeq? const-decl "bool" predicate_fseq2set nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "below[(fseq1!1 o fseq2!1)`length]"
     predicate_fseq2set nil)
    (fseq2!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (fseq1!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (pred_bin_subset 0
  (pred_bin_subset-1 nil 3665051338
   ("" (skosimp*)
    (("" (expand* "PSeq?" "finseq_appl")
      (("" (prop)
        (("1" (hide 2)
          (("1" (lemma "seq_card_set")
            (("1" (inst?)
              (("1" (assert)
                (("1" (lemma "card_subset")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (lemma "card_seq2set")
                        (("1" (inst -1 "fseq1!1")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide (1 3))
          (("2" (skosimp*)
            (("2" (expand* "subset?" "member")
              (("2" (inst-cp -2 "fseq2!1`seq(i!1)")
                (("2" (inst -2 "fseq2!1`seq(j!1)")
                  (("2" (prop)
                    (("1"
                      (expand* "seq2set" "different_elements"
                       "finseq_appl")
                      (("1" (skosimp*)
                        (("1" (inst -3 "kk!1" "kk!2")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (inst -3 "i!1" "j!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (expand "seq2set")
                        (("2" (expand "finseq_appl")
                          (("2" (inst?) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (expand "seq2set")
                        (("3" (expand "finseq_appl")
                          (("3" (inst?) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (hide-all-but 1)
                      (("4" (expand "seq2set")
                        (("4" (expand "finseq_appl")
                          (("4" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (PSeq? const-decl "bool" predicate_fseq2set nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (different_elements const-decl "bool" seq_extras "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (card_subset formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (card_seq2set formula-decl nil seq2set "structures/")
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (seq_card_set formula-decl nil predicate_fseq2set nil))
   shostak))
 (pred_bin_insert 0
  (pred_bin_insert-1 nil 3665069300
   ("" (expand "finseq_appl")
    (("" (skosimp*)
      (("" (case "fseq!1`length = 0")
        (("1" (hide-all-but (-1 1))
          (("1" (expand "PSeq?")
            (("1" (expand "insert?" 1 1) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (case "fseq!1`length = 1")
          (("1" (hide -2)
            (("1" (expand "PSeq?")
              (("1" (expand "insert?" 2 1)
                (("1" (assert)
                  (("1" (expand "finseq_appl")
                    (("1" (skosimp*)
                      (("1" (typepred "n!1" "i!1" "j!1")
                        (("1" (expand "insert?" (-2 -3))
                          (("1" (hide 1)
                            (("1" (replaces -4)
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace "n!1 = 0")
                                  (("1"
                                    (expand "insert?")
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (inst?)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst?)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case-replace "n!1 = 1")
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (expand "insert?")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "PSeq?")
            (("2" (expand "finseq_appl")
              (("2" (assert)
                (("2" (expand "insert?" 3 1)
                  (("2" (skosimp*)
                    (("2" (expand "insert?")
                      (("2" (expand "finseq_appl")
                        (("2" (lift-if)
                          (("2" (lift-if)
                            (("2" (lift-if)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (hide -4)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -3)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide -3)
                                    (("3"
                                      (inst?)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide -3)
                                    (("4"
                                      (inst?)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("5" (assert) nil nil)
                                   ("6"
                                    (hide -2)
                                    (("6"
                                      (inst?)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("7"
                                    (hide -3)
                                    (("7"
                                      (inst?)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("8"
                                    (hide -2)
                                    (("8"
                                      (inst?)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("9"
                                    (hide -2)
                                    (("9"
                                      (inst?)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (j!1 skolem-const-decl "below[insert?(x!1, fseq!1, n!1)`length]"
     predicate_fseq2set nil)
    (n!1 skolem-const-decl "upto[fseq!1`length]" predicate_fseq2set
     nil)
    (fseq!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (x!1 skolem-const-decl "T" predicate_fseq2set nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i!1 skolem-const-decl "below[insert?(x!1, fseq!1, n!1)`length]"
     predicate_fseq2set nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (j!1 skolem-const-decl "below[insert?(x!1, fseq!1, n!1)`length]"
     predicate_fseq2set nil)
    (i!1 skolem-const-decl "below[insert?(x!1, fseq!1, n!1)`length]"
     predicate_fseq2set nil)
    (insert? const-decl "finseq" seq_extras "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (PSeq? const-decl "bool" predicate_fseq2set nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (pred_bin_add_first 0
  (pred_bin_add_first-1 nil 3665075611
   ("" (skosimp*)
    (("" (expand "add_first")
      (("" (lemma "pred_bin_insert")
        (("" (inst?)
          (("" (expand "finseq_appl")
            (("" (assert) (("" (prop) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((add_first const-decl "finseq" seq_extras "structures/")
    (T formal-type-decl nil predicate_fseq2set nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (pred_bin_insert formula-decl nil predicate_fseq2set nil))
   shostak))
 (pred_bin_add_last 0
  (pred_bin_add_last-1 nil 3665075880
   ("" (skosimp*)
    (("" (expand "add_last")
      (("" (lemma "pred_bin_insert")
        (("" (inst?)
          (("" (expand "finseq_appl")
            (("" (assert) (("" (prop) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((add_last const-decl "finseq" seq_extras "structures/")
    (T formal-type-decl nil predicate_fseq2set nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (pred_bin_insert formula-decl nil predicate_fseq2set nil))
   shostak))
 (pred_bin_rest 0
  (pred_bin_rest-1 nil 3665049737
   ("" (skosimp*)
    (("" (expand "PSeq?")
      (("" (prop)
        (("1" (hide 2) (("1" (grind) nil nil)) nil)
         ("2" (skosimp*)
          (("2" (expand "finseq_appl")
            (("2" (lemma "rest_pos")
              (("2" (expand "finseq_appl")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (copy -1)
                      (("2" (inst -1 "i!1")
                        (("1" (inst -2 "j!1")
                          (("1" (inst -3 "1 + i!1" "1 + j!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (hide-all-but 1)
                            (("2" (typepred "j!1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (typepred "i!1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PSeq? const-decl "bool" predicate_fseq2set nil)
    (rest_pos formula-decl nil seq_extras "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (j!1 skolem-const-decl "below[rest(fseq!1)`length]"
     predicate_fseq2set nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (fseq!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (i!1 skolem-const-decl "below[rest(fseq!1)`length]"
     predicate_fseq2set nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (pred_bin_delete 0
  (pred_bin_delete-1 nil 3665050744
   ("" (skosimp*)
    (("" (expand "PSeq?")
      (("" (expand "finseq_appl")
        (("" (prop)
          (("1" (hide 2)
            (("1" (expand "delete") (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide (1 3))
            (("2" (skosimp*)
              (("2" (expand "delete")
                (("2" (expand "finseq_appl")
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (inst -3 "i!1" "j!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (inst -2 "i!1" "1 + j!1")
                            (("2" (assert) nil nil)) nil)
                           ("3" (inst -2 "1 + i!1" "j!1")
                            (("3" (assert) nil nil)) nil)
                           ("4" (inst -1 "1 + i!1" "1 + j!1")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PSeq? const-decl "bool" predicate_fseq2set nil)
    (delete const-decl "finseq" seq_extras "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (pred_bin_comp 0
  (pred_bin_comp-1 nil 3665078951
   ("" (skosimp*)
    (("" (expand* "PSeq?" "finseq_appl")
      (("" (prop)
        (("1" (hide 2)
          (("1" (expand "o") (("1" (propax) nil nil)) nil)) nil)
         ("2" (hide (1 3))
          (("2" (skosimp)
            (("2" (expand "o")
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (prop)
                        (("1"
                          (inst -3 "fseq1!1`length + i!1"
                           "fseq1!1`length + j!1")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (expand "o") (("2" (assert) nil nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (expand "o") (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst -2 "fseq1!1`length + i!1"
                           "j!1 - fseq2!1`length")
                          (("1" (prop)
                            (("1" (lift-if)
                              (("1"
                                (lift-if)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide (-1 3))
                                        (("1"
                                          (typepred "j!1")
                                          (("1"
                                            (expand "o")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "i!1" "j!1")
                                (("2"
                                  (expand "o")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (prop)
                            (("1" (hide 3)
                              (("1"
                                (typepred "j!1")
                                (("1"
                                  (expand "o")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (typepred "j!1")
                                (("2"
                                  (expand "o")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "i!1")
                            (("3" (expand "o") (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3"
                          (inst -2 "i!1 - fseq2!1`length"
                           "fseq1!1`length + j!1")
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide (-1 2))
                                      (("1"
                                        (typepred "i!1")
                                        (("1"
                                          (expand "o")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 1)
                                (("2"
                                  (typepred "i!1" "j!1")
                                  (("2"
                                    (expand "o")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "o") (("2" (assert) nil nil))
                              nil))
                            nil)
                           ("3" (prop)
                            (("1" (hide 2)
                              (("1"
                                (typepred "i!1")
                                (("1"
                                  (expand "o")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "i!1")
                                (("2"
                                  (expand "o")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4"
                          (inst -1 "i!1 - fseq2!1`length"
                           "j!1 - fseq2!1`length")
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (lift-if)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide (-1 3))
                                        (("1"
                                          (typepred "j!1")
                                          (("1"
                                            (expand "o")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (-2 3))
                                        (("2"
                                          (typepred "i!1")
                                          (("2"
                                            (expand "o")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide (-1 4))
                                        (("3"
                                          (typepred "j!1")
                                          (("3"
                                            (expand "o")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (prop)
                            (("1" (hide 3)
                              (("1"
                                (typepred "j!1")
                                (("1"
                                  (expand "o")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (typepred "j!1")
                                (("2"
                                  (expand "o")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (prop)
                            (("1" (hide 3)
                              (("1"
                                (typepred "i!1")
                                (("1"
                                  (expand "o")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (typepred "i!1")
                                (("2"
                                  (expand "o")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (PSeq? const-decl "bool" predicate_fseq2set nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (i!1 skolem-const-decl "below[(fseq2!1 o fseq1!1)`length]"
     predicate_fseq2set nil)
    (fseq2!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (fseq1!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (j!1 skolem-const-decl "below[(fseq2!1 o fseq1!1)`length]"
     predicate_fseq2set nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (subset_comp 0
  (subset_comp-1 nil 3672956445
   ("" (skosimp)
    (("" (expand* subset? subset? member seq2set finseq_appl)
      (("" (skosimp*)
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "o")
                (("" (lift-if)
                  (("" (assert)
                    (("" (prop)
                      (("1" (inst 1 "fseq1!1`length + kk!1")
                        (("1" (assert) nil nil)
                         ("2" (expand "o") (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (inst 2 "kk!1 - fseq2!1`length")
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (hide (-1 2))
                                (("1"
                                  (typepred "kk!1")
                                  (("1"
                                    (expand "o")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "kk!1")
                          (("2" (hide -2)
                            (("2" (expand "o") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" predicate_fseq2set nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (fseq1!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (fseq2!1 skolem-const-decl "finseq[T]" predicate_fseq2set nil)
    (below type-eq-decl nil naturalnumbers nil)
    (kk!1 skolem-const-decl "below(length(fseq2!1 o fseq1!1))"
     predicate_fseq2set nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (subset_empty_seq 0
  (subset_empty_seq-1 nil 3672959732
   ("" (skeep)
    (("" (expand subset?)
      (("" (expand* subset? member seq2set finseq_appl)
        (("" (skosimp*)
          (("" (hide 1)
            (("" (typepred kk!1) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" predicate_fseq2set nil)
    (below type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset? const-decl "bool" sets nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member const-decl "bool" sets nil))
   shostak))
 (seq_construct1_TCC1 0
  (seq_construct1_TCC1-1 nil 3667398997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil))
 (seq_construct1_TCC2 0
  (seq_construct1_TCC2-1 nil 3667398997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil))
 (seq_construct1_TCC3 0
  (seq_construct1_TCC3-1 nil 3667398997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil))
   nil))
 (seq_construct1_TCC4 0
  (seq_construct1_TCC4-1 nil 3667398997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil))
   nil))
 (seq_construct1_TCC5 0
  (seq_construct1_TCC5-1 nil 3667398997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil))
   nil))
 (seq_construct1 0
  (seq_construct1-1 nil 3667399091
   ("" (induct n)
    (("1" (skeep)
      (("1" (inst 1 empty_seq)
        (("1" (expand empty_seq 1 1) (("1" (skeep) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "P2" "rest(fseq1)" "rest(fseq2)")
          (("2" (prop)
            (("1" (inst -4 0)
              (("1" (skosimp*)
                (("1" (inst 1 "add_first(x!1, fseq!1)")
                  (("1" (expand* add_first insert? finseq_appl)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (lift-if)
                          (("1" (case "i=0")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (inst -2 i-1)
                                (("2"
                                  (expand rest -2)
                                  (("2"
                                    (expand* ^ min empty_seq)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)
             ("3" (hide-all-but (-2 1)) (("3" (grind) nil nil)) nil)
             ("4" (hide 2)
              (("4" (skeep)
                (("4" (typepred i)
                  (("4" (expand* rest ^ min empty_seq)
                    (("4" (assert) (("4" (inst -4 1+i) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep) (("3" (skeep) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep) (("4" (skeep) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep) (("5" (skeep) (("5" (assert) nil nil)) nil)) nil))
      nil)
     ("6" (hide 2)
      (("6" (skeep) (("6" (skeep) (("6" (assert) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2) (("7" (skeep) (("7" (assert) nil nil)) nil)) nil)
     ("8" (hide 2) (("8" (skeep) (("8" (assert) nil nil)) nil)) nil))
    nil)
   ((rest const-decl "finseq" seq_extras "structures/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (add_first const-decl "finseq" seq_extras "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (insert? const-decl "finseq" seq_extras "structures/")
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil))
   shostak))
 (seq_construct2_TCC1 0
  (seq_construct2_TCC1-1 nil 3667398997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil))
   nil))
 (seq_construct2 0
  (seq_construct2-1 nil 3667400344
   ("" (induct n)
    (("1" (skeep)
      (("1" (inst 1 empty_seq)
        (("1" (expand empty_seq 1 1) (("1" (skeep) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 P3)
          (("2" (prop)
            (("1" (skosimp)
              (("1" (inst -3 j)
                (("1" (skosimp)
                  (("1" (inst 1 "add_last(fseq!1, x!1)")
                    (("1" (expand* add_last insert? finseq_appl)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (inst -3 i)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (typepred i)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep) (("2" (inst -1 i) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((insert? const-decl "finseq" seq_extras "structures/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (i skolem-const-decl "below[1 + j]" predicate_fseq2set nil)
    (j skolem-const-decl "nat" predicate_fseq2set nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add_last const-decl "finseq" seq_extras "structures/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (set_of_prop_related_is_subset 0
  (set_of_prop_related_is_subset-1 nil 3667562148
   ("" (skosimp*)
    (("" (expand* subset? member)
      (("" (skosimp*)
        (("" (expand* set_of_prop_related seq2set member finseq_appl)
          (("" (skosimp*) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (set_of_prop_related const-decl "set[T]" predicate_fseq2set nil))
   shostak))
 (set_of_prop_related_is_finite 0
  (set_of_prop_related_is_finite-1 nil 3667471779
   ("" (skosimp*)
    (("" (lemma "set_of_prop_related_is_subset")
      (("" (inst?)
        (("" (lemma finite_subset)
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((set_of_prop_related_is_subset formula-decl nil predicate_fseq2set
     nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set_of_prop_related const-decl "set[T]" predicate_fseq2set nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil predicate_fseq2set nil))
   shostak))
 (set_of_prop_related_fseq 0
  (set_of_prop_related_fseq-1 nil 3667568314
   ("" (expand "finseq_appl")
    (("" (skosimp*)
      (("" (expand* set_of_prop_related seq2set member finseq_appl)
        (("" (flatten) nil nil)) nil))
      nil))
    nil)
   ((set_of_prop_related const-decl "set[T]" predicate_fseq2set nil)
    (member const-decl "bool" sets nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (set_of_prop_related_card_TCC1 0
  (set_of_prop_related_card_TCC1-1 nil 3667570977
   ("" (skosimp) (("" (rewrite set_of_prop_related_is_finite) nil nil))
    nil)
   ((set_of_prop_related_is_finite formula-decl nil predicate_fseq2set
     nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (set_of_prop_related_card 0
  (set_of_prop_related_card-1 nil 3667570991
   ("" (skosimp)
    (("" (lemma "set_of_prop_related_is_subset")
      (("" (inst?)
        (("" (lemma "card_subset")
          (("" (inst?)
            (("" (assert)
              (("" (hide -2)
                (("" (lemma "card_seq2set")
                  (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set_of_prop_related_is_subset formula-decl nil predicate_fseq2set
     nil)
    (card_subset formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card_seq2set formula-decl nil seq2set "structures/")
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (set_of_prop_related const-decl "set[T]" predicate_fseq2set nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil predicate_fseq2set nil))
   shostak))
 (set_of_prop_related_is_bin 0
  (set_of_prop_related_is_bin-1 nil 3672781618
   ("" (skosimp*)
    (("" (expand "PSeq?" 1)
      (("" (expand "finseq_appl")
        (("" (prop)
          (("" (skosimp)
            (("" (lemma "set2seq_lem")
              (("" (expand "finseq_appl")
                (("" (inst -1 "set_of_prop_related(P!1)(fseq!1, x!1)")
                  (("" (inst-cp -1 "i!1")
                    (("" (inst -1 "j!1")
                      (("" (lemma "set_of_prop_related_fseq")
                        ((""
                          (inst-cp -1 "P!1"
                           "set2seq(set_of_prop_related(P!1)(fseq!1, x!1))`seq(i!1)"
                           "fseq!1" "x!1")
                          ((""
                            (inst -1 "P!1"
                             "set2seq(set_of_prop_related(P!1)(fseq!1, x!1))`seq(j!1)"
                             "fseq!1" "x!1")
                            (("" (expand "finseq_appl")
                              ((""
                                (assert)
                                ((""
                                  (hide (-3 -4))
                                  ((""
                                    (skosimp*)
                                    ((""
                                      (expand "PSeq?")
                                      ((""
                                        (prop)
                                        (("1"
                                          (hide (-2 -3 2 3))
                                          (("1"
                                            (lemma
                                             "set_of_prop_related_card")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (inst -1 "i!3" "i!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (lemma "set2seq_neq")
                                                  (("2"
                                                    (expand
                                                     "finseq_appl")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "set_of_prop_related(P!1)(fseq!1, x!1)")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "i!1"
                                                         "j!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PSeq? const-decl "bool" predicate_fseq2set nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (set2seq_lem formula-decl nil set2seq "structures/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (set_of_prop_related const-decl "set[T]" predicate_fseq2set nil)
    (set2seq_neq formula-decl nil set2seq "structures/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (set_of_prop_related_card formula-decl nil predicate_fseq2set nil)
    (set2seq_length formula-decl nil set2seq "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (set_of_prop_related_fseq formula-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set2seq def-decl "finite_sequence[T]" set2seq "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (set_of_prop_related_b_is_subset 0
  (set_of_prop_related_b_is_subset-1 nil 3673012335
   ("" (skosimp*)
    (("" (expand* subset? member)
      (("" (skosimp)
        (("" (expand* set_of_prop_related_b member)
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (set_of_prop_related_b const-decl "set[T]" predicate_fseq2set nil))
   shostak))
 (set_of_prop_related_b_is_finite 0
  (set_of_prop_related_b_is_finite-1 nil 3673012185
   ("" (skosimp*)
    (("" (lemma set_of_prop_related_b_is_subset)
      (("" (inst?)
        (("" (lemma finite_subset)
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((set_of_prop_related_b_is_subset formula-decl nil
     predicate_fseq2set nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set_of_prop_related_b const-decl "set[T]" predicate_fseq2set nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil predicate_fseq2set nil))
   shostak))
 (set_of_prop_related_b_character 0
  (set_of_prop_related_b_character-1 nil 3673012234
   ("" (skosimp*)
    (("" (expand* set_of_prop_related_b set_of_prop_related member)
      (("" (expand finseq_appl)
        (("" (flatten)
          (("" (skosimp)
            (("" (expand seq2set -2)
              (("" (expand finseq_appl)
                (("" (skosimp)
                  (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set_of_prop_related const-decl "set[T]" predicate_fseq2set nil)
    (member const-decl "bool" sets nil)
    (set_of_prop_related_b const-decl "set[T]" predicate_fseq2set nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (set_of_prop_related_nb_is_subset 0
  (set_of_prop_related_nb_is_subset-1 nil 3673012381
   ("" (skosimp*)
    (("" (expand* subset? member)
      (("" (skosimp)
        (("" (expand* set_of_prop_related_nb member)
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (set_of_prop_related_nb const-decl "set[T]" predicate_fseq2set
     nil))
   shostak))
 (set_of_prop_related_nb_is_finite 0
  (set_of_prop_related_nb_is_finite-1 nil 3673012290
   ("" (skosimp*)
    (("" (lemma set_of_prop_related_nb_is_subset)
      (("" (inst?)
        (("" (lemma finite_subset)
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((set_of_prop_related_nb_is_subset formula-decl nil
     predicate_fseq2set nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set_of_prop_related_nb const-decl "set[T]" predicate_fseq2set nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil predicate_fseq2set nil))
   shostak))
 (set_of_prop_related_nb_character 0
  (set_of_prop_related_nb_character-1 nil 3673012723
   ("" (skosimp*)
    (("" (expand* set_of_prop_related_nb set_of_prop_related member)
      (("" (expand finseq_appl)
        (("" (flatten)
          (("" (inst?)
            (("" (assert)
              (("" (hide-all-but 1)
                (("" (expand* seq2set finseq_appl)
                  (("" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set_of_prop_related const-decl "set[T]" predicate_fseq2set nil)
    (member const-decl "bool" sets nil)
    (set_of_prop_related_nb const-decl "set[T]" predicate_fseq2set nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (set_of_prop_related_nb_in 0
  (set_of_prop_related_nb_in-1 nil 3673097441
   ("" (skosimp*)
    (("" (expand* set_of_prop_related_nb finseq_appl)
      (("" (flatten)
        (("" (hide 1)
          (("" (expand* member seq2set finseq_appl) nil nil)) nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (set_of_prop_related_nb const-decl "set[T]" predicate_fseq2set nil)
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (member const-decl "bool" sets nil))
   shostak))
 (set_of_prop_related_nb_card_TCC1 0
  (set_of_prop_related_nb_card_TCC1-1 nil 3673014577
   ("" (skosimp)
    (("" (rewrite set_of_prop_related_nb_is_finite) nil nil)) nil)
   ((set_of_prop_related_nb_is_finite formula-decl nil
     predicate_fseq2set nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (set_of_prop_related_nb_card 0
  (set_of_prop_related_nb_card-1 nil 3673097688
   ("" (skosimp 1)
    (("" (lemma set_of_prop_related_nb_is_subset)
      (("" (inst?)
        (("" (lemma "card_subset")
          (("" (inst?)
            (("" (assert)
              (("" (hide -2)
                (("" (lemma "card_seq2set")
                  (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set_of_prop_related_nb_is_subset formula-decl nil
     predicate_fseq2set nil)
    (card_subset formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card_seq2set formula-decl nil seq2set "structures/")
    (seq2set const-decl "finite_set[T]" seq2set "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (set_of_prop_related_nb const-decl "set[T]" predicate_fseq2set nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil predicate_fseq2set nil))
   shostak))
 (set_of_prop_related_nb_pred 0
  (set_of_prop_related_nb_pred-1 nil 3673014177
   ("" (skosimp*)
    (("" (expand* PSeq? finseq_appl)
      (("" (prop)
        (("1" (hide 2)
          (("1" (lemma set_of_prop_related_nb_card)
            (("1" (inst?)
              (("1" (lemma set2seq_length)
                (("1" (inst?)
                  (("1" (replaces -1) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (hide 1)
            (("2" (lemma "set2seq_lem")
              (("2"
                (inst -1
                 "set_of_prop_related_nb(P!1)(fseq1!1, fseq2!1)")
                (("2" (expand "finseq_appl")
                  (("2" (inst-cp -1 "i!1")
                    (("2" (inst -1 "j!1")
                      (("2" (lemma set_of_prop_related_nb_in)
                        (("2"
                          (inst-cp -1 "P!1" "fseq1!1" "fseq2!1"
                           "set2seq(set_of_prop_related_nb(P!1)(fseq1!1, fseq2!1))`seq(i!1)")
                          (("2"
                            (inst -1 "P!1" "fseq1!1" "fseq2!1"
                             "set2seq(set_of_prop_related_nb(P!1)(fseq1!1, fseq2!1))`seq(j!1)")
                            (("2" (expand "finseq_appl")
                              (("2"
                                (assert)
                                (("2"
                                  (hide (-3 -4))
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst -3 "i!3" "i!2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("2"
                                            (lemma "set2seq_neq")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (inst
                                                 -1
                                                 "set_of_prop_related_nb(P!1)(fseq1!1, fseq2!1)")
                                                (("2"
                                                  (inst -1 "i!1" "j!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (PSeq? const-decl "bool" predicate_fseq2set nil)
    (set2seq_lem formula-decl nil set2seq "structures/")
    (set2seq_neq formula-decl nil set2seq "structures/")
    (set_of_prop_related_nb_in formula-decl nil predicate_fseq2set nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set2seq def-decl "finite_sequence[T]" set2seq "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil predicate_fseq2set nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set_of_prop_related_nb const-decl "set[T]" predicate_fseq2set nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (set2seq_length formula-decl nil set2seq "structures/")
    (set_of_prop_related_nb_card formula-decl nil predicate_fseq2set
     nil))
   shostak)))


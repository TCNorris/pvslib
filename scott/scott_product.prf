(scott_product
 (product_order_TCC1 0
  (product_order_TCC1-1 nil 3353124202
   ("" (skosimp)
    (("" (typepred "le1!1")
      (("" (typepred "le2!1")
        (("" (expand "partial_order?")
          (("" (expand "preorder?")
            (("" (flatten)
              (("" (split)
                (("1" (expand "reflexive?")
                  (("1" (skosimp)
                    (("1" (inst - "x!1`2")
                      (("1" (inst - "x!1`1") (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "transitive?")
                  (("2" (skosimp)
                    (("2" (inst - "x!1`2" "y!1`2" "z!1`2")
                      (("2" (inst - "x!1`1" "y!1`1" "z!1`1")
                        (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "antisymmetric?")
                  (("3" (skosimp)
                    (("3" (inst - "x!1`2" "y!1`2")
                      (("3" (inst - "x!1`1" "y!1`1")
                        (("3" (assert) (("3" (decompose-equality) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partial_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T1 formal-type-decl nil scott_product nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (antisymmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (T2 formal-type-decl nil scott_product nil))
   nil
   (product_order subtype
    "(LAMBDA x, y: booleans.&(scott_product.le1(scott_product.x`1, scott_product.y`1), scott_product.le2(scott_product.x`2, scott_product.y`2)))"
    "(orders[[scott_product.T1, scott_product.T2]].partial_order?)")))
 (IMP_scott_TCC1 0
  (IMP_scott_TCC1-1 nil 3508838560
   ("" (typepred "le1")
    (("" (expand "directed_complete_partial_order?") (("" (flatten) nil nil))
      nil))
    nil)
   ((directed_complete_partial_order? const-decl "bool" directed_orders
     orders))
   nil
   (IMP_scott subtype
    "(scott_product.product_order(scott_product.le1, scott_product.le2))"
    "(directed_orders[[scott_product.T1, scott_product.T2]].directed_complete_partial_order?)"))))


(preprocessing_univariate
 (polynomialDomMonomCoeffOne_TCC1 0
  (polynomialDomMonomCoeffOne_TCC1-1 nil 3767617229 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (polynomialDomMonomCoeffOne subtype
    "((number_fields.+)(preprocessing_univariate.n, 1))"
    "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}")))
 (polynomialDomMonomCoeffOne_TCC2 0
  (polynomialDomMonomCoeffOne_TCC2-1 nil 3767609157 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (polynomialDomMonomCoeffOne subtype "preprocessing_univariate.n"
    "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}")))
 (polynomialDomMonomCoeffOne 0
  (polynomialDomMonomCoeffOne-1 nil 3767609177
   ("" (skeep)
    (("" (induct "n")
      (("1" (simplify)
        (("1" (inst 1 "max(ceiling(a + 1), 1)")
          (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
        nil)
       ("2" (skosimp*)
        (("2" (simplify)
          (("2" (inst 1 "max(m!1, 2)")
            (("2" (skosimp*)
              (("2" (inst -1 "x!1")
                (("2" (simplify)
                  (("2" (case "x!1 >= m!1")
                    (("1" (split)
                      (("1" (lemma both_sides_div_pos_lt1)
                        (("1"
                          (inst -1 "x!1" " a * x!1 ^ (1 + j!1)"
                           "x!1 ^ (2 + j!1)")
                          (("1"
                            (case "a * x!1 ^ (1 + j!1) / x!1 < x!1 ^ (2 + j!1) / x!1")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (case " x!1 ^ (1 + j!1) / x!1 = x!1 ^ j!1")
                                (("1" (assert) (("1" (grind) nil nil)) nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (a skolem-const-decl "real" preprocessing_univariate nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (x!1 skolem-const-decl "real" preprocessing_univariate nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   shostak))
 (polynomialDominationCoeff1 0
  (polynomialDominationCoeff1-1 nil 3767617134
   ("" (skeep)
    (("" (induct "n")
      (("1" (simplify)
        (("1" (lemma polynomialDomMonomCoeffOne)
          (("1" (inst -1 "a(0)" "0")
            (("1" (simplify) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (simplify)
          (("2" (lemma polynomialDomMonomCoeffOne)
            (("2" (inst -1 "2" "1 + j!1")
              (("2" (skosimp*)
                (("2" (lemma polynomialDomMonomCoeffOne)
                  (("2" (inst -1 "1 + a(1 + j!1)" "1 + j!1")
                    (("2" (simplify)
                      (("2" (skosimp*)
                        (("2" (hide -2)
                          (("2" (inst 1 "max(m!1, m!3)")
                            (("2" (skosimp*)
                              (("2" (inst -1 "x!1")
                                (("2" (inst -2 "x!1")
                                  (("2" (split)
                                    (("1" (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "x!1 ^ (2 + j!1) > a(1 + j!1) * x!1 ^ (1 + j!1) +  polynomial(a, j!1)(x!1)")
                                          (("1"
                                            (case
                                             "a(1 + j!1) * x!1 ^ (1 + j!1) + polynomial(a, j!1)(x!1) = polynomial(a, 1 + j!1)(x!1)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (polynomialDomMonomCoeffOne formula-decl nil preprocessing_univariate nil)
    (sigma def-decl "real" sigma reals)
    (expt def-decl "real" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (polynomialDomLC 0
  (polynomialDomLC-1 nil 3767628539
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDominationCoeff1)
        (("" (inst -1 "(1/a(n+1))*a" "n")
          (("1" (skosimp*)
            (("1" (inst 1 "m!1")
              (("1" (skosimp*)
                (("1" (inst -1 "x!1")
                  (("1" (split)
                    (("1" (lemma scal_polynomial2)
                      (("1" (inst -1 "a" "(1 / a(n + 1))" "n" "x!1")
                        (("1" (replace -1 -2)
                          (("1" (hide -1)
                            (("1" (div-by 1 " a(n + 1)")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (n skolem-const-decl "nat" preprocessing_univariate nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (a skolem-const-decl "sequence[real]" preprocessing_univariate nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (polynomialDominationCoeff1 formula-decl nil preprocessing_univariate
     nil))
   shostak))
 (polynomialDomLC2 0
  (polynomialDomLC2-1 nil 3767690948
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDominationCoeff1)
        (("" (inst -1 "(1/a(n+1))*(-1*a)" "n")
          (("1" (skosimp*)
            (("1" (inst 1 "m!1")
              (("1" (skosimp*)
                (("1" (inst -1 "x!1")
                  (("1" (split)
                    (("1" (lemma scal_polynomial2)
                      (("1" (inst -1 "(-1*a)" "(1 / a(n + 1))" "n" "x!1")
                        (("1" (replace -1 -2)
                          (("1" (hide -1)
                            (("1" (div-by 1 "a(n+1)")
                              (("1" (lemma scal_polynomial2)
                                (("1" (inst -1 "a" "-1" "n" "x!1")
                                  (("1" (replace -1 -2)
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (n skolem-const-decl "nat" preprocessing_univariate nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (a skolem-const-decl "sequence[real]" preprocessing_univariate nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (polynomialDominationCoeff1 formula-decl nil preprocessing_univariate
     nil))
   shostak))
 (polynomialDomLC3 0
  (polynomialDomLC3-1 nil 3768325394
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomLC2)
        (("" (inst -1 "a" "n")
          (("" (split)
            (("1" (skeep)
              (("1" (inst 1 "m")
                (("1" (skeep)
                  (("1" (inst -1 "x")
                    (("1" (split)
                      (("1" (lemma polynomial_rec)
                        (("1" (inst -1 "a" "n+1" "x")
                          (("1" (split)
                            (("1" (replace -1 1) (("1" (assert) nil nil)) nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (polynomial_rec formula-decl nil polynomials reals)
    (polynomialDomLC2 formula-decl nil preprocessing_univariate nil))
   shostak))
 (polynomialDomLC2Neg 0
  (polynomialDomLC2Neg-2 nil 3768323740
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomLC2)
        (("" (inst -1 "-1*a" "n")
          (("" (split)
            (("1" (skosimp*)
              (("1" (inst 1 "m!1")
                (("1" (skeep)
                  (("1" (inst -1 "x")
                    (("1" (split)
                      (("1" (assert)
                        (("1" (lemma scal_polynomial2)
                          (("1" (inst -1 "a" "-1" "n" "x")
                            (("1" (replace -1 -2)
                              (("1" (hide -1)
                                (("1" (assert)
                                  (("1"
                                    (case "-1 * (-1 * polynomial(a, n)(x)) = polynomial(a, n)(x) ")
                                    (("1" (replace -1 -2)
                                      (("1"
                                        (hide -1 -3 -4)
                                        (("1"
                                          (lemma both_sides_times_neg_lt2)
                                          (("1"
                                            (inst
                                             -1
                                             "-1"
                                             "-1 * (a(1 + n) * x ^ (1 + n))"
                                             "polynomial(a, n)(x)")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma polynomial_rec)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "a"
                                                           "1 + n"
                                                           "x")
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       " -1 * a(1 + n) * x ^ (1 + n) =  -1 * (a(1 + n) * x ^ (1 + n))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (case
                                                             " (-1 * a(1 + n) * x ^ (1 + n)) =  -1 * a(1 + n) * x ^ (1 + n)")
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide 2)
                                                                    (("1"
                                                                      (case
                                                                       " -1 * (a(1 + n) * x ^ (1 + n)) = -1 * a(1 + n) * x ^ (1 + n)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "polynomial(a, n)(x) >= -1 * a(1 + n) * x ^ (1 + n)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "-1 * (a(1 + n) * x ^ (1 + n)) > polynomial(a, n)(x)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "NOT -1 * a(1 + n) * x ^ (1 + n) = -1 * (a(1 + n) * x ^ (1 + n))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "-1 * a(1 + n) * x ^ (1 + n) = (-1*a(1+n))*x^(1+n)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (both_sides_times_neg_lt2 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polynomial_rec formula-decl nil polynomials reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma reals)
    (expt def-decl "real" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (polynomialDomLC2 formula-decl nil preprocessing_univariate nil))
   nil)
  (polynomialDomLC2Neg-1 nil 3768320866
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomLC2)
        (("" (inst -1 "-1*a" "n")
          (("" (split)
            (("1" (skosimp*)
              (("1" (inst 1 "m!1")
                (("1" (skeep)
                  (("1" (inst -1 "x")
                    (("1" (split)
                      (("1" (assert)
                        (("1" (lemma scal_polynomial2)
                          (("1" (inst -1 "a" "-1" "n" "x")
                            (("1" (replace -1 -2)
                              (("1" (hide -1)
                                (("1" (assert)
                                  (("1"
                                    (case "-1 * (-1 * polynomial(a, n)(x)) = polynomial(a, n)(x) ")
                                    (("1" (replace -1 -2)
                                      (("1"
                                        (hide -1 -3 -4)
                                        (("1"
                                          (lemma both_sides_times_neg_lt2)
                                          (("1"
                                            (inst
                                             -1
                                             "-1"
                                             "-1 * a(1 + n) * x ^ (1 + n)"
                                             "polynomial(a, n)(x)")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (split)
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       " -1 * a(1 + n) * x ^ (1 + n) =  -1 * (a(1 + n) * x ^ (1 + n))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (case
                                                             " (-1 * a(1 + n) * x ^ (1 + n)) =  -1 * a(1 + n) * x ^ (1 + n)")
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide 2)
                                                                    (("1"
                                                                      (case
                                                                       " -1 * (a(1 + n) * x ^ (1 + n)) = -1 * a(1 + n) * x ^ (1 + n)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             ">")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "-1 * a(1 + n) * x ^ (1 + n) = -1 * (a(1 + n) * x ^ (1 + n))")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       associative_mult)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "-1"
                                                                                         "a(1 + n)"
                                                                                         "x ^ (1 + n)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (polyLCPos 0
  (polyLCPos-1 nil 3767628373
   ("" (skeep)
    (("" (skeep)
      (("" (case "n = 0")
        (("1" (assert)
          (("1" (replace -1 -2)
            (("1" (hide -1)
              (("1" (inst 1 "0") (("1" (assert) (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "n > 0")
          (("1" (lemma polynomialDomLC2)
            (("1" (inst -1 "a" "n-1")
              (("1" (split)
                (("1" (assert)
                  (("1" (hide 1)
                    (("1" (skosimp*)
                      (("1" (inst 1 "m!1")
                        (("1" (inst -1 "m!1")
                          (("1" (split)
                            (("1"
                              (case "a(n) * m!1 ^ n + polynomial(a, n - 1)(m!1) > -1 * polynomial(a, n - 1)(m!1) + polynomial(a, n - 1)(m!1)")
                              (("1" (simplify)
                                (("1" (lemma polynomial_rec)
                                  (("1" (inst -1 "a" "n" "m!1")
                                    (("1" (split)
                                      (("1" (assert) nil nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" preprocessing_univariate nil)
    (sequence type-eq-decl nil sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (polynomial_rec formula-decl nil polynomials reals)
    (nat_exp application-judgement "nat" exponentiation nil)
    (polynomialDomLC2 formula-decl nil preprocessing_univariate nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (testcase_TCC1 0
  (testcase_TCC1-1 nil 3767705700 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (testcase subtype "5"
    "{i: integers.int | booleans.OR(preprocessing_univariate.p /= 0, reals.>=(i, 0))}")))
 (testcase_TCC2 0
  (testcase_TCC2-1 nil 3767705700 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (testcase subtype "4"
    "{i: integers.int | booleans.OR(preprocessing_univariate.p /= 0, reals.>=(i, 0))}")))
 (testcase 0
  (testcase-1 nil 3767705703
   ("" (lemma polyLCPos)
    (("" (inst -1 "list2array[rat](0)((:-3000, 0, 0, 0, -4000, 5:))" "5")
      (("" (simplify)
        (("" (split)
          (("1" (skosimp*)
            (("1" (inst 1 "p!1") (("1" (assert) (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list2array def-decl "T" array2list structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (sigma_rat application-judgement "rational" sigma_nat reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (polyLCPos formula-decl nil preprocessing_univariate nil))
   shostak))
 (polyLCPosUniv 0
  (polyLCPosUniv-1 nil 3767694055
   ("" (lemma polyLCPos)
    (("" (skosimp*)
      (("" (inst -1 "a!1" "n!1")
        (("" (split)
          (("1" (skosimp*)
            (("1" (assert)
              (("1" (inst -3 "p!1") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (polyLCPos formula-decl nil preprocessing_univariate nil))
   shostak))
 (polyLCNeg 0
  (polyLCNeg-1 nil 3767697159
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polyLCPos)
        (("" (inst -1 "-1*a" "n")
          (("" (split)
            (("1" (skosimp*)
              (("1" (inst 1 "p!1")
                (("1" (lemma scal_polynomial2)
                  (("1" (inst -1 "a" "-1" "n" "p!1")
                    (("1" (replace -1 -2)
                      (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (polyLCPos formula-decl nil preprocessing_univariate nil))
   shostak))
 (evenPowerEquivalence_TCC1 0
  (evenPowerEquivalence_TCC1-1 nil 3767713281 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (evenPowerEquivalence subtype
    "(number_fields.*(2, preprocessing_univariate.k))"
    "{i: integers.int | booleans.OR(((number_fields.-)(preprocessing_univariate.x)) /= 0, reals.>=(i, 0))}")))
 (evenPowerEquivalence_TCC2 0
  (evenPowerEquivalence_TCC2-1 nil 3767713281 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (evenPowerEquivalence subtype
    "(number_fields.*(2, preprocessing_univariate.k))"
    "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}")))
 (evenPowerEquivalence 0
  (evenPowerEquivalence-1 nil 3767713283
   ("" (skeep)
    (("" (skeep)
      (("" (expand "^")
        (("" (lemma expt_times_aux)
          (("" (inst -1 "2" "k" "-x")
            (("1" (replace -1 1)
              (("1" (case "expt(-x, 2) = x*x")
                (("1" (replace -1 1)
                  (("1" (case "x*x = expt(x, 2)")
                    (("1" (replace -1 1)
                      (("1" (hide -1 -2)
                        (("1" (lemma expt_times_aux)
                          (("1" (inst -1 "2" "k" "x")
                            (("1" (assert) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 -2 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_times_aux formula-decl nil exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (x skolem-const-decl "real" preprocessing_univariate nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil))
   shostak))
 (oddPowerEquivalence_TCC1 0
  (oddPowerEquivalence_TCC1-1 nil 3767714547 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (oddPowerEquivalence subtype
    "((number_fields.+)(number_fields.*(2, preprocessing_univariate.k), 1))"
    "{i: integers.int | booleans.OR(((number_fields.-)(preprocessing_univariate.x)) /= 0, reals.>=(i, 0))}")))
 (oddPowerEquivalence_TCC2 0
  (oddPowerEquivalence_TCC2-1 nil 3767714547 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (oddPowerEquivalence subtype
    "((number_fields.+)(number_fields.*(2, preprocessing_univariate.k), 1))"
    "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}")))
 (oddPowerEquivalence 0
  (oddPowerEquivalence-1 nil 3767714549
   ("" (skeep)
    (("" (skeep)
      (("" (expand "^")
        (("" (lemma expt_plus_aux)
          (("" (inst -1 "1" "2*k" "-x")
            (("1" (replace -1 1)
              (("1" (hide -1)
                (("1" (lemma evenPowerEquivalence)
                  (("1" (inst -1 "x" "k")
                    (("1" (expand "^")
                      (("1" (replace -1 1)
                        (("1" (case "expt(-x, 1) = -expt(x, 1)")
                          (("1" (replace -1 1)
                            (("1" (lemma expt_plus_aux)
                              (("1" (inst -1 "1" "2*k" "x")
                                (("1" (replace -1 1) (("1" (assert) nil nil))
                                  nil)
                                 ("2" (assert) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_plus_aux formula-decl nil exponentiation nil)
    (evenPowerEquivalence formula-decl nil preprocessing_univariate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt def-decl "real" exponentiation nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (x skolem-const-decl "real" preprocessing_univariate nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   shostak))
 (polyEvalAtExtReal_TCC1 0
  (polyEvalAtExtReal_TCC1-1 nil 3768555504 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (polyEvalAtExtReal subtype "2"
    "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}")))
 (polyEvalAtExtReal 0
  (polyEvalAtExtReal-1 nil 3768052316
   ("" (inst 1 "2") (("" (assert) nil nil)) nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (polynomialDomMonomCoeffOneOdd 0
  (polynomialDomMonomCoeffOneOdd-1 nil 3767710804
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomMonomCoeffOne)
        (("" (inst -1 "-a" "2*k")
          (("" (skosimp*)
            (("" (inst 1 "-1*m!1")
              (("" (skosimp*)
                (("" (inst -1 "-x!1")
                  (("" (split)
                    (("1" (lemma evenPowerEquivalence)
                      (("1" (inst -1 "x!1" "k")
                        (("1" (replace -1 -2)
                          (("1" (hide -1)
                            (("1" (hide -2)
                              (("1" (lemma oddPowerEquivalence)
                                (("1" (inst -1 "x!1" "k")
                                  (("1" (replace -1 -2)
                                    (("1" (hide -1) (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (evenPowerEquivalence formula-decl nil preprocessing_univariate nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (oddPowerEquivalence formula-decl nil preprocessing_univariate nil)
    (polynomialDomMonomCoeffOne formula-decl nil preprocessing_univariate
     nil))
   shostak))
 (polynomialDomMonomCoeffOneOddNeg 0
  (polynomialDomMonomCoeffOneOddNeg-1 nil 3768563437
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomMonomCoeffOneOdd)
        (("" (inst -1 "a" "k")
          (("" (skeep)
            (("" (inst 1 "-1*m")
              (("" (skeep)
                (("" (inst -1 "-x")
                  (("" (split)
                    (("1" (lemma evenPowerEquivalence)
                      (("1" (lemma oddPowerEquivalence)
                        (("1" (inst? -1)
                          (("1" (inst? -2) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (evenPowerEquivalence formula-decl nil preprocessing_univariate nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (oddPowerEquivalence formula-decl nil preprocessing_univariate nil)
    (polynomialDomMonomCoeffOneOdd formula-decl nil preprocessing_univariate
     nil))
   shostak))
 (polynomialDomMonomCoeffOneOddNegCoeff 0
  (polynomialDomMonomCoeffOneOddNegCoeff-1 nil 3768563547
   ("" (lemma polynomialDomMonomCoeffOneOdd)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide -1)
            (("" (lemma polynomialDomMonomCoeffOneOddNeg)
              (("" (inst -1 "a/(-1*c)" "k")
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (skeep)
                      (("1" (inst -1 "x")
                        (("1" (split)
                          (("1" (lemma both_sides_times_pos_lt2)
                            (("1"
                              (case "-1 * x ^ (2 * k + 1) = a / (-1 * c) * x ^ (2 * k)")
                              (("1" (assert) nil nil)
                               ("2" (assert)
                                (("2"
                                  (case "-1 * x ^ (1 + 2 * k) < a / (-1 * c) * x ^ (2 * k)")
                                  (("1" (hide 1)
                                    (("1" (hide -3)
                                      (("1"
                                        (inst
                                         -2
                                         "-1*c"
                                         "-1 * x ^ (1 + 2 * k)"
                                         "a / (-1 * c) * x ^ (2 * k)")
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomialDomMonomCoeffOneOddNeg formula-decl nil
     preprocessing_univariate nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (c skolem-const-decl "real" preprocessing_univariate nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (polynomialDomMonomCoeffOneOdd formula-decl nil preprocessing_univariate
     nil))
   shostak))
 (sequenceRelHelper 0
  (sequenceRelHelper-1 nil 3768141111
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (induct j)
          (("1" (skeep) (("1" (grind) nil nil)) nil)
           ("2" (skosimp*)
            (("2" (inst -1 "x!1")
              (("2" (split)
                (("1"
                  (case "polynomial(a, j!1 + 1)(x!1) = polynomial(a, j!1)(x!1) + a(j!1+1)*x!1^(j!1+1)")
                  (("1" (rewrite -1 1)
                    (("1" (hide -1)
                      (("1"
                        (case "polynomial(insert(k, p, a), j!1 + 1)(x!1) = polynomial(insert(k, p, a), j!1)(x!1) +  insert(k, p, a)(j!1+1)*x!1 ^(1 + j!1)")
                        (("1" (replace -1 1)
                          (("1" (replace -2 1)
                            (("1" (case "insert(k, p, a)(j!1 + 1) = a(j!1+1)")
                              (("1" (grind) nil nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (insert const-decl "sequence" sequences nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (sequenceRelation 0
  (sequenceRelation-2 "" 3768139446
   ("" (skeep)
    (("" (induct "k")
      (("1" (inst 1 "a") (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
       ("2" (skosimp*)
        (("2" (case "odd?(j!1 + 1)")
          (("1" (expand "odd?")
            (("1" (skosimp*)
              (("1" (inst 1 "insert(-a(j!1 + 1), j!1 + 1, b!1)")
                (("1" (skosimp*)
                  (("1" (inst -2 "x!1")
                    (("1"
                      (case "polynomial(insert(-a(j!1 + 1), j!1 + 1, b!1), j!1 + 1)(-x!1) = -a(j!1+1)*(-x!1)^(j!1+1) + polynomial(b!1, j!1)(-x!1)")
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma oddPowerEquivalence)
                            (("1" (inst -1 "x!1" "j!2")
                              (("1" (replace -2 1)
                                (("1" (replace -1 1)
                                  (("1" (simplify)
                                    (("1" (case "2*j!2 = j!1")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (case
                                           "polynomial(b!1, j!1)(-x!1) = polynomial(a, j!1)(x!1)")
                                          (("1"
                                            (replace -1 1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (assert)
                          (("2" (hide -1)
                            (("2" (hide -1)
                              (("2" (lemma polynomial_rec)
                                (("2"
                                  (inst -1 "insert(-a(1 + j!1), 1 + j!1, b!1)"
                                   "1 + j!1" "-x!1")
                                  (("2" (split)
                                    (("1" (simplify)
                                      (("1"
                                        (case
                                         "polynomial(insert(-a(1 + j!1), 1 + j!1, b!1), j!1)(-x!1) = polynomial(b!1, j!1)(-x!1) + -a(1 + j!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite -1 -2)
                                            (("1"
                                              (case
                                               "insert(-a(1 + j!1), 1 + j!1, b!1)(1 + j!1) =  -a(1 + j!1) ")
                                              (("1"
                                                (rewrite -1 -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma polynomial_rec)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "insert(-a(1 + j!1), 1 + j!1, b!1)"
                                                         "1 + j!1"
                                                         "-x!1")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (simplify)
                                                                (("1"
                                                                  (case
                                                                   "polynomial(insert(-a(1 + j!1), 1 + j!1, b!1), j!1)(-x!1) = polynomial(b!1, j!1)(-x!1)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         " insert(-a(1 + j!1), 1 + j!1, b!1)(1 + j!1) * (-x!1) ^ (1 + j!1) =  -a(1 + j!1) * (-x!1) ^ (1 + j!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (lemma
                                                                       sequenceRelHelper)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "b!1"
                                                                         "-a(1 + j!1)"
                                                                         "j!1 + 1"
                                                                         "j!1"
                                                                         "-x!1")
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1)
                                                (("2"
                                                  (hide 1)
                                                  (("2"
                                                    (lemma sequenceRelHelper)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "b!1"
                                                       "-a(1 + j!1)"
                                                       "1 + j!1"
                                                       "j!1"
                                                       "-x!1")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             polynomial_rec)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "insert(-a(1 + j!1), 1 + j!1, b!1)"
                                                               "1+j!1"
                                                               "-x!1")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (rewrite
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (hide -1)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           " insert(-a(1 + j!1), 1 + j!1, b!1)(1 + j!1) = -a(1 + j!1)")
                                                                          (("1"
                                                                            (rewrite
                                                                             -1
                                                                             1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide 1)
                                            (("2"
                                              (rewrite -1 1)
                                              (("2"
                                                (lemma sequenceRelHelper)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "b!1"
                                                   "-a(1+j!1)"
                                                   "1+j!1"
                                                   "j!1"
                                                   "-x!1")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (rewrite -1 1)
                                                      (("1"
                                                        (case
                                                         "insert(-a(1 + j!1), 1 + j!1, b!1)(1 + j!1) = -a(1 + j!1)")
                                                        (("1"
                                                          (rewrite -1 1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "even?(j!1 + 1)")
            (("1" (hide 1)
              (("1" (expand "even?")
                (("1" (skosimp*)
                  (("1" (inst 1 "insert(a(j!1 + 1), j!1 + 1, b!1)")
                    (("1" (skosimp*)
                      (("1" (inst -2 "x!1")
                        (("1" (lemma polynomial_rec)
                          (("1"
                            (inst -1 "insert(a(j!1 + 1), j!1 + 1, b!1)"
                             "j!1+1" "-x!1")
                            (("1" (split)
                              (("1" (rewrite -1 1)
                                (("1" (hide -1)
                                  (("1"
                                    (case "insert(a(1 + j!1), 1 + j!1, b!1)(1 + j!1) = a(1+j!1)")
                                    (("1" (rewrite -1 1)
                                      (("1"
                                        (lemma evenPowerEquivalence)
                                        (("1"
                                          (inst -1 "x!1" "j!2")
                                          (("1"
                                            (replace -2 1)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (case "2 * j!2 = 1 + j!1")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (lemma
                                                       sequenceRelHelper)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "b!1"
                                                         "a(1 + j!1)"
                                                         "1 + j!1"
                                                         "j!1"
                                                         "-x!1")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (lemma
                                                                 polynomial_rec)
                                                                (("1"
                                                                  (case
                                                                   "polynomial(b!1, j!1)(-x!1) = polynomial(a, j!1)(x!1)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "a"
                                                                         "1 + j!1"
                                                                         "x!1")
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide -1 3)
                (("2" (expand "even?")
                  (("2" (expand "odd?")
                    (("2" (assert)
                      (("2" (lemma euclid_nat)
                        (("2" (inst -1 "j!1" "2")
                          (("2" (skosimp*)
                            (("2" (inst 2 "q!1")
                              (("2" (inst 1 "q!1 + 1")
                                (("2" (simplify) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (odd? const-decl "bool" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (j!2 skolem-const-decl "int" preprocessing_univariate nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (oddPowerEquivalence formula-decl nil preprocessing_univariate nil)
    (sequenceRelHelper formula-decl nil preprocessing_univariate nil)
    (polynomial_rec formula-decl nil polynomials reals)
    (insert const-decl "sequence" sequences nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (euclid_nat formula-decl nil euclidean_division nil)
    (j!2 skolem-const-decl "int" preprocessing_univariate nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (evenPowerEquivalence formula-decl nil preprocessing_univariate nil)
    (even? const-decl "bool" integers nil))
   shostak)
  (sequenceRelation-1 nil 3768137318
   ("" (skeep)
    (("" (induct "k")
      (("1" (inst 1 "a") (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
       ("2" (skosimp*)
        (("2" (case "odd?(j!1 + 1)")
          (("1" (postpone) nil nil)
           ("2" (case "even?(j!1 + 1)")
            (("1" (hide 1) (("1" (postpone) nil nil)) nil)
             ("2" (assert)
              (("2" (hide -1 3)
                (("2" (expand "even?")
                  (("2" (expand "odd?")
                    (("2" (assert)
                      (("2" (lemma euclid_nat)
                        (("2" (inst -1 "j!1" "2")
                          (("2" (skosimp*)
                            (("2" (inst 2 "q!1")
                              (("2" (inst 1 "q!1 + 1")
                                (("2" (simplify) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (polynomialDomMonomNegEvenDeg_TCC1 0
  (polynomialDomMonomNegEvenDeg_TCC1-1 nil 3768145431
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (polynomialDomMonomNegEvenDeg subtype
    "(number_fields.-)(number_fields.*(2, preprocessing_univariate.k), 1)"
    "nat")))
 (polynomialDomMonomNegEvenDeg 0
  (polynomialDomMonomNegEvenDeg-2 "" 3768146016
   ("" (skeep)
    (("" (skeep)
      (("" (lemma sequenceRelation)
        (("" (inst -1 "a" "2*k-1")
          (("1" (skosimp*)
            (("1" (lemma polynomialDominationCoeff1)
              (("1" (inst -1 "-1*b!1" "2*k-1")
                (("1" (skosimp*)
                  (("1" (inst 1 "min(-1, -m!1)")
                    (("1" (skeep)
                      (("1" (inst -1 "-x")
                        (("1" (inst -2 "x")
                          (("1" (split)
                            (("1" (lemma scal_polynomial2)
                              (("1" (inst -1 "b!1" "-1" "2*k-1" "-x")
                                (("1" (replace -1 -2)
                                  (("1" (hide -1)
                                    (("1" (lemma evenPowerEquivalence)
                                      (("1"
                                        (inst -1 "x" "k")
                                        (("1"
                                          (replace -1 -2)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "x ^ (2 * k) > -1 > -1* polynomial(a, 2 * k - 1)(x)")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil)
                                               ("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (k skolem-const-decl "nat" preprocessing_univariate nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomialDominationCoeff1 formula-decl nil preprocessing_univariate nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (evenPowerEquivalence formula-decl nil preprocessing_univariate nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sequenceRelation formula-decl nil preprocessing_univariate nil))
   shostak)
  (polynomialDomMonomNegEvenDeg-1 nil 3768144705
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDominationCoeff1)
        (("" (lemma sequenceRelation)
          (("" (inst -1 "a" "2*k")
            (("" (skosimp*) (("" (postpone) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (polynomialDomMonomNegEvenDeg1_TCC1 0
  (polynomialDomMonomNegEvenDeg1_TCC1-1 nil 3768564411
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (polynomialDomMonomNegEvenDeg1 subtype
    "(number_fields.-)(number_fields.*(2, preprocessing_univariate.k), 1)"
    "nat")))
 (polynomialDomMonomNegEvenDeg1 0
  (polynomialDomMonomNegEvenDeg1-1 nil 3768564412
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDominationCoeff1)
        (("" (inst -1 "-1*a" "2*k-1")
          (("1" (simplify)
            (("1" (skeep)
              (("1" (lemma scal_polynomial2)
                (("1" (inst 1 "m")
                  (("1" (skeep)
                    (("1" (inst -2 "x")
                      (("1" (inst -1 "a" "-1" "2*k-1" "x")
                        (("1" (replace -1 -2)
                          (("1" (split)
                            (("1" (hide -2 -3 -4) (("1" (assert) nil nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (k skolem-const-decl "nat" preprocessing_univariate nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (polynomialDominationCoeff1 formula-decl nil preprocessing_univariate
     nil))
   shostak))
 (polynomialOddDegLessThanZero 0
  (polynomialOddDegLessThanZero-5 "very close" 3768211263
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomMonomCoeffOneOdd)
        (("" (lemma polynomialDomMonomNegEvenDeg)
          (("" (case "k=0")
            (("1" (hide -2 -3)
              (("1" (replace -1 -2)
                (("1" (replace -1 1)
                  (("1" (simplify)
                    (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
                      (("1" (skeep)
                        (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (assert)
                                (("1" (case "x < -a(0)/a(1)")
                                  (("1" (lemma div_mult_pos_lt2)
                                    (("1" (inst -1 "a(1)" "x" "-a(0)")
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "k > 0")
              (("1" (hide 1)
                (("1" (inst -3 "-1*(a(2*k) + 1)/(a(2*k+1))" "k")
                  (("1" (skosimp*)
                    (("1" (inst -2 "-1*a" "k")
                      (("1" (skosimp*)
                        (("1" (inst 1 "min(m!1, m!2)")
                          (("1" (skeep)
                            (("1" (inst -2 "x")
                              (("1" (inst -3 "x")
                                (("1" (split)
                                  (("1" (split)
                                    (("1" (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "a(1+2*k)*x ^ (1 + 2 * k) <= (-1 - a(2 * k))*x^(2*k)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (case
                                                     " a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k)")
                                                    (("1"
                                                      (lemma scal_polynomial2)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "a"
                                                         "-1"
                                                         "2*k-1"
                                                         "x")
                                                        (("1"
                                                          (replace -1 -4)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case
                                                               "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                              (("1"
                                                                (case
                                                                 "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) +
                                                         a(2 * k) * x ^ (2 * k) < 0")
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (hide
                                                                   -4
                                                                   -5
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (hide -5)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               scal_polynomial2)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a"
                                                                 "-1"
                                                                 "2*k-1"
                                                                 "x")
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (lemma
                                                                       both_sides_times_neg_lt2)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "-1"
                                                                         "x^(2*k)"
                                                                         "polynomial(a, 2 * k - 1)(x)")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3 -5)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma div_mult_pos_lt2)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "a(1 + 2 * k)"
                                                     " x ^ (1 + 2 * k)"
                                                     "(-1 - a(2 * k))*x^(2*k)")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomialDomMonomNegEvenDeg formula-decl nil preprocessing_univariate
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (k skolem-const-decl "nat" preprocessing_univariate nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_times_neg_lt2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (sequence type-eq-decl nil sequences nil)
    (a skolem-const-decl "sequence[real]" preprocessing_univariate nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (polynomialDomMonomCoeffOneOdd formula-decl nil preprocessing_univariate
     nil))
   nil)
  (polynomialOddDegLessThanZero-4 "very close" 3768211178
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomMonomCoeffOneOdd)
        (("" (lemma polynomialDomMonomNegEvenDeg)
          (("" (case "k=0")
            (("1" (hide -2 -3)
              (("1" (replace -1 -2)
                (("1" (replace -1 1)
                  (("1" (simplify)
                    (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
                      (("1" (skeep)
                        (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (assert)
                                (("1" (case "x < -a(0)/a(1)")
                                  (("1" (lemma div_mult_pos_lt2)
                                    (("1" (inst -1 "a(1)" "x" "-a(0)")
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "k > 0")
              (("1" (hide 1)
                (("1" (inst -3 "-1*(a(2*k) + 1)/(a(2*k+1))" "k")
                  (("1" (skosimp*)
                    (("1" (inst -2 "-1*a" "k")
                      (("1" (skosimp*)
                        (("1" (inst 1 "min(m!1, m!2)")
                          (("1" (skeep)
                            (("1" (inst -2 "x")
                              (("1" (inst -3 "x")
                                (("1" (split)
                                  (("1" (split)
                                    (("1" (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "a(1+2*k)*x ^ (1 + 2 * k) <= (-1 - a(2 * k))*x^(2*k)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (case
                                                     " a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k)")
                                                    (("1"
                                                      (lemma scal_polynomial2)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "a"
                                                         "-1"
                                                         "2*k-1"
                                                         "x")
                                                        (("1"
                                                          (replace -1 -4)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case
                                                               "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                              (("1"
                                                                (case
                                                                 "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) +
                                a(2 * k) * x ^ (2 * k) < 0")
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (hide
                                                                   -4
                                                                   -5
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (hide -5)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               scal_polynomial2)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a"
                                                                 "-1"
                                                                 "2*k-1"
                                                                 "x")
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (lemma
                                                                       both_sides_times_neg_lt2)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "-1"
                                                                         "x^(2*k)"
                                                                         "polynomial(a, 2 * k - 1)(x)")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3 -5)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma div_mult_pos_lt2)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "a(1 + 2 * k)"
                                                     " x ^ (1 + 2 * k)"
                                                     "(1 - a(2 * k))*x^(2*k)")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegLessThanZero-3 "very close" 3768153090
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomMonomCoeffOneOdd)
        (("" (lemma polynomialDomMonomNegEvenDeg)
          (("" (case "k=0")
            (("1" (hide -2 -3)
              (("1" (replace -1 -2)
                (("1" (replace -1 1)
                  (("1" (simplify)
                    (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
                      (("1" (skeep)
                        (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (assert)
                                (("1" (case "x < -a(0)/a(1)")
                                  (("1" (lemma div_mult_pos_lt2)
                                    (("1" (inst -1 "a(1)" "x" "-a(0)")
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "k > 0")
              (("1" (hide 1)
                (("1" (inst -3 "-1*(a(2*k) + 1)/(a(2*k+1))" "k")
                  (("1" (skosimp*)
                    (("1" (inst -2 "-1*a" "k")
                      (("1" (skosimp*)
                        (("1" (inst 1 "min(m!1, m!2)")
                          (("1" (skeep)
                            (("1" (inst -2 "x")
                              (("1" (inst -3 "x")
                                (("1" (split)
                                  (("1" (split)
                                    (("1" (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "a(1+2*k)*x ^ (1 + 2 * k) <= (1 + a(2 * k))*x^(2*k)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (case
                                                     " a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k)")
                                                    (("1"
                                                      (lemma scal_polynomial2)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "a"
                                                         "-1"
                                                         "2*k-1"
                                                         "x")
                                                        (("1"
                                                          (replace -1 -4)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case
                                                               "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                              (("1"
                                                                (case
                                                                 "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) +
       a(2 * k) * x ^ (2 * k) < 0")
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (hide
                                                                   -4
                                                                   -5
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (hide -5)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               scal_polynomial2)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a"
                                                                 "-1"
                                                                 "2*k-1"
                                                                 "x")
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (lemma
                                                                       both_sides_times_neg_lt2)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "-1"
                                                                         "x^(2*k)"
                                                                         "polynomial(a, 2 * k - 1)(x)")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3 -5)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma div_mult_pos_lt2)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "a(1 + 2 * k)"
                                                     " x ^ (1 + 2 * k)"
                                                     "(1 - a(2 * k))*x^(2*k)")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegLessThanZero-2 "very close" 3768152865
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomMonomCoeffOneOdd)
        (("" (lemma polynomialDomMonomNegEvenDeg)
          (("" (case "k=0")
            (("1" (hide -2 -3)
              (("1" (replace -1 -2)
                (("1" (replace -1 1)
                  (("1" (simplify)
                    (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
                      (("1" (skeep)
                        (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (assert)
                                (("1" (case "x < -a(0)/a(1)")
                                  (("1" (lemma div_mult_pos_lt2)
                                    (("1" (inst -1 "a(1)" "x" "-a(0)")
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "k > 0")
              (("1" (hide 1)
                (("1" (inst -3 "-1*(a(2*k) + 1)/(a(2*k+1))" "k")
                  (("1" (skosimp*)
                    (("1" (inst -2 "a" "k")
                      (("1" (skosimp*)
                        (("1" (inst 1 "min(m!1, m!2)")
                          (("1" (skeep)
                            (("1" (inst -2 "x")
                              (("1" (inst -3 "x")
                                (("1" (split)
                                  (("1" (split)
                                    (("1" (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "a(1+2*k)*x ^ (1 + 2 * k) <= (1 + a(2 * k))*x^(2*k)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (case
                                                     " a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k)")
                                                    (("1" (postpone) nil nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (hide -5)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3 -5)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma div_mult_pos_lt2)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "a(1 + 2 * k)"
                                                     " x ^ (1 + 2 * k)"
                                                     "(1 - a(2 * k))*x^(2*k)")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegLessThanZero-veryclose "very close" 3768151074
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomMonomCoeffOneOdd)
        (("" (lemma polynomialDomMonomNegEvenDeg)
          (("" (case "k=0")
            (("1" (hide -2 -3)
              (("1" (replace -1 -2)
                (("1" (replace -1 1)
                  (("1" (simplify)
                    (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
                      (("1" (skeep)
                        (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (assert)
                                (("1" (case "x < -a(0)/a(1)")
                                  (("1" (lemma div_mult_pos_lt2)
                                    (("1" (inst -1 "a(1)" "x" "-a(0)")
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "k > 0")
              (("1" (hide 1)
                (("1" (inst -3 "-1*(a(2*k) - 1)/(a(2*k+1))" "k")
                  (("1" (skosimp*)
                    (("1" (inst -2 "a" "k")
                      (("1" (skosimp*)
                        (("1" (inst 1 "min(m!1, m!2)")
                          (("1" (skeep)
                            (("1" (inst -2 "x")
                              (("1" (inst -3 "x")
                                (("1" (split)
                                  (("1" (split)
                                    (("1" (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "a(1+2*k)*x ^ (1 + 2 * k) <= (1 - a(2 * k))*x^(2*k)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "a(1 + 2 * k) * x ^ (1 + 2 * k) - x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (case
                                                     "a(1 + 2 * k) * x ^ (1 + 2 * k) - x ^ (2 * k) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k)")
                                                    (("1" (postpone) nil nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -2 -3 -5)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma div_mult_pos_lt2)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "a(1 + 2 * k)"
                                                     " x ^ (1 + 2 * k)"
                                                     "(1 - a(2 * k))*x^(2*k)")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (polynomialOddDegLessThanZero-1 nil 3768132709
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polynomialDomMonomCoeffOneOdd)
        (("" (lemma polynomialDomMonomNegEvenDeg)
          (("" (case "k=0")
            (("1" (hide -2 -3)
              (("1" (replace -1 -2)
                (("1" (replace -1 1)
                  (("1" (simplify)
                    (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
                      (("1" (skeep)
                        (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (assert)
                                (("1" (case "x < -a(0)/a(1)")
                                  (("1" (lemma div_mult_pos_lt2)
                                    (("1" (inst -1 "a(1)" "x" "-a(0)")
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "k > 0")
              (("1" (hide 1) (("1" (postpone) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (polynomialOddDegGreaterThanZero 0
  (polynomialOddDegGreaterThanZero-7 nil 3768564978
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "ceiling(-a(0)/a(1) + 1)")
            (("1" (skeep)
              (("1" (case "x > -a(0)/a(1)")
                (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                  (("1" (hide -1)
                    (("1" (assert)
                      (("1" (grind)
                        (("1" (case "a(1)*x < -a(0)")
                          (("1" (grind) nil nil)
                           ("2" (grind)
                            (("2" (hide 2)
                              (("2" (grind)
                                (("2" (lemma both_sides_times_neg_lt2)
                                  (("2" (inst?)
                                    (("2" (inst -1 "-a(0)/a(1)")
                                      (("2"
                                        (simplify)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomCoeffOneOddNegCoeff)
          (("2" (inst -1 "-a(2*k)-1" "k" "a(2 * k + 1)")
            (("2" (split)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (lemma polynomialDomMonomNegEvenDeg1)
                    (("1" (inst -1 "-1*a" "k")
                      (("1" (skeep)
                        (("1" (inst 2 "max(m!1, m)")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1" (inst -2 "x")
                                (("1" (split)
                                  (("1" (split)
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         " a(1 + 2 * k) * x ^ (1 + 2 * k) +
                                     x ^ (2 * k) + x ^ (2 * k) * a(2 * k) <= 0")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (case
                                             "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + x ^ (2 * k) * a(2 * k) < 0")
                                            (("1"
                                              (case
                                               "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial(a, 2*k-1)(x)")
                                              (("1"
                                                (replace -1 -4)
                                                (("1"
                                                  (case
                                                   "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                  (("1"
                                                    (hide -5)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (case
                                                         "polynomial(a, 1 + 2 * k)(x) = a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) +
       x ^ (2 * k) * a(2 * k)")
                                                        (("1"
                                                          (replace -1 2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (grind) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 " polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial(a, 2 * k - 1)(x)")
                                                (("1"
                                                  (replace -1 -3)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (case
                                                       "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma scal_polynomial2)
                                                    (("2" (inst? -1) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomialDomMonomCoeffOneOddNegCoeff formula-decl nil
     preprocessing_univariate nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (polynomialDomMonomNegEvenDeg1 formula-decl nil preprocessing_univariate
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (both_sides_times_neg_lt2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals) (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (a skolem-const-decl "sequence[real]" preprocessing_univariate nil)
    (sequence type-eq-decl nil sequences nil)
    (/= const-decl "boolean" notequal nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil)
  (polynomialOddDegGreaterThanZero-6 nil 3768564926
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "ceiling(-a(0)/a(1) + 1)")
            (("1" (skeep)
              (("1" (case "x > -a(0)/a(1)")
                (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                  (("1" (hide -1)
                    (("1" (assert)
                      (("1" (grind)
                        (("1" (case "a(1)*x < -a(0)")
                          (("1" (grind) nil nil)
                           ("2" (grind)
                            (("2" (hide 2)
                              (("2" (grind)
                                (("2" (lemma both_sides_times_neg_lt2)
                                  (("2" (inst?)
                                    (("2" (inst -1 "-a(0)/a(1)")
                                      (("2"
                                        (simplify)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomCoeffOneOddNegCoeff)
          (("2" (inst -1 "-a(2*k)-1" "k" "a(2 * k + 1)")
            (("2" (split)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (lemma polynomialDomMonomNegEvenDeg1)
                    (("1" (inst -1 "a" "k")
                      (("1" (skeep)
                        (("1" (inst 2 "max(m!1, m)")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1" (inst -2 "x")
                                (("1" (split)
                                  (("1" (split)
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         " a(1 + 2 * k) * x ^ (1 + 2 * k) +
                      x ^ (2 * k) + x ^ (2 * k) * a(2 * k) <= 0")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (case
                                             "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + x ^ (2 * k) * a(2 * k) < 0")
                                            (("1" (postpone) nil nil)
                                             ("2"
                                              (assert)
                                              (("2" (postpone) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero-5 nil 3768564697
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "ceiling(-a(0)/a(1) + 1)")
            (("1" (skeep)
              (("1" (case "x > -a(0)/a(1)")
                (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                  (("1" (hide -1)
                    (("1" (assert)
                      (("1" (grind)
                        (("1" (case "a(1)*x < -a(0)")
                          (("1" (grind) nil nil)
                           ("2" (grind)
                            (("2" (hide 2)
                              (("2" (grind)
                                (("2" (lemma both_sides_times_neg_lt2)
                                  (("2" (inst?)
                                    (("2" (inst -1 "-a(0)/a(1)")
                                      (("2"
                                        (simplify)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomCoeffOneOddNegCoeff)
          (("2" (inst -1 "-a(2*k)+1" "k" "a(2 * k + 1)")
            (("2" (split)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (lemma polynomialDomMonomNegEvenDeg1)
                    (("1" (inst -1 "a" "k")
                      (("1" (skeep)
                        (("1" (inst 2 "max(m!1, m)")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1" (inst -2 "x")
                                (("1" (split)
                                  (("1" (split)
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         " a(1 + 2 * k) * x ^ (1 + 2 * k) -
       x ^ (2 * k) + x ^ (2 * k) * a(2 * k) <= 0")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (case
                                             "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + x ^ (2 * k) * a(2 * k) < 0")
                                            (("1" (postpone) nil nil)
                                             ("2"
                                              (assert)
                                              (("2" (postpone) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero-4 nil 3768562653
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "ceiling(-a(0)/a(1) + 1)")
            (("1" (skeep)
              (("1" (case "x > -a(0)/a(1)")
                (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                  (("1" (hide -1)
                    (("1" (assert)
                      (("1" (grind)
                        (("1" (case "a(1)*x < -a(0)")
                          (("1" (grind) nil nil)
                           ("2" (grind)
                            (("2" (hide 2)
                              (("2" (grind)
                                (("2" (lemma both_sides_times_neg_lt2)
                                  (("2" (inst?)
                                    (("2" (inst -1 "-a(0)/a(1)")
                                      (("2"
                                        (simplify)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomCoeffOneOddNegCoeff)
          (("2" (inst -1 "-a(2*k)+1" "k" "a(2 * k + 1)")
            (("2" (split)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (lemma polynomialDomMonomNegEvenDeg)
                    (("1" (postpone) nil nil)) nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero-3 nil 3768562427
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (flatten)
          (("1" (simplify)
            (("1" (inst 1 "ceiling(-a(0)/a(1) + 1)")
              (("1" (skeep)
                (("1" (case "x > -a(0)/a(1)")
                  (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (hide -3)
                          (("1" (assert)
                            (("1" (grind)
                              (("1" (case "a(1)*x < -a(0)")
                                (("1" (grind) nil)
                                 ("2" (grind)
                                  (("2" (hide 2)
                                    (("2" (grind)
                                      (("2"
                                        (lemma both_sides_times_neg_lt2)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst -1 "-a(0)/a(1)")
                                            (("2"
                                              (simplify)
                                              (("2"
                                                (propax)
                                                nil)))))))))))))))))))))))))))
                     ("2" (assert) (("2" (grind) nil)))))
                   ("2" (assert) nil)))))
               ("2" (assert) nil)))))))
         ("2" (postpone) nil))))))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero-2 nil 3768562407
   ("" (skeep)
    (("" (case "k = 0")
      (("1" (flatten)
        (("1" (simplify)
          (("1" (inst 1 "ceiling(-a(0)/a(1) + 1)")
            (("1" (skeep)
              (("1" (case "x > -a(0)/a(1)")
                (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                  (("1" (replace -1 1)
                    (("1" (hide -1)
                      (("1" (hide -3)
                        (("1" (assert)
                          (("1" (grind)
                            (("1" (case "a(1)*x < -a(0)")
                              (("1" (grind) nil)
                               ("2" (grind)
                                (("2" (hide 2)
                                  (("2" (grind)
                                    (("2" (lemma both_sides_times_neg_lt2)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst -1 "-a(0)/a(1)")
                                          (("2"
                                            (simplify)
                                            (("2"
                                              (propax)
                                              nil)))))))))))))))))))))))))))
                   ("2" (assert) (("2" (grind) nil)))))
                 ("2" (assert) nil)))))
             ("2" (assert) nil)))))))
       ("2" (postpone) nil))))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero-1 nil 3768560940
   ("" (skeep)
    (("" (induct "k")
      (("1" (flatten)
        (("1" (simplify)
          (("1" (inst 1 "ceiling(-a(0)/a(1) + 1)")
            (("1" (skeep)
              (("1" (case "x > -a(0)/a(1)")
                (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                  (("1" (replace -1 1)
                    (("1" (hide -1)
                      (("1" (hide -3)
                        (("1" (assert)
                          (("1" (grind)
                            (("1" (case "a(1)*x < -a(0)")
                              (("1" (grind) nil nil)
                               ("2" (grind)
                                (("2" (hide 2)
                                  (("2" (grind)
                                    (("2" (lemma both_sides_times_neg_lt2)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst -1 "-a(0)/a(1)")
                                          (("2"
                                            (simplify)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (polynomialOddDegGreaterThanZero1 0
  (polynomialOddDegGreaterThanZero1-15 "" 3768572381
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify) (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomNegEvenDeg)
          (("2" (inst -1 "a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (simplify)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (case
                                               "a(1 + 2 * k) * x ^ (1 + 2 * k) + a(2 * k) * x ^ (2 * k) + polynomial(a, 2 * k - 1)(x) > 0")
                                              (("1" (grind) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (lemma both_sides_times_neg_lt2)
                                      (("2"
                                        (inst
                                         -1
                                         "a(1 + 2 * k)"
                                         "x ^ (1 + 2 * k)"
                                         "(1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                        (("2"
                                          (case
                                           "a(1 + 2 * k) * x ^ (1 + 2 * k) = x ^ (2 * k) - a(2 * k) * x ^ (2 * k)")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomialDomMonomNegEvenDeg formula-decl nil preprocessing_univariate
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (k skolem-const-decl "nat" preprocessing_univariate nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (polynomialDomMonomCoeffOneOdd formula-decl nil preprocessing_univariate
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (both_sides_times_neg_lt2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (a skolem-const-decl "sequence[real]" preprocessing_univariate nil)
    (sequence type-eq-decl nil sequences nil)
    (/= const-decl "boolean" notequal nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil)
  (polynomialOddDegGreaterThanZero1-14 "" 3768572129
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify) (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomNegEvenDeg1)
          (("2" (inst -1 "a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (simplify)
                                        (("1"
                                          (assert)
                                          (("1" (postpone) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (lemma both_sides_times_neg_lt2)
                                      (("2"
                                        (inst
                                         -1
                                         "a(1 + 2 * k)"
                                         "x ^ (1 + 2 * k)"
                                         "(1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                        (("2"
                                          (case
                                           "a(1 + 2 * k) * x ^ (1 + 2 * k) = x ^ (2 * k) - a(2 * k) * x ^ (2 * k)")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert)
                                  (("3" (assert) (("3" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-13 "" 3768572091
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify) (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomNegEvenDeg1)
          (("2" (inst -1 "a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (simplify)
                                              (("1" (postpone) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil)
                                 ("2" (postpone) nil nil)
                                 ("3" (postpone) nil nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-12 "" 3768572048
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify) (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomNegEvenDeg1)
          (("2" (inst -1 "a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (case
                                             "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (simplify)
                                                (("1" (postpone) nil nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil)
                                 ("2" (postpone) nil nil)
                                 ("3" (postpone) nil nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-11 "" 3768571951
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify) (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomNegEvenDeg1)
          (("2" (inst -1 "a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (case
                                           "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                              (("1"
                                                (hide -3)
                                                (("1"
                                                  (simplify)
                                                  (("1" (postpone) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (postpone) nil nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil)
                                           ("3" (postpone) nil nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil)
                                 ("2" (postpone) nil nil)
                                 ("3" (postpone) nil nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (polynomialOddDegGreaterThanZero1-10 "" 3768571932
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify)
                                    (("1" (propax) nil)))))))))))))))))))
                   ("2" (assert) nil)))
                 ("2" (grind) nil)))))
             ("2" (assert) nil)))))
         ("2" (lemma polynomialDomMonomNegEvenDeg1)
          (("2" (inst -1 "a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (case
                                           "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)")
                                          (("1"
                                            (replace -1 -3)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (simplify)
                                                    (("1" (postpone) nil)))))
                                                 ("2" (grind) nil)))))))
                                           ("2"
                                            (lemma scal_polynomial2)
                                            (("2"
                                              (inst? -1)
                                              (("2" (assert) nil)))))
                                           ("3" (assert) nil)))))
                                       ("2" (assert) nil)))))
                                   ("2" (assert)
                                    (("2" (simplify)
                                      (("2"
                                        (case
                                         " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                        (("1" (assert) nil)
                                         ("2"
                                          (case
                                           "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (lemma both_sides_times_neg_lt2)
                                              (("1"
                                                (inst
                                                 -1
                                                 "a(1 + 2 * k)"
                                                 "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)"
                                                 "x ^ (1 + 2 * k)")
                                                (("1" (assert) nil)))))))
                                           ("2" (assert) nil)))))))))))
                                 ("2" (assert) nil) ("3" (assert) nil)))
                               ("2" (assert) nil)))))))))))))
                   ("2" (assert) nil))))))))))))))))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-9 "" 3768571896
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify)
                                    (("1" (propax) nil)))))))))))))))))))
                   ("2" (assert) nil)))
                 ("2" (grind) nil)))))
             ("2" (assert) nil)))))
         ("2" (lemma polynomialDomMonomNegEvenDeg1)
          (("2" (inst -1 "-1*a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (case
                                           "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)")
                                          (("1"
                                            (replace -1 -3)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (simplify)
                                                    (("1" (postpone) nil)))))
                                                 ("2" (grind) nil)))))))
                                           ("2"
                                            (lemma scal_polynomial2)
                                            (("2"
                                              (inst? -1)
                                              (("2" (assert) nil)))))
                                           ("3" (assert) nil)))))
                                       ("2" (assert) nil)))))
                                   ("2" (assert)
                                    (("2" (simplify)
                                      (("2"
                                        (case
                                         " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                        (("1" (assert) nil)
                                         ("2"
                                          (case
                                           "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (lemma both_sides_times_neg_lt2)
                                              (("1"
                                                (inst
                                                 -1
                                                 "a(1 + 2 * k)"
                                                 "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)"
                                                 "x ^ (1 + 2 * k)")
                                                (("1" (assert) nil)))))))
                                           ("2" (assert) nil)))))))))))
                                 ("2" (assert) nil) ("3" (assert) nil)))
                               ("2" (assert) nil)))))))))))))
                   ("2" (assert) nil))))))))))))))))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-8 "" 3768571892
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify) (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomNegEvenDeg)
          (("2" (inst -1 "-1*a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (case
                                           "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)")
                                          (("1"
                                            (replace -1 -3)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (simplify)
                                                    (("1" (postpone) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma scal_polynomial2)
                                            (("2"
                                              (inst? -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (simplify)
                                      (("2"
                                        (case
                                         " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                        (("1"
                                          (assert)
                                          (("1" (postpone) nil nil))
                                          nil)
                                         ("2"
                                          (case
                                           "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (lemma both_sides_times_neg_lt2)
                                              (("1"
                                                (inst
                                                 -1
                                                 "a(1 + 2 * k)"
                                                 "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)"
                                                 "x ^ (1 + 2 * k)")
                                                (("1"
                                                  (assert)
                                                  (("1" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (polynomialOddDegGreaterThanZero1-7 nil 3768571834
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify)
                                    (("1" (propax) nil)))))))))))))))))))
                   ("2" (assert) nil)))
                 ("2" (grind) nil)))))
             ("2" (assert) nil)))))
         ("2" (lemma polynomialDomMonomNegEvenDeg)
          (("2" (inst -1 "-1*a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (case
                                           "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)")
                                          (("1"
                                            (replace -1 -3)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (simplify)
                                                    (("1" (postpone) nil)))))
                                                 ("2" (grind) nil)))))))
                                           ("2"
                                            (lemma scal_polynomial2)
                                            (("2"
                                              (inst? -1)
                                              (("2" (assert) nil)))))
                                           ("3" (assert) nil)))))
                                       ("2" (assert) nil)))))
                                   ("2" (assert)
                                    (("2" (simplify)
                                      (("2"
                                        (case
                                         " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                        (("1" (assert) nil)
                                         ("2"
                                          (case
                                           "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (lemma both_sides_times_neg_lt2)
                                              (("1"
                                                (inst
                                                 -1
                                                 "a(1 + 2 * k)"
                                                 "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)"
                                                 "x ^ (1 + 2 * k)")
                                                (("1" (assert) nil)))))))
                                           ("2" (assert) nil)))))))))))
                                 ("2" (assert) nil) ("3" (assert) nil)))
                               ("2" (assert) nil)))))))))))))
                   ("2" (assert) nil))))))))))))))))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-6 nil 3768570859
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (case "x < -a(0)/a(1)")
                  (("1" (grind)
                    (("1" (lemma both_sides_times_neg_lt2)
                      (("1" (assert)
                        (("1" (grind)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                (("1" (flatten)
                                  (("1" (simplify) (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (lemma polynomialDomMonomNegEvenDeg)
          (("2" (inst -1 "-1*a" "k")
            (("2" (skeep)
              (("2" (lemma polynomialDomMonomCoeffOneOdd)
                (("2" (inst -1 "(-1*a(2*k) - 1)/a(2*k+1)" "k")
                  (("1" (skeep)
                    (("1" (inst 2 "min(m!1, m)")
                      (("1" (skeep)
                        (("1" (inst -1 "x")
                          (("1" (inst -2 "x")
                            (("1" (split)
                              (("1" (split)
                                (("1"
                                  (case "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) - 1)* x ^ (2 * k)")
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) + 1) * x ^ (2 * k) >= 0")
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (case
                                           "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)")
                                          (("1"
                                            (replace -1 -3)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)")
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (simplify)
                                                    (("1" (postpone) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma scal_polynomial2)
                                            (("2"
                                              (inst? -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (simplify)
                                      (("2"
                                        (case
                                         " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case
                                           "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)")
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (lemma both_sides_times_neg_lt2)
                                              (("1"
                                                (inst
                                                 -1
                                                 "a(1 + 2 * k)"
                                                 "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)"
                                                 "x ^ (1 + 2 * k)")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-5 nil 3768570839
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (flatten)
            (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
              (("1" (skeep)
                (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                  (("1" (replace -1 1)
                    (("1" (case "x < -a(0)/a(1)")
                      (("1" (hide -3)
                        (("1" (grind)
                          (("1" (lemma both_sides_times_neg_lt2)
                            (("1" (assert)
                              (("1" (grind)
                                (("1" (grind)
                                  (("1" (lemma both_sides_times_neg_lt2)
                                    (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (simplify)
                                          (("1"
                                            (propax)
                                            nil)))))))))))))))))))))
                       ("2" (assert) nil)))))
                   ("2" (grind) nil)))))
               ("2" (assert) nil)))))))
         ("2" (postpone) nil))))))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-4 nil 3768570810
   ("" (skeep)
    (("" (skeep)
      (("" (case "k = 0")
        (("1" (simplify)
          (("1" (flatten)
            (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
              (("1" (skeep)
                (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                  (("1" (replace -1 1)
                    (("1" (hide -1)
                      (("1" (case "x < -a(0)/a(1)")
                        (("1" (hide -3)
                          (("1" (grind)
                            (("1" (lemma both_sides_times_neg_lt2)
                              (("1" (assert)
                                (("1" (grind)
                                  (("1" (grind)
                                    (("1" (lemma both_sides_times_neg_lt2)
                                      (("1"
                                        (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (simplify)
                                            (("1"
                                              (propax)
                                              nil)))))))))))))))))))))
                         ("2" (assert) nil)))))))
                   ("2" (grind) nil)))))
               ("2" (assert) nil)))))))
         ("2" (postpone) nil))))))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-3 nil 3768570588
   ("" (skeep)
    (("" (induct "k")
      (("1" (simplify)
        (("1" (flatten)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (replace -1 1)
                  (("1" (hide -1)
                    (("1" (case "x < -a(0)/a(1)")
                      (("1" (hide -3)
                        (("1" (grind)
                          (("1" (lemma both_sides_times_neg_lt2)
                            (("1" (assert)
                              (("1" (grind)
                                (("1" (grind)
                                  (("1" (lemma both_sides_times_neg_lt2)
                                    (("1" (inst -1 "a(1)" "-a(0) / a(1)" "x")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (simplify)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-2 nil 3768570244
   ("" (skeep)
    (("" (induct "k")
      (("1" (simplify)
        (("1" (flatten)
          (("1" (inst 1 "floor(-a(0)/a(1) - 1)")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (replace -1 1)
                  (("1" (hide -1)
                    (("1" (case "x < -a(0)/a(1)")
                      (("1" (hide -3)
                        (("1" (grind)
                          (("1" (lemma both_sides_times_neg_lt2)
                            (("1" (inst? -1)
                              (("1" (inst -1 "-a(0)/a(1)")
                                (("1" (flatten)
                                  (("1" (simplify)
                                    (("1" (assert)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (case
                                             "a(1) * (-a(0) / a(1)) = -a(0)")
                                            (("1"
                                              (replace -1 1)
                                              (("1" (postpone) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (polynomialOddDegGreaterThanZero1-1 nil 3768569992
   ("" (skeep)
    (("" (induct "k")
      (("1" (simplify)
        (("1" (flatten)
          (("1" (inst 1 "floor(-a(0)/a(1))")
            (("1" (skeep)
              (("1" (case "polynomial(a, 1)(x) = a(1)*x + a(0)")
                (("1" (replace -1 1)
                  (("1" (hide -1) (("1" (postpone) nil nil)) nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (polyOddDegPos 0
  (polyOddDegPos-1 nil 3768211686
   ("" (skeep)
    (("" (skeep)
      (("" (case "a(2*k + 1) > 0")
        (("1" (hide 1)
          (("1" (lemma polyLCPos)
            (("1" (inst -1 "a" "2*k+1")
              (("1" (split)
                (("1" (assert)
                  (("1" (skosimp*) (("1" (inst 1 "p!1") nil nil)) nil)) nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "a(2*k+1) < 0")
          (("1" (hide 1 2)
            (("1" (lemma polynomialOddDegLessThanZero)
              (("1" (inst -1 "-1*a" "k")
                (("1" (split)
                  (("1" (skosimp*)
                    (("1" (inst 1 "m!1")
                      (("1" (inst -1 "m!1")
                        (("1" (split)
                          (("1" (lemma scal_polynomial2)
                            (("1" (inst -1 "a" "-1" "2*k+1" "m!1")
                              (("1" (replace -1 -2)
                                (("1" (hide -1)
                                  (("1" (lemma both_sides_times_neg_lt2)
                                    (("1"
                                      (inst
                                       -1
                                       "-1"
                                       "polynomial(a, 2 * k + 1)(m!1)"
                                       "0")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (lemma both_sides_times_neg_lt2)
                      (("2" (inst -1 "-1" "0" "a(1 + 2*k)")
                        (("2" (flatten)
                          (("2" (hide -1)
                            (("2" (split)
                              (("1" (assert) (("1" (grind) nil nil)) nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (polynomialOddDegLessThanZero formula-decl nil preprocessing_univariate
     nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (both_sides_times_neg_lt2 formula-decl nil real_props nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (polyLCPos formula-decl nil preprocessing_univariate nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (polyOddDegNeg 0
  (polyOddDegNeg-1 nil 3768211455
   ("" (skeep)
    (("" (skeep)
      (("" (case " a(2 * k + 1) > 0")
        (("1" (hide 1)
          (("1" (lemma polynomialOddDegLessThanZero)
            (("1" (inst -1 "a" "k")
              (("1" (split)
                (("1" (skosimp*)
                  (("1" (inst 1 "m!1")
                    (("1" (assert)
                      (("1" (inst -1 "m!1")
                        (("1" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case " a(2 * k + 1) < 0")
          (("1" (hide 1 2)
            (("1" (lemma polyLCNeg)
              (("1" (inst -1 "a" "2*k+1")
                (("1" (split)
                  (("1" (skosimp*) (("1" (inst 1 "p!1") nil nil)) nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (polyLCNeg formula-decl nil preprocessing_univariate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (polynomialOddDegLessThanZero formula-decl nil preprocessing_univariate
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (polyOddDegZero 0
  (polyOddDegZero-1 nil 3768212299
   ("" (skeep)
    (("" (skeep)
      (("" (lemma polyOddDegPos)
        (("" (lemma polyOddDegNeg)
          (("" (inst -1 "a" "k")
            (("" (inst -2 "a" "k")
              (("" (split)
                (("1" (split)
                  (("1" (skosimp*)
                    (("1" (case "x!1 >= x!2")
                      (("1" (lemma poly_intermediate_value_increasing_0)
                        (("1" (inst -1 "a" "2*k+1" "x!2" "x!1")
                          (("1" (split)
                            (("1" (skosimp*) (("1" (inst 2 "cc!1") nil nil))
                              nil)
                             ("2" (assert) nil nil) ("3" (assert) nil nil)
                             ("4" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "x!2 >= x!1")
                        (("1" (hide 1)
                          (("1" (lemma poly_intermediate_value_dec)
                            (("1" (inst -1 "a" "0" "2*k+1" "x!1" "x!2")
                              (("1" (split)
                                (("1" (skosimp*)
                                  (("1" (inst 2 "cc!1") nil nil)) nil)
                                 ("2" (assert) nil nil) ("3" (assert) nil nil)
                                 ("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polyOddDegNeg formula-decl nil preprocessing_univariate nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (poly_intermediate_value_increasing_0 formula-decl nil polynomials reals)
    (poly_intermediate_value_dec formula-decl nil polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (polyOddDegPos formula-decl nil preprocessing_univariate nil))
   shostak))
 (figuringOutModsBidir 0
  (figuringOutModsBidir-1 nil 3768222639
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "odd?")
          (("1" (skolem -1 "j")
            (("1" (inst 1 "j") (("1" (assert) nil nil) ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "odd?")
          (("2" (skolem -1 "k")
            (("2" (inst 1 "k") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (odd? const-decl "bool" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (j skolem-const-decl "int" preprocessing_univariate nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   shostak))
 (polyPlugInZero 0
  (polyPlugInZero-1 nil 3768302533
   ("" (skeep)
    (("" (induct "d")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (lemma polynomial_rec)
          (("2" (inst -1 "a" "j+1" "0")
            (("2" (split)
              (("1" (simplify)
                (("1" (replace -1 1)
                  (("1" (hide -1)
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (case "0 ^ (1 + j) = 0")
                          (("1" (replace -1 1) (("1" (assert) nil nil)) nil)
                           ("2" (assert)
                            (("2" (hide 2)
                              (("2" (case "1 + j > 0")
                                (("1" (assert) (("1" (grind) nil nil)) nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (polynomial_rec formula-decl nil polynomials reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (> const-decl "bool" reals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   shostak))
 (preprocessingLemma1_TCC1 0
  (preprocessingLemma1_TCC1-1 nil 3768301136 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (preprocessingLemma1 subtype "preprocessing_univariate.i"
    "integers.subrange(0, 5)")))
 (preprocessingLemma1 0
  (preprocessingLemma1-1 nil 3768301137
   ("" (skeep)
    (("" (expand "rel5")
      (("" (simplify)
        (("" (case "pList(d) > 0")
          (("1" (hide 1)
            (("1" (lemma polyLCPos)
              (("1" (inst -1 "pList" "d")
                (("1" (split)
                  (("1" (skosimp*)
                    (("1" (inst 1 "p!1") (("1" (assert) nil nil)) nil)) nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "pList(d) < 0")
            (("1" (hide 1 2)
              (("1" (lemma polyLCNeg)
                (("1" (inst -1 "pList" "d")
                  (("1" (split)
                    (("1" (skosimp*)
                      (("1" (inst 1 "p!1") (("1" (assert) nil nil)) nil)) nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel5 const-decl "bool" preprocessing_univariate nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (polyLCPos formula-decl nil preprocessing_univariate nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sequence type-eq-decl nil sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (polyLCNeg formula-decl nil preprocessing_univariate nil)
    (< const-decl "bool" reals nil))
   shostak))
 (preprocessingLemma2 0
  (preprocessingLemma2-1 nil 3768301321
   ("" (skeep)
    (("" (skeep)
      (("" (expand "odd?")
        (("" (skolem -1 "j")
          (("" (expand "rel5")
            (("" (case "i = 0")
              (("1" (lemma polyOddDegZero)
                (("1" (inst -1 "pList" "j")
                  (("1" (split)
                    (("1" (skosimp*)
                      (("1" (inst 2 "x!1") (("1" (grind) nil nil)) nil)) nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (case "i = 1 OR i = 4 OR i = 3")
                (("1" (lemma polyOddDegPos)
                  (("1" (inst -1 "pList" "j")
                    (("1" (split)
                      (("1" (skosimp*)
                        (("1" (inst 3 "x!1")
                          (("1" (split)
                            (("1" (assert) nil nil)
                             ("2" (replace -3 3)
                              (("2" (hide 1 2) (("2" (assert) nil nil)) nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (case "i = 2 OR i = 5")
                  (("1" (hide 1)
                    (("1" (lemma polyOddDegNeg)
                      (("1" (inst -1 "pList" "j")
                        (("1" (split)
                          (("1" (skosimp*)
                            (("1" (inst 3 "x!1")
                              (("1" (assert) (("1" (grind) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subrange type-eq-decl nil integers nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (>= const-decl "bool" reals nil)
    (j skolem-const-decl "int" preprocessing_univariate nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polyOddDegZero formula-decl nil preprocessing_univariate nil)
    (polyOddDegNeg formula-decl nil preprocessing_univariate nil)
    (polyOddDegPos formula-decl nil preprocessing_univariate nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   shostak))
 (preprocessingLemma3 0
  (preprocessingLemma3-1 nil 3768302275
   ("" (skeep)
    (("" (skeep)
      (("" (expand "rel5")
        (("" (split)
          (("1" (lemma polyLCPos)
            (("1" (inst -1 "pList" "d")
              (("1" (split)
                (("1" (skosimp*)
                  (("1" (inst 2 "p!1")
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (inst 2 "0")
            (("2" (case "polynomial(pList, d)(0) = pList(0)")
              (("1" (assert) (("1" (grind) nil nil)) nil)
               ("2" (hide 2 3)
                (("2" (assert)
                  (("2" (lemma polyPlugInZero)
                    (("2" (inst -1 "pList" "d") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (polyLCPos formula-decl nil preprocessing_univariate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polyPlugInZero formula-decl nil preprocessing_univariate nil)
    (rel5 const-decl "bool" preprocessing_univariate nil))
   shostak))
 (preprocessingLemma4 0
  (preprocessingLemma4-1 nil 3768302737
   ("" (skeep)
    (("" (skeep)
      (("" (split)
        (("1" (lemma polyLCNeg)
          (("1" (inst -1 "pList" "d")
            (("1" (split)
              (("1" (skosimp*)
                (("1" (inst 2 "p!1")
                  (("1" (expand "rel5")
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (expand "rel5")
          (("2" (inst 2 "0")
            (("2" (case "polynomial(pList, d)(0) = pList(0)")
              (("1" (assert) (("1" (grind) nil nil)) nil)
               ("2" (hide 2 3)
                (("2" (lemma polyPlugInZero)
                  (("2" (inst -1 "pList" "d") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (polyPlugInZero formula-decl nil preprocessing_univariate nil)
    (polyLCNeg formula-decl nil preprocessing_univariate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (preprocessingLemmaOddGeneralize 0
  (preprocessingLemmaOddGeneralize-3 nil 3768738385
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (split)
          (("1" (flatten -1)
            (("1" (split -2)
              (("1" (lemma polynomialOddDegLessThanZero)
                (("1" (expand "odd?")
                  (("1" (skeep -3)
                    (("1" (inst -1 "a" "j")
                      (("1" (split)
                        (("1" (skeep -1)
                          (("1" (inst 2 "m")
                            (("1" (skeep)
                              (("1" (inst -1 "x")
                                (("1" (split)
                                  (("1" (expand "rel5")
                                    (("1" (assert) (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "odd?")
                (("2" (skeep)
                  (("2" (lemma polynomialOddDegGreaterThanZero1)
                    (("2" (inst -1 "a" "j")
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (inst 2 "m")
                            (("1" (skeep)
                              (("1" (inst -1 "x")
                                (("1" (split)
                                  (("1" (expand "rel5")
                                    (("1" (assert) (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten -1)
            (("2" (expand "even?")
              (("2" (skeep)
                (("2" (split)
                  (("1" (flatten -1)
                    (("1" (lemma polynomialDomMonomNegEvenDeg)
                      (("1" (inst -1 "1/a(k)*a" "j")
                        (("1" (skeep)
                          (("1" (inst 2 "m")
                            (("1" (skeep)
                              (("1" (inst -1 "x")
                                (("1" (split)
                                  (("1"
                                    (case "x^(2*j) + polynomial(1 / a(k) * a, 2 * j - 1)(x) > 0")
                                    (("1" (hide -2)
                                      (("1"
                                        (case
                                         "a(k)*(x ^ (2 * j) + polynomial(1 / a(k) * a, 2 * j - 1)(x)) > 0")
                                        (("1"
                                          (case
                                           "polynomial(1 / a(k) * a, 2 * j - 1)(x) = 1/a(k)*polynomial(a, 2*j-1)(x)")
                                          (("1"
                                            (replace -1 -2)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (simplify -1)
                                                (("1"
                                                  (case
                                                   "a(k) * (1 / a(k)) = 1")
                                                  (("1"
                                                    (case
                                                     "a(k) * x ^ (2 * j) + polynomial(a, 2 * j - 1)(x) >0")
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (replace -5 -2)
                                                        (("1"
                                                          (replace -5 2)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (replace -4 -1)
                                                              (("1"
                                                                (case
                                                                 "polynomial(a, 2 * j)(x) > 0")
                                                                (("1"
                                                                  (expand
                                                                   "rel5")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   polynomial_rec)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "a"
                                                                     "2*j"
                                                                     "x")
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma scal_polynomial2)
                                            (("2"
                                              (inst
                                               -1
                                               "a"
                                               "1/a(k)"
                                               "2*j-1"
                                               "x")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma both_sides_times_pos_lt2)
                                          (("2"
                                            (inst
                                             -1
                                             "a(k)"
                                             "0"
                                             "x ^ (2 * j) + polynomial(1 / a(k) * a, 2 * j - 1)(x)")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma polynomialDomMonomNegEvenDeg)
                    (("2" (inst -1 "(1/a(k))*a" "j")
                      (("1" (skeep)
                        (("1" (inst 2 "m")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1" (split)
                                (("1" (lemma scal_polynomial2)
                                  (("1" (inst -1 "a" "1 / a(k)" "2*j-1" "x")
                                    (("1" (replace -1 -2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (case
                                           "-x ^ (2 * j) - 1 / a(k) * polynomial(a, 2 * j - 1)(x) < 0")
                                          (("1"
                                            (case
                                             "-1*(-x ^ (2 * j) - 1 / a(k) * polynomial(a, 2 * j - 1)(x)) > 0")
                                            (("1"
                                              (simplify -1)
                                              (("1"
                                                (case
                                                 "- -x ^ (2 * j) = x^(2*j)")
                                                (("1"
                                                  (replace -1 -2)
                                                  (("1"
                                                    (case
                                                     "polynomial(a, 2 * j - 1)(x) * (1 / a(k)) + x ^ (2 * j) > 0")
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (hide -2 3)
                                                        (("1"
                                                          (case
                                                           "a(k)*(polynomial(a, 2 * j - 1)(x) * (1 / a(k)) + x ^ (2 * j)) < 0")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (simplify -1)
                                                              (("1"
                                                                (case
                                                                 "  a(k) * (1 / a(k)) = 1")
                                                                (("1"
                                                                  (case
                                                                   " a(k) * x ^ (2 * j) + polynomial(a, 2 * j - 1)(x) < 0")
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -3)
                                                                    (("1"
                                                                      (case
                                                                       "polynomial(a, 2 * j)(x) < 0")
                                                                      (("1"
                                                                        (expand
                                                                         "rel5")
                                                                        (("1"
                                                                          (replace
                                                                           -6
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -5
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           polynomial_rec)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "a"
                                                                             "2*j"
                                                                             "x")
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             both_sides_times_neg_lt2)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "a(k)"
                                                               "(polynomial(a, 2 * j - 1)(x) * (1 / a(k)) + x ^ (2 * j))"
                                                               "0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil) ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (odd? const-decl "bool" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (j skolem-const-decl "int" preprocessing_univariate nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (polynomialOddDegLessThanZero formula-decl nil preprocessing_univariate
     nil)
    (j skolem-const-decl "int" preprocessing_univariate nil)
    (polynomialOddDegGreaterThanZero1 formula-decl nil
     preprocessing_univariate nil)
    (even? const-decl "bool" integers nil)
    (polynomialDomMonomNegEvenDeg formula-decl nil preprocessing_univariate
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial_rec formula-decl nil polynomials reals)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (j skolem-const-decl "int" preprocessing_univariate nil)
    (/= const-decl "boolean" notequal nil)
    (a skolem-const-decl "sequence[real]" preprocessing_univariate nil)
    (k skolem-const-decl "nat" preprocessing_univariate nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (<= const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_neg_lt2 formula-decl nil real_props nil))
   nil)
  (preprocessingLemmaOddGeneralize-2 nil 3768737050
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (split)
          (("1" (flatten -1)
            (("1" (split -2)
              (("1" (lemma polynomialOddDegLessThanZero)
                (("1" (expand "odd?")
                  (("1" (skeep -3)
                    (("1" (inst -1 "a" "j")
                      (("1" (split)
                        (("1" (skeep -1)
                          (("1" (inst 2 "m")
                            (("1" (skeep)
                              (("1" (inst -1 "x")
                                (("1" (split)
                                  (("1" (expand "rel5")
                                    (("1" (assert) (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "odd?")
                (("2" (skeep)
                  (("2" (lemma polynomialOddDegGreaterThanZero1)
                    (("2" (inst -1 "a" "j")
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (inst 2 "m")
                            (("1" (skeep)
                              (("1" (inst -1 "x")
                                (("1" (split)
                                  (("1" (expand "rel5")
                                    (("1" (assert) (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten -1)
            (("2" (expand "even?")
              (("2" (skeep)
                (("2" (split)
                  (("1" (postpone) nil nil)
                   ("2" (lemma polynomialDomMonomNegEvenDeg)
                    (("2" (inst -1 "(-1/a(k))*a" "j")
                      (("1" (skeep)
                        (("1" (inst 2 "m")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1" (split)
                                (("1" (lemma scal_polynomial2)
                                  (("1" (inst -1 "a" "-1 / a(k)" "2*j-1" "x")
                                    (("1" (replace -1 -2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (case
                                           "-x ^ (2 * j) + 1 / a(k) * polynomial(a, 2 * j - 1)(x) < 0")
                                          (("1" (postpone) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil) ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (preprocessingLemmaOddGeneralize-1 nil 3768736241
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (split)
          (("1" (flatten -1)
            (("1" (split -2)
              (("1" (lemma polynomialOddDegLessThanZero)
                (("1" (expand "odd?")
                  (("1" (skeep -3)
                    (("1" (inst -1 "a" "j")
                      (("1" (split)
                        (("1" (skeep -1)
                          (("1" (inst 2 "m")
                            (("1" (skeep)
                              (("1" (inst -1 "x")
                                (("1" (split)
                                  (("1" (expand "rel5")
                                    (("1" (assert) (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "odd?")
                (("2" (skeep)
                  (("2" (lemma polynomialOddDegGreaterThanZero1)
                    (("2" (inst -1 "a" "j")
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (inst 2 "m")
                            (("1" (skeep)
                              (("1" (inst -1 "x")
                                (("1" (split)
                                  (("1" (expand "rel5")
                                    (("1" (assert) (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten -1)
            (("2" (expand "even?")
              (("2" (skeep)
                (("2" (split)
                  (("1" (postpone) nil nil)
                   ("2" (lemma polynomialDomMonomNegEvenDeg)
                    (("2" (inst -1 "-1/a(k)*a" "j")
                      (("1" (skeep)
                        (("1" (inst 2 "m")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1" (split)
                                (("1" (postpone) nil nil)
                                 ("2" (postpone) nil nil)
                                 ("3" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (preprocessingLemma5 0
  (preprocessingLemma5-1 nil 3768302873
   ("" (skeep)
    (("" (skeep)
      (("" (inst 2 "0")
        (("" (expand "rel5")
          (("" (case "polynomial(pList, d)(0) = pList(0)")
            (("1" (assert) nil nil)
             ("2" (hide 2 3)
              (("2" (lemma polyPlugInZero)
                (("2" (inst -1 "pList" "d") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel5 const-decl "bool" preprocessing_univariate nil)
    (polyPlugInZero formula-decl nil preprocessing_univariate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (preprocessingTheorem 0
  (preprocessingTheorem-1 nil 3768300075
   ("" (skeep)
    (("" (skeep)
      (("" (expand "preprocessingStep")
        ((""
          (case "i = 3 OR odd?(d) OR ((pList(d) > 0 OR pList(0) > 0) AND (i = 1 OR i = 4)) OR ((pList(d) < 0 OR pList(0) < 0) AND (i = 2 OR i = 5)) OR (pList(0) = 0 AND i = 0)")
          (("1" (split)
            (("1" (lemma preprocessingLemma1)
              (("1" (inst -1 "d" "i" "pList") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (lemma preprocessingLemma2)
              (("2" (inst -1 "d" "pList")
                (("2" (assert) (("2" (inst -1 "i") nil nil)) nil)) nil))
              nil)
             ("3" (assert)
              (("3" (lemma preprocessingLemma3)
                (("3" (inst -1 "d" "pList")
                  (("3" (split)
                    (("1" (inst -1 "i")
                      (("1" (assert)
                        (("1" (split)
                          (("1" (propax) nil nil)
                           ("2" (flatten) (("2" (assert) nil nil)) nil)
                           ("3" (flatten) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (lemma preprocessingLemma4)
              (("4" (inst -1 "d" "pList")
                (("4" (split)
                  (("1" (inst -1 "i")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil)
                       ("3" (flatten) (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("5" (lemma preprocessingLemma5)
              (("5" (inst -1 "d" "pList")
                (("5" (split)
                  (("1" (inst -1 "i")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil) (odd? const-decl "bool" integers nil)
    (subrange type-eq-decl nil integers nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (preprocessingLemma5 formula-decl nil preprocessing_univariate nil)
    (preprocessingLemma4 formula-decl nil preprocessing_univariate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (preprocessingLemma3 formula-decl nil preprocessing_univariate nil)
    (preprocessingLemma2 formula-decl nil preprocessing_univariate nil)
    (preprocessingLemma1 formula-decl nil preprocessing_univariate nil)
    (preprocessingStep const-decl "bool" preprocessing_univariate nil))
   shostak))
 (polyLCPosConj 0
  (polyLCPosConj-4 nil 3768314201
   ("" (induct "q")
    (("1" (skeep)
      (("1" (case " listOfpLists(0)(dList(0)) > 0 AND dList(0) > 0")
        (("1" (hide -2)
          (("1" (lemma polynomialDomLC2)
            (("1" (inst -1 "listOfpLists(0)" "dList(0) - 1")
              (("1" (simplify)
                (("1" (split)
                  (("1" (skolem -1 "m")
                    (("1" (inst 1 "m")
                      (("1" (skolem 1 "x")
                        (("1" (inst -1 "x")
                          (("1" (split)
                            (("1" (assert)
                              (("1" (flatten)
                                (("1"
                                  (case " polynomial(listOfpLists(0), dList(0))(x) > 0")
                                  (("1" (assert) nil nil)
                                   ("2" (assert)
                                    (("2" (hide 2)
                                      (("2"
                                        (lemma polynomial_rec)
                                        (("2"
                                          (inst
                                           -1
                                           "listOfpLists(0)"
                                           "dList(0)"
                                           "x")
                                          (("2"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "dList" "listOfpLists")
          (("2" (split)
            (("1" (skosimp*)
              (("1" (lemma polynomialDomLC2)
                (("1" (inst -1 "listOfpLists(j_1+1)" "dList(j_1 + 1) -1")
                  (("1" (split)
                    (("1" (skosimp*)
                      (("1" (inst 1 "max(m!1, m!2)")
                        (("1" (skolem 1 "x")
                          (("1" (flatten)
                            (("1" (inst -1 "x")
                              (("1" (inst -2 "x")
                                (("1" (split)
                                  (("1" (assert)
                                    (("1"
                                      (case
                                       "(FORALL (j: upto(j_1)):
        polynomial(listOfpLists(j), dList(j))(x) > 0) AND
         polynomial(listOfpLists(1 + j_1), dList(1 + j_1))(x) > 0")
                                      (("1"
                                        (hide -2 -3 -4 -5)
                                        (("1"
                                          (skeep :preds? T)
                                          (("1"
                                            (case "j < 1 + j_1")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (hide -3)
                                                (("1"
                                                  (inst -2 "j")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "j = 1 + j_1")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (replace -1 2)
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (lemma polynomial_rec)
                                            (("2"
                                              (inst
                                               -1
                                               "listOfpLists(1+j_1)"
                                               "dList(1+j_1)"
                                               "x")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -3 "1 + j_1")
                                                    (("2" (flatten) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (hide -1)
                        (("2" (inst -1 "j_1 + 1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide 2)
                (("2" (skosimp*) (("2" (inst -1 "j!1") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (dList skolem-const-decl "[nat -> nat]" preprocessing_univariate nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j_1 skolem-const-decl "nat" preprocessing_univariate nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (j skolem-const-decl "upto(1 + j_1)" preprocessing_univariate nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dList skolem-const-decl "[nat -> nat]" preprocessing_univariate nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (polynomial_rec formula-decl nil polynomials reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (polynomialDomLC2 formula-decl nil preprocessing_univariate nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (polyLCPosConj-3 nil 3768314146
   ("" (induct "q")
    (("1" (skeep)
      (("1" (case " listOfpLists(0)(dList(0)) > 0 AND dList(0) > 0")
        (("1" (hide -2)
          (("1" (lemma polynomialDomLC2)
            (("1" (inst -1 "listOfpLists(0)" "dList(0) - 1")
              (("1" (simplify)
                (("1" (split)
                  (("1" (skolem -1 "m")
                    (("1" (inst 1 "m")
                      (("1" (skolem 1 "x")
                        (("1" (inst -1 "x")
                          (("1" (split)
                            (("1" (assert)
                              (("1" (flatten)
                                (("1"
                                  (case " polynomial(listOfpLists(0), dList(0))(x) > 0")
                                  (("1" (assert) nil nil)
                                   ("2" (assert)
                                    (("2" (hide 2)
                                      (("2"
                                        (lemma polynomial_rec)
                                        (("2"
                                          (inst
                                           -1
                                           "listOfpLists(0)"
                                           "dList(0)"
                                           "x")
                                          (("2"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "dList" "listOfpLists")
          (("2" (split)
            (("1" (skosimp*)
              (("1" (lemma polynomialDomLC2)
                (("1" (inst -1 "listOfpLists(j_1+1)" "dList(j_1)")
                  (("1" (split)
                    (("1" (skosimp*)
                      (("1" (inst 1 "max(m!1, m!2)")
                        (("1" (skolem 1 "x")
                          (("1" (flatten)
                            (("1" (inst -1 "x")
                              (("1" (inst -2 "x")
                                (("1" (split)
                                  (("1" (assert) (("1" (postpone) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (hide -1)
                        (("2" (inst -1 "j_1 + 1")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2" (assert) (("2" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide 2)
                (("2" (skosimp*) (("2" (inst -1 "j!1") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polyLCPosConj-2 nil 3768313993
   ("" (induct "q")
    (("1" (skeep)
      (("1" (case " listOfpLists(0)(dList(0)) > 0 AND dList(0) > 0")
        (("1" (hide -2)
          (("1" (lemma polynomialDomLC2)
            (("1" (inst -1 "listOfpLists(0)" "dList(0) - 1")
              (("1" (simplify)
                (("1" (split)
                  (("1" (skolem -1 "m")
                    (("1" (inst 1 "m")
                      (("1" (skolem 1 "x")
                        (("1" (inst -1 "x")
                          (("1" (split)
                            (("1" (assert)
                              (("1" (flatten)
                                (("1"
                                  (case " polynomial(listOfpLists(0), dList(0))(x) > 0")
                                  (("1" (assert) nil nil)
                                   ("2" (assert)
                                    (("2" (hide 2)
                                      (("2"
                                        (lemma polynomial_rec)
                                        (("2"
                                          (inst
                                           -1
                                           "listOfpLists(0)"
                                           "dList(0)"
                                           "x")
                                          (("2"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "dList" "listOfpLists")
          (("2" (split)
            (("1" (skosimp*)
              (("1" (lemma polynomialDomLC2)
                (("1" (inst -1 "listOfpLists(j_1+1)" "dList(j_1) - 1")
                  (("1" (split)
                    (("1" (skosimp*)
                      (("1" (inst 1 "max(m!1, m!2)")
                        (("1" (skolem 1 "x")
                          (("1" (flatten)
                            (("1" (inst -1 "x")
                              (("1" (inst -2 "x")
                                (("1" (split)
                                  (("1" (assert) (("1" (postpone) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (hide -1)
                        (("2" (inst -1 "j_1 + 1")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2" (assert) (("2" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide 2)
                (("2" (skosimp*) (("2" (inst -1 "j!1") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (polyLCPosConj-1 nil 3768312409
   ("" (induct "q")
    (("1" (skeep)
      (("1" (case " listOfpLists(0)(dList(0)) > 0 AND dList(0) > 0")
        (("1" (hide -2)
          (("1" (lemma polynomialDomLC2)
            (("1" (inst -1 "listOfpLists(0)" "dList(0) - 1")
              (("1" (simplify)
                (("1" (split)
                  (("1" (skolem -1 "m")
                    (("1" (inst 1 "m")
                      (("1" (skolem 1 "x")
                        (("1" (inst -1 "x")
                          (("1" (split)
                            (("1" (assert)
                              (("1" (flatten)
                                (("1"
                                  (case " polynomial(listOfpLists(0), dList(0))(x) > 0")
                                  (("1" (assert) nil nil)
                                   ("2" (assert)
                                    (("2" (hide 2)
                                      (("2"
                                        (lemma polynomial_rec)
                                        (("2"
                                          (inst
                                           -1
                                           "listOfpLists(0)"
                                           "dList(0)"
                                           "x")
                                          (("2"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "dList" "listOfpLists")
          (("2" (split)
            (("1" (skosimp*)
              (("1" (lemma polynomialDomLC2)
                (("1" (inst -1 "listOfpLists(j_1+1)" "dList(j_1)")
                  (("1" (split)
                    (("1" (skosimp*)
                      (("1" (inst 1 "max(m!1, m!2)")
                        (("1" (skolem 1 "x")
                          (("1" (flatten)
                            (("1" (inst -1 "x")
                              (("1" (inst -2 "x")
                                (("1" (split)
                                  (("1" (postpone) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (hide -1)
                        (("2" (inst -1 "j_1 + 1")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2" (assert) (("2" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide 2)
                (("2" (skosimp*) (("2" (inst -1 "j!1") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (polyLCNegConj 0
  (polyLCNegConj-1 nil 3768320168
   ("" (induct "q")
    (("1" (skeep)
      (("1" (case " listOfpLists(0)(dList(0)) < 0 AND dList(0) > 0")
        (("1" (hide -2)
          (("1" (lemma polynomialDomLC2Neg)
            (("1" (inst -1 "listOfpLists(0)" "dList(0) -1")
              (("1" (simplify)
                (("1" (split)
                  (("1" (skosimp*)
                    (("1" (inst 1 "m!1")
                      (("1" (skosimp*)
                        (("1" (inst -1 "x!1")
                          (("1" (split)
                            (("1" (assert) nil nil) ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "dList" "listOfpLists")
          (("2" (split)
            (("1" (skeep)
              (("1" (lemma polynomialDomLC2Neg)
                (("1" (inst -1 "listOfpLists(j_1+1)" "dList(j_1+1)-1")
                  (("1" (simplify)
                    (("1" (split)
                      (("1" (skeep)
                        (("1" (inst 1 "max(m, m!1)")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1" (inst -2 "x")
                                (("1" (split)
                                  (("1" (split)
                                    (("1" (skeep)
                                      (("1"
                                        (typepred "j")
                                        (("1"
                                          (case "j = 1 + j_1")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (hide -1 -2 -3 -5 -6)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "j < 1 + j_1")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (inst -2 "j")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep)
                (("2" (typepred "j") (("2" (inst -2 "j") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (dList skolem-const-decl "[nat -> nat]" preprocessing_univariate nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j_1 skolem-const-decl "nat" preprocessing_univariate nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (j skolem-const-decl "upto(1 + j_1)" preprocessing_univariate nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dList skolem-const-decl "[nat -> nat]" preprocessing_univariate nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (polynomialDomLC2Neg formula-decl nil preprocessing_univariate nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil) (> const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (preprocessingConjLemmaOddGeneralize 0
  (preprocessingConjLemmaOddGeneralize-1 nil 3768739166
   ("" (induct "numPolys")
    (("1" (skeep)
      (("1" (inst -1 "0")
        (("1" (inst -2 "0")
          (("1" (lemma preprocessingLemmaOddGeneralize)
            (("1" (inst -1 "listOfpLists(0)" "RelF6(0)" "dList(0)")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 2 "m")
                    (("1" (skeep)
                      (("1" (inst -1 "x")
                        (("1" (split)
                          (("1" (skeep) (("1" (assert) nil nil)) nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "RelF6" "dList" "listOfpLists")
          (("2" (split)
            (("1" (skeep -1)
              (("1" (inst -2 "1 + j_1")
                (("1" (inst -3 "1 + j_1")
                  (("1" (lemma preprocessingLemmaOddGeneralize)
                    (("1" (inst?)
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (inst 2 "min(m, m!1)")
                            (("1" (skeep)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (split)
                                    (("1" (split)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "j = 1 + j_1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (case "j <= j_1")
                                            (("1" (inst -2 "j") nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep)
                (("2" (inst -2 "j")
                  (("2" (split -2)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2) (("3" (skeep) (("3" (inst -1 "j") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j_1 skolem-const-decl "nat" preprocessing_univariate nil)
    (j skolem-const-decl "upto(1 + j_1)" preprocessing_univariate nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (preprocessingLemmaOddGeneralize formula-decl nil preprocessing_univariate
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (even? const-decl "bool" integers nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (odd? const-decl "bool" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (preprocessingConjLC 0
  (preprocessingConjLC-4 nil 3768666903
   ("" (induct "numPolys")
    (("1" (skeep)
      (("1" (inst -1 "0")
        (("1" (inst -2 "0")
          (("1" (split -2)
            (("1" (flatten -1)
              (("1" (lemma polynomialDomLC2)
                (("1" (inst -1 "listOfpLists(0)" "dList(0) - 1")
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (split)
                              (("1" (simplify -1)
                                (("1" (skeep)
                                  (("1" (expand "rel5")
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "listOfpLists(0)(dList(0) - 1 + 1) * x ^ (dList(0) - 1 + 1) +  polynomial(listOfpLists(0), dList(0) - 1)(x) > 0")
                                        (("1"
                                          (case
                                           "polynomial(listOfpLists(0), dList(0))(x) > 0")
                                          (("1"
                                            (assert)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (lemma polynomial_rec)
                                              (("2"
                                                (inst
                                                 -1
                                                 "listOfpLists(0)"
                                                 "dList(0)"
                                                 "x")
                                                (("2"
                                                  (simplify -2)
                                                  (("2"
                                                    (split)
                                                    (("1" (assert) nil nil)
                                                     ("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten -1)
              (("2" (lemma polynomialDomLC2Neg)
                (("2" (inst -1 "listOfpLists(0)" "dList(0) - 1")
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (split)
                              (("1" (skeep)
                                (("1" (expand "rel5")
                                  (("1" (assert) (("1" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "RelF6" "dList" "listOfpLists")
          (("2" (split)
            (("1" (skeep -1)
              (("1" (inst -3 "1 + j_1")
                (("1" (split -3)
                  (("1" (flatten -1)
                    (("1" (inst -4 "1 + j_1")
                      (("1" (lemma polynomialDomLC2)
                        (("1"
                          (inst -1 "listOfpLists(1 + j_1)"
                           "dList(1 + j_1) - 1")
                          (("1" (split)
                            (("1" (skeep -1)
                              (("1" (inst 2 "max(m!1, m)")
                                (("1" (skeep)
                                  (("1" (inst -1 "x")
                                    (("1" (inst -4 "x")
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (case "j = 1 + j_1")
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (expand "rel5")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "listOfpLists(1 + j_1)(dList(1 + j_1)) * x ^ dList(1 + j_1) + polynomial(listOfpLists(1 + j_1), dList(1 + j_1) - 1)(x) > 0")
                                                      (("1"
                                                        (case
                                                         "  polynomial(listOfpLists(1 + j_1), dList(1 + j_1))(x) > 0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           polynomial_rec)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "j <= j_1")
                                                (("1" (inst -2 "j") nil nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten -1)
                    (("2" (inst -4 "1 + j_1")
                      (("2" (lemma polynomialDomLC2Neg)
                        (("2"
                          (inst -1 "listOfpLists(1 + j_1)"
                           "dList(1 + j_1) - 1")
                          (("1" (split)
                            (("1" (skeep -1)
                              (("1" (inst 2 "max(m!1, m)")
                                (("1" (skeep)
                                  (("1" (inst -1 "x")
                                    (("1" (inst -4 "x")
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (case " j = 1 + j_1")
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (expand "rel5")
                                                  (("1"
                                                    (assert)
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "j <= j_1")
                                                (("1" (inst -2 "j") nil nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep)
                (("2" (inst -2 "j")
                  (("2" (split -2)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (skeep 1) (("3" (inst -1 "j") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dList skolem-const-decl "[nat -> nat]" preprocessing_univariate nil)
    (j_1 skolem-const-decl "nat" preprocessing_univariate nil)
    (j skolem-const-decl "upto(1 + j_1)" preprocessing_univariate nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (j skolem-const-decl "upto(1 + j_1)" preprocessing_univariate nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (polynomialDomLC2Neg formula-decl nil preprocessing_univariate nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dList skolem-const-decl "[nat -> nat]" preprocessing_univariate nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma reals)
    (expt def-decl "real" exponentiation nil)
    (polynomial_rec formula-decl nil polynomials reals)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (polynomialDomLC2 formula-decl nil preprocessing_univariate nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (preprocessingConjLC-3 nil 3768666801
   ("" (induct "numPolys")
    (("1" (skeep)
      (("1" (inst -1 "0")
        (("1" (inst -2 "0")
          (("1" (split -2)
            (("1" (flatten -1)
              (("1" (lemma polynomialDomLC2)
                (("1" (inst -1 "listOfpLists(0)" "dList(0) - 1")
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (split)
                              (("1" (simplify -1)
                                (("1" (skeep)
                                  (("1" (expand "rel5")
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "listOfpLists(0)(dList(0) - 1 + 1) * x ^ (dList(0) - 1 + 1) +  polynomial(listOfpLists(0), dList(0) - 1)(x) > 0")
                                        (("1"
                                          (case
                                           "polynomial(listOfpLists(0), dList(0))(m) > 0")
                                          (("1" (postpone) nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (lemma polynomial_rec)
                                              (("2"
                                                (inst
                                                 -1
                                                 "listOfpLists(0)"
                                                 "dList(0)"
                                                 "x")
                                                (("2"
                                                  (simplify -2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      (("1" (postpone) nil)))
                                                     ("2"
                                                      (propax)
                                                      nil)))))))))))))
                                         ("2"
                                          (hide 3 2)
                                          (("2" (assert) nil)))))))))))))
                               ("2" (propax) nil)))))))))))
                     ("2" (assert) nil)))
                   ("2" (assert) nil)))))))
             ("2" (flatten -1)
              (("2" (lemma polynomialDomLC2Neg)
                (("2" (inst -1 "listOfpLists(0)" "dList(0) - 1")
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (split)
                              (("1" (skeep)
                                (("1" (expand "rel5")
                                  (("1" (assert) (("1" (grind) nil)))))))
                               ("2" (propax) nil)))))))))))
                     ("2" (assert) nil)))
                   ("2" (assert) nil)))))))))))))))
     ("2" (skeep) (("2" (skeep) (("2" (postpone) nil))))))
    nil)
   nil nil)
  (preprocessingConjLC-2 nil 3768666755
   ("" (induct "numPolys")
    (("1" (skeep)
      (("1" (inst -1 "0")
        (("1" (inst -2 "0")
          (("1" (split -2)
            (("1" (flatten -1)
              (("1" (lemma polynomialDomLC2)
                (("1" (inst -1 "listOfpLists(0)" "dList(0) - 1")
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (split)
                              (("1" (simplify -1)
                                (("1" (skeep)
                                  (("1" (expand "rel5")
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "listOfpLists(0)(dList(0) - 1 + 1) * x ^ (dList(0) - 1 + 1) +  polynomial(listOfpLists(0), dList(0) - 1)(x) > 0")
                                        (("1"
                                          (case
                                           "polynomial(listOfpLists(0), dList(0))(m) > 0")
                                          (("1" (postpone) nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (lemma polynomial_rec)
                                              (("2"
                                                (inst
                                                 -1
                                                 "listOfpLists(0)"
                                                 "dList(0)"
                                                 "x")
                                                (("2"
                                                  (simplify -2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      (("1" (postpone) nil)))
                                                     ("2"
                                                      (propax)
                                                      nil)))))))))))))
                                         ("2"
                                          (hide 3 2)
                                          (("2" (assert) nil)))))))))))))
                               ("2" (propax) nil)))))))))))
                     ("2" (assert) nil)))
                   ("2" (assert) nil)))))))
             ("2" (flatten -1)
              (("2" (lemma polynomialDomLC2Neg)
                (("2" (inst -1 "listOfpLists(0)" "dList(0) - 1")
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst 2 "x")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (split)
                              (("1" (skeep)
                                (("1" (expand "rel5")
                                  (("1" (assert) (("1" (grind) nil)))))))
                               ("2" (propax) nil)))))))))))
                     ("2" (assert) nil)))
                   ("2" (assert) nil)))))))))))))))
     ("2" (skeep) (("2" (skeep) (("2" (postpone) nil))))))
    nil)
   nil nil)
  (preprocessingConjLC-1 nil 3768664377
   ("" (induct "numPolys")
    (("1" (skeep)
      (("1" (inst -1 "0")
        (("1" (inst -2 "0")
          (("1" (split -2)
            (("1" (flatten -1)
              (("1" (lemma polynomialDomLC2)
                (("1" (inst -1 "listOfpLists(0)" "dList(0) - 1")
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (split)
                              (("1" (simplify -1)
                                (("1" (skeep)
                                  (("1" (expand "rel5")
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "listOfpLists(0)(dList(0) - 1 + 1) * x ^ (dList(0) - 1 + 1) +  polynomial(listOfpLists(0), dList(0) - 1)(x) > 0")
                                        (("1"
                                          (case
                                           "polynomial(listOfpLists(0), dList(0))(m) > 0")
                                          (("1" (postpone) nil nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (lemma polynomial_rec)
                                              (("2"
                                                (inst
                                                 -1
                                                 "listOfpLists(0)"
                                                 "dList(0)"
                                                 "x")
                                                (("2"
                                                  (simplify -2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten -1)
              (("2" (lemma polynomialDomLC2Neg)
                (("2" (inst -1 "listOfpLists(0)" "dList(0) - 1")
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (split)
                              (("1" (skeep)
                                (("1" (expand "rel5")
                                  (("1" (assert) (("1" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep) (("2" (skeep) (("2" (postpone) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (preprocessingConjLemma5 0
  (preprocessingConjLemma5-1 nil 3768310658
   ("" (skeep)
    (("" (inst 1 "0")
      (("" (skeep)
        (("" (inst -1 "j")
          (("" (inst -2 "j")
            ((""
              (case "polynomial(listOfpLists(j), dList(j))(0) = listOfpLists(j)(0)")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (lemma polyPlugInZero)
                  (("2" (inst -1 "listOfpLists(j)" "dList(j)") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polyPlugInZero formula-decl nil preprocessing_univariate nil))
   shostak))
 (preprocessingConjTheorem 0
  (preprocessingConjTheorem-14 "" 3768741917
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): listOfpLists(q)(dList(q))/=0 AND dList(q)>0) IMPLIES  (FORALL (q:upto(numPolys)): (odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (
(even?(dList(q)) AND dList(q) > 0) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemmaOddGeneralize)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma preprocessingConjLC)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("3" (lemma preprocessingConjLemma5)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("4" (propax) nil nil))
          nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((preprocessingStepConj const-decl "bool" preprocessing_univariate nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (preprocessingConjLemmaOddGeneralize formula-decl nil
     preprocessing_univariate nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (preprocessingConjLC formula-decl nil preprocessing_univariate nil)
    (preprocessingConjLemma5 formula-decl nil preprocessing_univariate nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (odd? const-decl "bool" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subrange type-eq-decl nil integers nil) (< const-decl "bool" reals nil)
    (even? const-decl "bool" integers nil)
    (rel5 const-decl "bool" preprocessing_univariate nil))
   nil)
  (preprocessingConjTheorem-13 "" 3768741711
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemmaOddGeneralize)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("2" (lemma preprocessingConjLC)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("3" (lemma preprocessingConjLemma5)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))))
         ("2" (assert) (("2" (grind) nil))))))))
    nil)
   nil nil)
  (preprocessingConjTheorem-12 "" 3768741608
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemmaOddGeneralize)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("2" (lemma preprocessingConjLC)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("3" (lemma preprocessingConjLemma5)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))))
         ("2" (assert) (("2" (grind) nil))))))))
    nil)
   nil nil)
  (preprocessingConjTheorem-11 "" 3768667923
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemmaOdd)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma preprocessingConjLC)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("3" (lemma preprocessingConjLemma5)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals))
   shostak)
  (preprocessingConjTheorem-10 "" 3768667856
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemmaOdd)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("2" (lemma preprocessingConjLC)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (propax) nil)
                 ("2" (skeep)
                  (("2" (inst -1 "j") (("2" (assert) (("2" (grind) nil)))))))
                 ("3" (propax) nil)))))))
           ("3" (lemma preprocessingConjLemma5)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))))
         ("2" (assert) (("2" (grind) nil))))))))
    nil)
   nil nil)
  (preprocessingConjTheorem-9 "" 3768667488
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemmaOdd)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("2" (lemma preprocessingConjLC)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (propax) nil)
                 ("2" (skeep)
                  (("2" (inst -1 "j") (("2" (assert) (("2" (grind) nil)))))))
                 ("3" (propax) nil)))))))
           ("3" (lemma preprocessingConjLemma5)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))))
         ("2" (assert) (("2" (grind) nil))))))))
    nil)
   nil nil)
  (preprocessingConjTheorem-8 "" 3768667423
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemmaOdd)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("2" (lemma preprocessingConjLC)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (propax) nil)
                 ("2" (skeep)
                  (("2" (inst -1 "j")
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (hide -2 -3 -4 -5) (("2" (grind) nil)))))))))))
                 ("3" (propax) nil)))))))
           ("3" (lemma preprocessingConjLemma5)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))))
         ("2" (assert) (("2" (grind) nil))))))))
    nil)
   nil nil)
  (preprocessingConjTheorem-7 "" 3768664150
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemmaOdd)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma preprocessingConjLemma4)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (propax) nil nil)
                 ("2" (skeep)
                  (("2" (inst -1 "j")
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (hide -2 -3 -4 -5) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("3" (lemma preprocessingConjLemma3)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil nil)
                 ("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -1 "q")
                      (("2" (hide -2 -3 2) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("4" (lemma preprocessingConjLemma5)
            (("4" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("4" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals))
   nil)
  (preprocessingConjTheorem-6 "" 3768664079
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemma)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("2" (lemma preprocessingConjLemma4)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (propax) nil)
                 ("2" (skeep)
                  (("2" (inst -1 "j")
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (hide -2 -3 -4 -5) (("2" (grind) nil)))))))))))
                 ("3" (propax) nil)))))))
           ("3" (lemma preprocessingConjLemma3)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil)
                 ("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -1 "q")
                      (("2" (hide -2 -3 2) (("2" (grind) nil)))))))))
                 ("3" (propax) nil)))))))
           ("4" (lemma preprocessingConjLemma5)
            (("4" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("4" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))))
         ("2" (assert) (("2" (grind) nil))))))))
    nil)
   nil nil)
  (preprocessingConjTheorem-5 "" 3768663995
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemma1)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("2" (lemma preprocessingConjLemma2NoInf)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil)))))))
                 ("2" (propax) nil) ("3" (propax) nil)))))))
           ("3" (lemma preprocessingConjLemma4)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil)
                 ("2" (skeep)
                  (("2" (inst -1 "j")
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (hide -2 -3 -4 -5) (("2" (grind) nil)))))))))))
                 ("3" (propax) nil)))))))
           ("4" (lemma preprocessingConjLemma3)
            (("4" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("4" (split)
                (("1" (propax) nil)
                 ("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -1 "q")
                      (("2" (hide -2 -3 2) (("2" (grind) nil)))))))))
                 ("3" (propax) nil)))))))
           ("5" (lemma preprocessingConjLemma5)
            (("5" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("5" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))))
         ("2" (assert) (("2" (grind) nil))))))))
    nil)
   nil nil)
  (preprocessingConjTheorem-4 "" 3768574735
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      ((""
        (case "(FORALL (q: upto(numPolys)): odd?(dList(q)) AND listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 5)) OR (FORALL (q: upto(numPolys)): odd?(dList(q)) AND listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 4)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))")
        (("1" (split)
          (("1" (lemma preprocessingConjLemma1)
            (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma preprocessingConjLemma2NoInf)
            (("2" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("2" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m") (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("3" (lemma preprocessingConjLemma4)
            (("3" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("3" (split)
                (("1" (propax) nil nil)
                 ("2" (skeep)
                  (("2" (inst -1 "j")
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (hide -2 -3 -4 -5) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("4" (lemma preprocessingConjLemma3)
            (("4" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("4" (split)
                (("1" (propax) nil nil)
                 ("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -1 "q")
                      (("2" (hide -2 -3 2) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("5" (lemma preprocessingConjLemma5)
            (("5" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
              (("5" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals))
   nil)
  (preprocessingConjTheorem-3 "" 3768574580
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      (("" (split)
        (("1" (lemma preprocessingConjLemma1)
          (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
            (("1" (assert)
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m")
                      (("1" (split)
                        (("1" (propax) nil nil) ("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split)
            (("1" (lemma preprocessingConjLemma2NoInf)
              (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                (("1" (split)
                  (("1" (skeep)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (inst -1 "m")
                          (("1" (split)
                            (("1" (propax) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (lemma preprocessingConjLemma3)
                  (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (postpone) nil nil)
                       ("3" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (lemma preprocessingConjLemma4)
                      (("1"
                        (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                        (("1" (split)
                          (("1" (propax) nil nil)
                           ("2" (ground)
                            (("2" (reveal -1)
                              (("2"
                                (inst -1 "RelF6" "dList" "listOfpLists"
                                 "numPolys")
                                (("2" (split)
                                  (("1" (propax) nil nil)
                                   ("2" (case "1 = 1")
                                    (("1" (assert) (("1" (postpone) nil nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (lemma preprocessingConjLemma5)
                          (("1"
                            (inst -1 "RelF6" "dList" "listOfpLists"
                             "numPolys")
                            (("1" (split)
                              (("1" (propax) nil nil) ("2" (propax) nil nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (preprocessingConjTheorem-2 "" 3768574449
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      (("" (split)
        (("1" (lemma preprocessingConjLemma1)
          (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
            (("1" (assert)
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m")
                      (("1" (split)
                        (("1" (propax) nil nil) ("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split)
            (("1" (lemma preprocessingConjLemma2NoInf)
              (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                (("1" (split)
                  (("1" (skeep)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (inst -1 "m")
                          (("1" (split)
                            (("1" (propax) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (lemma preprocessingConjLemma3)
                  (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (lemma preprocessingConjLemma3)
                        (("2"
                          (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                          (("2" (split)
                            (("1" (propax) nil nil)
                             ("2" (assert)
                              (("2" (lemma preprocessingConjLemma4)
                                (("2"
                                  (inst -1 "RelF6" "dList" "listOfpLists"
                                   "numPolys")
                                  (("2" (split)
                                    (("1" (propax) nil nil)
                                     ("2" (assert)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "j")
                                          (("2"
                                            (assert)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (lemma preprocessingConjLemma4)
                      (("1"
                        (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                        (("1" (split)
                          (("1" (propax) nil nil)
                           ("2" (ground)
                            (("2" (reveal -1)
                              (("2"
                                (inst -1 "RelF6" "dList" "listOfpLists"
                                 "numPolys")
                                (("2" (split)
                                  (("1" (propax) nil nil)
                                   ("2" (case "1 = 1")
                                    (("1" (assert) (("1" (postpone) nil nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (lemma preprocessingConjLemma5)
                          (("1"
                            (inst -1 "RelF6" "dList" "listOfpLists"
                             "numPolys")
                            (("1" (split)
                              (("1" (propax) nil nil) ("2" (propax) nil nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (preprocessingConjTheorem-1 nil 3768573445
   ("" (skeep)
    (("" (expand "preprocessingStepConj")
      (("" (split)
        (("1" (lemma preprocessingConjLemma1)
          (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
            (("1" (assert)
              (("1" (split)
                (("1" (skeep)
                  (("1" (inst 1 "m")
                    (("1" (inst -1 "m")
                      (("1" (split)
                        (("1" (propax) nil nil) ("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split)
            (("1" (lemma preprocessingConjLemma2NoInf)
              (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                (("1" (split)
                  (("1" (skeep)
                    (("1" (skeep)
                      (("1" (inst 2 "m")
                        (("1" (inst -1 "m")
                          (("1" (split)
                            (("1" (propax) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (lemma preprocessingConjLemma3)
                  (("1" (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (lemma preprocessingConjLemma3)
                        (("2"
                          (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                          (("2" (split)
                            (("1" (propax) nil nil)
                             ("2" (assert)
                              (("2" (lemma preprocessingConjLemma4)
                                (("2"
                                  (inst -1 "RelF6" "dList" "listOfpLists"
                                   "numPolys")
                                  (("2" (split)
                                    (("1" (propax) nil nil)
                                     ("2" (assert)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "j")
                                          (("2"
                                            (assert)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (lemma preprocessingConjLemma4)
                      (("1"
                        (inst -1 "RelF6" "dList" "listOfpLists" "numPolys")
                        (("1" (split)
                          (("1" (propax) nil nil)
                           ("2" (ground) (("2" (postpone) nil nil)) nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (lemma preprocessingConjLemma5)
                          (("1"
                            (inst -1 "RelF6" "dList" "listOfpLists"
                             "numPolys")
                            (("1" (split)
                              (("1" (propax) nil nil) ("2" (propax) nil nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sum_squares_rec_TCC1 0
  (sum_squares_rec_TCC1-1 nil 3771066495 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (sum_squares_rec subtype
    "(number_fields.-)(((number_fields.+)(preprocessing_univariate.numPolys, 1)), preprocessing_univariate.rec)"
    "naturalnumber")))
 (sum_squares_rec_TCC2 0
  (sum_squares_rec_TCC2-1 nil 3771066495 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (sum_squares_rec subtype
    "(number_fields.+)(preprocessing_univariate.rec, 1)"
    "{rec | reals.<=(preprocessing_univariate.rec, (number_fields.+)(1, preprocessing_univariate.numPolys))}")))
 (sum_squares_rec_TCC3 0
  (sum_squares_rec_TCC3-1 nil 3771066495 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (sum_squares_rec termination
    "preprocessing_univariate.sum_squares_rec(preprocessing_univariate.numPolys, preprocessing_univariate.listOfpLists, preprocessing_univariate.dList, LAMBDA (i: naturalnumbers.nat): ((number_fields.+)(preprocessing_univariate.pListAcc(i), polynomials.polynomial_prod(preprocessing_univariate.listOfpLists(preprocessing_univariate.rec), preprocessing_univariate.dList(preprocessing_univariate.rec), preprocessing_univariate.listOfpLists(preprocessing_univariate.rec), preprocessing_univariate.dList(preprocessing_univariate.rec))(i))), real_defs.max(preprocessing_univariate.acc, number_fields.*(2, preprocessing_univariate.dList(preprocessing_univariate.rec))), (number_fields.+)(preprocessing_univariate.rec, 1))"
    "nil")))
 (sum_squares_TCC1 0
  (sum_squares_TCC1-1 nil 3771066495 ("" (subtype-tcc) nil nil) nil nil
   (sum_squares subtype "1"
    "{rec | reals.<=(preprocessing_univariate.rec, (number_fields.+)(1, preprocessing_univariate.numPolys))}"))))


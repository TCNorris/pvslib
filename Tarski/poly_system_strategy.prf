(poly_system_strategy
 (first_eq_TCC1 0
  (first_eq_TCC1-1 nil 3621331936 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (first_eq subtype "0"
    "{i | booleans.AND((booleans.IMPLIES(reals.>(poly_system_strategy.i, poly_system_strategy.k), FORALL (j: naturalnumbers.upto(poly_system_strategy.k)): reals.>(poly_system_strategy.RelF6(j), 0))), (booleans.IMPLIES(reals.<=(poly_system_strategy.i, poly_system_strategy.k), booleans.AND(poly_system_strategy.RelF6(poly_system_strategy.i) = 0, FORALL (j): booleans.IMPLIES(reals.<(poly_system_strategy.j, poly_system_strategy.i), reals.>(poly_system_strategy.RelF6(poly_system_strategy.j), 0))))))}")))
 (first_eq_TCC2 0
  (first_eq_TCC2-1 nil 3621331936 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (first_eq subtype "1"
    "{i | booleans.AND((booleans.IMPLIES(reals.>(poly_system_strategy.i, poly_system_strategy.k), FORALL (j: naturalnumbers.upto(poly_system_strategy.k)): reals.>(poly_system_strategy.RelF6(j), 0))), (booleans.IMPLIES(reals.<=(poly_system_strategy.i, poly_system_strategy.k), booleans.AND(poly_system_strategy.RelF6(poly_system_strategy.i) = 0, FORALL (j): booleans.IMPLIES(reals.<(poly_system_strategy.j, poly_system_strategy.i), reals.>(poly_system_strategy.RelF6(poly_system_strategy.j), 0))))))}")))
 (first_eq_TCC3 0
  (first_eq_TCC3-1 nil 3621331936 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subrange type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (first_eq subtype "poly_system_strategy.k"
    "{i | booleans.AND((booleans.IMPLIES(reals.>(poly_system_strategy.i, poly_system_strategy.k), FORALL (j: naturalnumbers.upto(poly_system_strategy.k)): reals.>(poly_system_strategy.RelF6(j), 0))), (booleans.IMPLIES(reals.<=(poly_system_strategy.i, poly_system_strategy.k), booleans.AND(poly_system_strategy.RelF6(poly_system_strategy.i) = 0, FORALL (j): booleans.IMPLIES(reals.<(poly_system_strategy.j, poly_system_strategy.i), reals.>(poly_system_strategy.RelF6(poly_system_strategy.j), 0))))))}")))
 (first_eq_TCC4 0
  (first_eq_TCC4-1 nil 3621331936 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subrange type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (first_eq subtype "(number_fields.+)(poly_system_strategy.k, 1)"
    "{i | booleans.AND((booleans.IMPLIES(reals.>(poly_system_strategy.i, poly_system_strategy.k), FORALL (j: naturalnumbers.upto(poly_system_strategy.k)): reals.>(poly_system_strategy.RelF6(j), 0))), (booleans.IMPLIES(reals.<=(poly_system_strategy.i, poly_system_strategy.k), booleans.AND(poly_system_strategy.RelF6(poly_system_strategy.i) = 0, FORALL (j): booleans.IMPLIES(reals.<(poly_system_strategy.j, poly_system_strategy.i), reals.>(poly_system_strategy.RelF6(poly_system_strategy.j), 0))))))}")))
 (first_eq_TCC5 0
  (first_eq_TCC5-1 nil 3621331936 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subrange type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (first_eq subtype "poly_system_strategy.last"
    "{i | booleans.AND((booleans.IMPLIES(reals.>(poly_system_strategy.i, poly_system_strategy.k), FORALL (j: naturalnumbers.upto(poly_system_strategy.k)): reals.>(poly_system_strategy.RelF6(j), 0))), (booleans.IMPLIES(reals.<=(poly_system_strategy.i, poly_system_strategy.k), booleans.AND(poly_system_strategy.RelF6(poly_system_strategy.i) = 0, FORALL (j): booleans.IMPLIES(reals.<(poly_system_strategy.j, poly_system_strategy.i), reals.>(poly_system_strategy.RelF6(poly_system_strategy.j), 0))))))}")))
 (first_eq_TCC6 0
  (first_eq_TCC6-1 nil 3621331936 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (first_eq subtype "(number_fields.-)(poly_system_strategy.k, 1)" "nat")))
 (first_eq_TCC7 0
  (first_eq_TCC7-1 nil 3621341858 ("" (termination-tcc) nil nil) nil nil
   (first_eq termination
    "poly_system_strategy.first_eq(poly_system_strategy.RelF6, (number_fields.-)(poly_system_strategy.k, 1))"
    "nil")))
 (greatify_poly_TCC1 0
  (greatify_poly_TCC1-1 nil 3622457802 ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals))
   nil
   (greatify_poly subtype
    "real_fun_ops[nat].*(((number_fields.-)(1)), poly_system_strategy.a)"
    "[nat -> int]")))
 (greatify_rel_TCC1 0
  (greatify_rel_TCC1-1 nil 3621333990 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (greatify_rel subtype "poly_system_strategy.RelF6(poly_system_strategy.i)"
    "{pz: integers.subrange(0, 5) | booleans.AND(pz /= 2, pz /= 5)}")))
 (greatify_def_TCC1 0
  (greatify_def_TCC1-1 nil 3621333990
   ("" (skeep)
    (("" (skeep)
      (("" (expand "greatify_poly_rel")
        (("" (expand "greatify_poly")
          (("" (expand "*")
            (("" (inst - "j") (("" (lift-if) (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil))
   nil
   (greatify_def subtype "poly_system_strategy.n"
    "{n | FORALL (j: naturalnumbers.upto(poly_system_strategy.k)): poly_system_strategy.greatify_poly_rel(poly_system_strategy.p, poly_system_strategy.RelF6)(j)(poly_system_strategy.n(j)) /= 0}")))
 (greatify_def 0
  (greatify_def-1 nil 3621333996
   ("" (skeep)
    (("" (expand "solvable?")
      (("" (expand "solvable_at?")
        (("" (expand "rel5")
          (("" (ground)
            (("1" (skeep)
              (("1" (inst + "x")
                (("1" (skeep)
                  (("1" (inst - "i")
                    (("1" (assert)
                      (("1" (typepred "greatify_rel(RelF6)(i)")
                        (("1" (assert)
                          (("1" (split -)
                            (("1" (flatten)
                              (("1" (expand "greatify_rel" 3 1)
                                (("1" (assert)
                                  (("1" (expand "greatify_poly_rel" +)
                                    (("1" (expand "greatify_poly")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (split -)
                                (("1" (flatten)
                                  (("1" (assert)
                                    (("1" (expand "greatify_rel" 4)
                                      (("1"
                                        (expand "greatify_poly_rel" +)
                                        (("1"
                                          (expand "greatify_poly")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (split -)
                                    (("1" (flatten)
                                      (("1"
                                        (expand "greatify_rel" 5)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "greatify_poly_rel" +)
                                            (("1"
                                              (expand "greatify_poly")
                                              (("1"
                                                (rewrite "scal_polynomial2")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "greatify_rel" 7)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "greatify_poly_rel"
                                                   +)
                                                  (("1"
                                                    (expand "greatify_poly")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "greatify_rel" 7)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "greatify_poly_rel"
                                                       +)
                                                      (("1"
                                                        (expand
                                                         "greatify_poly")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "greatify_rel" 8)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "greatify_poly_rel"
                                                     +)
                                                    (("2"
                                                      (expand "greatify_poly")
                                                      (("2"
                                                        (rewrite
                                                         "scal_polynomial2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst + "x")
                (("2" (skeep)
                  (("2" (inst - "i")
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (expand "greatify_rel" -)
                          (("1" (assert)
                            (("1" (expand "greatify_poly_rel")
                              (("1" (expand "greatify_poly")
                                (("1" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "greatify_rel" -)
                          (("2" (assert)
                            (("2" (split +)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (expand "greatify_poly_rel")
                                    (("1" (expand "greatify_poly")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (split +)
                                  (("1" (flatten)
                                    (("1" (assert)
                                      (("1"
                                        (expand "greatify_poly_rel")
                                        (("1"
                                          (expand "greatify_poly")
                                          (("1"
                                            (rewrite "scal_polynomial2")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "greatify_poly_rel")
                                            (("1"
                                              (expand "greatify_poly")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split +)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "greatify_poly_rel")
                                                  (("1"
                                                    (expand "greatify_poly")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "greatify_poly_rel")
                                                  (("2"
                                                    (expand "greatify_poly")
                                                    (("2"
                                                      (rewrite
                                                       "scal_polynomial2")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solvable? const-decl "bool" poly_system_strategy nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (greatify_rel const-decl "{pz: subrange(0, 5) | pz /= 2 AND pz /= 5}"
     poly_system_strategy nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (solvable_at? const-decl "bool" poly_system_strategy nil))
   shostak))
 (compute_solvable_single_TCC1 0
  (compute_solvable_single_TCC1-1 nil 3621353314 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable_single subtype "poly_system_strategy.d"
    "{m | poly_system_strategy.a(system_solvers.m) /= 0}")))
 (compute_solvable_single_TCC2 0
  (compute_solvable_single_TCC2-1 nil 3621353314 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (base_list const-decl "listn[below(n)](digits)" base_repr reals)
    (sturm_tarski_faster const-decl "{r: real |
   r = NSol_all(k, a, m, p, n, RelF6) AND
    rational_pred(r) AND integer_pred(r)}" system_solvers nil)
    (odd? const-decl "bool" integers nil)
    (poly_deriv const-decl "real" polynomials reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (compute_solvable_single subtype
    "polynomials.poly_deriv(poly_system_strategy.a)" "[nat -> int]")))
 (compute_solvable_single_TCC3 0
  (compute_solvable_single_TCC3-1 nil 3621353314 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (/= const-decl "boolean" notequal nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (base_list const-decl "listn[below(n)](digits)" base_repr reals)
    (sturm_tarski_faster const-decl "{r: real |
   r = NSol_all(k, a, m, p, n, RelF6) AND
    rational_pred(r) AND integer_pred(r)}" system_solvers nil)
    (odd? const-decl "bool" integers nil)
    (poly_deriv const-decl "real" polynomials reals)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (compute_solvable_single subtype
    "(number_fields.-)(poly_system_strategy.d, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.a)(system_solvers.m) /= 0}")))
 (compute_solvable_single_TCC4 0
  (compute_solvable_single_TCC4-1 nil 3621354679
   ("" (skosimp*)
    (("" (lift-if)
      (("" (split -)
        (("1" (flatten) (("1" (replaces -2) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (replaces -1)
            (("2" (expand "*") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (compute_solvable_single subtype "poly_system_strategy.newa"
    "[nat -> int]")))
 (compute_solvable_single_TCC5 0
  (compute_solvable_single_TCC5-1 nil 3621354679
   ("" (skosimp*)
    (("" (lift-if)
      (("" (split -)
        (("1" (flatten) (("1" (replaces -2) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (replaces -1)
            (("2" (expand "*") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (compute_solvable_single subtype "LAMBDA (j): poly_system_strategy.d"
    "{n | FORALL (i: naturalnumbers.upto(1)): poly_system_strategy.newa(system_solvers.n(i)) /= 0}")))
 (compute_solvable_single_def 0
  (compute_solvable_single_def-11 "" 3790099501
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (replace -1) (("1" (assert) (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (split +)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (name "x1" "-a(0)/a(1)-1")
                          (("1" (name "x2" "-a(0)/a(1)+1")
                            (("1"
                              (case "(polynomial(a,1)(x1)>0 AND polynomial(a,1)(x2)<0) OR (polynomial(a,1)(x1)<0 AND polynomial(a,1)(x2)>0)")
                              (("1" (inst-cp + "x1")
                                (("1" (inst-cp + "x2")
                                  (("1" (inst + "-a(0)/a(1)")
                                    (("1" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (flatten) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split +)
                        (("1" (flatten)
                          (("1" (lemma "system_roots_enum")
                            (("1" (inst - "0" "LAMBDA (k): d" "LAMBDa (k): a")
                              (("1" (assert)
                                (("1" (skeep -)
                                  (("1" (case "K = 0")
                                    (("1" (inst + "0")
                                      (("1"
                                        (inst -4 "0" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5 +)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (assert)
                                                (("1" (skosimp*) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst + "enum(K-1)+2")
                                      (("1"
                                        (replace -4 +)
                                        (("1"
                                          (expand "rel5")
                                          (("1"
                                            (inst -3 "2+enum(K-1)" "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "i!1" "K-1")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2"
                            (case "NOT ((sturm_tarski_faster(1,
                                                                                                        a,
                                                                                                        d,
                                                                                                        LAMBDA (k): LAMBDA (j): 1,
                                                                                                        LAMBDA (k): 0,
                                                                                                        LAMBDA (j): 1)
                                                                          /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                            (("1" (hide 3)
                              (("1"
                                (typepred "sturm_tarski_faster(1,
                                                 a,
                                                 d,
                                                 LAMBDA (k): LAMBDA (j): 1,
                                                 LAMBDA (k): 0,
                                                 LAMBDA (j): 1)")
                                (("1" (replaces -1)
                                  (("1" (hide -)
                                    (("1" (expand "NSol_all")
                                      (("1"
                                        (lemma "empty_card[real]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "empty?")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (expand "Sol_all" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst + "x!1")
                                                      (("2"
                                                        (expand "Sol_all" -)
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2" (case "i = 0")
                                (("1" (replaces -1)
                                  (("1" (expand "rel5")
                                    (("1" (propax) nil nil)) nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (label "izero" 1)
                                    (("2" (hide "izero")
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst + "x!1")
                                                  (("1"
                                                    (expand "rel5")
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten +)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand "rel5")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (case
                                                               "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "greatify_rel")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     3)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "sturm_tarski_faster(1,
                                                                                                                                   poly_deriv(a),
                                                                                                                                   d - 1,
                                                                                                                                   LAMBDA (j): a,
                                                                                                                                   LAMBDA (j): d,
                                                                                                                                   LAMBDA (j): 1)")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 (-2
                                                                                                  -3))
                                                                                                (("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (skosimp
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "sturm_tarski_faster(1,
                                                                                                                                           poly_deriv(a),
                                                                                                                                           d - 1,
                                                                                                                                           LAMBDA (j): a,
                                                                                                                                           LAMBDA (j): d,
                                                                                                                                           LAMBDA (j): 1)")
                                                                                        (("3"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "NSol_all"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "empty_card[real]")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             4
                                                                                                             "x!1")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Sol_all"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (split
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "%1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           (-1
                                                                                                                            2))
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "0")
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (replace -1)
                                                      (("3"
                                                        (expand "rel5")
                                                        (("3"
                                                          (case
                                                           "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "greatify_rel")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide -2)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "x")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (replace
                                                                           3)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                                   poly_deriv(a),
                                                                                                                                   d - 1,
                                                                                                                                   LAMBDA (j): a,
                                                                                                                                   LAMBDA (j): d,
                                                                                                                                   LAMBDA (j): 4)")
                                                                            (("2"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): a")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "sigma")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "sturm_tarski_faster(1,
                                                                                                                                                                 poly_deriv(a),
                                                                                                                                                                 d - 1,
                                                                                                                                                                 LAMBDA (j): a,
                                                                                                                                                                 LAMBDA (j): d,
                                                                                                                                                                 LAMBDA (j): 4)")
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             (-2
                                                                                                              -3))
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "NSol_all"
                                                                                                               -)
                                                                                                              (("3"
                                                                                                                (lemma
                                                                                                                 "empty_card[real]")
                                                                                                                (("3"
                                                                                                                  (inst?)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "empty?")
                                                                                                                      (("3"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "x!2")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "member")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "Sol_all"
                                                                                                                             +)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (split
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -3
                                                                                                                                   1
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "poly_eq_le_degree"
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "poly_deriv")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "prod_polynomials")
                                                                                                                                            (("1"
                                                                                                                                              (lift-if)
                                                                                                                                              (("1"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "0")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (inst
                                                                                                 +
                                                                                                 "x!1")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "poly_sign_near_infinity")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "M!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "M!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "poly_sign_near_negative_infinity")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "-M!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "even_or_odd")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "-M!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sign_ext")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                                   poly_deriv(a),
                                                                                                                                   d - 1,
                                                                                                                                   LAMBDA (j): a,
                                                                                                                                   LAMBDA (j): d,
                                                                                                                                   LAMBDA (j): 4)")
                                                                        (("3"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (replaces
                                                                               -1)
                                                                              (("3"
                                                                                (expand
                                                                                 "NSol_all"
                                                                                 +)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "empty_card[real]")
                                                                                  (("3"
                                                                                    (inst?)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "Sol_all")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "0")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (replace -1)
                                                      (("4"
                                                        (expand "rel5")
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "NOT (i=2 OR i=5 )")
                                                  (("1"
                                                    (reveal "izero")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "rel5" 4)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "rel5")
                                                          (("1"
                                                            (case
                                                             "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "greatify_rel")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand "*")
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): (-1)*a")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "*")
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         3)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "sturm_tarski_faster(1,
                                                                                           poly_deriv(a),
                                                                                           d - 1,
                                                                                           LAMBDA
                                                                                           (j):
                                                                                           LAMBDA (x: nat): (-1) * a(x),
                                                                                           LAMBDA (j): d,
                                                                                           (LAMBDA (j): 1))")
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     (-2
                                                                                                      -3))
                                                                                                    (("3"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "NSol_all"
                                                                                                           -)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "empty_card[real]")
                                                                                                            (("3"
                                                                                                              (inst?)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "Sol_all"
                                                                                                                         +)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                 (ii: nat):
                                                                                                                 LAMBDA (x: nat): (-1) * a(x),
                                                                                                                 LAMBDA (ii: nat): d,
                                                                                                                 (LAMBDA (i: nat): 1),
                                                                                                                 0)),
                                                                                     d - 1)
                                                                                    (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "scal_polynomial2"
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "poly_eq_le_degree")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "poly_deriv"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "prod_polynomials")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "*")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "0")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (inst
                                                                                           +
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "scal_polynomial2")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "*"
                                                                                                 -)
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   -1
                                                                                                   +)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (lemma
                                                                                                       "sigma_tolambda")
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "polynomial"
                                                                                                         (-4
                                                                                                          1))
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): (-1)*a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skosimp
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1)
                                                                                              (("2"
                                                                                                (skosimp
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "sturm_tarski_faster(1,
                                                                                               poly_deriv(a),
                                                                                               d - 1,
                                                                                               LAMBDA
                                                                                               (j):
                                                                                               LAMBDA (zz: nat): (-1) * a(zz),
                                                                                               LAMBDA (j): d,
                                                                                               (LAMBDA (j): 1))")
                                                                                          (("3"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("3"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "NSol_all"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "empty_card[real]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               5
                                                                                                               "x!1")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "Sol_all"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (lemma
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (hide-all-but
                                                                                                                                 (-3
                                                                                                                                  5))
                                                                                                                                (("3"
                                                                                                                                  (invoke
                                                                                                                                   (case
                                                                                                                                    "NOT %1 = %2")
                                                                                                                                   (!
                                                                                                                                    -1
                                                                                                                                    1
                                                                                                                                    2)
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "poly_eq_le_degree")
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide -2)
                                                                    (("2"
                                                                      (replace
                                                                       3)
                                                                      (("2"
                                                                        (case
                                                                         "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                       poly_deriv(a),
                                                                                       d - 1,
                                                                                       LAMBDA (j): (-1) * a,
                                                                                       LAMBDA (j): d,
                                                                                       (LAMBDA (j): 4))")
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): (-1)*a")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                               (ii: nat):
                                                                                                               LAMBDA (x: nat): (-1) * a(x),
                                                                                                               LAMBDA (ii: nat): d,
                                                                                                               (LAMBDA (i: nat): 1),
                                                                                                               0)),
                                                                                   d - 1)
                                                                                  (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (rewrite
                                                                                                                                       "scal_polynomial2"
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "poly_eq_le_degree"
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "poly_deriv")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "prod_polynomials")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "*")
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("2"
                                                                                                                                                      (ground)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "0")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (rewrite
                                                                                                       "scal_polynomial2")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "poly_sign_near_infinity")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "(-1)*a"
                                                                       "d")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "M!1")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "M!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "poly_sign_near_negative_infinity")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "-M!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "even_or_odd")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "-M!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sign_ext")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (case
                                                                     "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "greatify_rel"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                       poly_deriv(a),
                                                                                       d - 1,
                                                                                       LAMBDA (j): (-1) * a,
                                                                                       LAMBDA (j): d,
                                                                                       (LAMBDA (j): 4))")
                                                                        (("1"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "NSol_all"
                                                                                   +)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "empty_card[real]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty?"
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Sol_all")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "*"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (expand
                                                                             "*"
                                                                             1)
                                                                            (("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (compute_solvable_single_def-10 "no" 3768583961
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (replace -1) (("1" (assert) (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (split +)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (name "x1" "-a(0)/a(1)-1")
                          (("1" (name "x2" "-a(0)/a(1)+1")
                            (("1"
                              (case "(polynomial(a,1)(x1)>0 AND polynomial(a,1)(x2)<0) OR (polynomial(a,1)(x1)<0 AND polynomial(a,1)(x2)>0)")
                              (("1" (inst-cp + "x1")
                                (("1" (inst-cp + "x2")
                                  (("1" (inst + "-a(0)/a(1)")
                                    (("1" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (flatten) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split +)
                        (("1" (flatten)
                          (("1" (lemma "system_roots_enum")
                            (("1" (inst - "0" "LAMBDA (k): d" "LAMBDa (k): a")
                              (("1" (assert)
                                (("1" (skeep -)
                                  (("1" (case "K = 0")
                                    (("1" (inst + "0")
                                      (("1"
                                        (inst -4 "0" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5 +)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (assert)
                                                (("1" (skosimp*) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst + "enum(K-1)+2")
                                      (("1"
                                        (replace -4 +)
                                        (("1"
                                          (expand "rel5")
                                          (("1"
                                            (inst -3 "2+enum(K-1)" "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "i!1" "K-1")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2"
                            (case "NOT ((sturm_tarski_faster(1,
                                                                                                        a,
                                                                                                        d,
                                                                                                        LAMBDA (k): LAMBDA (j): 1,
                                                                                                        LAMBDA (k): 0,
                                                                                                        LAMBDA (j): 1)
                                                                          /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                            (("1" (hide 3)
                              (("1"
                                (typepred "sturm_tarski_faster(1,
                                                 a,
                                                 d,
                                                 LAMBDA (k): LAMBDA (j): 1,
                                                 LAMBDA (k): 0,
                                                 LAMBDA (j): 1)")
                                (("1" (replaces -1)
                                  (("1" (hide -)
                                    (("1" (expand "NSol_all")
                                      (("1"
                                        (lemma "empty_card[real]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "empty?")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (expand "Sol_all" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst + "x!1")
                                                      (("2"
                                                        (expand "Sol_all" -)
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2" (case "i = 0")
                                (("1" (replaces -1)
                                  (("1" (expand "rel5")
                                    (("1" (propax) nil nil)) nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (label "izero" 1)
                                    (("2" (hide "izero")
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst + "x!1")
                                                  (("1"
                                                    (expand "rel5")
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten +)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand "rel5")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (case
                                                               "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "greatify_rel")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     3)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "sturm_tarski_faster(1,
                                                                                                                                   poly_deriv(a),
                                                                                                                                   d - 1,
                                                                                                                                   LAMBDA (j): a,
                                                                                                                                   LAMBDA (j): d,
                                                                                                                                   LAMBDA (j): 1)")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 (-2
                                                                                                  -3))
                                                                                                (("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (skosimp
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "sturm_tarski_faster(1,
                                                                                                                                           poly_deriv(a),
                                                                                                                                           d - 1,
                                                                                                                                           LAMBDA (j): a,
                                                                                                                                           LAMBDA (j): d,
                                                                                                                                           LAMBDA (j): 1)")
                                                                                        (("3"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "NSol_all"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "empty_card[real]")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             4
                                                                                                             "x!1")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Sol_all"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (split
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "%1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           (-1
                                                                                                                            2))
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "0")
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (replace -1)
                                                      (("3"
                                                        (expand "rel5")
                                                        (("3"
                                                          (case
                                                           "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "greatify_rel")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide -2)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "x")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (replace
                                                                           3)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                                   poly_deriv(a),
                                                                                                                                   d - 1,
                                                                                                                                   LAMBDA (j): a,
                                                                                                                                   LAMBDA (j): d,
                                                                                                                                   LAMBDA (j): 4)")
                                                                            (("2"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): a")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "sigma")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "sturm_tarski_faster(1,
                                                                                                                                                                 poly_deriv(a),
                                                                                                                                                                 d - 1,
                                                                                                                                                                 LAMBDA (j): a,
                                                                                                                                                                 LAMBDA (j): d,
                                                                                                                                                                 LAMBDA (j): 4)")
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             (-2
                                                                                                              -3))
                                                                                                            (("3"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -3
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "poly_eq_le_degree"
                                                                                                                                       1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "poly_deriv")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "prod_polynomials")
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "0")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (inst
                                                                                                 +
                                                                                                 "x!1")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "poly_sign_near_infinity")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "M!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "M!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "poly_sign_near_negative_infinity")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "-M!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "even_or_odd")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "-M!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sign_ext")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                                   poly_deriv(a),
                                                                                                                                   d - 1,
                                                                                                                                   LAMBDA (j): a,
                                                                                                                                   LAMBDA (j): d,
                                                                                                                                   LAMBDA (j): 4)")
                                                                        (("3"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (replaces
                                                                               -1)
                                                                              (("3"
                                                                                (expand
                                                                                 "NSol_all"
                                                                                 +)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "empty_card[real]")
                                                                                  (("3"
                                                                                    (inst?)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "Sol_all")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "0")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (replace -1)
                                                      (("4"
                                                        (expand "rel5")
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "NOT (i=2 OR i=5 )")
                                                  (("1"
                                                    (reveal "izero")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "rel5" 4)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "rel5")
                                                          (("1"
                                                            (case
                                                             "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "greatify_rel")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand "*")
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): (-1)*a")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "*")
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         3)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "sturm_tarski_faster(1,
                                                                                           poly_deriv(a),
                                                                                           d - 1,
                                                                                           LAMBDA
                                                                                           (j):
                                                                                           LAMBDA (x: nat): (-1) * a(x),
                                                                                           LAMBDA (j): d,
                                                                                           (LAMBDA (j): 1))")
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     (-2
                                                                                                      -3))
                                                                                                    (("3"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "NSol_all"
                                                                                                           -)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "empty_card[real]")
                                                                                                            (("3"
                                                                                                              (inst?)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "Sol_all"
                                                                                                                         +)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                 (ii: nat):
                                                                                                                 LAMBDA (x: nat): (-1) * a(x),
                                                                                                                 LAMBDA (ii: nat): d,
                                                                                                                 (LAMBDA (i: nat): 1),
                                                                                                                 0)),
                                                                                     d - 1)
                                                                                    (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "scal_polynomial2"
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "poly_eq_le_degree")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "poly_deriv"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "prod_polynomials")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "*")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "0")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (inst
                                                                                           +
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "scal_polynomial2")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "*"
                                                                                                 -)
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   -1
                                                                                                   +)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (lemma
                                                                                                       "sigma_tolambda")
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "polynomial"
                                                                                                         (-4
                                                                                                          1))
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): (-1)*a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skosimp
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1)
                                                                                              (("2"
                                                                                                (skosimp
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "sturm_tarski_faster(1,
                                                                                               poly_deriv(a),
                                                                                               d - 1,
                                                                                               LAMBDA
                                                                                               (j):
                                                                                               LAMBDA (zz: nat): (-1) * a(zz),
                                                                                               LAMBDA (j): d,
                                                                                               (LAMBDA (j): 1))")
                                                                                          (("3"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("3"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "NSol_all"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "empty_card[real]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               5
                                                                                                               "x!1")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "Sol_all"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (lemma
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (hide-all-but
                                                                                                                                 (-3
                                                                                                                                  5))
                                                                                                                                (("3"
                                                                                                                                  (invoke
                                                                                                                                   (case
                                                                                                                                    "NOT %1 = %2")
                                                                                                                                   (!
                                                                                                                                    -1
                                                                                                                                    1
                                                                                                                                    2)
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "poly_eq_le_degree")
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide -2)
                                                                    (("2"
                                                                      (replace
                                                                       3)
                                                                      (("2"
                                                                        (case
                                                                         "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                       poly_deriv(a),
                                                                                       d - 1,
                                                                                       LAMBDA (j): (-1) * a,
                                                                                       LAMBDA (j): d,
                                                                                       (LAMBDA (j): 4))")
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): (-1)*a")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                               (ii: nat):
                                                                                                               LAMBDA (x: nat): (-1) * a(x),
                                                                                                               LAMBDA (ii: nat): d,
                                                                                                               (LAMBDA (i: nat): 1),
                                                                                                               0)),
                                                                                   d - 1)
                                                                                  (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (rewrite
                                                                                                                                       "scal_polynomial2"
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "poly_eq_le_degree"
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "poly_deriv")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "prod_polynomials")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "*")
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("2"
                                                                                                                                                      (ground)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "0")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (rewrite
                                                                                                       "scal_polynomial2")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "poly_sign_near_infinity")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "(-1)*a"
                                                                       "d")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "M!1")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "M!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "poly_sign_near_negative_infinity")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "-M!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "even_or_odd")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "-M!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sign_ext")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (case
                                                                     "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "greatify_rel"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                       poly_deriv(a),
                                                                                       d - 1,
                                                                                       LAMBDA (j): (-1) * a,
                                                                                       LAMBDA (j): d,
                                                                                       (LAMBDA (j): 4))")
                                                                        (("1"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "NSol_all"
                                                                                   +)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "empty_card[real]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty?"
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Sol_all")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "*"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (expand
                                                                             "*"
                                                                             1)
                                                                            (("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (sequence type-eq-decl nil sequences nil)
    (< const-decl "bool" reals nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_rat application-judgement "rational" sigma_nat reals)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_expt application-judgement "rat" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (sigma_tolambda formula-decl nil sigma_nat reals)
    (a skolem-const-decl "[nat -> int]" poly_system_strategy nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign reals)
    (poly_sign_near_infinity formula-decl nil more_polynomial_props reals)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (poly_sign_near_negative_infinity formula-decl nil more_polynomial_props
     reals)
    (greatify_rel const-decl "{pz: subrange(0, 5) | pz /= 2 AND pz /= 5}"
     poly_system_strategy nil)
    (poly_deriv const-decl "real" polynomials reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (poly_eq_le_degree formula-decl nil polynomials reals)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (product def-decl "real" product reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (sigma_nat application-judgement "nat" sigma_nat reals)
    (strict_poly_system_solvable formula-decl nil poly_systems nil)
    (TRUE const-decl "bool" booleans nil)
    (Sol_all const-decl "finite_set[real]" poly_families nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (NSol_all const-decl "nat" poly_families nil)
    (sturm_tarski_faster const-decl "{r: real |
   r = NSol_all(k, a, m, p, n, RelF6) AND
    rational_pred(r) AND integer_pred(r)}" system_solvers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (K skolem-const-decl "nat" poly_system_strategy nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (system_roots_enum formula-decl nil poly_systems nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (compute_solvable_single const-decl "bool" poly_system_strategy nil))
   nil)
  (compute_solvable_single_def-9 "no" 3768583641
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (replace -1) (("1" (assert) (("1" (grind) nil)))))))
             ("2" (flatten)
              (("2" (assert)
                (("2" (split +)
                  (("1" (flatten)
                    (("1" (skolem -1 "k")
                      (("1" (lemma polyOddDegNeg)
                        (("1" (lemma polyOddDegPos)
                          (("1" (lemma polyOddDegZero)
                            (("1" (inst -1 "a" "k")
                              (("1" (inst -2 "a" "k")
                                (("1" (inst -3 "a" "k")
                                  (("1" (split)
                                    (("1" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (expand "rel5")
                                            (("1"
                                              (case "i = 0")
                                              (("1"
                                                (inst 1 "x!3")
                                                (("1" (assert) nil)))
                                               ("2"
                                                (case "i=1")
                                                (("1"
                                                  (inst 2 "x!2")
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (case "i = 2")
                                                  (("1"
                                                    (inst 3 "x!1")
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (case "i = 3")
                                                    (("1"
                                                      (inst 4 "x!2")
                                                      (("1" (assert) nil)))
                                                     ("2"
                                                      (case "i = 4")
                                                      (("1"
                                                        (inst 5 "x!3")
                                                        (("1" (assert) nil)))
                                                       ("2"
                                                        (inst 6 "x!3")
                                                        (("2"
                                                          (assert)
                                                          nil)))))))))))))))))
                                         ("2" (assert) nil)))
                                       ("2" (assert) nil)))
                                     ("2" (assert) nil)))))))))))))))))))
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split +)
                        (("1" (flatten)
                          (("1" (lemma "system_roots_enum")
                            (("1" (inst - "0" "LAMBDA (k): d" "LAMBDa (k): a")
                              (("1" (assert)
                                (("1" (skeep -)
                                  (("1" (case "K = 0")
                                    (("1" (inst + "0")
                                      (("1"
                                        (inst -4 "0" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5 +)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp*)
                                                  nil)))))))))))))
                                     ("2" (inst + "enum(K-1)+2")
                                      (("1"
                                        (replace -4 +)
                                        (("1"
                                          (expand "rel5")
                                          (("1"
                                            (inst -3 "2+enum(K-1)" "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "i!1" "K-1")
                                                  (("1" (ground) nil)))))))
                                             ("2" (assert) nil)))))))
                                       ("2" (assert) nil)))))))))))))))
                         ("2" (flatten)
                          (("2"
                            (case "NOT ((sturm_tarski_faster(1,
                                                                                                                     a,
                                                                                                                     d,
                                                                                                                     LAMBDA (k): LAMBDA (j): 1,
                                                                                                                     LAMBDA (k): 0,
                                                                                                                     LAMBDA (j): 1)
                                                                                       /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                            (("1" (hide 3)
                              (("1"
                                (typepred "sturm_tarski_faster(1,
                                                           a,
                                                           d,
                                                           LAMBDA (k): LAMBDA (j): 1,
                                                           LAMBDA (k): 0,
                                                           LAMBDA (j): 1)")
                                (("1" (replaces -1)
                                  (("1" (hide -)
                                    (("1" (expand "NSol_all")
                                      (("1"
                                        (lemma "empty_card[real]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "empty?")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (expand "Sol_all" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (grind)
                                                              nil)))))))))))
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst + "x!1")
                                                      (("2"
                                                        (expand "Sol_all" -)
                                                        (("2"
                                                          (flatten)
                                                          nil)))))))))))))))))))))))))))))
                             ("2" (replace -1)
                              (("2" (case "i = 0")
                                (("1" (replaces -1)
                                  (("1" (expand "rel5")
                                    (("1" (propax) nil)))))
                                 ("2" (assert)
                                  (("2" (label "izero" 1)
                                    (("2" (hide "izero")
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst + "x!1")
                                                  (("1"
                                                    (expand "rel5")
                                                    (("1"
                                                      (ground)
                                                      nil)))))))))))))
                                         ("2"
                                          (flatten +)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand "rel5")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (case
                                                               "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "greatify_rel")
                                                                    (("1"
                                                                      (propax)
                                                                      nil)))))))
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("3"
                                                                                    (hide
                                                                                     3)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 1)")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 (-2
                                                                                                  -3))
                                                                                                (("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil)))))))))))))))
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil)))))))))))))))))))))))))))))))))))))))))))
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        nil)))))))))))))))))))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))))))
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (skosimp
                                                                                         1)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil)))))))
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "sturm_tarski_faster(1,
                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                       d - 1,
                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                       LAMBDA (j): 1)")
                                                                                        (("3"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "NSol_all"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "empty_card[real]")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             4
                                                                                                             "x!1")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Sol_all"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (split
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil)))))
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "%1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           (-1
                                                                                                                            2))
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        nil)))))))))))))))))))))
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "0")
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (propax)
                                                          nil)))))
                                                     ("3"
                                                      (replace -1)
                                                      (("3"
                                                        (expand "rel5")
                                                        (("3"
                                                          (case
                                                           "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "greatify_rel")
                                                              (("1"
                                                                (propax)
                                                                nil)))))
                                                           ("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide -2)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "x")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (replace
                                                                           3)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 4)")
                                                                            (("2"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): a")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil)))
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))
                                                                                               ("3"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "sigma")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "sturm_tarski_faster(1,
                                                                                                                                                                                             poly_deriv(a),
                                                                                                                                                                                             d - 1,
                                                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                                                             LAMBDA (j): 4)")
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             (-2
                                                                                                              -3))
                                                                                                            (("3"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -3
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "poly_eq_le_degree"
                                                                                                                                       1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "poly_deriv")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "prod_polynomials")
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil)))))))))))))))
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "0")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))
                                                                                               ("4"
                                                                                                (inst
                                                                                                 +
                                                                                                 "x!1")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))))))))))))))))))))
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "poly_sign_near_infinity")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "M!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "M!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "poly_sign_near_negative_infinity")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "-M!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "even_or_odd")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "-M!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sign_ext")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil)))))))))))))))))))))))))))))
                                                                       ("3"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 4)")
                                                                        (("3"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (replaces
                                                                               -1)
                                                                              (("3"
                                                                                (expand
                                                                                 "NSol_all"
                                                                                 +)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "empty_card[real]")
                                                                                  (("3"
                                                                                    (inst?)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "Sol_all")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "0")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("4"
                                                      (replace -1)
                                                      (("4"
                                                        (expand "rel5")
                                                        (("4"
                                                          (propax)
                                                          nil)))))))))))))
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "NOT (i=2 OR i=5 )")
                                                  (("1"
                                                    (reveal "izero")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "rel5" 4)
                                                        (("1"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "rel5")
                                                          (("1"
                                                            (case
                                                             "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "greatify_rel")
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand "*")
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): (-1)*a")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "*")
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("3"
                                                                                        (hide
                                                                                         3)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "sturm_tarski_faster(1,
                                                                                                                       poly_deriv(a),
                                                                                                                       d - 1,
                                                                                                                       LAMBDA
                                                                                                                       (j):
                                                                                                                       LAMBDA (x: nat): (-1) * a(x),
                                                                                                                       LAMBDA (j): d,
                                                                                                                       (LAMBDA (j): 1))")
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     (-2
                                                                                                      -3))
                                                                                                    (("3"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "NSol_all"
                                                                                                           -)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "empty_card[real]")
                                                                                                            (("3"
                                                                                                              (inst?)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "Sol_all"
                                                                                                                         +)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                    (ii: nat):
                                                                                                                                                    LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                    LAMBDA (ii: nat): d,
                                                                                                                                                    (LAMBDA (i: nat): 1),
                                                                                                                                                    0)),
                                                                                                                        d - 1)
                                                                                                                       (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "scal_polynomial2"
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "poly_eq_le_degree")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "poly_deriv"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "prod_polynomials")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "*")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil)))))))))))))))))))
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "0")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (inst
                                                                                           +
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "scal_polynomial2")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "*"
                                                                                                 -)
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   -1
                                                                                                   +)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (lemma
                                                                                                       "sigma_tolambda")
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "polynomial"
                                                                                                         (-4
                                                                                                          1))
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil)))))))))))))))))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil)))))))))))))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): (-1)*a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil)))))))))))
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skosimp
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1)
                                                                                              (("2"
                                                                                                (skosimp
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil)))))))))))))
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "sturm_tarski_faster(1,
                                                                                                                             poly_deriv(a),
                                                                                                                             d - 1,
                                                                                                                             LAMBDA
                                                                                                                             (j):
                                                                                                                             LAMBDA (zz: nat): (-1) * a(zz),
                                                                                                                             LAMBDA (j): d,
                                                                                                                             (LAMBDA (j): 1))")
                                                                                          (("3"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("3"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "NSol_all"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "empty_card[real]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               5
                                                                                                               "x!1")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "Sol_all"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (lemma
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (hide-all-but
                                                                                                                                 (-3
                                                                                                                                  5))
                                                                                                                                (("3"
                                                                                                                                  (invoke
                                                                                                                                   (case
                                                                                                                                    "NOT %1 = %2")
                                                                                                                                   (!
                                                                                                                                    -1
                                                                                                                                    1
                                                                                                                                    2)
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "poly_eq_le_degree")
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (hide -2)
                                                                    (("2"
                                                                      (replace
                                                                       3)
                                                                      (("2"
                                                                        (case
                                                                         "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)))))
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                 poly_deriv(a),
                                                                                                                 d - 1,
                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                 LAMBDA (j): d,
                                                                                                                 (LAMBDA (j): 4))")
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): (-1)*a")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                 (ii: nat):
                                                                                                                                                 LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                 LAMBDA (ii: nat): d,
                                                                                                                                                 (LAMBDA (i: nat): 1),
                                                                                                                                                 0)),
                                                                                                                     d - 1)
                                                                                                                    (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (rewrite
                                                                                                                                       "scal_polynomial2"
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "poly_eq_le_degree"
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "poly_deriv")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "prod_polynomials")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "*")
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("2"
                                                                                                                                                      (ground)
                                                                                                                                                      nil)))))))))))))))))))
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "0")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))
                                                                                                 ("4"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (rewrite
                                                                                                       "scal_polynomial2")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil)))))))))))))))))
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil)))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil)))))))))))))))))))
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "poly_sign_near_infinity")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "(-1)*a"
                                                                       "d")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "M!1")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "M!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))))))
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "poly_sign_near_negative_infinity")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "-M!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "even_or_odd")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "-M!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sign_ext")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil)))))))))))))))))))))))))))))))
                                                                   ("3"
                                                                    (case
                                                                     "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "greatify_rel"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)))))
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                 poly_deriv(a),
                                                                                                                 d - 1,
                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                 LAMBDA (j): d,
                                                                                                                 (LAMBDA (j): 4))")
                                                                        (("1"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "NSol_all"
                                                                                   +)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "empty_card[real]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty?"
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Sol_all")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil)))))))))))))))))))
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "*"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (expand
                                                                             "*"
                                                                             1)
                                                                            (("3"
                                                                              (propax)
                                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (no "no" 3768582495
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (replace -1) (("1" (assert) (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (split +)
                  (("1" (flatten)
                    (("1" (lemma polyOddDegNeg)
                      (("1" (lemma polyOddDegPos)
                        (("1" (lemma polyOddDegZero)
                          (("1" (expand "rel5")
                            (("1" (case "i = 0")
                              (("1" (assert)
                                (("1" (skeep)
                                  (("1" (inst -2 "a" "k")
                                    (("1" (inst -3 "a" "k")
                                      (("1"
                                        (inst -4 "a" "k")
                                        (("1"
                                          (split)
                                          (("1"
                                            (replace -5 1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (split)
                                            (("1"
                                              (replace -5 1)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (lemma polyOddDegZero)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (lemma polyOddDegZero)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma polyOddDegZero)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (case "i=1")
                                (("1" (assert)
                                  (("1" (skeep)
                                    (("1" (inst -2 "a" "k")
                                      (("1"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5 2)
                                            (("1"
                                              (inst -3 "a" "k")
                                              (("1"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (case "i = 2")
                                  (("1" (assert)
                                    (("1" (skeep)
                                      (("1"
                                        (inst -4 "a" "k")
                                        (("1"
                                          (split)
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "i = 3")
                                    (("1" (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -4 "a" "k")
                                          (("1"
                                            (split)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 4 "x")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "i = 4")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "a" "k")
                                            (("1"
                                              (split)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -5 5)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 5 "x")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -3 "a" "k")
                                            (("2"
                                              (split)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma polyOddDegZero)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -1 "a" "k")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst 6 "x")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split +)
                        (("1" (flatten)
                          (("1" (lemma "system_roots_enum")
                            (("1" (inst - "0" "LAMBDA (k): d" "LAMBDa (k): a")
                              (("1" (assert)
                                (("1" (skeep -)
                                  (("1" (case "K = 0")
                                    (("1" (inst + "0")
                                      (("1"
                                        (inst -4 "0" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5 +)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (assert)
                                                (("1" (skosimp*) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst + "enum(K-1)+2")
                                      (("1"
                                        (replace -4 +)
                                        (("1"
                                          (expand "rel5")
                                          (("1"
                                            (inst -3 "2+enum(K-1)" "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "i!1" "K-1")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2"
                            (case "NOT ((sturm_tarski_faster(1,
                                                                                                                     a,
                                                                                                                     d,
                                                                                                                     LAMBDA (k): LAMBDA (j): 1,
                                                                                                                     LAMBDA (k): 0,
                                                                                                                     LAMBDA (j): 1)
                                                                                       /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                            (("1" (hide 3)
                              (("1"
                                (typepred "sturm_tarski_faster(1,
                                                           a,
                                                           d,
                                                           LAMBDA (k): LAMBDA (j): 1,
                                                           LAMBDA (k): 0,
                                                           LAMBDA (j): 1)")
                                (("1" (replaces -1)
                                  (("1" (hide -)
                                    (("1" (expand "NSol_all")
                                      (("1"
                                        (lemma "empty_card[real]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "empty?")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (expand "Sol_all" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst + "x!1")
                                                      (("2"
                                                        (expand "Sol_all" -)
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2" (case "i = 0")
                                (("1" (replaces -1)
                                  (("1" (expand "rel5")
                                    (("1" (propax) nil nil)) nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (label "izero" 1)
                                    (("2" (hide "izero")
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst + "x!1")
                                                  (("1"
                                                    (expand "rel5")
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten +)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand "rel5")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (case
                                                               "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "greatify_rel")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     3)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 1)")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 (-2
                                                                                                  -3))
                                                                                                (("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (skosimp
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "sturm_tarski_faster(1,
                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                       d - 1,
                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                       LAMBDA (j): 1)")
                                                                                        (("3"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "NSol_all"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "empty_card[real]")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             4
                                                                                                             "x!1")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Sol_all"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (split
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "%1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           (-1
                                                                                                                            2))
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "0")
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (replace -1)
                                                      (("3"
                                                        (expand "rel5")
                                                        (("3"
                                                          (case
                                                           "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "greatify_rel")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide -2)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "x")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (replace
                                                                           3)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 4)")
                                                                            (("2"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): a")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "sigma")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "sturm_tarski_faster(1,
                                                                                                                                                                                             poly_deriv(a),
                                                                                                                                                                                             d - 1,
                                                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                                                             LAMBDA (j): 4)")
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             (-2
                                                                                                              -3))
                                                                                                            (("3"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -3
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "poly_eq_le_degree"
                                                                                                                                       1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "poly_deriv")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "prod_polynomials")
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "0")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (inst
                                                                                                 +
                                                                                                 "x!1")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "poly_sign_near_infinity")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "M!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "M!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "poly_sign_near_negative_infinity")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "-M!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "even_or_odd")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "-M!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sign_ext")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 4)")
                                                                        (("3"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (replaces
                                                                               -1)
                                                                              (("3"
                                                                                (expand
                                                                                 "NSol_all"
                                                                                 +)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "empty_card[real]")
                                                                                  (("3"
                                                                                    (inst?)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "Sol_all")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "0")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (replace -1)
                                                      (("4"
                                                        (expand "rel5")
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "NOT (i=2 OR i=5 )")
                                                  (("1"
                                                    (reveal "izero")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "rel5" 4)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "rel5")
                                                          (("1"
                                                            (case
                                                             "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "greatify_rel")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand "*")
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): (-1)*a")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "*")
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         3)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "sturm_tarski_faster(1,
                                                                                                                       poly_deriv(a),
                                                                                                                       d - 1,
                                                                                                                       LAMBDA
                                                                                                                       (j):
                                                                                                                       LAMBDA (x: nat): (-1) * a(x),
                                                                                                                       LAMBDA (j): d,
                                                                                                                       (LAMBDA (j): 1))")
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     (-2
                                                                                                      -3))
                                                                                                    (("3"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "NSol_all"
                                                                                                           -)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "empty_card[real]")
                                                                                                            (("3"
                                                                                                              (inst?)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "Sol_all"
                                                                                                                         +)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                    (ii: nat):
                                                                                                                                                    LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                    LAMBDA (ii: nat): d,
                                                                                                                                                    (LAMBDA (i: nat): 1),
                                                                                                                                                    0)),
                                                                                                                        d - 1)
                                                                                                                       (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "scal_polynomial2"
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "poly_eq_le_degree")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "poly_deriv"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "prod_polynomials")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "*")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "0")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (inst
                                                                                           +
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "scal_polynomial2")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "*"
                                                                                                 -)
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   -1
                                                                                                   +)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (lemma
                                                                                                       "sigma_tolambda")
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "polynomial"
                                                                                                         (-4
                                                                                                          1))
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): (-1)*a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skosimp
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1)
                                                                                              (("2"
                                                                                                (skosimp
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "sturm_tarski_faster(1,
                                                                                                                             poly_deriv(a),
                                                                                                                             d - 1,
                                                                                                                             LAMBDA
                                                                                                                             (j):
                                                                                                                             LAMBDA (zz: nat): (-1) * a(zz),
                                                                                                                             LAMBDA (j): d,
                                                                                                                             (LAMBDA (j): 1))")
                                                                                          (("3"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("3"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "NSol_all"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "empty_card[real]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               5
                                                                                                               "x!1")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "Sol_all"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (lemma
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (hide-all-but
                                                                                                                                 (-3
                                                                                                                                  5))
                                                                                                                                (("3"
                                                                                                                                  (invoke
                                                                                                                                   (case
                                                                                                                                    "NOT %1 = %2")
                                                                                                                                   (!
                                                                                                                                    -1
                                                                                                                                    1
                                                                                                                                    2)
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "poly_eq_le_degree")
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide -2)
                                                                    (("2"
                                                                      (replace
                                                                       3)
                                                                      (("2"
                                                                        (case
                                                                         "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                 poly_deriv(a),
                                                                                                                 d - 1,
                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                 LAMBDA (j): d,
                                                                                                                 (LAMBDA (j): 4))")
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): (-1)*a")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                 (ii: nat):
                                                                                                                                                 LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                 LAMBDA (ii: nat): d,
                                                                                                                                                 (LAMBDA (i: nat): 1),
                                                                                                                                                 0)),
                                                                                                                     d - 1)
                                                                                                                    (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (rewrite
                                                                                                                                       "scal_polynomial2"
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "poly_eq_le_degree"
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "poly_deriv")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "prod_polynomials")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "*")
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("2"
                                                                                                                                                      (ground)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "0")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (rewrite
                                                                                                       "scal_polynomial2")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "poly_sign_near_infinity")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "(-1)*a"
                                                                       "d")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "M!1")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "M!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "poly_sign_near_negative_infinity")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "-M!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "even_or_odd")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "-M!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sign_ext")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (case
                                                                     "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "greatify_rel"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                 poly_deriv(a),
                                                                                                                 d - 1,
                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                 LAMBDA (j): d,
                                                                                                                 (LAMBDA (j): 4))")
                                                                        (("1"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "NSol_all"
                                                                                   +)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "empty_card[real]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty?"
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Sol_all")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "*"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (expand
                                                                             "*"
                                                                             1)
                                                                            (("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (system_roots_enum formula-decl nil poly_systems nil)
    (sturm_tarski_faster const-decl "{r: real |
   r = NSol_all(k, a, m, p, n, RelF6) AND
    rational_pred(r) AND integer_pred(r)}" system_solvers nil)
    (NSol_all const-decl "nat" poly_families nil)
    (Sol_all const-decl "finite_set[real]" poly_families nil)
    (strict_poly_system_solvable formula-decl nil poly_systems nil)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (poly_eq_le_degree formula-decl nil polynomials reals)
    (poly_deriv const-decl "real" polynomials reals)
    (poly_sign_near_negative_infinity formula-decl nil more_polynomial_props
     reals)
    (poly_sign_near_infinity formula-decl nil more_polynomial_props reals)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign reals)
    (sigma_tolambda formula-decl nil sigma_nat reals)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   shostak)
  (compute_solvable_single_def-8 "no" 3768582386
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (replace -1) (("1" (assert) (("1" (grind) nil)))))))
             ("2" (flatten)
              (("2" (assert)
                (("2" (split +)
                  (("1" (flatten)
                    (("1" (skolem -1 "k")
                      (("1" (lemma polyOddDegNeg)
                        (("1" (lemma polyOddDegPos)
                          (("1" (lemma polyOddDegZero)
                            (("1" (inst -1 "a" "k")
                              (("1" (inst -2 "a" "k")
                                (("1" (inst -3 "a" "k")
                                  (("1" (split)
                                    (("1" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (expand "rel5")
                                            (("1"
                                              (case "i = 0")
                                              (("1"
                                                (inst 1 "x!3")
                                                (("1" (assert) nil)))
                                               ("2"
                                                (case "i=1")
                                                (("1"
                                                  (inst 2 "x!2")
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (case "i = 2")
                                                  (("1"
                                                    (inst 3 "x!1")
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (case "i = 3")
                                                    (("1"
                                                      (inst 4 "x!2")
                                                      (("1" (assert) nil)))
                                                     ("2"
                                                      (case "i = 4")
                                                      (("1"
                                                        (inst 5 "x!3")
                                                        (("1" (assert) nil)))
                                                       ("2"
                                                        (inst 6 "x!3")
                                                        (("2"
                                                          (assert)
                                                          nil)))))))))))))))))
                                         ("2" (assert) nil)))
                                       ("2" (assert) nil)))
                                     ("2" (assert) nil)))))))))))))))))))
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split +)
                        (("1" (flatten)
                          (("1" (lemma "system_roots_enum")
                            (("1" (inst - "0" "LAMBDA (k): d" "LAMBDa (k): a")
                              (("1" (assert)
                                (("1" (skeep -)
                                  (("1" (case "K = 0")
                                    (("1" (inst + "0")
                                      (("1"
                                        (inst -4 "0" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5 +)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp*)
                                                  nil)))))))))))))
                                     ("2" (inst + "enum(K-1)+2")
                                      (("1"
                                        (replace -4 +)
                                        (("1"
                                          (expand "rel5")
                                          (("1"
                                            (inst -3 "2+enum(K-1)" "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "i!1" "K-1")
                                                  (("1" (ground) nil)))))))
                                             ("2" (assert) nil)))))))
                                       ("2" (assert) nil)))))))))))))))
                         ("2" (flatten)
                          (("2"
                            (case "NOT ((sturm_tarski_faster(1,
                                                                                                                     a,
                                                                                                                     d,
                                                                                                                     LAMBDA (k): LAMBDA (j): 1,
                                                                                                                     LAMBDA (k): 0,
                                                                                                                     LAMBDA (j): 1)
                                                                                       /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                            (("1" (hide 3)
                              (("1"
                                (typepred "sturm_tarski_faster(1,
                                                           a,
                                                           d,
                                                           LAMBDA (k): LAMBDA (j): 1,
                                                           LAMBDA (k): 0,
                                                           LAMBDA (j): 1)")
                                (("1" (replaces -1)
                                  (("1" (hide -)
                                    (("1" (expand "NSol_all")
                                      (("1"
                                        (lemma "empty_card[real]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "empty?")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (expand "Sol_all" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (grind)
                                                              nil)))))))))))
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst + "x!1")
                                                      (("2"
                                                        (expand "Sol_all" -)
                                                        (("2"
                                                          (flatten)
                                                          nil)))))))))))))))))))))))))))))
                             ("2" (replace -1)
                              (("2" (case "i = 0")
                                (("1" (replaces -1)
                                  (("1" (expand "rel5")
                                    (("1" (propax) nil)))))
                                 ("2" (assert)
                                  (("2" (label "izero" 1)
                                    (("2" (hide "izero")
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst + "x!1")
                                                  (("1"
                                                    (expand "rel5")
                                                    (("1"
                                                      (ground)
                                                      nil)))))))))))))
                                         ("2"
                                          (flatten +)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand "rel5")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (case
                                                               "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "greatify_rel")
                                                                    (("1"
                                                                      (propax)
                                                                      nil)))))))
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("3"
                                                                                    (hide
                                                                                     3)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 1)")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 (-2
                                                                                                  -3))
                                                                                                (("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil)))))))))))))))
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil)))))))))))))))))))))))))))))))))))))))))))
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        nil)))))))))))))))))))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))))))
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (skosimp
                                                                                         1)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil)))))))
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "sturm_tarski_faster(1,
                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                       d - 1,
                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                       LAMBDA (j): 1)")
                                                                                        (("3"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "NSol_all"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "empty_card[real]")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             4
                                                                                                             "x!1")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Sol_all"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (split
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil)))))
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "%1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           (-1
                                                                                                                            2))
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        nil)))))))))))))))))))))
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "0")
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (propax)
                                                          nil)))))
                                                     ("3"
                                                      (replace -1)
                                                      (("3"
                                                        (expand "rel5")
                                                        (("3"
                                                          (case
                                                           "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "greatify_rel")
                                                              (("1"
                                                                (propax)
                                                                nil)))))
                                                           ("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide -2)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "x")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (replace
                                                                           3)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 4)")
                                                                            (("2"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): a")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil)))
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))
                                                                                               ("3"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "sigma")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "sturm_tarski_faster(1,
                                                                                                                                                                                             poly_deriv(a),
                                                                                                                                                                                             d - 1,
                                                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                                                             LAMBDA (j): 4)")
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             (-2
                                                                                                              -3))
                                                                                                            (("3"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -3
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "poly_eq_le_degree"
                                                                                                                                       1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "poly_deriv")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "prod_polynomials")
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil)))))))))))))))
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "0")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))
                                                                                               ("4"
                                                                                                (inst
                                                                                                 +
                                                                                                 "x!1")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))))))))))))))))))))
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "poly_sign_near_infinity")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "M!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "M!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "poly_sign_near_negative_infinity")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "-M!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "even_or_odd")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "-M!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sign_ext")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil)))))))))))))))))))))))))))))
                                                                       ("3"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 4)")
                                                                        (("3"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (replaces
                                                                               -1)
                                                                              (("3"
                                                                                (expand
                                                                                 "NSol_all"
                                                                                 +)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "empty_card[real]")
                                                                                  (("3"
                                                                                    (inst?)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "Sol_all")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "0")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("4"
                                                      (replace -1)
                                                      (("4"
                                                        (expand "rel5")
                                                        (("4"
                                                          (propax)
                                                          nil)))))))))))))
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "NOT (i=2 OR i=5 )")
                                                  (("1"
                                                    (reveal "izero")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "rel5" 4)
                                                        (("1"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "rel5")
                                                          (("1"
                                                            (case
                                                             "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "greatify_rel")
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand "*")
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): (-1)*a")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "*")
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("3"
                                                                                        (hide
                                                                                         3)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "sturm_tarski_faster(1,
                                                                                                                       poly_deriv(a),
                                                                                                                       d - 1,
                                                                                                                       LAMBDA
                                                                                                                       (j):
                                                                                                                       LAMBDA (x: nat): (-1) * a(x),
                                                                                                                       LAMBDA (j): d,
                                                                                                                       (LAMBDA (j): 1))")
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     (-2
                                                                                                      -3))
                                                                                                    (("3"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "NSol_all"
                                                                                                           -)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "empty_card[real]")
                                                                                                            (("3"
                                                                                                              (inst?)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "Sol_all"
                                                                                                                         +)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                    (ii: nat):
                                                                                                                                                    LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                    LAMBDA (ii: nat): d,
                                                                                                                                                    (LAMBDA (i: nat): 1),
                                                                                                                                                    0)),
                                                                                                                        d - 1)
                                                                                                                       (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "scal_polynomial2"
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "poly_eq_le_degree")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "poly_deriv"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "prod_polynomials")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "*")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil)))))))))))))))))))
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "0")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (inst
                                                                                           +
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "scal_polynomial2")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "*"
                                                                                                 -)
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   -1
                                                                                                   +)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (lemma
                                                                                                       "sigma_tolambda")
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "polynomial"
                                                                                                         (-4
                                                                                                          1))
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil)))))))))))))))))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil)))))))))))))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): (-1)*a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil)))))))))))
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skosimp
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1)
                                                                                              (("2"
                                                                                                (skosimp
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil)))))))))))))
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "sturm_tarski_faster(1,
                                                                                                                             poly_deriv(a),
                                                                                                                             d - 1,
                                                                                                                             LAMBDA
                                                                                                                             (j):
                                                                                                                             LAMBDA (zz: nat): (-1) * a(zz),
                                                                                                                             LAMBDA (j): d,
                                                                                                                             (LAMBDA (j): 1))")
                                                                                          (("3"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("3"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "NSol_all"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "empty_card[real]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               5
                                                                                                               "x!1")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "Sol_all"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (lemma
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (hide-all-but
                                                                                                                                 (-3
                                                                                                                                  5))
                                                                                                                                (("3"
                                                                                                                                  (invoke
                                                                                                                                   (case
                                                                                                                                    "NOT %1 = %2")
                                                                                                                                   (!
                                                                                                                                    -1
                                                                                                                                    1
                                                                                                                                    2)
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "poly_eq_le_degree")
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (hide -2)
                                                                    (("2"
                                                                      (replace
                                                                       3)
                                                                      (("2"
                                                                        (case
                                                                         "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)))))
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                 poly_deriv(a),
                                                                                                                 d - 1,
                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                 LAMBDA (j): d,
                                                                                                                 (LAMBDA (j): 4))")
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): (-1)*a")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                 (ii: nat):
                                                                                                                                                 LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                 LAMBDA (ii: nat): d,
                                                                                                                                                 (LAMBDA (i: nat): 1),
                                                                                                                                                 0)),
                                                                                                                     d - 1)
                                                                                                                    (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (rewrite
                                                                                                                                       "scal_polynomial2"
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "poly_eq_le_degree"
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "poly_deriv")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "prod_polynomials")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "*")
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("2"
                                                                                                                                                      (ground)
                                                                                                                                                      nil)))))))))))))))))))
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "0")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))
                                                                                                 ("4"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (rewrite
                                                                                                       "scal_polynomial2")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil)))))))))))))))))
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil)))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil)))))))))))))))))))
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "poly_sign_near_infinity")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "(-1)*a"
                                                                       "d")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "M!1")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "M!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))))))
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "poly_sign_near_negative_infinity")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "-M!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "even_or_odd")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "-M!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sign_ext")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil)))))))))))))))))))))))))))))))
                                                                   ("3"
                                                                    (case
                                                                     "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "greatify_rel"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)))))
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                 poly_deriv(a),
                                                                                                                 d - 1,
                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                 LAMBDA (j): d,
                                                                                                                 (LAMBDA (j): 4))")
                                                                        (("1"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "NSol_all"
                                                                                   +)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "empty_card[real]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty?"
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Sol_all")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil)))))))))))))))))))
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "*"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (expand
                                                                             "*"
                                                                             1)
                                                                            (("3"
                                                                              (propax)
                                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (no "no" 3768582349
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (lemma preprocessingTheorem)
                (("1" (inst -1 "d" "a")
                  (("1" (split)
                    (("1" (inst -1 "i")
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (inst 1 "x")
                              (("2" (assert) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand preprocessingStep)
                (("2"
                  (case "NOT ((sturm_tarski_faster(1,
                                                                                                                                                    a,
                                                                                                                                                    d,
                                                                                                                                                    LAMBDA (k): LAMBDA (j): 1,
                                                                                                                                                    LAMBDA (k): 0,
                                                                                                                                                    LAMBDA (j): 1)
                                                                                                                      /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                  (("1" (hide 3)
                    (("1"
                      (typepred "sturm_tarski_faster(1,
                                                                                 a,
                                                                                 d,
                                                                                 LAMBDA (k): LAMBDA (j): 1,
                                                                                 LAMBDA (k): 0,
                                                                                 LAMBDA (j): 1)")
                      (("1" (replaces -1)
                        (("1" (hide -)
                          (("1" (expand "NSol_all")
                            (("1" (lemma "empty_card[real]")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "empty?")
                                    (("1" (expand "member")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst - "x!1")
                                            (("1"
                                              (expand "Sol_all" +)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -)
                                                  (("1" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "Sol_all" -)
                                            (("2"
                                              (inst -3 "x!1")
                                              (("2"
                                                (assert)
                                                (("2" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (postpone) nil nil)
                                         ("4" (postpone) nil nil)
                                         ("5" (postpone) nil nil)
                                         ("6" (postpone) nil nil)
                                         ("7" (postpone) nil nil)
                                         ("8" (postpone) nil nil)
                                         ("9" (postpone) nil nil)
                                         ("10" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (case "i = 0")
                      (("1" (replaces -1)
                        (("1" (expand "rel5") (("1" (postpone) nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2" (label "izero" 1)
                          (("2" (hide "izero")
                            (("2" (split +)
                              (("1" (propax) nil nil)
                               ("2" (flatten +)
                                (("2" (split 2)
                                  (("1" (propax) nil nil)
                                   ("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (case "NOT (i=2 OR i=5 )")
                                        (("1"
                                          (reveal "izero")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1" (postpone) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "rel5")
                                                (("1"
                                                  (case
                                                   "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (expand "greatify_rel")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "*")
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "LAMBDA (ii:nat): d"
                                                                 "LAMBDA (ii:nat): (-1)*a")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (skosimp
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (expand "rel5")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (split +)
                                                    (("1" (propax) nil nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "poly_sign_near_infinity")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "(-1)*a"
                                                           "d")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand "*")
                                                              (("2"
                                                                (expand
                                                                 "sign_ext")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (compute_solvable_single_def-7 nil 3768582001
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (lemma preprocessingTheorem)
                (("1" (inst -1 "d" "a")
                  (("1" (split)
                    (("1" (inst -1 "i")
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (split)
                            (("1" (propax) nil)
                             ("2" (inst 1 "x")
                              (("2" (assert) (("2" (grind) nil)))))))))
                         ("2" (propax) nil)))))
                     ("2" (assert) nil)))))))))
             ("2" (flatten)
              (("2" (expand preprocessingStep)
                (("2"
                  (case "NOT ((sturm_tarski_faster(1,
                                                                                                                                                    a,
                                                                                                                                                    d,
                                                                                                                                                    LAMBDA (k): LAMBDA (j): 1,
                                                                                                                                                    LAMBDA (k): 0,
                                                                                                                                                    LAMBDA (j): 1)
                                                                                                                      /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                  (("1" (hide 3)
                    (("1"
                      (typepred "sturm_tarski_faster(1,
                                                                                 a,
                                                                                 d,
                                                                                 LAMBDA (k): LAMBDA (j): 1,
                                                                                 LAMBDA (k): 0,
                                                                                 LAMBDA (j): 1)")
                      (("1" (replaces -1)
                        (("1" (hide -)
                          (("1" (expand "NSol_all")
                            (("1" (lemma "empty_card[real]")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "empty?")
                                    (("1" (expand "member")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst - "x!1")
                                            (("1"
                                              (expand "Sol_all" +)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -)
                                                  (("1" (grind) nil)))))))))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst + "x!1")
                                            (("2"
                                              (expand "Sol_all" -)
                                              (("2"
                                                (flatten)
                                                nil)))))))))))))))))))))))))))))
                   ("2" (replace -1)
                    (("2" (case "i = 0")
                      (("1" (replaces -1)
                        (("1" (expand "rel5") (("1" (propax) nil)))))
                       ("2" (assert)
                        (("2" (label "izero" 1)
                          (("2" (hide "izero")
                            (("2" (split +)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (hide -2)
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst + "x!1")
                                        (("1"
                                          (expand "rel5")
                                          (("1" (ground) nil)))))))))))))
                               ("2" (flatten +)
                                (("2" (split 2)
                                  (("1" (flatten)
                                    (("1"
                                      (case
                                       "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                      (("1" (flatten) (("1" (assert) nil)))
                                       ("2"
                                        (assert)
                                        (("2"
                                          (split -)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case
                                                     "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (decompose-equality 1)
                                                        (("1"
                                                          (expand
                                                           "greatify_rel")
                                                          (("1"
                                                            (propax)
                                                            nil)))))))
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "LAMBDA (ii:nat): d"
                                                                 "LAMBDA (ii:nat): a")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))
                                                                         ("2"
                                                                          (inst
                                                                           -1
                                                                           "0")
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))
                                                                         ("3"
                                                                          (hide
                                                                           3)
                                                                          (("3"
                                                                            (skosimp*)
                                                                            (("3"
                                                                              (expand
                                                                               "sigma")
                                                                              (("3"
                                                                                (expand
                                                                                 "sigma")
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "sturm_tarski_faster(1,
                                                                                                                                                                                                                                   poly_deriv(a),
                                                                                                                                                                                                                                   d - 1,
                                                                                                                                                                                                                                   LAMBDA (j): a,
                                                                                                                                                                                                                                   LAMBDA (j): d,
                                                                                                                                                                                                                                   LAMBDA (j): 1)")
                                                                                    (("3"
                                                                                      (hide
                                                                                       (-2
                                                                                        -3))
                                                                                      (("3"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "NSol_all"
                                                                                             -)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "empty_card[real]")
                                                                                              (("3"
                                                                                                (inst?)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "empty?")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "x!1")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "Sol_all"
                                                                                                           +)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "poly_eq_le_degree")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "poly_deriv"
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "prod_polynomials")
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (ground)
                                                                                                                              nil)))))))))))))))
                                                                                                               ("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "0")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))
                                                                         ("4"
                                                                          (skosimp*)
                                                                          (("4"
                                                                            (inst
                                                                             +
                                                                             "x!1")
                                                                            (("4"
                                                                              (skosimp*)
                                                                              nil)))))))))))))))))))
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "LAMBDA (ii:nat): d"
                                                                 "LAMBDA (ii:nat): a")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "x!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))))))
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (skosimp
                                                                               1)
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 1)
                                                                                (("2"
                                                                                  (skosimp
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))
                                                                             ("3"
                                                                              (typepred
                                                                               "sturm_tarski_faster(1,
                                                                                                                                                                                                                                                   poly_deriv(a),
                                                                                                                                                                                                                                                   d - 1,
                                                                                                                                                                                                                                                   LAMBDA (j): a,
                                                                                                                                                                                                                                                   LAMBDA (j): d,
                                                                                                                                                                                                                                                   LAMBDA (j): 1)")
                                                                              (("3"
                                                                                (hide
                                                                                 (-2
                                                                                  -3))
                                                                                (("3"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "NSol_all"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "empty_card[real]")
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "empty?")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   4
                                                                                                   "x!1")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "Sol_all"
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (split
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sigma"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "sigma"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (invoke
                                                                                                               (case
                                                                                                                "%1 = %2")
                                                                                                               (!
                                                                                                                -1
                                                                                                                1)
                                                                                                               (!
                                                                                                                1
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 (-1
                                                                                                                  2))
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "poly_eq_le_degree")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "poly_deriv")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "prod_polynomials")
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (ground)
                                                                                                                              nil)))))))))))))))))))))
                                                                                                         ("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "0")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (expand "rel5")
                                              (("2" (propax) nil)))))
                                           ("3"
                                            (replace -1)
                                            (("3"
                                              (expand "rel5")
                                              (("3"
                                                (case
                                                 "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                                (("1"
                                                  (decompose-equality 1)
                                                  (("1"
                                                    (expand "greatify_rel")
                                                    (("1" (propax) nil)))))
                                                 ("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst + "x")
                                                                (("1"
                                                                  (inst + "x")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))
                                                             ("2"
                                                              (hide -2)
                                                              (("2"
                                                                (replace 3)
                                                                (("2"
                                                                  (typepred
                                                                   "sturm_tarski_faster(1,
                                                                                                                                                                                                                                   poly_deriv(a),
                                                                                                                                                                                                                                   d - 1,
                                                                                                                                                                                                                                   LAMBDA (j): a,
                                                                                                                                                                                                                                   LAMBDA (j): d,
                                                                                                                                                                                                                                   LAMBDA (j): 4)")
                                                                  (("2"
                                                                    (hide
                                                                     (-2 -3))
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): a")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten
                                                                                 -1)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))
                                                                                     ("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil)))
                                                                                     ("3"
                                                                                      (hide
                                                                                       3)
                                                                                      (("3"
                                                                                        (skosimp*)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (typepred
                                                                                                 "sturm_tarski_faster(1,
                                                                                                                                                                                                                                                                         poly_deriv(a),
                                                                                                                                                                                                                                                                         d - 1,
                                                                                                                                                                                                                                                                         LAMBDA (j): a,
                                                                                                                                                                                                                                                                         LAMBDA (j): d,
                                                                                                                                                                                                                                                                         LAMBDA (j): 4)")
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   (-2
                                                                                                    -3))
                                                                                                  (("3"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!2")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -3
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree"
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil)))))))))))))))
                                                                                                                         ("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "0")
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil)))))))))))))))))))))))))))))))))))))))))
                                                                                     ("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))))))))))))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (lemma
                                                               "poly_sign_near_infinity")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "M!1")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "M!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "sign_ext")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))))))))))))
                                                             ("2"
                                                              (split -)
                                                              (("1"
                                                                (propax)
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "poly_sign_near_negative_infinity")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "-M!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "even_or_odd")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "-M!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil)))))))))))))))))))))))))))))
                                                             ("3"
                                                              (typepred
                                                               "sturm_tarski_faster(1,
                                                                                                                                                                                                                                   poly_deriv(a),
                                                                                                                                                                                                                                   d - 1,
                                                                                                                                                                                                                                   LAMBDA (j): a,
                                                                                                                                                                                                                                   LAMBDA (j): d,
                                                                                                                                                                                                                                   LAMBDA (j): 4)")
                                                              (("3"
                                                                (hide (-2 -3))
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (replaces
                                                                     -1)
                                                                    (("3"
                                                                      (expand
                                                                       "NSol_all"
                                                                       +)
                                                                      (("3"
                                                                        (lemma
                                                                         "empty_card[real]")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "empty?"
                                                                               1)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst
                                                                                   +
                                                                                   "x!1")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "Sol_all")
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (inst
                                                                                           -
                                                                                           "0")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                           ("4"
                                            (replace -1)
                                            (("4"
                                              (expand "rel5")
                                              (("4" (propax) nil)))))))))))))
                                   ("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (case "NOT (i=2 OR i=5 )")
                                        (("1"
                                          (reveal "izero")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "rel5" 4)
                                              (("1" (assert) nil)))))))
                                         ("2"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "rel5")
                                                (("1"
                                                  (case
                                                   "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (expand "greatify_rel")
                                                      (("1" (propax) nil)))))
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "*")
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "strict_poly_system_solvable")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "0"
                                                                   "LAMBDA (ii:nat): d"
                                                                   "LAMBDA (ii:nat): (-1)*a")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "*")
                                                                      (("1"
                                                                        (flatten
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))
                                                                             ("2"
                                                                              (inst
                                                                               -1
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                nil)))
                                                                             ("3"
                                                                              (hide
                                                                               3)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (expand
                                                                                   "sigma")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "sigma")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (typepred
                                                                                         "sturm_tarski_faster(1,
                                                                                                                                                                                                   poly_deriv(a),
                                                                                                                                                                                                   d - 1,
                                                                                                                                                                                                   LAMBDA
                                                                                                                                                                                                   (j):
                                                                                                                                                                                                   LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                                                   LAMBDA (j): d,
                                                                                                                                                                                                   (LAMBDA (j): 1))")
                                                                                        (("3"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "NSol_all"
                                                                                                 -)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "empty_card[real]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!1")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "member")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Sol_all"
                                                                                                               +)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                                                                                                                     (ii: nat):
                                                                                                                                                                                                                                                     LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                                                                                                     LAMBDA (ii: nat): d,
                                                                                                                                                                                                                                                     (LAMBDA (i: nat): 1),
                                                                                                                                                                                                                                                     0)),
                                                                                                                                                                                                                         d - 1)
                                                                                                                                                                                                                        (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (rewrite
                                                                                                                       "scal_polynomial2"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "poly_eq_le_degree")
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "poly_deriv"
                                                                                                                               +)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "prod_polynomials")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "*")
                                                                                                                                  (("2"
                                                                                                                                    (lift-if)
                                                                                                                                    (("2"
                                                                                                                                      (ground)
                                                                                                                                      nil)))))))))))))))))))
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "0")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))
                                                                             ("4"
                                                                              (skosimp*)
                                                                              (("4"
                                                                                (inst
                                                                                 +
                                                                                 "x!1")
                                                                                (("4"
                                                                                  (skosimp*)
                                                                                  (("4"
                                                                                    (lemma
                                                                                     "scal_polynomial2")
                                                                                    (("4"
                                                                                      (expand
                                                                                       "*"
                                                                                       -)
                                                                                      (("4"
                                                                                        (rewrite
                                                                                         -1
                                                                                         +)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "sigma_tolambda")
                                                                                            (("4"
                                                                                              (expand
                                                                                               "polynomial"
                                                                                               (-4
                                                                                                1))
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))))))))))))))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (expand
                                                                       "*"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil)))))))))))))
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "LAMBDA (ii:nat): d"
                                                                 "LAMBDA (ii:nat): (-1)*a")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "scal_polynomial2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))))))))))
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (skosimp
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "*"
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)))))
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (hide
                                                                                     1)
                                                                                    (("2"
                                                                                      (skosimp
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))))))
                                                                               ("3"
                                                                                (typepred
                                                                                 "sturm_tarski_faster(1,
                                                                                                                                                                                                               poly_deriv(a),
                                                                                                                                                                                                               d - 1,
                                                                                                                                                                                                               LAMBDA
                                                                                                                                                                                                               (j):
                                                                                                                                                                                                               LAMBDA (zz: nat): (-1) * a(zz),
                                                                                                                                                                                                               LAMBDA (j): d,
                                                                                                                                                                                                               (LAMBDA (j): 1))")
                                                                                (("3"
                                                                                  (hide
                                                                                   (-2
                                                                                    -3))
                                                                                  (("3"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "NSol_all"
                                                                                       -1)
                                                                                      (("3"
                                                                                        (lemma
                                                                                         "empty_card[real]")
                                                                                        (("3"
                                                                                          (inst?)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "empty?")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     5
                                                                                                     "x!1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "Sol_all"
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (flatten)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "0")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (lemma
                                                                                                               "scal_polynomial2")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "*"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (rewrite
                                                                                                                   -1)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (hide-all-but
                                                                                                                       (-3
                                                                                                                        5))
                                                                                                                      (("3"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "NOT %1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1
                                                                                                                          2)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "poly_eq_le_degree")
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))))))))))))))))
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (expand "rel5")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst + "x")
                                                            (("1"
                                                              (inst + "x")
                                                              (("1"
                                                                (assert)
                                                                nil)))))))
                                                         ("2"
                                                          (hide -2)
                                                          (("2"
                                                            (replace 3)
                                                            (("2"
                                                              (case
                                                               "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "greatify_rel"
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)))))
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (typepred
                                                                   "sturm_tarski_faster(1,
                                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                                       d - 1,
                                                                                                                                                                                       LAMBDA (j): (-1) * a,
                                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                                       (LAMBDA (j): 4))")
                                                                  (("1"
                                                                    (hide
                                                                     (-2 -3))
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): (-1)*a")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "*"
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "*")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil)))))))))))))
                                                                                       ("3"
                                                                                        (hide
                                                                                         3)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "*")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (skosimp*)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "sigma")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!2")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                                                                                                                         (ii: nat):
                                                                                                                                                                                                                                                         LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                                                                                                         LAMBDA (ii: nat): d,
                                                                                                                                                                                                                                                         (LAMBDA (i: nat): 1),
                                                                                                                                                                                                                                                         0)),
                                                                                                                                                                                                                             d - 1)
                                                                                                                                                                                                                            (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (rewrite
                                                                                                                             "scal_polynomial2"
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "poly_eq_le_degree"
                                                                                                                               1
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "poly_deriv")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "prod_polynomials")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "*")
                                                                                                                                        (("2"
                                                                                                                                          (lift-if)
                                                                                                                                          (("2"
                                                                                                                                            (ground)
                                                                                                                                            nil)))))))))))))))))))
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil)))))))))))))))))))))))))))))))))))))))
                                                                                       ("4"
                                                                                        (inst
                                                                                         +
                                                                                         "x!1")
                                                                                        (("4"
                                                                                          (skosimp*)
                                                                                          (("4"
                                                                                            (rewrite
                                                                                             "scal_polynomial2")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil)))))))))))))))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (expand
                                                                       "*"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "*"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))))))
                                                                   ("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (expand
                                                                       "*"
                                                                       1)
                                                                      (("3"
                                                                        (propax)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (lemma
                                                           "poly_sign_near_infinity")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "(-1)*a"
                                                             "d")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "M!1")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "M!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "scal_polynomial2")
                                                                        (("1"
                                                                          (expand
                                                                           "*")
                                                                          (("1"
                                                                            (expand
                                                                             "sign_ext")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))))))))))))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "poly_sign_near_negative_infinity")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "-M!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "even_or_odd")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 -3)
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "-M!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sign_ext")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil)))))))))))))))))))))))))))))))
                                                         ("3"
                                                          (case
                                                           "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "greatify_rel"
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil)))))
                                                           ("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (typepred
                                                               "sturm_tarski_faster(1,
                                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                                       d - 1,
                                                                                                                                                                                       LAMBDA (j): (-1) * a,
                                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                                       (LAMBDA (j): 4))")
                                                              (("1"
                                                                (hide (-2 -3))
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "NSol_all"
                                                                         +)
                                                                        (("1"
                                                                          (lemma
                                                                           "empty_card[real]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?"
                                                                                 1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "Sol_all")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "scal_polynomial2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil)))))))))))))))))))
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (expand
                                                                   "*"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))
                                                               ("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (expand
                                                                   "*"
                                                                   1)
                                                                  (("3"
                                                                    (propax)
                                                                    nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (compute_solvable_single_def-6 nil 3768581864
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (lemma preprocessingTheorem)
                (("1" (inst -1 "d" "a")
                  (("1" (split)
                    (("1" (inst -1 "i")
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (split)
                            (("1" (propax) nil)
                             ("2" (inst 1 "x")
                              (("2" (assert) (("2" (grind) nil)))))))))
                         ("2" (propax) nil)))))
                     ("2" (assert) nil)))))))))
             ("2" (expand preprocessingStep)
              (("2" (flatten)
                (("2"
                  (case "NOT ((sturm_tarski_faster(1,
                                                                                                                                           a,
                                                                                                                                           d,
                                                                                                                                           LAMBDA (k): LAMBDA (j): 1,
                                                                                                                                           LAMBDA (k): 0,
                                                                                                                                           LAMBDA (j): 1)
                                                                                                             /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                  (("1" (hide 3)
                    (("1"
                      (typepred "sturm_tarski_faster(1,
                                                                           a,
                                                                           d,
                                                                           LAMBDA (k): LAMBDA (j): 1,
                                                                           LAMBDA (k): 0,
                                                                           LAMBDA (j): 1)")
                      (("1" (replaces -1)
                        (("1" (hide -)
                          (("1" (expand "NSol_all")
                            (("1" (lemma "empty_card[real]")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "empty?")
                                    (("1" (expand "member")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst - "x!1")
                                            (("1"
                                              (expand "Sol_all" +)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -)
                                                  (("1" (grind) nil)))))))))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst + "x!1")
                                            (("2"
                                              (expand "Sol_all" -)
                                              (("2"
                                                (flatten)
                                                nil)))))))))))))))))))))))))))))
                   ("2" (replace -1)
                    (("2" (case "i = 0")
                      (("1" (replaces -1)
                        (("1" (expand "rel5") (("1" (propax) nil)))))
                       ("2" (assert)
                        (("2" (label "izero" 1)
                          (("2" (hide "izero")
                            (("2" (split +)
                              (("1" (flatten)
                                (("1" (assert)
                                  (("1" (hide -2)
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst + "x!1")
                                        (("1"
                                          (expand "rel5")
                                          (("1" (ground) nil)))))))))))))
                               ("2" (flatten +)
                                (("2" (split 2)
                                  (("1" (flatten)
                                    (("1"
                                      (case
                                       "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                      (("1" (flatten) (("1" (assert) nil)))
                                       ("2"
                                        (assert)
                                        (("2"
                                          (split -)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case
                                                     "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (decompose-equality 1)
                                                        (("1"
                                                          (expand
                                                           "greatify_rel")
                                                          (("1"
                                                            (propax)
                                                            nil)))))))
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "LAMBDA (ii:nat): d"
                                                                 "LAMBDA (ii:nat): a")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))
                                                                         ("2"
                                                                          (inst
                                                                           -1
                                                                           "0")
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))
                                                                         ("3"
                                                                          (hide
                                                                           3)
                                                                          (("3"
                                                                            (skosimp*)
                                                                            (("3"
                                                                              (expand
                                                                               "sigma")
                                                                              (("3"
                                                                                (expand
                                                                                 "sigma")
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "sturm_tarski_faster(1,
                                                                                                                                                                                                             poly_deriv(a),
                                                                                                                                                                                                             d - 1,
                                                                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                                                                             LAMBDA (j): 1)")
                                                                                    (("3"
                                                                                      (hide
                                                                                       (-2
                                                                                        -3))
                                                                                      (("3"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "NSol_all"
                                                                                             -)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "empty_card[real]")
                                                                                              (("3"
                                                                                                (inst?)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "empty?")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "x!1")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "Sol_all"
                                                                                                           +)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "poly_eq_le_degree")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "poly_deriv"
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "prod_polynomials")
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (ground)
                                                                                                                              nil)))))))))))))))
                                                                                                               ("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "0")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))
                                                                         ("4"
                                                                          (skosimp*)
                                                                          (("4"
                                                                            (inst
                                                                             +
                                                                             "x!1")
                                                                            (("4"
                                                                              (skosimp*)
                                                                              nil)))))))))))))))))))
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "LAMBDA (ii:nat): d"
                                                                 "LAMBDA (ii:nat): a")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "x!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))))))
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (skosimp
                                                                               1)
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 1)
                                                                                (("2"
                                                                                  (skosimp
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))
                                                                             ("3"
                                                                              (typepred
                                                                               "sturm_tarski_faster(1,
                                                                                                                                                                                                                           poly_deriv(a),
                                                                                                                                                                                                                           d - 1,
                                                                                                                                                                                                                           LAMBDA (j): a,
                                                                                                                                                                                                                           LAMBDA (j): d,
                                                                                                                                                                                                                           LAMBDA (j): 1)")
                                                                              (("3"
                                                                                (hide
                                                                                 (-2
                                                                                  -3))
                                                                                (("3"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "NSol_all"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "empty_card[real]")
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "empty?")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   4
                                                                                                   "x!1")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "Sol_all"
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (split
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sigma"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)))))
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "sigma"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (invoke
                                                                                                               (case
                                                                                                                "%1 = %2")
                                                                                                               (!
                                                                                                                -1
                                                                                                                1)
                                                                                                               (!
                                                                                                                1
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 (-1
                                                                                                                  2))
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "poly_eq_le_degree")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "poly_deriv")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "prod_polynomials")
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (ground)
                                                                                                                              nil)))))))))))))))))))))
                                                                                                         ("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "0")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (expand "rel5")
                                              (("2" (propax) nil)))))
                                           ("3"
                                            (replace -1)
                                            (("3"
                                              (expand "rel5")
                                              (("3"
                                                (case
                                                 "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                                (("1"
                                                  (decompose-equality 1)
                                                  (("1"
                                                    (expand "greatify_rel")
                                                    (("1" (propax) nil)))))
                                                 ("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst + "x")
                                                                (("1"
                                                                  (inst + "x")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))
                                                             ("2"
                                                              (hide -2)
                                                              (("2"
                                                                (replace 3)
                                                                (("2"
                                                                  (typepred
                                                                   "sturm_tarski_faster(1,
                                                                                                                                                                                                             poly_deriv(a),
                                                                                                                                                                                                             d - 1,
                                                                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                                                                             LAMBDA (j): 4)")
                                                                  (("2"
                                                                    (hide
                                                                     (-2 -3))
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): a")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten
                                                                                 -1)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))
                                                                                     ("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil)))
                                                                                     ("3"
                                                                                      (hide
                                                                                       3)
                                                                                      (("3"
                                                                                        (skosimp*)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (typepred
                                                                                                 "sturm_tarski_faster(1,
                                                                                                                                                                                                                                                 poly_deriv(a),
                                                                                                                                                                                                                                                 d - 1,
                                                                                                                                                                                                                                                 LAMBDA (j): a,
                                                                                                                                                                                                                                                 LAMBDA (j): d,
                                                                                                                                                                                                                                                 LAMBDA (j): 4)")
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   (-2
                                                                                                    -3))
                                                                                                  (("3"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!2")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -3
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree"
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil)))))))))))))))
                                                                                                                         ("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "0")
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil)))))))))))))))))))))))))))))))))))))))))
                                                                                     ("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))))))))))))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (lemma
                                                               "poly_sign_near_infinity")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "M!1")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "M!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "sign_ext")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))))))))))))
                                                             ("2"
                                                              (split -)
                                                              (("1"
                                                                (propax)
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "poly_sign_near_negative_infinity")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "-M!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "even_or_odd")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "-M!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil)))))))))))))))))))))))))))))
                                                             ("3"
                                                              (typepred
                                                               "sturm_tarski_faster(1,
                                                                                                                                                                                                             poly_deriv(a),
                                                                                                                                                                                                             d - 1,
                                                                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                                                                             LAMBDA (j): 4)")
                                                              (("3"
                                                                (hide (-2 -3))
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (replaces
                                                                     -1)
                                                                    (("3"
                                                                      (expand
                                                                       "NSol_all"
                                                                       +)
                                                                      (("3"
                                                                        (lemma
                                                                         "empty_card[real]")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "empty?"
                                                                               1)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst
                                                                                   +
                                                                                   "x!1")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "Sol_all")
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (inst
                                                                                           -
                                                                                           "0")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                           ("4"
                                            (replace -1)
                                            (("4"
                                              (expand "rel5")
                                              (("4" (propax) nil)))))))))))))
                                   ("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (case "NOT (i=2 OR i=5 )")
                                        (("1"
                                          (reveal "izero")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "rel5" 4)
                                              (("1" (assert) nil)))))))
                                         ("2"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "rel5")
                                                (("1"
                                                  (case
                                                   "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (expand "greatify_rel")
                                                      (("1" (propax) nil)))))
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "*")
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "strict_poly_system_solvable")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "0"
                                                                   "LAMBDA (ii:nat): d"
                                                                   "LAMBDA (ii:nat): (-1)*a")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "*")
                                                                      (("1"
                                                                        (flatten
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))
                                                                             ("2"
                                                                              (inst
                                                                               -1
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                nil)))
                                                                             ("3"
                                                                              (hide
                                                                               3)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (expand
                                                                                   "sigma")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "sigma")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (typepred
                                                                                         "sturm_tarski_faster(1,
                                                                                                                                                                           poly_deriv(a),
                                                                                                                                                                           d - 1,
                                                                                                                                                                           LAMBDA
                                                                                                                                                                           (j):
                                                                                                                                                                           LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                           LAMBDA (j): d,
                                                                                                                                                                           (LAMBDA (j): 1))")
                                                                                        (("3"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "NSol_all"
                                                                                                 -)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "empty_card[real]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!1")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "member")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Sol_all"
                                                                                                               +)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                                                                                      (ii: nat):
                                                                                                                                                                                                                      LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                                                                      LAMBDA (ii: nat): d,
                                                                                                                                                                                                                      (LAMBDA (i: nat): 1),
                                                                                                                                                                                                                      0)),
                                                                                                                                                                                          d - 1)
                                                                                                                                                                                         (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (rewrite
                                                                                                                       "scal_polynomial2"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "poly_eq_le_degree")
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "poly_deriv"
                                                                                                                               +)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "prod_polynomials")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "*")
                                                                                                                                  (("2"
                                                                                                                                    (lift-if)
                                                                                                                                    (("2"
                                                                                                                                      (ground)
                                                                                                                                      nil)))))))))))))))))))
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "0")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))
                                                                             ("4"
                                                                              (skosimp*)
                                                                              (("4"
                                                                                (inst
                                                                                 +
                                                                                 "x!1")
                                                                                (("4"
                                                                                  (skosimp*)
                                                                                  (("4"
                                                                                    (lemma
                                                                                     "scal_polynomial2")
                                                                                    (("4"
                                                                                      (expand
                                                                                       "*"
                                                                                       -)
                                                                                      (("4"
                                                                                        (rewrite
                                                                                         -1
                                                                                         +)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "sigma_tolambda")
                                                                                            (("4"
                                                                                              (expand
                                                                                               "polynomial"
                                                                                               (-4
                                                                                                1))
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))))))))))))))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (expand
                                                                       "*"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil)))))))))))))
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "LAMBDA (ii:nat): d"
                                                                 "LAMBDA (ii:nat): (-1)*a")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "scal_polynomial2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))))))))))
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (skosimp
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "*"
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)))))
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (hide
                                                                                     1)
                                                                                    (("2"
                                                                                      (skosimp
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))))))
                                                                               ("3"
                                                                                (typepred
                                                                                 "sturm_tarski_faster(1,
                                                                                                                                                                                     poly_deriv(a),
                                                                                                                                                                                     d - 1,
                                                                                                                                                                                     LAMBDA
                                                                                                                                                                                     (j):
                                                                                                                                                                                     LAMBDA (zz: nat): (-1) * a(zz),
                                                                                                                                                                                     LAMBDA (j): d,
                                                                                                                                                                                     (LAMBDA (j): 1))")
                                                                                (("3"
                                                                                  (hide
                                                                                   (-2
                                                                                    -3))
                                                                                  (("3"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "NSol_all"
                                                                                       -1)
                                                                                      (("3"
                                                                                        (lemma
                                                                                         "empty_card[real]")
                                                                                        (("3"
                                                                                          (inst?)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "empty?")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     5
                                                                                                     "x!1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "Sol_all"
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (flatten)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "0")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (lemma
                                                                                                               "scal_polynomial2")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "*"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (rewrite
                                                                                                                   -1)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (hide-all-but
                                                                                                                       (-3
                                                                                                                        5))
                                                                                                                      (("3"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "NOT %1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1
                                                                                                                          2)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "poly_eq_le_degree")
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))))))))))))))))
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (expand "rel5")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst + "x")
                                                            (("1"
                                                              (inst + "x")
                                                              (("1"
                                                                (assert)
                                                                nil)))))))
                                                         ("2"
                                                          (hide -2)
                                                          (("2"
                                                            (replace 3)
                                                            (("2"
                                                              (case
                                                               "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "greatify_rel"
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)))))
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (typepred
                                                                   "sturm_tarski_faster(1,
                                                                                                                                                                 poly_deriv(a),
                                                                                                                                                                 d - 1,
                                                                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                                                                 LAMBDA (j): d,
                                                                                                                                                                 (LAMBDA (j): 4))")
                                                                  (("1"
                                                                    (hide
                                                                     (-2 -3))
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): (-1)*a")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "*"
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "*")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil)))))))))))))
                                                                                       ("3"
                                                                                        (hide
                                                                                         3)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "*")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (skosimp*)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "sigma")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!2")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                                                                                      (ii: nat):
                                                                                                                                                                                                                      LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                                                                      LAMBDA (ii: nat): d,
                                                                                                                                                                                                                      (LAMBDA (i: nat): 1),
                                                                                                                                                                                                                      0)),
                                                                                                                                                                                          d - 1)
                                                                                                                                                                                         (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (rewrite
                                                                                                                             "scal_polynomial2"
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "poly_eq_le_degree"
                                                                                                                               1
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "poly_deriv")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "prod_polynomials")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "*")
                                                                                                                                        (("2"
                                                                                                                                          (lift-if)
                                                                                                                                          (("2"
                                                                                                                                            (ground)
                                                                                                                                            nil)))))))))))))))))))
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil)))))))))))))))))))))))))))))))))))))))
                                                                                       ("4"
                                                                                        (inst
                                                                                         +
                                                                                         "x!1")
                                                                                        (("4"
                                                                                          (skosimp*)
                                                                                          (("4"
                                                                                            (rewrite
                                                                                             "scal_polynomial2")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil)))))))))))))))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (expand
                                                                       "*"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "*"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))))))
                                                                   ("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (expand
                                                                       "*"
                                                                       1)
                                                                      (("3"
                                                                        (propax)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (lemma
                                                           "poly_sign_near_infinity")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "(-1)*a"
                                                             "d")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "M!1")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "M!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "scal_polynomial2")
                                                                        (("1"
                                                                          (expand
                                                                           "*")
                                                                          (("1"
                                                                            (expand
                                                                             "sign_ext")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))))))))))))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "poly_sign_near_negative_infinity")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "-M!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "even_or_odd")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 -3)
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "-M!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sign_ext")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil)))))))))))))))))))))))))))))))
                                                         ("3"
                                                          (case
                                                           "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "greatify_rel"
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil)))))
                                                           ("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (typepred
                                                               "sturm_tarski_faster(1,
                                                                                                                                                                 poly_deriv(a),
                                                                                                                                                                 d - 1,
                                                                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                                                                 LAMBDA (j): d,
                                                                                                                                                                 (LAMBDA (j): 4))")
                                                              (("1"
                                                                (hide (-2 -3))
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "NSol_all"
                                                                         +)
                                                                        (("1"
                                                                          (lemma
                                                                           "empty_card[real]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "empty?"
                                                                                 1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "Sol_all")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "scal_polynomial2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil)))))))))))))))))))
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (expand
                                                                   "*"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))
                                                               ("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (expand
                                                                   "*"
                                                                   1)
                                                                  (("3"
                                                                    (propax)
                                                                    nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (compute_solvable_single_def-5 nil 3768579740
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (lemma preprocessingTheorem)
                (("1" (inst -1 "d" "a")
                  (("1" (split)
                    (("1" (inst -1 "i")
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (split)
                            (("1" (propax) nil)
                             ("2" (inst 1 "x")
                              (("2" (assert) (("2" (grind) nil)))))))))
                         ("2" (propax) nil)))))
                     ("2" (assert) nil)))))))))
             ("2" (flatten)
              (("2"
                (case "NOT ((sturm_tarski_faster(1,
                                                                                                                                  a,
                                                                                                                                  d,
                                                                                                                                  LAMBDA (k): LAMBDA (j): 1,
                                                                                                                                  LAMBDA (k): 0,
                                                                                                                                  LAMBDA (j): 1)
                                                                                                    /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                (("1" (hide 3)
                  (("1"
                    (typepred "sturm_tarski_faster(1,
                                                                     a,
                                                                     d,
                                                                     LAMBDA (k): LAMBDA (j): 1,
                                                                     LAMBDA (k): 0,
                                                                     LAMBDA (j): 1)")
                    (("1" (replaces -1)
                      (("1" (hide -)
                        (("1" (expand "NSol_all")
                          (("1" (lemma "empty_card[real]")
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "empty?")
                                  (("1" (expand "member")
                                    (("1" (ground)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst - "x!1")
                                          (("1"
                                            (expand "Sol_all" +)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -)
                                                (("1" (grind) nil)))))))))))
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst + "x!1")
                                          (("2"
                                            (expand "Sol_all" -)
                                            (("2"
                                              (flatten)
                                              nil)))))))))))))))))))))))))))))
                 ("2" (replace -1)
                  (("2" (case "i = 0")
                    (("1" (replaces -1)
                      (("1" (expand "rel5") (("1" (propax) nil)))))
                     ("2" (assert)
                      (("2" (label "izero" 1)
                        (("2" (hide "izero")
                          (("2" (split +)
                            (("1" (flatten)
                              (("1" (assert)
                                (("1" (hide -2)
                                  (("1" (skosimp*)
                                    (("1" (inst + "x!1")
                                      (("1"
                                        (expand "rel5")
                                        (("1" (ground) nil)))))))))))))
                             ("2" (flatten +)
                              (("2" (split 2)
                                (("1" (flatten)
                                  (("1"
                                    (case "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                    (("1" (flatten) (("1" (assert) nil)))
                                     ("2" (assert)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "rel5")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (case
                                                   "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (expand
                                                         "greatify_rel")
                                                        (("1"
                                                          (propax)
                                                          nil)))))))
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "strict_poly_system_solvable")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "0"
                                                               "LAMBDA (ii:nat): d"
                                                               "LAMBDA (ii:nat): a")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten -1)
                                                                  (("1"
                                                                    (hide -2)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))
                                                                       ("3"
                                                                        (hide
                                                                         3)
                                                                        (("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (expand
                                                                             "sigma")
                                                                            (("3"
                                                                              (expand
                                                                               "sigma")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "sturm_tarski_faster(1,
                                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                                       d - 1,
                                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                                       LAMBDA (j): 1)")
                                                                                  (("3"
                                                                                    (hide
                                                                                     (-2
                                                                                      -3))
                                                                                    (("3"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "NSol_all"
                                                                                           -)
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "empty_card[real]")
                                                                                            (("3"
                                                                                              (inst?)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "empty?")
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x!1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "Sol_all"
                                                                                                         +)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2
                                                                                                               1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "poly_eq_le_degree")
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "poly_deriv"
                                                                                                                       +)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "prod_polynomials")
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            nil)))))))))))))))
                                                                                                             ("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "0")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))
                                                                       ("4"
                                                                        (skosimp*)
                                                                        (("4"
                                                                          (inst
                                                                           +
                                                                           "x!1")
                                                                          (("4"
                                                                            (skosimp*)
                                                                            nil)))))))))))))))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "strict_poly_system_solvable")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "0"
                                                               "LAMBDA (ii:nat): d"
                                                               "LAMBDA (ii:nat): a")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (skosimp
                                                                             1)
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               1)
                                                                              (("2"
                                                                                (skosimp
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))
                                                                           ("3"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                                                                                                   poly_deriv(a),
                                                                                                                                                                                                   d - 1,
                                                                                                                                                                                                   LAMBDA (j): a,
                                                                                                                                                                                                   LAMBDA (j): d,
                                                                                                                                                                                                   LAMBDA (j): 1)")
                                                                            (("3"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("3"
                                                                                (replaces
                                                                                 -1)
                                                                                (("3"
                                                                                  (expand
                                                                                   "NSol_all"
                                                                                   -1)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "empty_card[real]")
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("3"
                                                                                              (skosimp*)
                                                                                              (("3"
                                                                                                (inst
                                                                                                 4
                                                                                                 "x!1")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "Sol_all"
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (flatten)
                                                                                                    (("3"
                                                                                                      (split
                                                                                                       4)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "sigma"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "sigma"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (invoke
                                                                                                             (case
                                                                                                              "%1 = %2")
                                                                                                             (!
                                                                                                              -1
                                                                                                              1)
                                                                                                             (!
                                                                                                              1
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               (-1
                                                                                                                2))
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "poly_eq_le_degree")
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "poly_deriv")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "prod_polynomials")
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil)))))))))))))))))))))
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "0")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (expand "rel5")
                                            (("2" (propax) nil)))))
                                         ("3"
                                          (replace -1)
                                          (("3"
                                            (expand "rel5")
                                            (("3"
                                              (case
                                               "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                              (("1"
                                                (decompose-equality 1)
                                                (("1"
                                                  (expand "greatify_rel")
                                                  (("1" (propax) nil)))))
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst + "x")
                                                              (("1"
                                                                (inst + "x")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (hide -2)
                                                            (("2"
                                                              (replace 3)
                                                              (("2"
                                                                (typepred
                                                                 "sturm_tarski_faster(1,
                                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                                       d - 1,
                                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                                       LAMBDA (j): 4)")
                                                                (("2"
                                                                  (hide
                                                                   (-2 -3))
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten
                                                                               -1)
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("3"
                                                                                    (hide
                                                                                     3)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "sturm_tarski_faster(1,
                                                                                                                                                                                                                         poly_deriv(a),
                                                                                                                                                                                                                         d - 1,
                                                                                                                                                                                                                         LAMBDA (j): a,
                                                                                                                                                                                                                         LAMBDA (j): d,
                                                                                                                                                                                                                         LAMBDA (j): 4)")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 (-2
                                                                                                  -3))
                                                                                                (("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "NSol_all"
                                                                                                     -)
                                                                                                    (("3"
                                                                                                      (lemma
                                                                                                       "empty_card[real]")
                                                                                                      (("3"
                                                                                                        (inst?)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "member")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "Sol_all"
                                                                                                                   +)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (split
                                                                                                                       +)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -3
                                                                                                                         1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "poly_eq_le_degree"
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "poly_deriv")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "prod_polynomials")
                                                                                                                                  (("1"
                                                                                                                                    (lift-if)
                                                                                                                                    (("1"
                                                                                                                                      (ground)
                                                                                                                                      nil)))))))))))))))
                                                                                                                       ("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "0")
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))
                                                                                   ("4"
                                                                                    (inst
                                                                                     +
                                                                                     "x!1")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil)))))))))))))))))))))))))))))))
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (lemma
                                                             "poly_sign_near_infinity")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "M!1")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "M!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "sign_ext")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))))))))))))
                                                           ("2"
                                                            (split -)
                                                            (("1"
                                                              (propax)
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "poly_sign_near_negative_infinity")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "-M!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "even_or_odd")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "-M!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sign_ext")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil)))))))))))))))))))))))))))))
                                                           ("3"
                                                            (typepred
                                                             "sturm_tarski_faster(1,
                                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                                       d - 1,
                                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                                       LAMBDA (j): 4)")
                                                            (("3"
                                                              (hide (-2 -3))
                                                              (("3"
                                                                (flatten)
                                                                (("3"
                                                                  (replaces
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "NSol_all"
                                                                     +)
                                                                    (("3"
                                                                      (lemma
                                                                       "empty_card[real]")
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "empty?"
                                                                             1)
                                                                            (("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (inst
                                                                                 +
                                                                                 "x!1")
                                                                                (("3"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "Sol_all")
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                         ("4"
                                          (replace -1)
                                          (("4"
                                            (expand "rel5")
                                            (("4" (propax) nil)))))))))))))
                                 ("2" (flatten)
                                  (("2" (assert)
                                    (("2" (case "NOT (i=2 OR i=5 )")
                                      (("1"
                                        (reveal "izero")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "rel5" 4)
                                            (("1" (assert) nil)))))))
                                       ("2"
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (case
                                                 "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                (("1"
                                                  (decompose-equality 1)
                                                  (("1"
                                                    (expand "greatify_rel")
                                                    (("1" (propax) nil)))))
                                                 ("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "*")
                                                      (("2"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "LAMBDA (ii:nat): d"
                                                                 "LAMBDA (ii:nat): (-1)*a")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "*")
                                                                    (("1"
                                                                      (flatten
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))
                                                                           ("2"
                                                                            (inst
                                                                             -1
                                                                             "0")
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))
                                                                           ("3"
                                                                            (hide
                                                                             3)
                                                                            (("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (expand
                                                                                 "sigma")
                                                                                (("3"
                                                                                  (expand
                                                                                   "sigma")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "sturm_tarski_faster(1,
                                                                                                                                                   poly_deriv(a),
                                                                                                                                                   d - 1,
                                                                                                                                                   LAMBDA
                                                                                                                                                   (j):
                                                                                                                                                   LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                   LAMBDA (j): d,
                                                                                                                                                   (LAMBDA (j): 1))")
                                                                                      (("3"
                                                                                        (hide
                                                                                         (-2
                                                                                          -3))
                                                                                        (("3"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "NSol_all"
                                                                                               -)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "empty_card[real]")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("3"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "x!1")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "Sol_all"
                                                                                                             +)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                                                       (ii: nat):
                                                                                                                                                                                       LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                                       LAMBDA (ii: nat): d,
                                                                                                                                                                                       (LAMBDA (i: nat): 1),
                                                                                                                                                                                       0)),
                                                                                                                                                           d - 1)
                                                                                                                                                          (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "scal_polynomial2"
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "poly_eq_le_degree")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "poly_deriv"
                                                                                                                             +)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "prod_polynomials")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "*")
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (ground)
                                                                                                                                    nil)))))))))))))))))))
                                                                                                                 ("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))
                                                                           ("4"
                                                                            (skosimp*)
                                                                            (("4"
                                                                              (inst
                                                                               +
                                                                               "x!1")
                                                                              (("4"
                                                                                (skosimp*)
                                                                                (("4"
                                                                                  (lemma
                                                                                   "scal_polynomial2")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "*"
                                                                                     -)
                                                                                    (("4"
                                                                                      (rewrite
                                                                                       -1
                                                                                       +)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        (("4"
                                                                                          (lemma
                                                                                           "sigma_tolambda")
                                                                                          (("4"
                                                                                            (expand
                                                                                             "polynomial"
                                                                                             (-4
                                                                                              1))
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "strict_poly_system_solvable")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "0"
                                                               "LAMBDA (ii:nat): d"
                                                               "LAMBDA (ii:nat): (-1)*a")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "*"
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (skosimp
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   1)
                                                                                  (("2"
                                                                                    (skosimp
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "*"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))))))))))))
                                                                             ("3"
                                                                              (typepred
                                                                               "sturm_tarski_faster(1,
                                                                                                                                                           poly_deriv(a),
                                                                                                                                                           d - 1,
                                                                                                                                                           LAMBDA
                                                                                                                                                           (j):
                                                                                                                                                           LAMBDA (zz: nat): (-1) * a(zz),
                                                                                                                                                           LAMBDA (j): d,
                                                                                                                                                           (LAMBDA (j): 1))")
                                                                              (("3"
                                                                                (hide
                                                                                 (-2
                                                                                  -3))
                                                                                (("3"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "NSol_all"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "empty_card[real]")
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "empty?")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   5
                                                                                                   "x!1")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "Sol_all"
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "0")
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "scal_polynomial2")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "*"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (rewrite
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (hide-all-but
                                                                                                                     (-3
                                                                                                                      5))
                                                                                                                    (("3"
                                                                                                                      (invoke
                                                                                                                       (case
                                                                                                                        "NOT %1 = %2")
                                                                                                                       (!
                                                                                                                        -1
                                                                                                                        1
                                                                                                                        2)
                                                                                                                       (!
                                                                                                                        1
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "poly_eq_le_degree")
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (expand
                                                                   "*"
                                                                   1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil)))))))))))))))))))))))))))
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (expand "rel5")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst + "x")
                                                          (("1"
                                                            (inst + "x")
                                                            (("1"
                                                              (assert)
                                                              nil)))))))
                                                       ("2"
                                                        (hide -2)
                                                        (("2"
                                                          (replace 3)
                                                          (("2"
                                                            (case
                                                             "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "greatify_rel"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (typepred
                                                                 "sturm_tarski_faster(1,
                                                                                                                                           poly_deriv(a),
                                                                                                                                           d - 1,
                                                                                                                                           LAMBDA (j): (-1) * a,
                                                                                                                                           LAMBDA (j): d,
                                                                                                                                           (LAMBDA (j): 4))")
                                                                (("1"
                                                                  (hide
                                                                   (-2 -3))
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): (-1)*a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (flatten
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))
                                                                                     ("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "*")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))
                                                                                     ("3"
                                                                                      (hide
                                                                                       3)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "*")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "NSol_all"
                                                                                                     -)
                                                                                                    (("3"
                                                                                                      (lemma
                                                                                                       "empty_card[real]")
                                                                                                      (("3"
                                                                                                        (inst?)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "member")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "Sol_all"
                                                                                                                   +)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (split
                                                                                                                       +)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                                                   (ii: nat):
                                                                                                                                                                                   LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                                   LAMBDA (ii: nat): d,
                                                                                                                                                                                   (LAMBDA (i: nat): 1),
                                                                                                                                                                                   0)),
                                                                                                                                                       d - 1)
                                                                                                                                                      (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (rewrite
                                                                                                                           "scal_polynomial2"
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree"
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "*")
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (ground)
                                                                                                                                          nil)))))))))))))))))))
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "0")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))
                                                                                     ("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (rewrite
                                                                                           "scal_polynomial2")
                                                                                          (("4"
                                                                                            (assert)
                                                                                            nil)))))))))))))))))
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "*"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))
                                                                 ("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("3"
                                                                      (propax)
                                                                      nil)))))))))))))))))))
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (lemma
                                                         "poly_sign_near_infinity")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "(-1)*a"
                                                           "d")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst - "M!1")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "M!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "scal_polynomial2")
                                                                      (("1"
                                                                        (expand
                                                                         "*")
                                                                        (("1"
                                                                          (expand
                                                                           "sign_ext")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))))))))))))))))
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "poly_sign_near_negative_infinity")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "-M!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "even_or_odd")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               -3)
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "-M!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "sign_ext")
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil)))))))))))))))))))))))))))))))
                                                       ("3"
                                                        (case
                                                         "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "greatify_rel"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil)))))
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (typepred
                                                             "sturm_tarski_faster(1,
                                                                                                                                           poly_deriv(a),
                                                                                                                                           d - 1,
                                                                                                                                           LAMBDA (j): (-1) * a,
                                                                                                                                           LAMBDA (j): d,
                                                                                                                                           (LAMBDA (j): 4))")
                                                            (("1"
                                                              (hide (-2 -3))
                                                              (("1"
                                                                (replaces -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "NSol_all"
                                                                       +)
                                                                      (("1"
                                                                        (lemma
                                                                         "empty_card[real]")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "empty?"
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "Sol_all")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))))))
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (expand
                                                                 "*"
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))
                                                             ("3"
                                                              (skosimp*)
                                                              (("3"
                                                                (expand "*" 1)
                                                                (("3"
                                                                  (propax)
                                                                  nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (compute_solvable_single_def-4 nil 3768579466
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (lemma preprocessingTheorem)
                (("1" (inst -1 "d" "a")
                  (("1" (split)
                    (("1" (inst -1 "i")
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (split)
                            (("1" (propax) nil)
                             ("2" (inst 1 "x")
                              (("2" (assert) (("2" (grind) nil)))))))))
                         ("2" (propax) nil)))))
                     ("2" (assert) nil)))))))))
             ("2" (flatten)
              (("2"
                (case "NOT ((sturm_tarski_faster(1,
                                                                                                                                  a,
                                                                                                                                  d,
                                                                                                                                  LAMBDA (k): LAMBDA (j): 1,
                                                                                                                                  LAMBDA (k): 0,
                                                                                                                                  LAMBDA (j): 1)
                                                                                                    /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                (("1" (hide 3)
                  (("1"
                    (typepred "sturm_tarski_faster(1,
                                                                     a,
                                                                     d,
                                                                     LAMBDA (k): LAMBDA (j): 1,
                                                                     LAMBDA (k): 0,
                                                                     LAMBDA (j): 1)")
                    (("1" (replaces -1)
                      (("1" (hide -)
                        (("1" (expand "NSol_all")
                          (("1" (lemma "empty_card[real]")
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "empty?")
                                  (("1" (expand "member")
                                    (("1" (ground)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst - "x!1")
                                          (("1"
                                            (expand "Sol_all" +)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -)
                                                (("1" (grind) nil)))))))))))
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst + "x!1")
                                          (("2"
                                            (expand "Sol_all" -)
                                            (("2"
                                              (flatten)
                                              nil)))))))))))))))))))))))))))))
                 ("2" (replace -1)
                  (("2" (case "i = 0")
                    (("1" (replaces -1)
                      (("1" (expand "rel5") (("1" (propax) nil)))))
                     ("2" (assert)
                      (("2" (label "izero" 1)
                        (("2" (hide "izero")
                          (("2" (split +)
                            (("1" (flatten)
                              (("1" (assert)
                                (("1" (hide -2)
                                  (("1" (skosimp*)
                                    (("1" (inst + "x!1")
                                      (("1"
                                        (expand "rel5")
                                        (("1" (ground) nil)))))))))))))
                             ("2" (flatten +)
                              (("2" (split 2)
                                (("1" (flatten)
                                  (("1"
                                    (case "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                    (("1" (flatten) (("1" (assert) nil)))
                                     ("2" (assert)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "rel5")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (case
                                                   "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (expand
                                                         "greatify_rel")
                                                        (("1"
                                                          (propax)
                                                          nil)))))))
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "strict_poly_system_solvable")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "0"
                                                               "LAMBDA (ii:nat): d"
                                                               "LAMBDA (ii:nat): a")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten -1)
                                                                  (("1"
                                                                    (hide -2)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))
                                                                       ("3"
                                                                        (hide
                                                                         3)
                                                                        (("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (expand
                                                                             "sigma")
                                                                            (("3"
                                                                              (expand
                                                                               "sigma")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "sturm_tarski_faster(1,
                                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                                       d - 1,
                                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                                       LAMBDA (j): 1)")
                                                                                  (("3"
                                                                                    (hide
                                                                                     (-2
                                                                                      -3))
                                                                                    (("3"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "NSol_all"
                                                                                           -)
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "empty_card[real]")
                                                                                            (("3"
                                                                                              (inst?)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "empty?")
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x!1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "Sol_all"
                                                                                                         +)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2
                                                                                                               1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "poly_eq_le_degree")
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "poly_deriv"
                                                                                                                       +)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "prod_polynomials")
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            nil)))))))))))))))
                                                                                                             ("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "0")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))
                                                                       ("4"
                                                                        (skosimp*)
                                                                        (("4"
                                                                          (inst
                                                                           +
                                                                           "x!1")
                                                                          (("4"
                                                                            (skosimp*)
                                                                            nil)))))))))))))))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "strict_poly_system_solvable")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "0"
                                                               "LAMBDA (ii:nat): d"
                                                               "LAMBDA (ii:nat): a")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (skosimp
                                                                             1)
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               1)
                                                                              (("2"
                                                                                (skosimp
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))
                                                                           ("3"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                                                                                                   poly_deriv(a),
                                                                                                                                                                                                   d - 1,
                                                                                                                                                                                                   LAMBDA (j): a,
                                                                                                                                                                                                   LAMBDA (j): d,
                                                                                                                                                                                                   LAMBDA (j): 1)")
                                                                            (("3"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("3"
                                                                                (replaces
                                                                                 -1)
                                                                                (("3"
                                                                                  (expand
                                                                                   "NSol_all"
                                                                                   -1)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "empty_card[real]")
                                                                                    (("3"
                                                                                      (inst?)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("3"
                                                                                              (skosimp*)
                                                                                              (("3"
                                                                                                (inst
                                                                                                 4
                                                                                                 "x!1")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "Sol_all"
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (flatten)
                                                                                                    (("3"
                                                                                                      (split
                                                                                                       4)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "sigma"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "sigma"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (invoke
                                                                                                             (case
                                                                                                              "%1 = %2")
                                                                                                             (!
                                                                                                              -1
                                                                                                              1)
                                                                                                             (!
                                                                                                              1
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               (-1
                                                                                                                2))
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "poly_eq_le_degree")
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "poly_deriv")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "prod_polynomials")
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil)))))))))))))))))))))
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "0")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (expand "rel5")
                                            (("2" (propax) nil)))))
                                         ("3"
                                          (replace -1)
                                          (("3"
                                            (expand "rel5")
                                            (("3"
                                              (case
                                               "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                              (("1"
                                                (decompose-equality 1)
                                                (("1"
                                                  (expand "greatify_rel")
                                                  (("1" (propax) nil)))))
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst + "x")
                                                              (("1"
                                                                (inst + "x")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (hide -2)
                                                            (("2"
                                                              (replace 3)
                                                              (("2"
                                                                (typepred
                                                                 "sturm_tarski_faster(1,
                                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                                       d - 1,
                                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                                       LAMBDA (j): 4)")
                                                                (("2"
                                                                  (hide
                                                                   (-2 -3))
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten
                                                                               -1)
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("3"
                                                                                    (hide
                                                                                     3)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "sturm_tarski_faster(1,
                                                                                                                                                                                                                         poly_deriv(a),
                                                                                                                                                                                                                         d - 1,
                                                                                                                                                                                                                         LAMBDA (j): a,
                                                                                                                                                                                                                         LAMBDA (j): d,
                                                                                                                                                                                                                         LAMBDA (j): 4)")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 (-2
                                                                                                  -3))
                                                                                                (("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "NSol_all"
                                                                                                     -)
                                                                                                    (("3"
                                                                                                      (lemma
                                                                                                       "empty_card[real]")
                                                                                                      (("3"
                                                                                                        (inst?)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "member")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "Sol_all"
                                                                                                                   +)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (split
                                                                                                                       +)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -3
                                                                                                                         1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "poly_eq_le_degree"
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "poly_deriv")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "prod_polynomials")
                                                                                                                                  (("1"
                                                                                                                                    (lift-if)
                                                                                                                                    (("1"
                                                                                                                                      (ground)
                                                                                                                                      nil)))))))))))))))
                                                                                                                       ("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "0")
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))
                                                                                   ("4"
                                                                                    (inst
                                                                                     +
                                                                                     "x!1")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil)))))))))))))))))))))))))))))))
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (lemma
                                                             "poly_sign_near_infinity")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "M!1")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "M!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "sign_ext")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))))))))))))
                                                           ("2"
                                                            (split -)
                                                            (("1"
                                                              (propax)
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "poly_sign_near_negative_infinity")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "-M!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "even_or_odd")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "-M!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sign_ext")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil)))))))))))))))))))))))))))))
                                                           ("3"
                                                            (typepred
                                                             "sturm_tarski_faster(1,
                                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                                       d - 1,
                                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                                       LAMBDA (j): 4)")
                                                            (("3"
                                                              (hide (-2 -3))
                                                              (("3"
                                                                (flatten)
                                                                (("3"
                                                                  (replaces
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "NSol_all"
                                                                     +)
                                                                    (("3"
                                                                      (lemma
                                                                       "empty_card[real]")
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "empty?"
                                                                             1)
                                                                            (("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (inst
                                                                                 +
                                                                                 "x!1")
                                                                                (("3"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "Sol_all")
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                         ("4"
                                          (replace -1)
                                          (("4"
                                            (expand "rel5")
                                            (("4" (propax) nil)))))))))))))
                                 ("2" (flatten)
                                  (("2" (assert)
                                    (("2" (case "NOT (i=2 OR i=5 )")
                                      (("1"
                                        (reveal "izero")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "rel5" 4)
                                            (("1" (assert) nil)))))))
                                       ("2"
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (case
                                                 "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                (("1"
                                                  (decompose-equality 1)
                                                  (("1"
                                                    (expand "greatify_rel")
                                                    (("1" (propax) nil)))))
                                                 ("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "*")
                                                      (("2"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "0"
                                                                 "LAMBDA (ii:nat): d"
                                                                 "LAMBDA (ii:nat): (-1)*a")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "*")
                                                                    (("1"
                                                                      (flatten
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))
                                                                           ("2"
                                                                            (inst
                                                                             -1
                                                                             "0")
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))
                                                                           ("3"
                                                                            (hide
                                                                             3)
                                                                            (("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (expand
                                                                                 "sigma")
                                                                                (("3"
                                                                                  (expand
                                                                                   "sigma")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "sturm_tarski_faster(1,
                                                                                                                                                   poly_deriv(a),
                                                                                                                                                   d - 1,
                                                                                                                                                   LAMBDA
                                                                                                                                                   (j):
                                                                                                                                                   LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                   LAMBDA (j): d,
                                                                                                                                                   (LAMBDA (j): 1))")
                                                                                      (("3"
                                                                                        (hide
                                                                                         (-2
                                                                                          -3))
                                                                                        (("3"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "NSol_all"
                                                                                               -)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "empty_card[real]")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("3"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "x!1")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "Sol_all"
                                                                                                             +)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                                                       (ii: nat):
                                                                                                                                                                                       LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                                       LAMBDA (ii: nat): d,
                                                                                                                                                                                       (LAMBDA (i: nat): 1),
                                                                                                                                                                                       0)),
                                                                                                                                                           d - 1)
                                                                                                                                                          (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "scal_polynomial2"
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "poly_eq_le_degree")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "poly_deriv"
                                                                                                                             +)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "prod_polynomials")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "*")
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (ground)
                                                                                                                                    nil)))))))))))))))))))
                                                                                                                 ("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))
                                                                           ("4"
                                                                            (skosimp*)
                                                                            (("4"
                                                                              (inst
                                                                               +
                                                                               "x!1")
                                                                              (("4"
                                                                                (skosimp*)
                                                                                (("4"
                                                                                  (lemma
                                                                                   "scal_polynomial2")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "*"
                                                                                     -)
                                                                                    (("4"
                                                                                      (rewrite
                                                                                       -1
                                                                                       +)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        (("4"
                                                                                          (lemma
                                                                                           "sigma_tolambda")
                                                                                          (("4"
                                                                                            (expand
                                                                                             "polynomial"
                                                                                             (-4
                                                                                              1))
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "strict_poly_system_solvable")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "0"
                                                               "LAMBDA (ii:nat): d"
                                                               "LAMBDA (ii:nat): (-1)*a")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "*"
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))))
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (skosimp
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil)))))
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   1)
                                                                                  (("2"
                                                                                    (skosimp
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "*"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))))))))))))
                                                                             ("3"
                                                                              (typepred
                                                                               "sturm_tarski_faster(1,
                                                                                                                                                           poly_deriv(a),
                                                                                                                                                           d - 1,
                                                                                                                                                           LAMBDA
                                                                                                                                                           (j):
                                                                                                                                                           LAMBDA (zz: nat): (-1) * a(zz),
                                                                                                                                                           LAMBDA (j): d,
                                                                                                                                                           (LAMBDA (j): 1))")
                                                                              (("3"
                                                                                (hide
                                                                                 (-2
                                                                                  -3))
                                                                                (("3"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "NSol_all"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "empty_card[real]")
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "empty?")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   5
                                                                                                   "x!1")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "Sol_all"
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "0")
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "scal_polynomial2")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "*"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (rewrite
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (hide-all-but
                                                                                                                     (-3
                                                                                                                      5))
                                                                                                                    (("3"
                                                                                                                      (invoke
                                                                                                                       (case
                                                                                                                        "NOT %1 = %2")
                                                                                                                       (!
                                                                                                                        -1
                                                                                                                        1
                                                                                                                        2)
                                                                                                                       (!
                                                                                                                        1
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "poly_eq_le_degree")
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (expand
                                                                   "*"
                                                                   1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil)))))))))))))))))))))))))))
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (expand "rel5")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst + "x")
                                                          (("1"
                                                            (inst + "x")
                                                            (("1"
                                                              (assert)
                                                              nil)))))))
                                                       ("2"
                                                        (hide -2)
                                                        (("2"
                                                          (replace 3)
                                                          (("2"
                                                            (case
                                                             "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "greatify_rel"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (typepred
                                                                 "sturm_tarski_faster(1,
                                                                                                                                           poly_deriv(a),
                                                                                                                                           d - 1,
                                                                                                                                           LAMBDA (j): (-1) * a,
                                                                                                                                           LAMBDA (j): d,
                                                                                                                                           (LAMBDA (j): 4))")
                                                                (("1"
                                                                  (hide
                                                                   (-2 -3))
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): (-1)*a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (flatten
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))
                                                                                     ("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "*")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))
                                                                                     ("3"
                                                                                      (hide
                                                                                       3)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "*")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "NSol_all"
                                                                                                     -)
                                                                                                    (("3"
                                                                                                      (lemma
                                                                                                       "empty_card[real]")
                                                                                                      (("3"
                                                                                                        (inst?)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!2")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "member")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "Sol_all"
                                                                                                                   +)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (split
                                                                                                                       +)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                                                   (ii: nat):
                                                                                                                                                                                   LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                                                   LAMBDA (ii: nat): d,
                                                                                                                                                                                   (LAMBDA (i: nat): 1),
                                                                                                                                                                                   0)),
                                                                                                                                                       d - 1)
                                                                                                                                                      (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (rewrite
                                                                                                                           "scal_polynomial2"
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree"
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "*")
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (ground)
                                                                                                                                          nil)))))))))))))))))))
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "0")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))
                                                                                     ("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (rewrite
                                                                                           "scal_polynomial2")
                                                                                          (("4"
                                                                                            (assert)
                                                                                            nil)))))))))))))))))
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "*"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))
                                                                 ("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("3"
                                                                      (propax)
                                                                      nil)))))))))))))))))))
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (lemma
                                                         "poly_sign_near_infinity")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "(-1)*a"
                                                           "d")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst - "M!1")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "M!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "scal_polynomial2")
                                                                      (("1"
                                                                        (expand
                                                                         "*")
                                                                        (("1"
                                                                          (expand
                                                                           "sign_ext")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))))))))))))))))
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "poly_sign_near_negative_infinity")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "-M!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "even_or_odd")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               -3)
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "-M!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "sign_ext")
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil)))))))))))))))))))))))))))))))
                                                       ("3"
                                                        (case
                                                         "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "greatify_rel"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil)))))
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (typepred
                                                             "sturm_tarski_faster(1,
                                                                                                                                           poly_deriv(a),
                                                                                                                                           d - 1,
                                                                                                                                           LAMBDA (j): (-1) * a,
                                                                                                                                           LAMBDA (j): d,
                                                                                                                                           (LAMBDA (j): 4))")
                                                            (("1"
                                                              (hide (-2 -3))
                                                              (("1"
                                                                (replaces -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "NSol_all"
                                                                       +)
                                                                      (("1"
                                                                        (lemma
                                                                         "empty_card[real]")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "empty?"
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "Sol_all")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))))))
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (expand
                                                                 "*"
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))
                                                             ("3"
                                                              (skosimp*)
                                                              (("3"
                                                                (expand "*" 1)
                                                                (("3"
                                                                  (propax)
                                                                  nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (compute_solvable_single_def-3 nil 3768578936
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (replace -1) (("1" (assert) (("1" (grind) nil)))))))
             ("2" (flatten)
              (("2" (assert)
                (("2" (split +)
                  (("1" (flatten)
                    (("1" (skolem -1 "k")
                      (("1" (lemma polyOddDegNeg)
                        (("1" (lemma polyOddDegPos)
                          (("1" (lemma polyOddDegZero)
                            (("1" (inst -1 "a" "k")
                              (("1" (inst -2 "a" "k")
                                (("1" (inst -3 "a" "k")
                                  (("1" (split)
                                    (("1" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (expand "rel5")
                                            (("1"
                                              (case "i = 0")
                                              (("1"
                                                (inst 1 "x!3")
                                                (("1" (assert) nil)))
                                               ("2"
                                                (case "i=1")
                                                (("1"
                                                  (inst 2 "x!2")
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (case "i = 2")
                                                  (("1"
                                                    (inst 3 "x!1")
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (case "i = 3")
                                                    (("1"
                                                      (inst 4 "x!2")
                                                      (("1" (assert) nil)))
                                                     ("2"
                                                      (case "i = 4")
                                                      (("1"
                                                        (inst 5 "x!3")
                                                        (("1" (assert) nil)))
                                                       ("2"
                                                        (inst 6 "x!3")
                                                        (("2"
                                                          (assert)
                                                          nil)))))))))))))))))
                                         ("2" (assert) nil)))
                                       ("2" (assert) nil)))
                                     ("2" (assert) nil)))))))))))))))))))
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split +)
                        (("1" (flatten)
                          (("1" (lemma "system_roots_enum")
                            (("1" (inst - "0" "LAMBDA (k): d" "LAMBDa (k): a")
                              (("1" (assert)
                                (("1" (skeep -)
                                  (("1" (case "K = 0")
                                    (("1" (inst + "0")
                                      (("1"
                                        (inst -4 "0" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5 +)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp*)
                                                  nil)))))))))))))
                                     ("2" (inst + "enum(K-1)+2")
                                      (("1"
                                        (replace -4 +)
                                        (("1"
                                          (expand "rel5")
                                          (("1"
                                            (inst -3 "2+enum(K-1)" "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "i!1" "K-1")
                                                  (("1" (ground) nil)))))))
                                             ("2" (assert) nil)))))))
                                       ("2" (assert) nil)))))))))))))))
                         ("2" (flatten)
                          (("2"
                            (case "NOT ((sturm_tarski_faster(1,
                                                                                                                     a,
                                                                                                                     d,
                                                                                                                     LAMBDA (k): LAMBDA (j): 1,
                                                                                                                     LAMBDA (k): 0,
                                                                                                                     LAMBDA (j): 1)
                                                                                       /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                            (("1" (hide 3)
                              (("1"
                                (typepred "sturm_tarski_faster(1,
                                                           a,
                                                           d,
                                                           LAMBDA (k): LAMBDA (j): 1,
                                                           LAMBDA (k): 0,
                                                           LAMBDA (j): 1)")
                                (("1" (replaces -1)
                                  (("1" (hide -)
                                    (("1" (expand "NSol_all")
                                      (("1"
                                        (lemma "empty_card[real]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "empty?")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (expand "Sol_all" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (grind)
                                                              nil)))))))))))
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst + "x!1")
                                                      (("2"
                                                        (expand "Sol_all" -)
                                                        (("2"
                                                          (flatten)
                                                          nil)))))))))))))))))))))))))))))
                             ("2" (replace -1)
                              (("2" (case "i = 0")
                                (("1" (replaces -1)
                                  (("1" (expand "rel5")
                                    (("1" (propax) nil)))))
                                 ("2" (assert)
                                  (("2" (label "izero" 1)
                                    (("2" (hide "izero")
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst + "x!1")
                                                  (("1"
                                                    (expand "rel5")
                                                    (("1"
                                                      (ground)
                                                      nil)))))))))))))
                                         ("2"
                                          (flatten +)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand "rel5")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (case
                                                               "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "greatify_rel")
                                                                    (("1"
                                                                      (propax)
                                                                      nil)))))))
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil)))
                                                                                   ("3"
                                                                                    (hide
                                                                                     3)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 1)")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 (-2
                                                                                                  -3))
                                                                                                (("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil)))))))))))))))
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil)))))))))))))))))))))))))))))))))))))))))))
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        nil)))))))))))))))))))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))))))
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (skosimp
                                                                                         1)
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil)))))))
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "sturm_tarski_faster(1,
                                                                                                                                                                       poly_deriv(a),
                                                                                                                                                                       d - 1,
                                                                                                                                                                       LAMBDA (j): a,
                                                                                                                                                                       LAMBDA (j): d,
                                                                                                                                                                       LAMBDA (j): 1)")
                                                                                        (("3"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "NSol_all"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "empty_card[real]")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             4
                                                                                                             "x!1")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Sol_all"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (split
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil)))))
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "%1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           (-1
                                                                                                                            2))
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        nil)))))))))))))))))))))
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "0")
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (propax)
                                                          nil)))))
                                                     ("3"
                                                      (replace -1)
                                                      (("3"
                                                        (expand "rel5")
                                                        (("3"
                                                          (case
                                                           "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "greatify_rel")
                                                              (("1"
                                                                (propax)
                                                                nil)))))
                                                           ("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide -2)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "x")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (replace
                                                                           3)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 4)")
                                                                            (("2"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): a")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil)))
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))
                                                                                               ("3"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "sigma")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "sturm_tarski_faster(1,
                                                                                                                                                                                             poly_deriv(a),
                                                                                                                                                                                             d - 1,
                                                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                                                             LAMBDA (j): 4)")
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             (-2
                                                                                                              -3))
                                                                                                            (("3"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -3
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "poly_eq_le_degree"
                                                                                                                                       1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "poly_deriv")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "prod_polynomials")
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil)))))))))))))))
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "0")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))
                                                                                               ("4"
                                                                                                (inst
                                                                                                 +
                                                                                                 "x!1")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))))))))))))))))))))
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "poly_sign_near_infinity")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "M!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "M!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "poly_sign_near_negative_infinity")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "-M!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "even_or_odd")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "-M!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sign_ext")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil)))))))))))))))))))))))))))))
                                                                       ("3"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                                                             poly_deriv(a),
                                                                                                                                                             d - 1,
                                                                                                                                                             LAMBDA (j): a,
                                                                                                                                                             LAMBDA (j): d,
                                                                                                                                                             LAMBDA (j): 4)")
                                                                        (("3"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (replaces
                                                                               -1)
                                                                              (("3"
                                                                                (expand
                                                                                 "NSol_all"
                                                                                 +)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "empty_card[real]")
                                                                                  (("3"
                                                                                    (inst?)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "Sol_all")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "0")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                                     ("4"
                                                      (replace -1)
                                                      (("4"
                                                        (expand "rel5")
                                                        (("4"
                                                          (propax)
                                                          nil)))))))))))))
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "NOT (i=2 OR i=5 )")
                                                  (("1"
                                                    (reveal "izero")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "rel5" 4)
                                                        (("1"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "rel5")
                                                          (("1"
                                                            (case
                                                             "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "greatify_rel")
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand "*")
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): (-1)*a")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "*")
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("3"
                                                                                        (hide
                                                                                         3)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "sturm_tarski_faster(1,
                                                                                                                       poly_deriv(a),
                                                                                                                       d - 1,
                                                                                                                       LAMBDA
                                                                                                                       (j):
                                                                                                                       LAMBDA (x: nat): (-1) * a(x),
                                                                                                                       LAMBDA (j): d,
                                                                                                                       (LAMBDA (j): 1))")
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     (-2
                                                                                                      -3))
                                                                                                    (("3"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "NSol_all"
                                                                                                           -)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "empty_card[real]")
                                                                                                            (("3"
                                                                                                              (inst?)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "Sol_all"
                                                                                                                         +)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                    (ii: nat):
                                                                                                                                                    LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                    LAMBDA (ii: nat): d,
                                                                                                                                                    (LAMBDA (i: nat): 1),
                                                                                                                                                    0)),
                                                                                                                        d - 1)
                                                                                                                       (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "scal_polynomial2"
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "poly_eq_le_degree")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "poly_deriv"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "prod_polynomials")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "*")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil)))))))))))))))))))
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "0")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (inst
                                                                                           +
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "scal_polynomial2")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "*"
                                                                                                 -)
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   -1
                                                                                                   +)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (lemma
                                                                                                       "sigma_tolambda")
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "polynomial"
                                                                                                         (-4
                                                                                                          1))
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil)))))))))))))))))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil)))))))))))))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): (-1)*a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil)))))))))))
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skosimp
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1)
                                                                                              (("2"
                                                                                                (skosimp
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil)))))))))))))
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "sturm_tarski_faster(1,
                                                                                                                             poly_deriv(a),
                                                                                                                             d - 1,
                                                                                                                             LAMBDA
                                                                                                                             (j):
                                                                                                                             LAMBDA (zz: nat): (-1) * a(zz),
                                                                                                                             LAMBDA (j): d,
                                                                                                                             (LAMBDA (j): 1))")
                                                                                          (("3"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("3"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "NSol_all"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "empty_card[real]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               5
                                                                                                               "x!1")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "Sol_all"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (lemma
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (hide-all-but
                                                                                                                                 (-3
                                                                                                                                  5))
                                                                                                                                (("3"
                                                                                                                                  (invoke
                                                                                                                                   (case
                                                                                                                                    "NOT %1 = %2")
                                                                                                                                   (!
                                                                                                                                    -1
                                                                                                                                    1
                                                                                                                                    2)
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "poly_eq_le_degree")
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil)))))))))))))))))))))))))))
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (hide -2)
                                                                    (("2"
                                                                      (replace
                                                                       3)
                                                                      (("2"
                                                                        (case
                                                                         "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)))))
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                                 poly_deriv(a),
                                                                                                                 d - 1,
                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                 LAMBDA (j): d,
                                                                                                                 (LAMBDA (j): 4))")
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): (-1)*a")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                                                                                                 (ii: nat):
                                                                                                                                                 LAMBDA (x: nat): (-1) * a(x),
                                                                                                                                                 LAMBDA (ii: nat): d,
                                                                                                                                                 (LAMBDA (i: nat): 1),
                                                                                                                                                 0)),
                                                                                                                     d - 1)
                                                                                                                    (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (rewrite
                                                                                                                                       "scal_polynomial2"
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "poly_eq_le_degree"
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "poly_deriv")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "prod_polynomials")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "*")
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("2"
                                                                                                                                                      (ground)
                                                                                                                                                      nil)))))))))))))))))))
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "0")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))
                                                                                                 ("4"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (rewrite
                                                                                                       "scal_polynomial2")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil)))))))))))))))))
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil)))))))))))))))
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil)))))))))))))))))))
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "poly_sign_near_infinity")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "(-1)*a"
                                                                       "d")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "M!1")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "M!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))))))
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "poly_sign_near_negative_infinity")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "-M!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "even_or_odd")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "-M!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sign_ext")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil)))))))))))))))))))))))))))))))
                                                                   ("3"
                                                                    (case
                                                                     "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "greatify_rel"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)))))
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                                 poly_deriv(a),
                                                                                                                 d - 1,
                                                                                                                 LAMBDA (j): (-1) * a,
                                                                                                                 LAMBDA (j): d,
                                                                                                                 (LAMBDA (j): 4))")
                                                                        (("1"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "NSol_all"
                                                                                   +)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "empty_card[real]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty?"
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Sol_all")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil)))))))))))))))))))
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "*"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (expand
                                                                             "*"
                                                                             1)
                                                                            (("3"
                                                                              (propax)
                                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (compute_solvable_single_def-2 nil 3768219466
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (lemma preprocessingTheorem)
                (("1" (inst -1 "d" "a")
                  (("1" (split)
                    (("1" (inst -1 "i")
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (inst 1 "x")
                              (("2" (assert) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (system_roots_enum formula-decl nil poly_systems nil)
    (sturm_tarski_faster const-decl "{r: real |
   r = NSol_all(k, a, m, p, n, RelF6) AND
    rational_pred(r) AND integer_pred(r)}" system_solvers nil)
    (NSol_all const-decl "nat" poly_families nil)
    (Sol_all const-decl "finite_set[real]" poly_families nil)
    (strict_poly_system_solvable formula-decl nil poly_systems nil)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (poly_eq_le_degree formula-decl nil polynomials reals)
    (poly_deriv const-decl "real" polynomials reals)
    (poly_sign_near_negative_infinity formula-decl nil more_polynomial_props
     reals)
    (poly_sign_near_infinity formula-decl nil more_polynomial_props reals)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign reals)
    (sigma_tolambda formula-decl nil sigma_nat reals)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   nil)
  (compute_solvable_single_def-1 nil 3621354856
   ("" (skeep)
    (("" (skeep)
      (("" (expand "compute_solvable_single")
        (("" (lift-if)
          (("" (split +)
            (("1" (flatten)
              (("1" (replace -1) (("1" (assert) (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (split +)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (name "x1" "-a(0)/a(1)-1")
                          (("1" (name "x2" "-a(0)/a(1)+1")
                            (("1"
                              (case "(polynomial(a,1)(x1)>0 AND polynomial(a,1)(x2)<0) OR (polynomial(a,1)(x1)<0 AND polynomial(a,1)(x2)>0)")
                              (("1" (inst-cp + "x1")
                                (("1" (inst-cp + "x2")
                                  (("1" (inst + "-a(0)/a(1)")
                                    (("1" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (flatten) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split +)
                        (("1" (flatten)
                          (("1" (lemma "system_roots_enum")
                            (("1" (inst - "0" "LAMBDA (k): d" "LAMBDa (k): a")
                              (("1" (assert)
                                (("1" (skeep -)
                                  (("1" (case "K = 0")
                                    (("1" (inst + "0")
                                      (("1"
                                        (inst -4 "0" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5 +)
                                            (("1"
                                              (expand "rel5")
                                              (("1"
                                                (assert)
                                                (("1" (skosimp*) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst + "enum(K-1)+2")
                                      (("1"
                                        (replace -4 +)
                                        (("1"
                                          (expand "rel5")
                                          (("1"
                                            (inst -3 "2+enum(K-1)" "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "i!1" "K-1")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2"
                            (case "NOT ((sturm_tarski_faster(1,
                                                                                           a,
                                                                                           d,
                                                                                           LAMBDA (k): LAMBDA (j): 1,
                                                                                           LAMBDA (k): 0,
                                                                                           LAMBDA (j): 1)
                                                             /= 0) IFF (EXISTS (x:real): polynomial(a,d)(x)=0))")
                            (("1" (hide 3)
                              (("1"
                                (typepred "sturm_tarski_faster(1,
                                       a,
                                       d,
                                       LAMBDA (k): LAMBDA (j): 1,
                                       LAMBDA (k): 0,
                                       LAMBDA (j): 1)")
                                (("1" (replaces -1)
                                  (("1" (hide -)
                                    (("1" (expand "NSol_all")
                                      (("1"
                                        (lemma "empty_card[real]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "empty?")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (expand "Sol_all" +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst + "x!1")
                                                      (("2"
                                                        (expand "Sol_all" -)
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2" (case "i = 0")
                                (("1" (replaces -1)
                                  (("1" (expand "rel5")
                                    (("1" (propax) nil nil)) nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (label "izero" 1)
                                    (("2" (hide "izero")
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst + "x!1")
                                                  (("1"
                                                    (expand "rel5")
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten +)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT (i = 0 OR i = 1 OR i=2 OR i=3 OR i=4 OR i=5)")
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand "rel5")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (case
                                                               "NOT greatify_rel(LAMBDA (j): 1) = (LAMBDA (j): 1)")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "greatify_rel")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     3)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "sturm_tarski_faster(1,
                                                                                                         poly_deriv(a),
                                                                                                         d - 1,
                                                                                                         LAMBDA (j): a,
                                                                                                         LAMBDA (j): d,
                                                                                                         LAMBDA (j): 1)")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 (-2
                                                                                                  -3))
                                                                                                (("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "NSol_all"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "empty_card[real]")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "Sol_all"
                                                                                                                     +)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): a")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (skosimp
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "sturm_tarski_faster(1,
                                                                                                               poly_deriv(a),
                                                                                                               d - 1,
                                                                                                               LAMBDA (j): a,
                                                                                                               LAMBDA (j): d,
                                                                                                               LAMBDA (j): 1)")
                                                                                        (("3"
                                                                                          (hide
                                                                                           (-2
                                                                                            -3))
                                                                                          (("3"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "NSol_all"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "empty_card[real]")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             4
                                                                                                             "x!1")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Sol_all"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (split
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "%1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           (-1
                                                                                                                            2))
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "poly_eq_le_degree")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "poly_deriv")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "0")
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (replace -1)
                                                      (("3"
                                                        (expand "rel5")
                                                        (("3"
                                                          (case
                                                           "NOT greatify_rel(LAMBDA (j): 4) = (LAMBDA (j): 4)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "greatify_rel")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide -2)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (case
                                                                       "NOT EXISTS (x): polynomial(a, d)(x) > 0")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "x")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (replace
                                                                           3)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                                                                         poly_deriv(a),
                                                                                                         d - 1,
                                                                                                         LAMBDA (j): a,
                                                                                                         LAMBDA (j): d,
                                                                                                         LAMBDA (j): 4)")
                                                                            (("2"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): a")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "sigma")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "sigma")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "sturm_tarski_faster(1,
                                                                                                                                     poly_deriv(a),
                                                                                                                                     d - 1,
                                                                                                                                     LAMBDA (j): a,
                                                                                                                                     LAMBDA (j): d,
                                                                                                                                     LAMBDA (j): 4)")
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             (-2
                                                                                                              -3))
                                                                                                            (("3"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -3
                                                                                                                                     1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "poly_eq_le_degree"
                                                                                                                                       1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "poly_deriv")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "prod_polynomials")
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "0")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (inst
                                                                                                 +
                                                                                                 "x!1")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "poly_sign_near_infinity")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "M!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "M!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "poly_sign_near_negative_infinity")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "-M!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "even_or_odd")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "-M!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sign_ext")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                                                                         poly_deriv(a),
                                                                                                         d - 1,
                                                                                                         LAMBDA (j): a,
                                                                                                         LAMBDA (j): d,
                                                                                                         LAMBDA (j): 4)")
                                                                        (("3"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (replaces
                                                                               -1)
                                                                              (("3"
                                                                                (expand
                                                                                 "NSol_all"
                                                                                 +)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "empty_card[real]")
                                                                                  (("3"
                                                                                    (inst?)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "empty?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "Sol_all")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "0")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (replace -1)
                                                      (("4"
                                                        (expand "rel5")
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "NOT (i=2 OR i=5 )")
                                                  (("1"
                                                    (reveal "izero")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "rel5" 4)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "rel5")
                                                          (("1"
                                                            (case
                                                             "NOT greatify_rel(LAMBDA (j): 2) = (LAMBDA (j): 1)")
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "greatify_rel")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand "*")
                                                                  (("2"
                                                                    (split +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "strict_poly_system_solvable")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "0"
                                                                             "LAMBDA (ii:nat): d"
                                                                             "LAMBDA (ii:nat): (-1)*a")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "*")
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         3)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "sturm_tarski_faster(1,
                                                               poly_deriv(a),
                                                               d - 1,
                                                               LAMBDA
                                                               (j):
                                                               LAMBDA (x: nat): (-1) * a(x),
                                                               LAMBDA (j): d,
                                                               (LAMBDA (j): 1))")
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     (-2
                                                                                                      -3))
                                                                                                    (("3"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "NSol_all"
                                                                                                           -)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "empty_card[real]")
                                                                                                            (("3"
                                                                                                              (inst?)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "Sol_all"
                                                                                                                         +)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                              (ii: nat):
                                                                              LAMBDA (x: nat): (-1) * a(x),
                                                                              LAMBDA (ii: nat): d,
                                                                              (LAMBDA (i: nat): 1),
                                                                              0)),
                                                  d - 1)
                                                 (x!1)=(-1)*polynomial(poly_deriv(a), d - 1)(x!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "scal_polynomial2"
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "poly_eq_le_degree")
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "poly_deriv"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "prod_polynomials")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "*")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "0")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (inst
                                                                                           +
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "scal_polynomial2")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "*"
                                                                                                 -)
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   -1
                                                                                                   +)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (lemma
                                                                                                       "sigma_tolambda")
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "polynomial"
                                                                                                         (-4
                                                                                                          1))
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "strict_poly_system_solvable")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "LAMBDA (ii:nat): d"
                                                                           "LAMBDA (ii:nat): (-1)*a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skosimp
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1)
                                                                                              (("2"
                                                                                                (skosimp
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "sturm_tarski_faster(1,
                                                                 poly_deriv(a),
                                                                 d - 1,
                                                                 LAMBDA
                                                                 (j):
                                                                 LAMBDA (zz: nat): (-1) * a(zz),
                                                                 LAMBDA (j): d,
                                                                 (LAMBDA (j): 1))")
                                                                                          (("3"
                                                                                            (hide
                                                                                             (-2
                                                                                              -3))
                                                                                            (("3"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "NSol_all"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "empty_card[real]")
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               5
                                                                                                               "x!1")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "Sol_all"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "0")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (lemma
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (hide-all-but
                                                                                                                                 (-3
                                                                                                                                  5))
                                                                                                                                (("3"
                                                                                                                                  (invoke
                                                                                                                                   (case
                                                                                                                                    "NOT %1 = %2")
                                                                                                                                   (!
                                                                                                                                    -1
                                                                                                                                    1
                                                                                                                                    2)
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "poly_eq_le_degree")
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "rel5")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "NOT EXISTS (x): polynomial(a, d)(x) < 0")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide -2)
                                                                    (("2"
                                                                      (replace
                                                                       3)
                                                                      (("2"
                                                                        (case
                                                                         "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "sturm_tarski_faster(1,
                                                             poly_deriv(a),
                                                             d - 1,
                                                             LAMBDA (j): (-1) * a,
                                                             LAMBDA (j): d,
                                                             (LAMBDA (j): 4))")
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3))
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "strict_poly_system_solvable")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "LAMBDA (ii:nat): d"
                                                                                       "LAMBDA (ii:nat): (-1)*a")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "*"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "NSol_all"
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "empty_card[real]")
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "empty?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "x!2")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "Sol_all"
                                                                                                                               +)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "polynomial(poly_deriv(prod_polynomials(LAMBDA
                                                                             (ii: nat):
                                                                             LAMBDA (x: nat): (-1) * a(x),
                                                                             LAMBDA (ii: nat): d,
                                                                             (LAMBDA (i: nat): 1),
                                                                             0)),
                                                 d - 1)
                                                (x!2)=(-1)*polynomial(poly_deriv(a), d - 1)(x!2)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (rewrite
                                                                                                                                       "scal_polynomial2"
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "poly_eq_le_degree"
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "poly_deriv")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "prod_polynomials")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "*")
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("2"
                                                                                                                                                      (ground)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "0")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (rewrite
                                                                                                       "scal_polynomial2")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (expand
                                                                                 "*"
                                                                                 1)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "poly_sign_near_infinity")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "(-1)*a"
                                                                       "d")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "M!1")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "M!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sign_ext")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "poly_sign_near_negative_infinity")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "-M!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "even_or_odd")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "-M!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sign_ext")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (case
                                                                     "NOT greatify_rel(LAMBDA (j): 5) = (LAMBDA (j): 4)")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "greatify_rel"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         "sturm_tarski_faster(1,
                                                             poly_deriv(a),
                                                             d - 1,
                                                             LAMBDA (j): (-1) * a,
                                                             LAMBDA (j): d,
                                                             (LAMBDA (j): 4))")
                                                                        (("1"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "NSol_all"
                                                                                   +)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "empty_card[real]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty?"
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "Sol_all")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "*"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (expand
                                                                             "*"
                                                                             1)
                                                                            (("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (system_roots_enum formula-decl nil poly_systems nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (sturm_tarski_faster const-decl "{r: real |
   r = NSol_all(k, a, m, p, n, RelF6) AND
    rational_pred(r) AND integer_pred(r)}" system_solvers nil)
    (NSol_all const-decl "nat" poly_families nil)
    (Sol_all const-decl "finite_set[real]" poly_families nil)
    (strict_poly_system_solvable formula-decl nil poly_systems nil)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (poly_eq_le_degree formula-decl nil polynomials reals)
    (poly_deriv const-decl "real" polynomials reals)
    (poly_sign_near_negative_infinity formula-decl nil more_polynomial_props
     reals)
    (poly_sign_near_infinity formula-decl nil more_polynomial_props reals)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign reals)
    (sigma_tolambda formula-decl nil sigma_nat reals)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   shostak))
 (poly_deriv_integer 0
  (poly_deriv_integer-1 nil 3621599183
   ("" (skeep) (("" (expand "poly_deriv") (("" (propax) nil nil)) nil)) nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (poly_deriv const-decl "real" polynomials reals))
   shostak))
 (compute_solvable_TCC1 0
  (compute_solvable_TCC1-1 nil 3621339345 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (/= const-decl "boolean" notequal nil)
    (odd? const-decl "bool" integers nil)
    (even? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (compute_solvable subtype "poly_system_strategy.n(0)"
    "{d | poly_system_strategy.p(0)(poly_system_strategy.d) /= 0}")))
 (compute_solvable_TCC2 0
  (compute_solvable_TCC2-3 nil 3622460405
   ("" (skeep)
    (("" (skeep*)
      (("" (split)
        (("1" (typepred "n")
          (("1" (inst - "fe")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (typepred "fe")
                (("2" (assert)
                  (("2" (inst - "i") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replaces -1)
          (("2" (expand "greatify_poly_rel")
            (("2" (expand "greatify_poly")
              (("2" (lift-if)
                (("2" (expand "*")
                  (("2" (typepred "n")
                    (("2" (inst - "fe")
                      (("1" (assert) (("1" (ground) nil nil)) nil)
                       ("2" (typepred "fe")
                        (("2" (assert)
                          (("2" (hide -2)
                            (("2" (inst - "i") (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (int_times_int_is_int application-judgement "int" integers nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (k skolem-const-decl "nat" poly_system_strategy nil)
    (subrange type-eq-decl nil integers nil)
    (newRel skolem-const-decl
     "[nat -> {pz: subrange(0, 5) | pz /= 2 AND pz /= 5}]"
     poly_system_strategy nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (fe skolem-const-decl "{i |
   (i > k IMPLIES FORALL (j: upto(k)): newRel(j) > 0) AND
    (i <= k IMPLIES
      newRel(i) = 0 AND FORALL (j): j < i IMPLIES newRel(j) > 0)}"
     poly_system_strategy nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (compute_solvable subtype "poly_system_strategy.n(poly_system_strategy.fe)"
    "{m | poly_system_strategy.newp(poly_system_strategy.fe)(system_solvers.m) /= 0}"))
  (compute_solvable_TCC2-2 nil 3621608685
   ("" (skeep*)
    (("" (typepred "n")
      (("" (typepred "fe")
        (("" (assert)
          (("" (case "fe <=k")
            (("1" (assert)
              (("1" (inst - "fe")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (replace -6 +)
                        (("1" (expand "greatify_poly_rel" +)
                          (("1" (expand "*")
                            (("1" (lift-if)
                              (("1" (typepred "n")
                                (("1" (inst - "fe")
                                  (("1" (flatten) (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (inst - "i") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)) nil
   (compute_solvable subtype "poly_system_strategy.n(poly_system_strategy.fe)"
    "{m | poly_system_strategy.newp(poly_system_strategy.fe)(system_solvers.m) /= 0}"))
  (compute_solvable_TCC2-1 nil 3621339345 ("" (subtype-tcc) nil nil)
   ((le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable subtype "poly_system_strategy.n(poly_system_strategy.fe)"
    "{m | poly_system_strategy.newp(poly_system_strategy.fe)(system_solvers.m) /= 0}")))
 (compute_solvable_TCC3 0
  (compute_solvable_TCC3-3 nil 3622460555
   ("" (skeep*)
    (("" (lift-if)
      (("" (assert)
        (("" (replaces -1)
          (("" (expand "greatify_poly_rel" -)
            (("" (expand "greatify_poly")
              (("" (lift-if)
                (("" (lift-if)
                  (("" (expand "*")
                    (("" (typepred "n")
                      (("" (inst-cp - "1+i_1")
                        (("" (inst - "i_1") (("" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (int_times_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (compute_solvable subtype
    "(LAMBDA (i): IF reals.<(poly_system_strategy.i, poly_system_strategy.fe) THEN poly_system_strategy.n(poly_system_strategy.i) ELSE poly_system_strategy.n((number_fields.+)(poly_system_strategy.i, 1)) ENDIF)"
    "{n | FORALL (i_1: naturalnumbers.upto((number_fields.-)(poly_system_strategy.k, 1))): (booleans.NOT)(IF reals.<(i_1, poly_system_strategy.fe) THEN poly_system_strategy.newp(i_1)(system_solvers.n(i_1)) ELSE poly_system_strategy.newp((number_fields.+)(1, i_1))(system_solvers.n(i_1)) ENDIF = 0)}"))
  (compute_solvable_TCC3-2 nil 3621608859
   ("" (skeep)
    (("" (skeep*)
      (("" (split)
        (("1" (typepred "n")
          (("1" (inst - "fe")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (typepred "fe")
                (("2" (assert)
                  (("2" (inst - "i") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replaces -1)
          (("2" (expand "greatify_poly_rel")
            (("2" (expand "greatify_poly")
              (("2" (lift-if)
                (("2" (expand "*")
                  (("2" (typepred "n")
                    (("2" (inst - "fe")
                      (("1" (assert) (("1" (ground) nil nil)) nil)
                       ("2" (typepred "fe")
                        (("2" (assert)
                          (("2" (hide -2)
                            (("2" (inst - "i") (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable subtype
    "(LAMBDA (i): IF reals.<(poly_system_strategy.i, poly_system_strategy.fe) THEN poly_system_strategy.n(poly_system_strategy.i) ELSE poly_system_strategy.n((number_fields.+)(poly_system_strategy.i, 1)) ENDIF)"
    "{n | FORALL (i_1: naturalnumbers.upto((number_fields.-)(poly_system_strategy.k, 1))): (booleans.NOT)(IF reals.<(i_1, poly_system_strategy.fe) THEN poly_system_strategy.newp(i_1)(system_solvers.n(i_1)) ELSE poly_system_strategy.newp((number_fields.+)(1, i_1))(system_solvers.n(i_1)) ENDIF = 0)}"))
  (compute_solvable_TCC3-1 nil 3621339345
   ("" (skeep*)
    (("" (typepred "fe")
      (("" (assert)
        (("" (case "fe <=k")
          (("1" (assert)
            (("1" (hide -2)
              (("1" (flatten)
                (("1" (inst + "fe")
                  (("1" (replace -6 -2)
                    (("1" (expand "greatify_rel" -2)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (replace -5 -1)
                            (("1" (expand "greatify_poly_rel" -1)
                              (("1" (typepred "n")
                                (("1" (inst?) (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) (("2" (inst - "i") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable subtype
    "(LAMBDA (i): IF reals.<(poly_system_strategy.i, poly_system_strategy.fe) THEN poly_system_strategy.n(poly_system_strategy.i) ELSE poly_system_strategy.n((number_fields.+)(poly_system_strategy.i, 1)) ENDIF)"
    "{n | FORALL (i_1: naturalnumbers.upto((number_fields.-)(poly_system_strategy.k, 1))): (booleans.NOT)(IF reals.<(i_1, poly_system_strategy.fe) THEN poly_system_strategy.newp(i_1)(system_solvers.n(i_1)) ELSE poly_system_strategy.newp((number_fields.+)(1, i_1))(system_solvers.n(i_1)) ENDIF = 0)}")))
 (compute_solvable_TCC4 0
  (compute_solvable_TCC4-4 nil 3622460572
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "Qprodlist")
        (("" (replace -9 :dir rl)
          (("" (replace -3 + :dir rl)
            (("" (typepred "prod_polynomials(newp, n, LAMBDA i: 1, k)")
              (("" (assert)
                (("" (skosimp*)
                  (("" (replace -8 -3)
                    (("" (expand "greatify_poly_rel" -)
                      (("" (expand "greatify_poly")
                        (("" (assert)
                          (("" (expand "*")
                            (("" (lift-if)
                              (("" (assert)
                                (("" (typepred "n")
                                  (("" (inst - "i!1") (("" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (product def-decl "real" product reals)
    (^ const-decl "real" exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
   nil
   (compute_solvable subtype "poly_system_strategy.Qdeg"
    "{m | poly_system_strategy.Qprod(system_solvers.m) /= 0}"))
  (compute_solvable_TCC4-3 nil 3622459343
   ("" (skeep*)
    (("" (lift-if)
      (("" (assert)
        (("" (replaces -1)
          (("" (expand "greatify_poly_rel" -)
            (("" (expand "greatify_poly")
              (("" (lift-if)
                (("" (lift-if)
                  (("" (expand "*")
                    (("" (typepred "n")
                      (("" (inst-cp - "1+i_1")
                        (("" (inst - "i_1") (("" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable subtype "poly_system_strategy.Qdeg"
    "{m | poly_system_strategy.Qprod(system_solvers.m) /= 0}"))
  (compute_solvable_TCC4-2 nil 3621608892
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "Qprodlist")
        (("" (replace -9 :dir rl)
          (("" (replace -3 + :dir rl)
            (("" (typepred "prod_polynomials(newp, n, LAMBDA i: 1, k)")
              (("" (assert)
                (("" (skosimp*)
                  (("" (replace -8 -3)
                    (("" (expand "greatify_poly_rel" -)
                      (("" (assert)
                        (("" (expand "*")
                          (("" (lift-if)
                            (("" (assert)
                              (("" (typepred "n")
                                (("" (inst - "i!1") (("" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (product def-decl "real" product reals)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil))
   nil
   (compute_solvable subtype "poly_system_strategy.Qdeg"
    "{m | poly_system_strategy.Qprod(system_solvers.m) /= 0}"))
  (compute_solvable_TCC4-1 nil 3621339345
   ("" (skeep*)
    (("" (lift-if)
      (("" (assert)
        (("" (replaces -1)
          (("" (expand "greatify_poly_rel" -)
            (("" (lift-if)
              (("" (lift-if)
                (("" (expand "*")
                  (("" (typepred "n")
                    (("" (inst-cp - "1+i_1")
                      (("" (inst - "i_1") (("" (ground) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable subtype "poly_system_strategy.Qdeg"
    "{m | poly_system_strategy.Qprod(system_solvers.m) /= 0}")))
 (compute_solvable_TCC5 0
  (compute_solvable_TCC5-4 nil 3622460592
   ("" (skeep*)
    (("" (replaces -1)
      (("" (expand "greatify_poly_rel" -6)
        (("" (expand "greatify_poly")
          (("" (lift-if)
            (("" (expand "*")
              (("" (typepred "n")
                (("" (inst - "i") (("" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (int_times_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
   nil
   (compute_solvable subtype "poly_system_strategy.n"
    "{n | FORALL (i: naturalnumbers.upto(poly_system_strategy.k)): poly_system_strategy.newp(i)(system_solvers.n(i)) /= 0}"))
  (compute_solvable_TCC5-3 nil 3622459303
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "Qprodlist")
        (("" (replace -9 :dir rl)
          (("" (replace -3 + :dir rl)
            (("" (typepred "prod_polynomials(newp, n, LAMBDA i: 1, k)")
              (("" (assert)
                (("" (skosimp*)
                  (("" (replace -8 -3)
                    (("" (expand "greatify_poly_rel" -)
                      (("" (expand "greatify_poly")
                        (("" (assert)
                          (("" (expand "*")
                            (("" (lift-if)
                              (("" (assert)
                                (("" (typepred "n")
                                  (("" (inst - "i!1") (("" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable subtype "poly_system_strategy.n"
    "{n | FORALL (i: naturalnumbers.upto(poly_system_strategy.k)): poly_system_strategy.newp(i)(system_solvers.n(i)) /= 0}"))
  (compute_solvable_TCC5-2 nil 3621608908
   ("" (skeep*)
    (("" (replaces -1)
      (("" (expand "greatify_poly_rel" -6)
        (("" (lift-if)
          (("" (expand "*")
            (("" (typepred "n")
              (("" (inst - "i") (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (compute_solvable subtype "poly_system_strategy.n"
    "{n | FORALL (i: naturalnumbers.upto(poly_system_strategy.k)): poly_system_strategy.newp(i)(system_solvers.n(i)) /= 0}"))
  (compute_solvable_TCC5-1 nil 3621339345
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "Qprodlist")
        (("" (replace -9 :dir rl)
          (("" (replace -3 + :dir rl)
            (("" (typepred "prod_polynomials(newp, n, LAMBDA i: 1, k)")
              (("" (assert)
                (("" (skosimp*)
                  (("" (replace -8 -3)
                    (("" (expand "greatify_poly_rel" -)
                      (("" (assert)
                        (("" (expand "*")
                          (("" (lift-if)
                            (("" (assert)
                              (("" (typepred "n")
                                (("" (inst - "i!1") (("" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (product def-decl "real" product reals)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil))
   nil
   (compute_solvable subtype "poly_system_strategy.n"
    "{n | FORALL (i: naturalnumbers.upto(poly_system_strategy.k)): poly_system_strategy.newp(i)(system_solvers.n(i)) /= 0}")))
 (compute_solvable_TCC6 0
  (compute_solvable_TCC6-4 nil 3622460611
   ("" (skeep*)
    (("" (assert) (("" (rewrite "poly_deriv_integer" +) nil nil)) nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (poly_deriv_integer formula-decl nil poly_system_strategy nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
   nil
   (compute_solvable subtype
    "polynomials.poly_deriv(poly_system_strategy.Qprod)" "[nat -> int]"))
  (compute_solvable_TCC6-3 nil 3622459268
   ("" (skeep*)
    (("" (replaces -1)
      (("" (expand "greatify_poly_rel" -6)
        (("" (expand "greatify_poly")
          (("" (lift-if)
            (("" (expand "*")
              (("" (typepred "n")
                (("" (inst - "i") (("" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (compute_solvable subtype
    "polynomials.poly_deriv(poly_system_strategy.Qprod)" "[nat -> int]"))
  (compute_solvable_TCC6-2 nil 3621608920
   ("" (skeep*)
    (("" (assert) (("" (rewrite "poly_deriv_integer" +) nil nil)) nil)) nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable subtype
    "polynomials.poly_deriv(poly_system_strategy.Qprod)" "[nat -> int]"))
  (compute_solvable_TCC6-1 nil 3621339345
   ("" (skeep*)
    (("" (replaces -1)
      (("" (expand "greatify_poly_rel" -6)
        (("" (lift-if)
          (("" (expand "*")
            (("" (typepred "n")
              (("" (inst - "i") (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (compute_solvable subtype
    "polynomials.poly_deriv(poly_system_strategy.Qprod)" "[nat -> int]")))
 (compute_solvable_TCC7 0
  (compute_solvable_TCC7-6 "" 3790099508
   ("" (skeep*)
    (("" (assert)
      (("" (label "igz" 6)
        (("" (expand "poly_deriv" +)
          (("" (copy "igz")
            (("" (case "NOT Qprod(Qdeg)=0")
              (("1" (assert)
                (("1" (mult-by 1 "Qdeg") (("1" (assert) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (typepred "Qprodlist")
                  (("2" (decompose-equality -3)
                    (("2" (inst - "Qdeg")
                      (("2" (assert)
                        (("2" (hide -1)
                          (("2"
                            (typepred
                             "prod_polynomials(newp, n, LAMBDA i: 1, k)")
                            (("2" (hide -1)
                              (("2" (split -)
                                (("1" (assert) nil nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (skosimp*)
                                    (("2" (typepred "n")
                                      (("2"
                                        (inst - "i!1")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (reveal
                                               -1
                                               -2
                                               -3
                                               -4
                                               -5
                                               -6
                                               -7
                                               -8
                                               -9
                                               -10
                                               -11
                                               -12
                                               -13
                                               -14
                                               -15
                                               -16
                                               1
                                               2
                                               3
                                               4
                                               5)
                                              (("2"
                                                (expand "rel5")
                                                (("2"
                                                  (inst 1 "i!1")
                                                  (("2"
                                                    (typepred "i!1")
                                                    (("2"
                                                      (expand "greatify_rel")
                                                      (("2"
                                                        (expand
                                                         "greatify_poly_rel")
                                                        (("2"
                                                          (expand
                                                           "greatify_poly")
                                                          (("2"
                                                            (replace -7 -20)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               -4
                                                               -5
                                                               -6
                                                               -7
                                                               -8
                                                               -9
                                                               -10
                                                               -11
                                                               -12
                                                               -13
                                                               -14)
                                                              (("2"
                                                                (hide 4 5)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -5)
                                                                  (("2"
                                                                    (case
                                                                     "p(i!1)(n(i!1)) = 0")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "RelF6(i!1) = 0 OR RelF6(i!1) = 1 OR RelF6(i!1) = 2 OR RelF6(i!1) = 3 OR RelF6(i!1) = 4 OR RelF6(i!1) = 5")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("4"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("5"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("6"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (compute_solvable subtype "(number_fields.-)(poly_system_strategy.Qdeg, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.Qprod)(system_solvers.m) /= 0}"))
  (compute_solvable_TCC7-5 "" 3768585169
   ("" (skeep*)
    (("" (assert)
      (("" (label "igz" 6)
        (("" (expand "poly_deriv" +)
          (("" (copy "igz")
            (("" (case "NOT Qprod(Qdeg)=0")
              (("1" (assert)
                (("1" (mult-by 1 "Qdeg") (("1" (assert) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (typepred "Qprodlist")
                  (("2" (decompose-equality -3)
                    (("2" (inst - "Qdeg")
                      (("2" (assert)
                        (("2" (replaces -1 :dir rl)
                          (("2" (hide -1)
                            (("2"
                              (typepred
                               "prod_polynomials(newp, n, LAMBDA i: 1, k)")
                              (("2" (hide -1)
                                (("2" (split -)
                                  (("1" (assert) nil nil)
                                   ("2" (replaces -5 1)
                                    (("2" (hide-all-but 1)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (typepred "n")
                                          (("2"
                                            (inst - "i!1")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (reveal
                                                   -1
                                                   -2
                                                   -3
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -8
                                                   -9
                                                   -10
                                                   -11
                                                   -12
                                                   -13
                                                   -14
                                                   -15
                                                   -16
                                                   1
                                                   2
                                                   3
                                                   4
                                                   5)
                                                  (("2"
                                                    (expand "rel5")
                                                    (("2"
                                                      (inst 1 "i!1")
                                                      (("2"
                                                        (typepred "i!1")
                                                        (("2"
                                                          (expand
                                                           "greatify_rel")
                                                          (("2"
                                                            (expand
                                                             "greatify_poly_rel")
                                                            (("2"
                                                              (expand
                                                               "greatify_poly")
                                                              (("2"
                                                                (replace
                                                                 -7
                                                                 -20)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   -7
                                                                   -8
                                                                   -9
                                                                   -10
                                                                   -11
                                                                   -12
                                                                   -13
                                                                   -14)
                                                                  (("2"
                                                                    (hide 4 5)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       -5)
                                                                      (("2"
                                                                        (case
                                                                         "p(i!1)(n(i!1)) = 0")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "RelF6(i!1) = 0 OR RelF6(i!1) = 1 OR RelF6(i!1) = 2 OR RelF6(i!1) = 3 OR RelF6(i!1) = 4 OR RelF6(i!1) = 5")
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("4"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("5"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("6"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (poly_deriv const-decl "real" polynomials reals)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (subrange type-eq-decl nil integers nil) (> const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (greatify_rel const-decl "{pz: subrange(0, 5) | pz /= 2 AND pz /= 5}"
     poly_system_strategy nil)
    (greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (odd? const-decl "bool" integers nil)
    (even? const-decl "bool" integers nil)
    (preprocessingStepConj const-decl "bool" preprocessing_univariate nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (k skolem-const-decl "nat" poly_system_strategy nil)
    (i!1 skolem-const-decl "nat" poly_system_strategy nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
   shostak
   (compute_solvable subtype "(number_fields.-)(poly_system_strategy.Qdeg, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.Qprod)(system_solvers.m) /= 0}"))
  (compute_solvable_TCC7-4 nil 3622460629
   ("" (skeep*)
    (("" (assert)
      (("" (label "igz" 6)
        (("" (expand "poly_deriv" +)
          (("" (copy "igz")
            (("" (case "NOT Qprod(Qdeg)=0")
              (("1" (assert)
                (("1" (mult-by 1 "Qdeg") (("1" (assert) nil nil)) nil)) nil)
               ("2" (replace -8 -1)
                (("2" (assert)
                  (("2" (typepred "Qprodlist")
                    (("2" (decompose-equality -3)
                      (("2" (inst - "Qdeg")
                        (("2" (assert)
                          (("2" (replaces -1 :dir rl)
                            (("2" (hide -1)
                              (("2"
                                (typepred
                                 "prod_polynomials(newp, n, LAMBDA i: 1, k)")
                                (("2" (hide -1)
                                  (("2" (split -)
                                    (("1" (assert) nil nil)
                                     ("2" (replaces -5 1)
                                      (("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand "greatify_poly_rel")
                                          (("2"
                                            (expand "greatify_poly")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (expand "*")
                                                (("2"
                                                  (typepred "n")
                                                  (("2"
                                                    (inst - "i!1")
                                                    (("2"
                                                      (lift-if)
                                                      (("2" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (poly_deriv const-decl "real" polynomials reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (product def-decl "real" product reals)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil))
   nil
   (compute_solvable subtype "(number_fields.-)(poly_system_strategy.Qdeg, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.Qprod)(system_solvers.m) /= 0}"))
  (compute_solvable_TCC7-3 nil 3622459250
   ("" (skeep*)
    (("" (assert) (("" (rewrite "poly_deriv_integer" +) nil nil)) nil)) nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable subtype "(number_fields.-)(poly_system_strategy.Qdeg, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.Qprod)(system_solvers.m) /= 0}"))
  (compute_solvable_TCC7-2 nil 3621608951
   ("" (skeep*)
    (("" (assert)
      (("" (case "NOT Qdeg>=2")
        (("1" (typepred "Qprodlist")
          (("1" (replace -7 :dir rl)
            (("1" (replace -2)
              (("1" (expand "sigma" 1)
                (("1" (expand "sigma" 1)
                  (("1" (expand "*" 1 1)
                    (("1" (expand "*" 1 1)
                      (("1" (typepred "n")
                        (("1" (inst-cp - "k-1")
                          (("1" (inst - "k")
                            (("1" (flatten)
                              (("1" (assert)
                                (("1"
                                  (case "sigma(0, k - 2, n * (LAMBDA i: 1)) >=0")
                                  (("1" (assert) nil nil)
                                   ("2" (rewrite "sigma_ge_0")
                                    (("2" (skosimp*)
                                      (("2"
                                        (expand "*" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (case "Qprod(Qdeg)/=0")
            (("1" (expand "poly_deriv" +)
              (("1" (assert)
                (("1" (flatten)
                  (("1" (mult-by 1 "Qdeg") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (typepred "Qprodlist")
                  (("2" (replace -13 :dir rl)
                    (("2" (replace -3 :dir rl)
                      (("2" (replace -9 -4)
                        (("2" (replace -2)
                          (("2" (assert)
                            (("2"
                              (typepred
                               "prod_polynomials(newp, n, LAMBDA i: 1, k)")
                              (("2" (assert)
                                (("2" (label "hp" 1)
                                  (("2" (skosimp*)
                                    (("2" (replace -10 -3)
                                      (("2"
                                        (expand "greatify_poly_rel" -3)
                                        (("2"
                                          (expand "*")
                                          (("2"
                                            (typepred "n")
                                            (("2"
                                              (inst - "i!1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (poly_deriv const-decl "real" polynomials reals))
   nil
   (compute_solvable subtype "(number_fields.-)(poly_system_strategy.Qdeg, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.Qprod)(system_solvers.m) /= 0}"))
  (compute_solvable_TCC7-1 nil 3621339345
   ("" (skeep*) (("" (rewrite "poly_deriv_integer" 5) nil nil)) nil) nil nil
   (compute_solvable subtype "(number_fields.-)(poly_system_strategy.Qdeg, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.Qprod)(system_solvers.m) /= 0}")))
 (compute_solvable_TCC8 0
  (compute_solvable_TCC8-2 nil 3622459232
   ("" (skeep*)
    (("" (replaces -1 -7)
      (("" (copy -6)
        (("" (expand "greatify_poly_rel" -1)
          (("" (expand "greatify_poly")
            (("" (lift-if)
              (("" (expand "*" -1)
                (("" (typepred "n")
                  (("" (inst - "i") (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
   nil
   (compute_solvable subtype "poly_system_strategy.n"
    "{n | FORALL (i: naturalnumbers.upto(poly_system_strategy.k)): poly_system_strategy.newp(i)(system_solvers.n(i)) /= 0}"))
  (compute_solvable_TCC8-1 nil 3621340773
   ("" (skeep*)
    (("" (assert)
      (("" (copy -7)
        (("" (replace -2 -1)
          (("" (expand "greatify_poly_rel" -1)
            (("" (expand "*")
              (("" (lift-if)
                (("" (typepred "n")
                  (("" (inst - "i") (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable subtype "poly_system_strategy.n"
    "{n | FORALL (i: naturalnumbers.upto(poly_system_strategy.k)): poly_system_strategy.newp(i)(system_solvers.n(i)) /= 0}")))
 (compute_solvable_new_TCC1 0
  (compute_solvable_new_TCC1-1 nil 3768747336 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (odd? const-decl "bool" integers nil)
    (even? const-decl "bool" integers nil)
    (poly_deriv const-decl "real" polynomials reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (compute_solvable_new subtype
    "polynomials.poly_deriv(poly_system_strategy.Qprod)" "[nat -> int]")))
 (compute_solvable_new_TCC2 0
  (compute_solvable_new_TCC2-3 "" 3790099510
   ("" (skeep*)
    (("" (assert)
      (("" (label "igz" 5)
        (("" (expand "poly_deriv" +)
          (("" (copy "igz")
            (("" (case "NOT Qprod(Qdeg)=0")
              (("1" (assert)
                (("1" (mult-by 1 "Qdeg") (("1" (assert) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (typepred "Qprodlist")
                  (("2" (decompose-equality -3)
                    (("2" (inst - "Qdeg")
                      (("2" (assert)
                        (("2" (hide -1)
                          (("2"
                            (typepred
                             "prod_polynomials(newp, n, LAMBDA i: 1, k)")
                            (("2" (hide -1)
                              (("2" (split -)
                                (("1" (assert) nil nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (skosimp*)
                                    (("2" (typepred "n")
                                      (("2"
                                        (inst - "i!1")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (reveal
                                               -1
                                               -2
                                               -3
                                               -4
                                               -5
                                               -6
                                               -7
                                               -8
                                               -9
                                               -10
                                               -11
                                               -12
                                               -13
                                               -14
                                               -15
                                               -16
                                               1
                                               2
                                               3
                                               4
                                               5)
                                              (("2"
                                                (inst 1 "i!1")
                                                (("2"
                                                  (typepred "i!1")
                                                  (("2"
                                                    (expand "greatify_rel")
                                                    (("2"
                                                      (expand
                                                       "greatify_poly_rel")
                                                      (("2"
                                                        (expand
                                                         "greatify_poly")
                                                        (("2"
                                                          (replace -7 -20)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6
                                                             -7
                                                             -8
                                                             -9
                                                             -10
                                                             -11
                                                             -12
                                                             -13
                                                             -14)
                                                            (("2"
                                                              (hide 4 5)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -5)
                                                                (("2"
                                                                  (case
                                                                   "p(i!1)(n(i!1)) = 0")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "RelF6(i!1) = 0 OR RelF6(i!1) = 1 OR RelF6(i!1) = 2 OR RelF6(i!1) = 3 OR RelF6(i!1) = 4 OR RelF6(i!1) = 5")
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("4"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("5"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("6"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (compute_solvable_new subtype
    "(number_fields.-)(poly_system_strategy.Qdeg, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.Qprod)(system_solvers.m) /= 0}"))
  (compute_solvable_new_TCC2-2 nil 3769875146
   ("" (skeep*)
    (("" (assert)
      (("" (label "igz" 5)
        (("" (expand "poly_deriv" +)
          (("" (copy "igz")
            (("" (case "NOT Qprod(Qdeg)=0")
              (("1" (assert)
                (("1" (mult-by 1 "Qdeg") (("1" (assert) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (typepred "Qprodlist")
                  (("2" (decompose-equality -3)
                    (("2" (inst - "Qdeg")
                      (("2" (assert)
                        (("2" (replaces -1 :dir rl)
                          (("2" (hide -1)
                            (("2"
                              (typepred
                               "prod_polynomials(newp, n, LAMBDA i: 1, k)")
                              (("2" (hide -1)
                                (("2" (split -)
                                  (("1" (assert) nil nil)
                                   ("2" (replaces -5 1)
                                    (("2" (hide-all-but 1)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (typepred "n")
                                          (("2"
                                            (inst - "i!1")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (reveal
                                                   -1
                                                   -2
                                                   -3
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -8
                                                   -9
                                                   -10
                                                   -11
                                                   -12
                                                   -13
                                                   -14
                                                   -15
                                                   -16
                                                   1
                                                   2
                                                   3
                                                   4
                                                   5)
                                                  (("2"
                                                    (inst 1 "i!1")
                                                    (("2"
                                                      (typepred "i!1")
                                                      (("2"
                                                        (expand
                                                         "greatify_rel")
                                                        (("2"
                                                          (expand
                                                           "greatify_poly_rel")
                                                          (("2"
                                                            (expand
                                                             "greatify_poly")
                                                            (("2"
                                                              (replace -7 -20)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9
                                                                 -10
                                                                 -11
                                                                 -12
                                                                 -13
                                                                 -14)
                                                                (("2"
                                                                  (hide 4 5)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -5)
                                                                    (("2"
                                                                      (case
                                                                       "p(i!1)(n(i!1)) = 0")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "RelF6(i!1) = 0 OR RelF6(i!1) = 1 OR RelF6(i!1) = 2 OR RelF6(i!1) = 3 OR RelF6(i!1) = 4 OR RelF6(i!1) = 5")
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("4"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("5"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("6"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (poly_deriv const-decl "real" polynomials reals)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (subrange type-eq-decl nil integers nil) (> const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (preprocessingStepConj const-decl "bool" preprocessing_univariate nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (greatify_rel const-decl "{pz: subrange(0, 5) | pz /= 2 AND pz /= 5}"
     poly_system_strategy nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (k skolem-const-decl "nat" poly_system_strategy nil)
    (i!1 skolem-const-decl "nat" poly_system_strategy nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
   nil
   (compute_solvable_new subtype
    "(number_fields.-)(poly_system_strategy.Qdeg, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.Qprod)(system_solvers.m) /= 0}"))
  (compute_solvable_new_TCC2-1 nil 3768747336
   ("" (skeep*)
    (("" (assert)
      (("" (label "igz" 5)
        (("" (expand "poly_deriv" +)
          (("" (copy "igz")
            (("" (case "NOT Qprod(Qdeg)=0")
              (("1" (assert)
                (("1" (mult-by 1 "Qdeg") (("1" (assert) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (typepred "Qprodlist")
                  (("2" (decompose-equality -3)
                    (("2" (inst - "Qdeg")
                      (("2" (assert)
                        (("2" (replaces -1 :dir rl)
                          (("2" (hide -1)
                            (("2"
                              (typepred
                               "prod_polynomials(newp, n, LAMBDA i: 1, k)")
                              (("2" (hide -1)
                                (("2" (split -)
                                  (("1" (assert) nil nil)
                                   ("2" (replaces -5 1)
                                    (("2" (hide-all-but 1)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (typepred "n")
                                          (("2"
                                            (inst - "i!1")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (reveal
                                                   -1
                                                   -2
                                                   -3
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -8
                                                   -9
                                                   -10
                                                   -11
                                                   -12
                                                   -13
                                                   -14
                                                   -15
                                                   -16
                                                   1
                                                   2
                                                   3
                                                   4
                                                   5)
                                                  (("2"
                                                    (inst 1 "i!1")
                                                    (("2"
                                                      (typepred "i!1")
                                                      (("2"
                                                        (expand
                                                         "greatify_rel")
                                                        (("2"
                                                          (expand
                                                           "greatify_poly_rel")
                                                          (("2"
                                                            (expand
                                                             "greatify_poly")
                                                            (("2"
                                                              (replace -7 -20)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9
                                                                 -10
                                                                 -11
                                                                 -12
                                                                 -13
                                                                 -14)
                                                                (("2"
                                                                  (hide 4 5)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -5)
                                                                    (("2"
                                                                      (case
                                                                       "p(i!1)(n(i!1)) = 0")
                                                                      (("1"
                                                                        (reveal
                                                                         4)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "RelF6(i!1) = 0 OR RelF6(i!1) = 1 OR RelF6(i!1) = 2 OR RelF6(i!1) = 3 OR RelF6(i!1) = 4 OR RelF6(i!1) = 5")
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("4"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("5"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("6"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (product def-decl "real" product reals)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (poly_deriv const-decl "real" polynomials reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (compute_solvable_new subtype
    "(number_fields.-)(poly_system_strategy.Qdeg, 1)"
    "{m | polynomials.poly_deriv(poly_system_strategy.Qprod)(system_solvers.m) /= 0}")))
 (compute_solvable_new_TCC3 0
  (compute_solvable_new_TCC3-2 nil 3769874414
   ("" (skeep*)
    (("" (replaces -1)
      (("" (expand "greatify_poly_rel" -6)
        (("" (expand "greatify_poly")
          (("" (lift-if)
            (("" (expand "*")
              (("" (typepred "n")
                (("" (inst - "i") (("" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (int_times_int_is_int application-judgement "int" integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm))
   nil
   (compute_solvable_new subtype "poly_system_strategy.n"
    "{n | FORALL (i: naturalnumbers.upto(poly_system_strategy.k)): poly_system_strategy.newp(i)(system_solvers.n(i)) /= 0}"))
  (compute_solvable_new_TCC3-1 nil 3768747336 ("" (subtype-tcc) nil nil) nil
   nil
   (compute_solvable_new subtype "poly_system_strategy.n"
    "{n | FORALL (i: naturalnumbers.upto(poly_system_strategy.k)): poly_system_strategy.newp(i)(system_solvers.n(i)) /= 0}")))
 (preprocessing_better1 0
  (preprocessing_better1-1 nil 3768756453
   ("" (skeep)
    (("" (expand "greatify_rel")
      (("" (expand "greatify_poly_rel")
        (("" (expand "preprocessingStepConj")
          (("" (expand "greatify_poly")
            (("" (split)
              (("1" (split 1)
                (("1" (propax) nil nil)
                 ("2" (flatten 1)
                  (("2" (hide 1)
                    (("2" (split 1)
                      (("1" (propax) nil nil)
                       ("2" (flatten 1)
                        (("2" (skeep)
                          (("2" (inst -1 "q")
                            (("2" (inst -2 "q")
                              (("2" (expand "rel5")
                                (("2" (assert) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split 1)
                (("1" (propax) nil nil)
                 ("2" (flatten 1)
                  (("2" (hide 2)
                    (("2" (skeep)
                      (("2" (inst -1 "q")
                        (("2" (case "odd?(n(q))")
                          (("1" (expand "rel5")
                            (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                           ("2" (case "even?(n(q))")
                            (("1" (expand "rel5")
                              (("1" (assert) (("1" (grind) nil nil)) nil))
                              nil)
                             ("2" (lemma even_or_odd)
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((greatify_rel const-decl "{pz: subrange(0, 5) | pz /= 2 AND pz /= 5}"
     poly_system_strategy nil)
    (preprocessingStepConj const-decl "bool" preprocessing_univariate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd? const-decl "bool" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (even? const-decl "bool" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil))
   shostak))
 (compute_solvable_improved 0
  (compute_solvable_improved-7 nil 3768757592
   ("" (skeep)
    (("" (case "preprocessingStepConj(k, p, n, RelF6)")
      (("1" (assert) (("1" (grind) nil nil)) nil)
       ("2" (case "k = 0")
        (("1" (hide 1)
          (("1" (expand "compute_solvable")
            (("1" (expand "compute_solvable_new") (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "EXISTS (i: upto(k)): greatify_rel(RelF6)(i) = 0")
          (("1" (assert)
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new")
                (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (split)
            (("1" (flatten)
              (("1" (expand "compute_solvable")
                (("1" (simplify)
                  (("1" (assert)
                    (("1" (split)
                      (("1" (flatten -1) nil nil)
                       ("2" (flatten -1)
                        (("2" (split -1)
                          (("1" (expand "compute_solvable_new")
                            (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                           ("2" (flatten -1)
                            (("2" (split -2)
                              (("1" (lemma preprocessing_better1)
                                (("1" (inst?)
                                  (("1" (assert)
                                    (("1" (split -1)
                                      (("1" (flatten 1) nil nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (lemma preprocessing_better1)
                                (("2" (inst?)
                                  (("2" (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (flatten 1) nil nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (expand "compute_solvable_new")
                                (("3" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "compute_solvable_new")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (flatten -1) nil nil)
                     ("2" (flatten -1)
                      (("2" (split -1)
                        (("1" (assert)
                          (("1" (expand "compute_solvable")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (flatten -1)
                          (("2" (expand "compute_solvable")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preprocessingStepConj const-decl "bool" preprocessing_univariate nil)
    (subrange type-eq-decl nil integers nil) (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (compute_solvable_new const-decl "bool" poly_system_strategy nil)
    (compute_solvable const-decl "bool" poly_system_strategy nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (even? const-decl "bool" integers nil)
    (odd? const-decl "bool" integers nil)
    (greatify_rel const-decl "{pz: subrange(0, 5) | pz /= 2 AND pz /= 5}"
     poly_system_strategy nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (preprocessing_better1 formula-decl nil poly_system_strategy nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil)
  (compute_solvable_improved-6 nil 3768755614
   ("" (skeep)
    (("" (case "preprocessingStepConj(k, p, n, RelF6)")
      (("1" (assert) (("1" (grind) nil nil)) nil)
       ("2" (case "k = 0")
        (("1" (hide 1)
          (("1" (expand "compute_solvable")
            (("1" (expand "compute_solvable_new") (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "EXISTS (i: upto(k)): greatify_rel(RelF6)(i) = 0")
          (("1" (assert)
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new")
                (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (split)
            (("1" (flatten)
              (("1" (expand "compute_solvable")
                (("1" (simplify)
                  (("1" (assert)
                    (("1" (split)
                      (("1" (flatten -1) nil nil)
                       ("2" (flatten -1)
                        (("2" (split -1)
                          (("1" (expand "compute_solvable_new")
                            (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                           ("2" (flatten -1)
                            (("2" (split -2)
                              (("1" (lemma preprocessing_better)
                                (("1" (inst?)
                                  (("1" (assert) (("1" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil)
                               ("3" (expand "compute_solvable_new")
                                (("3" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "compute_solvable_new")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (flatten -1) nil nil)
                     ("2" (flatten -1)
                      (("2" (split -1)
                        (("1" (assert)
                          (("1" (expand "compute_solvable")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (flatten -1)
                          (("2" (expand "compute_solvable")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (compute_solvable_improved-5 nil 3768755257
   ("" (skeep)
    (("" (flatten)
      (("" (case "preprocessingStepConj(k, p, n, RelF6)")
        (("1" (assert) (("1" (grind) nil)))
         ("2" (case "k = 0")
          (("1" (hide 1)
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new") (("1" (assert) nil)))))))
           ("2" (case "EXISTS (i: upto(k)): greatify_rel(RelF6)(i) = 0")
            (("1" (assert)
              (("1" (expand "compute_solvable")
                (("1" (expand "compute_solvable_new")
                  (("1" (hide 1 2) (("1" (grind) nil)))))))))
             ("2"
              (case "( length(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k))-1 >0 AND sturm_tarski_faster(k,(LAMBDA (i): IF i<length(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k)) THEN nth(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k),i) ELSE 0 ENDIF), length( prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k))-1,greatify_poly_rel(p,RelF6),n,greatify_rel(RelF6))/=0)")
              (("1" (expand "compute_solvable")
                (("1" (expand "compute_solvable_new")
                  (("1" (assert) (("1" (grind) nil)))))))
               ("2" (postpone) nil)
               ("3" (assert)
                (("3" (flatten 1)
                  (("3" (case "FORALL (j:upto(k)): p(j)(n(j))/=0")
                    (("1" (postpone) nil)
                     ("2" (assert)
                      (("2" (hide 2 3 4 5 6 7) (("2" (postpone) nil)))))))))))
               ("4" (postpone) nil))))))))))))
    nil)
   nil nil)
  (compute_solvable_improved-4 nil 3768754733
   ("" (skeep)
    (("" (case "preprocessingStepConj(k, p, n, RelF6)")
      (("1" (assert) (("1" (grind) nil nil)) nil)
       ("2" (case "k = 0")
        (("1" (hide 1)
          (("1" (expand "compute_solvable")
            (("1" (expand "compute_solvable_new") (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "EXISTS (i: upto(k)): greatify_rel(RelF6)(i) = 0")
          (("1" (assert)
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new")
                (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2"
            (case "( length(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k))-1 >0 AND sturm_tarski_faster(k,(LAMBDA (i): IF i<length(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k)) THEN nth(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k),i) ELSE 0 ENDIF), length( prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k))-1,greatify_poly_rel(p,RelF6),n,greatify_rel(RelF6))/=0)")
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new")
                (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (postpone) nil nil)
             ("3" (assert)
              (("3" (flatten 1)
                (("3" (case "FORALL (j:upto(k)): p(j)(n(j))/=0")
                  (("1" (postpone) nil nil)
                   ("2" (assert)
                    (("2" (hide 2 3 4 5 6 7) (("2" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (compute_solvable_improved-3 nil 3768752530
   ("" (skeep)
    (("" (case "preprocessingStepConj(k, p, n, RelF6)")
      (("1" (assert) (("1" (grind) nil nil)) nil)
       ("2" (case "k = 0")
        (("1" (hide 1)
          (("1" (expand "compute_solvable")
            (("1" (expand "compute_solvable_new") (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "EXISTS (i: upto(k)): greatify_rel(RelF6)(i) = 0")
          (("1" (assert)
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new")
                (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (split)
            (("1" (flatten)
              (("1" (expand "compute_solvable")
                (("1" (simplify)
                  (("1" (assert)
                    (("1" (split)
                      (("1" (flatten) nil nil)
                       ("2" (flatten -1) (("2" (postpone) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (compute_solvable_improved-2 nil 3768752257
   ("" (skeep)
    (("" (case "preprocessingStepConj(k, p, n, RelF6)")
      (("1" (assert) (("1" (grind) nil nil)) nil)
       ("2" (case "k = 0")
        (("1" (hide 1)
          (("1" (expand "compute_solvable")
            (("1" (expand "compute_solvable_new") (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "EXISTS (i: upto(k)): greatify_rel(RelF6)(i) = 0")
          (("1" (assert)
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new")
                (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2"
            (case "( length(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k))-1 >0 AND sturm_tarski_faster(k,(LAMBDA (i): IF i<length(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k)) THEN nth(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k),i) ELSE 0 ENDIF), length( prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k))-1,greatify_poly_rel(p,RelF6),n,greatify_rel(RelF6))/=0)")
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new") (("1" (postpone) nil nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (compute_solvable_improved-1 nil 3768747337
   ("" (skeep)
    (("" (case "preprocessingStepConj(k, p, n, RelF6)")
      (("1" (assert) (("1" (grind) nil nil)) nil)
       ("2" (case "k = 0")
        (("1" (hide 1)
          (("1" (expand "compute_solvable")
            (("1" (expand "compute_solvable_new") (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "EXISTS (i: upto(k)): greatify_rel(RelF6)(i) = 0")
          (("1" (assert)
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new")
                (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2"
            (case "( length(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k))-1 >0 AND sturm_tarski_faster(k,(LAMBDA (i): IF i<length(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k)) THEN nth(prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k),i) ELSE 0 ENDIF), length( prod_polynomials_list(greatify_poly_rel(p,RelF6),n,LAMBDA i: 1,k))-1,greatify_poly_rel(p,RelF6),n,greatify_rel(RelF6))/=0)")
            (("1" (expand "compute_solvable")
              (("1" (expand "compute_solvable_new")
                (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (compute_solvable_def 0
  (compute_solvable_def-6 nil 3768578230
   ("" (skeep)
    (("" (label "ndef" -1)
      (("" (case "preprocessingStepConj(k,p,n,RelF6)")
        (("1" (split)
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (flatten)
            (("2" (lemma preprocessingConjTheorem)
              (("2" (inst -1 "RelF6" "n" "p" "k")
                (("2" (split)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "k = 0")
          (("1" (replace -1)
            (("1" (expand "compute_solvable")
              (("1" (lemma "compute_solvable_single_def")
                (("1" (inst - "p(0)" "n(0)")
                  (("1" (assert)
                    (("1" (split -)
                      (("1" (inst - "RelF6(0)")
                        (("1" (replaces -1 :dir rl)
                          (("1" (ground)
                            (("1" (skosimp*)
                              (("1" (inst + "x!1")
                                (("1" (inst - "0") nil nil)) nil))
                              nil)
                             ("2" (skosimp*)
                              (("2" (inst + "x!1")
                                (("2" (skosimp*) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "0") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "compute_solvable" :assert? none)
            (("2" (name "newp" "greatify_poly_rel(p, RelF6)")
              (("2" (replace -1)
                (("2" (name "newRel" "greatify_rel(RelF6)")
                  (("2" (replace -1)
                    (("2" (replace 1)
                      (("2" (case "(EXISTS (i:upto(k)): newRel(i)=0)")
                        (("1" (name "fe" "first_eq(newRel, k)")
                          (("1" (assert)
                            (("1" (replace -2)
                              (("1" (replace -1)
                                (("1" (case "NOT fe<=k")
                                  (("1" (typepred "fe")
                                    (("1" (assert)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst - "i!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (typepred "fe")
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (typepred
                                               "sturm_tarski_faster(k - 1,
                                                                                                   newp(fe),
                                                                                                   n(fe),
                                                                                                   LAMBDA
                                                                                                   (i):
                                                                                                   IF i < fe
                                                                                                   THEN newp(i)
                                                                                                   ELSE newp(1 + i)
                                                                                                   ENDIF,
                                                                                                   LAMBDA
                                                                                                   (i):
                                                                                                   IF i < fe
                                                                                                   THEN n(i)
                                                                                                   ELSE n(1 + i)
                                                                                                   ENDIF,
                                                                                                   LAMBDA
                                                                                                   (i):
                                                                                                   IF i < fe
                                                                                                   THEN newRel(i)
                                                                                                   ELSE newRel(1 + i)
                                                                                                   ENDIF)")
                                              (("1"
                                                (hide (-2 -3))
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "NSol_all" +)
                                                    (("1"
                                                      (lemma
                                                       "empty_card[real]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand "empty?")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "x!1")
                                                                    (("1"
                                                                      (expand
                                                                       "Sol_all")
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "fe")
                                                                          (("1"
                                                                            (expand
                                                                             "newRel"
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "greatify_rel"
                                                                               -2)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "rel5"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "newp"
                                                                                         +)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_poly_rel"
                                                                                           +)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "greatify_poly")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (case
                                                                             "i!2 < fe")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "i!2")
                                                                                (("1"
                                                                                  (expand
                                                                                   "rel5"
                                                                                   -3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newRel"
                                                                                     +)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "greatify_rel"
                                                                                       +)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "newp"
                                                                                         +)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_poly_rel"
                                                                                           +)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "greatify_poly")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "1+i!2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "rel5"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "newRel"
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "newp"
                                                                                         +)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "greatify_rel"
                                                                                           +)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "greatify_poly_rel"
                                                                                             +)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "greatify_poly")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "scal_polynomial2")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "x!1")
                                                                    (("2"
                                                                      (case
                                                                       "NOT RelF6(fe) = 0")
                                                                      (("1"
                                                                        (expand
                                                                         "newRel"
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "greatify_rel"
                                                                           -2)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (case
                                                                           "j = fe")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "rel5"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "Sol_all"
                                                                                   -3)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newp"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_poly_rel"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_poly")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "j < fe")
                                                                            (("1"
                                                                              (expand
                                                                               "Sol_all")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "j")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newp"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "newRel"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_poly_rel"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "greatify_poly")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "greatify_rel"
                                                                                               -4)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "rel5"
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "scal_polynomial2")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "Sol_all")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "j-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newp"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "newRel"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_rel"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "greatify_poly_rel"
                                                                                             -3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "greatify_poly")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "rel5"
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 3)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst-cp - "i!1")
                                                    (("2"
                                                      (inst - "1+i!1")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (expand "newp" -1)
                                                          (("2"
                                                            (expand
                                                             "greatify_poly_rel"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "greatify_poly")
                                                              (("2"
                                                                (expand
                                                                 "*"
                                                                 -1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst-cp
                                                                         -
                                                                         "i!1")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "1+i!1")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (name "Qprodlist"
                                "prod_polynomials_list(newp, n, LAMBDA i: 1, k)")
                          (("2" (name "Qdeg" "length(Qprodlist) - 1")
                            (("2"
                              (name "Qprod" "LAMBDA (i):
                                                                                                    IF i < length(Qprodlist) THEN nth(Qprodlist, i)
                                                                                                    ELSE 0
                                                                                                    ENDIF")
                              (("2" (assert)
                                (("2" (replace -3)
                                  (("2" (replace -2)
                                    (("2" (replace -1)
                                      (("2"
                                        (case
                                         "NOT length(Qprodlist) - 2 = Qdeg -1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (replace 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case "NOT Qdeg>=2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "Qprodlist")
                                                            (("1"
                                                              (replace -2)
                                                              (("1"
                                                                (replace
                                                                 -7
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "sigma")
                                                                  (("1"
                                                                    (expand
                                                                     "sigma")
                                                                    (("1"
                                                                      (expand
                                                                       "*"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "*"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (copy
                                                                             "ndef")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -
                                                                               "k")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "k-1")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sigma_ge_0")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "*")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (case
                                                               "EXISTS (pz:upto(k)): polynomial(p(pz),n(pz))(x) = 0")
                                                              (("1"
                                                                (skeep -)
                                                                (("1"
                                                                  (case
                                                                   "NOT newRel(pz)=4")
                                                                  (("1"
                                                                    (expand
                                                                     "newRel"
                                                                     1)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "pz")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "pz")
                                                                        (("1"
                                                                          (expand
                                                                           "rel5"
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (expand
                                                                                   "newRel"
                                                                                   6)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "greatify_rel"
                                                                                     6)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "sturm_tarski_faster(k, Qprod, Qdeg, newp, n, newRel)")
                                                                    (("2"
                                                                      (hide
                                                                       (-2
                                                                        -3))
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "NSol_all"
                                                                           -)
                                                                          (("2"
                                                                            (lemma
                                                                             "empty_card[real]")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "x")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "Sol_all"
                                                                                         +)
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "Qprodlist")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -11)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "prod_polynomials(newp, n, LAMBDA i: 1, k)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -5
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Qdeg")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1
                                                                                                           -2
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "product_eq_zero[nat]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "pz")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "^"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "expt")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "expt")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "newp"
                                                                                                                             +)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "greatify_poly_rel"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "greatify_poly")
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "scal_polynomial2")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i!1")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 (2
                                                                                                  3))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "rel5")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "newp"
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "newRel"
                                                                                                       +)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "greatify_poly_rel"
                                                                                                         +)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "greatify_poly")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "greatify_rel"
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (ground)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "scal_polynomial2")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (rewrite
                                                                                                                       "scal_polynomial2")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (name
                                                                 "SS"
                                                                 "LAMBDA (i:nat): IF newRel(i)/=3 OR (newRel(i)=3 AND polynomial(newp(i),n(i))(x)>=0) THEN 1 ELSE (-1) ENDIF")
                                                                (("2"
                                                                  (name
                                                                   "NP"
                                                                   "LAMBDA (i:nat): SS(i)*newp(i)")
                                                                  (("2"
                                                                    (lemma
                                                                     "strict_poly_system_solvable")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "k"
                                                                       "n"
                                                                       "NP")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   (1
                                                                                    3))
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "j")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "NP"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "SS"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "newRel"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "greatify_rel"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "rel5"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "j")
                                                                                                            (("1"
                                                                                                              (copy
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "newRel"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "greatify_rel"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "rel5"
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   (1
                                                                                    2))
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "j")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "j")
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "even_or_odd")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "NP"
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "SS"
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (lift-if)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "*")
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "newRel"
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "greatify_rel"
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "rel5"
                                                                                                                               +)
                                                                                                                              (("1"
                                                                                                                                (ground)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "newRel"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "greatify_rel"
                                                                                                                                     +)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "newRel"
                                                                                                                                   +)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "greatify_rel"
                                                                                                                                     +)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             +)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "rel5"
                                                                                                                               +)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "newRel"
                                                                                                                           +)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "greatify_rel"
                                                                                                                             +)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "rel5"
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "rel5"
                                                                                                                               +)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp
                                                                                   -1)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "sturm_tarski_faster(k,
                                                                             poly_deriv(Qprod),
                                                                             Qdeg - 1,
                                                                             newp,
                                                                             n,
                                                                             newRel)")
                                                                                    (("3"
                                                                                      (hide
                                                                                       (-2
                                                                                        -3))
                                                                                      (("3"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "NSol_all"
                                                                                           -9)
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "empty_card[real]")
                                                                                            (("3"
                                                                                              (inst?)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "empty?"
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "x!1")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "Sol_all"
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "EXISTS (nzr: nzreal): nzr*prod_polynomials(NP,
                                                                                                   n,
                                                                                                   (LAMBDA (i: nat): 1),
                                                                                                   k) = Qprod")
                                                                                                              (("1"
                                                                                                                (skeep
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "Qdeg-1 = sigma(0, k, n) - 1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "poly_deriv_scal")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "scal_polynomial2")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "Qprodlist")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "n = n*(LAMBDA (i): 1)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (decompose-equality
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "*"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "*"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "Qprodlist")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -14)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3
                                                                                                                     1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "FORALL (dd:nat): dd<=k IMPLIES EXISTS (nzr: nzreal):
                                                                  nzr * prod_polynomials(NP, n, (LAMBDA (i: nat): 1), dd) =
                                                                   prod_polynomials(newp, n, LAMBDA i: 1, dd)")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "k")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (induct
                                                                                                                           "dd")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "SS(0)")
                                                                                                                              (("1"
                                                                                                                                (decompose-equality
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "*"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "prod_polynomials"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "NP"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "*"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "SS"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (lift-if)
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (replace
                                                                                                                                 -8
                                                                                                                                 :dir
                                                                                                                                 rl
                                                                                                                                 :hide?
                                                                                                                                 t)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (lift-if
                                                                                                                                     -)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skolem
                                                                                                                             1
                                                                                                                             "d")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (skeep
                                                                                                                                     -)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       +
                                                                                                                                       "SS(1+d)*nzr")
                                                                                                                                      (("1"
                                                                                                                                        (decompose-equality
                                                                                                                                         +)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "prod_polynomials"
                                                                                                                                           +)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "*"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               +
                                                                                                                                               :dir
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "polynomial_prod"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "sigma_scal"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "sigma_scal_right"
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "sigma_eq")
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "NP"
                                                                                                                                                             +
                                                                                                                                                             2)
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "SS"
                                                                                                                                                                   1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "*"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         2)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "FORALL (gg:nat): rational_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x))) AND
                                                                             integer_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x)))")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "d")
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (induct
                                                                                                                                                                 "gg")
                                                                                                                                                                (("1"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (hide
                                                                                                                                                         2)
                                                                                                                                                        (("3"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("3"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (case
                                                                                                                                                           "FORALL (gg:nat): rational_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x))) AND
                                                                         integer_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x)))")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "d")
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (induct
                                                                                                                                                               "gg")
                                                                                                                                                              (("1"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("3"
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("3"
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (("3"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "FORALL (gg:nat): rational_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x))) AND
                                                                          integer_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x)))")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "d")
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide
                                                                                                                                                         2)
                                                                                                                                                        (("2"
                                                                                                                                                          (induct
                                                                                                                                                           "gg")
                                                                                                                                                          (("1"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("3"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("3"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "/=")
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -11
                                                                                                                                           :hide?
                                                                                                                                           t
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (lift-if
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (split
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     5
                                                                                                                     "i")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "NP"
                                                                                                                         -4)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "scal_polynomial2")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "SS"
                                                                                                                             -4)
                                                                                                                            (("2"
                                                                                                                              (lift-if)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (inst
                                                                                   +
                                                                                   "x")
                                                                                  (("4"
                                                                                    (skeep)
                                                                                    (("4"
                                                                                      (expand
                                                                                       "NP"
                                                                                       1)
                                                                                      (("4"
                                                                                        (rewrite
                                                                                         "scal_polynomial2")
                                                                                        (("4"
                                                                                          (expand
                                                                                           "SS"
                                                                                           1)
                                                                                          (("4"
                                                                                            (lift-if)
                                                                                            (("4"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "newRel(i)/=3")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         5
                                                                                                         "i")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "i")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "newp"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "newRel"
                                                                                                                 5)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "greatify_poly_rel"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "greatify_poly")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "greatify_rel"
                                                                                                                       +)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "i")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "rel5"
                                                                                                                           -6)
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "newRel"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "greatify_rel"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "scal_polynomial2")
                                                                                                                                    (("1"
                                                                                                                                      (ground)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "newp"
                                                                                                             (-2
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "greatify_poly_rel"
                                                                                                               (-2
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "greatify_poly")
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "scal_polynomial2")
                                                                                                                    (("2"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             ("ndef"
                                                                              1))
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "i")
                                                                                (("2"
                                                                                  (expand
                                                                                   "NP")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "SS")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "newp")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "newRel")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "greatify_rel")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "greatify_poly_rel")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "greatify_poly")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "*")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lift-if)
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "NP")
                                                                            (("2"
                                                                              (expand
                                                                               "newp")
                                                                              (("2"
                                                                                (expand
                                                                                 "greatify_poly_rel")
                                                                                (("2"
                                                                                  (expand
                                                                                   "greatify_poly")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (typepred
                                                             "sturm_tarski_faster(k, Qprod, Qdeg, newp, n, newRel)")
                                                            (("1"
                                                              (hide (-2 -3))
                                                              (("1"
                                                                (replaces -1)
                                                                (("1"
                                                                  (expand
                                                                   "NSol_all"
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "empty_card[real]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "empty?"
                                                                           1)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "x")
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (expand
                                                                                   "Sol_all"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "newRel"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "newp"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "greatify_poly_rel"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "greatify_poly")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "greatify_rel"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "rel5")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "scal_polynomial2")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -)
                                                            (("1"
                                                              (lemma
                                                               "strict_poly_system_solvable")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "k"
                                                                 "n"
                                                                 "newp")
                                                                (("1"
                                                                  (split -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newp"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "greatify_poly_rel"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_poly")
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "scal_polynomial2")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "rel5")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "j")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "newRel"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "greatify_rel")
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (lemma
                                                                             "poly_sign_near_infinity")
                                                                            (("2"
                                                                              (case
                                                                               "FORALL (d): d<=k IMPLIES EXISTS (M:posnat): FORALL (j,x): j<=d AND x>=M IMPLIES (sign_ext(polynomial(newp(j),n(j))(x)) = sign_ext(newp(j)(n(j))) AND newp(j)(n(j))/=0)")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "k")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skeep
                                                                                     -)
                                                                                    (("1"
                                                                                      (hide
                                                                                       (2
                                                                                        3))
                                                                                      (("1"
                                                                                        (inst
                                                                                         2
                                                                                         "M")
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "M")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "newp"
                                                                                                         (-1
                                                                                                          -2))
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "j")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "newRel"
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "newRel"
                                                                                                               (-1
                                                                                                                -2))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "greatify_poly_rel"
                                                                                                                 (-1
                                                                                                                  -2
                                                                                                                  +))
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "greatify_poly")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "greatify_rel"
                                                                                                                     (-1
                                                                                                                      -2
                                                                                                                      +))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sign_ext")
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "rel5"
                                                                                                                                             (-1
                                                                                                                                              -2
                                                                                                                                              +))
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "scal_polynomial2")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "*")
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "p(j)(n(j))/=0")
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (ground)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         "ndef"
                                                                                                                                                         "j")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 (2
                                                                                  3
                                                                                  4
                                                                                  5))
                                                                                (("2"
                                                                                  (induct
                                                                                   "d")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "newp(0)"
                                                                                       "n(0)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "M")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (copy
                                                                                                       "ndef")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (label
                                                                                                           "fin"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "newp"
                                                                                                               "fin")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "greatify_poly_rel")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "greatify_poly")
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "*")
                                                                                                                      (("1"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             "ndef"
                                                                                             "0")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "newp"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "greatify_poly_rel"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "greatify_poly")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skolem
                                                                                     1
                                                                                     "d")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -3
                                                                                             "newp(1+d)"
                                                                                             "n(1+d)")
                                                                                            (("2"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "max(M!1,M)")
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "newp(j)(n(j))=0")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "newp"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "greatify_poly_rel"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "greatify_poly")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "*")
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   "ndef"
                                                                                                                   "j")
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case
                                                                                                         "j = 1+d")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "j"
                                                                                                             "x")
                                                                                                            (("2"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     "ndef"
                                                                                                     "1+d")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "newp")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "greatify_poly_rel")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "greatify_poly")
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "*")
                                                                                                                (("2"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       "ndef"
                                                                       "i")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "newp"
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "greatify_poly_rel")
                                                                            (("2"
                                                                              (expand
                                                                               "greatify_poly")
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 -2)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "poly_sign_near_negative_infinity")
                                                              (("2"
                                                                (case
                                                                 "FORALL (d): d<=k IMPLIES EXISTS (M:posnat): FORALL (j,x): j<=d AND x<=-M IMPLIES (sign_ext(polynomial(newp(j),n(j))(x)) = sign_ext(IF even?(n(j)) THEN newp(j)(n(j)) ELSE -newp(j)(n(j)) ENDIF) AND newp(j)(n(j))/=0)")
                                                                (("1"
                                                                  (inst - "k")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "-M")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "j"
                                                                               "-M")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "j")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "even_or_odd")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "newp"
                                                                                               (-1
                                                                                                1))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "greatify_poly_rel"
                                                                                                 (-1
                                                                                                  1))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "greatify_poly")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "sign_ext")
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "scal_polynomial2")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "rel5")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "*")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "newRel"
                                                                                                                                 (-2
                                                                                                                                  -3))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "newp"
                                                                                                                                   (-2
                                                                                                                                    -3))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "greatify_rel"
                                                                                                                                     (-2
                                                                                                                                      -3))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "greatify_poly_rel"
                                                                                                                                       (-2
                                                                                                                                        -3))
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "greatify_poly")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "*")
                                                                                                                                          (("1"
                                                                                                                                            (ground)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (induct "d")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "newp(0)"
                                                                       "n(0)")
                                                                      (("1"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "M")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "x")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "j = 0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "newp"
                                                                                             1)
                                                                                            (("1"
                                                                                              (label
                                                                                               "igz"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "greatify_poly_rel"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "greatify_poly")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         "ndef"
                                                                                                         "0")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "newp"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "greatify_poly_rel"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "greatify_poly")
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 -1)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (inst
                                                                                     "ndef"
                                                                                     "0")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skolem
                                                                     1
                                                                     "d")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             -3
                                                                             "newp(1+d)"
                                                                             "n(1+d)")
                                                                            (("2"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "max(M!1,M)")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (case
                                                                                       "j = 1+d")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "x")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "newp"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (label
                                                                                                     "igz"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "greatify_poly_rel"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "greatify_poly")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               "ndef"
                                                                                                               "1+d")
                                                                                                              (("1"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "j"
                                                                                           "x")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (label
                                                                                 "igz"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "newp"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "greatify_poly_rel"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "greatify_poly")
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*")
                                                                                          (("2"
                                                                                            (inst
                                                                                             "ndef"
                                                                                             "1+d")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "sturm_tarski_faster(k,
                                                                 poly_deriv(Qprod),
                                                                 Qdeg - 1,
                                                                 newp,
                                                                 n,
                                                                 newRel)")
                                                              (("1"
                                                                (hide (-2 -3))
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "NSol_all"
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "empty_card[real]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "empty?")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (expand
                                                                                   "Sol_all"
                                                                                   -)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "x")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "newRel"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "newp"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "greatify_rel"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "greatify_poly_rel"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "greatify_poly")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "scal_polynomial2")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "rel5")
                                                                                                              (("1"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (compute_solvable_single_def formula-decl nil poly_system_strategy nil)
    (greatify_poly_rel const-decl "[nat -> int]" poly_system_strategy nil)
    (greatify_rel const-decl "{pz: subrange(0, 5) | pz /= 2 AND pz /= 5}"
     poly_system_strategy nil)
    (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
     poly_families nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (^ const-decl "real" exponentiation nil)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (poly_sign_near_negative_infinity formula-decl nil more_polynomial_props
     reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (even? const-decl "bool" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign reals)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (j skolem-const-decl "nat" poly_system_strategy nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (poly_sign_near_infinity formula-decl nil more_polynomial_props reals)
    (i skolem-const-decl "nat" poly_system_strategy nil)
    (product_eq_zero formula-decl nil product reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (Qdeg skolem-const-decl "int" poly_system_strategy nil)
    (i!1 skolem-const-decl "nat" poly_system_strategy nil)
    (NP skolem-const-decl "[nat -> [nat -> real]]" poly_system_strategy nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (n skolem-const-decl "[nat -> nat]" poly_system_strategy nil)
    (poly_deriv_scal formula-decl nil polynomials reals)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d skolem-const-decl "nat" poly_system_strategy nil)
    (nzr skolem-const-decl "nzreal" poly_system_strategy nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma_scal formula-decl nil sigma reals)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs
     nil)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_scal_right formula-decl nil sigma reals)
    (polynomial_prod const-decl "real" polynomials reals)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (poly_deriv const-decl "real" polynomials reals)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (SS skolem-const-decl "[nat -> int]" poly_system_strategy nil)
    (i skolem-const-decl "nat" poly_system_strategy nil)
    (sigma_nat application-judgement "nat" sigma_nat reals)
    (strict_poly_system_solvable formula-decl nil poly_systems nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_ge_0 formula-decl nil sigma reals)
    (minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (first_eq def-decl "{i |
   (i > k IMPLIES FORALL (j: upto(k)): RelF6(j) > 0) AND
    (i <= k IMPLIES
      RelF6(i) = 0 AND FORALL (j: nat): j < i IMPLIES RelF6(j) > 0)}"
     poly_system_strategy nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NSol_all const-decl "nat" poly_families nil)
    (sturm_tarski_faster const-decl "{r: real |
   r = NSol_all(k, a, m, p, n, RelF6) AND
    rational_pred(r) AND integer_pred(r)}" system_solvers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (empty_card formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (k skolem-const-decl "nat" poly_system_strategy nil)
    (j skolem-const-decl "upto(k)" poly_system_strategy nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (greatify_poly const-decl "[nat -> int]" poly_system_strategy nil)
    (newp skolem-const-decl "[nat -> [nat -> int]]" poly_system_strategy nil)
    (newRel skolem-const-decl
     "[nat -> {pz: subrange(0, 5) | pz /= 2 AND pz /= 5}]"
     poly_system_strategy nil)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Sol_all const-decl "finite_set[real]" poly_families nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (compute_solvable const-decl "bool" poly_system_strategy nil)
    (preprocessingConjTheorem formula-decl nil preprocessing_univariate nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (preprocessingStepConj const-decl "bool" preprocessing_univariate nil))
   nil)
  (compute_solvable_def-5 nil 3768577871
   ("" (skeep)
    (("" (label "ndef" -1)
      (("" (case "preprocessingStepConj(k,p,n,RelF6)")
        (("1" (split)
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (flatten)
            (("2" (lemma preprocessingConjTheorem)
              (("2" (inst -1 "RelF6" "n" "p" "k")
                (("2" (split)
                  (("1" (skeep)
                    (("1" (inst 1 "x")
                      (("1" (skeep)
                        (("1" (inst -1 "j")
                          (("1" (assert)
                            (("1" (hide -2 -3 -4) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (compute_solvable_def-4 nil 3768577389
   ("" (skeep)
    (("" (label "ndef" -1)
      (("" (case "preprocessingStepConj(k,p,n,RelF6)")
        (("" (case "k = 0")
          (("1" (replace -1)
            (("1" (expand "compute_solvable")
              (("1" (lemma "compute_solvable_single_def")
                (("1" (inst - "p(0)" "n(0)")
                  (("1" (assert)
                    (("1" (split -)
                      (("1" (inst - "RelF6(0)")
                        (("1" (replaces -1 :dir rl)
                          (("1" (ground)
                            (("1" (skosimp*)
                              (("1" (inst + "x!1") (("1" (inst - "0") nil)))))
                             ("2" (postpone) nil) ("3" (postpone) nil)))))))
                       ("2" (inst - "0") (("2" (assert) nil)))))))))))))))
           ("2" (expand "compute_solvable" :assert? none)
            (("2" (name "newp" "greatify_poly_rel(p, RelF6)")
              (("2" (replace -1)
                (("2" (name "newRel" "greatify_rel(RelF6)")
                  (("2" (replace -1)
                    (("2" (replace 1)
                      (("2" (case "(EXISTS (i:upto(k)): newRel(i)=0)")
                        (("1" (name "fe" "first_eq(newRel, k)")
                          (("1" (assert)
                            (("1" (replace -2)
                              (("1" (replace -1)
                                (("1" (case "NOT fe<=k")
                                  (("1" (typepred "fe")
                                    (("1" (assert)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst - "i!1")
                                          (("1" (assert) nil)))))))))
                                   ("2" (assert)
                                    (("2" (typepred "fe")
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (typepred
                                               "sturm_tarski_faster(k - 1,
                                                                                                           newp(fe),
                                                                                                           n(fe),
                                                                                                           LAMBDA
                                                                                                           (i):
                                                                                                           IF i < fe
                                                                                                           THEN newp(i)
                                                                                                           ELSE newp(1 + i)
                                                                                                           ENDIF,
                                                                                                           LAMBDA
                                                                                                           (i):
                                                                                                           IF i < fe
                                                                                                           THEN n(i)
                                                                                                           ELSE n(1 + i)
                                                                                                           ENDIF,
                                                                                                           LAMBDA
                                                                                                           (i):
                                                                                                           IF i < fe
                                                                                                           THEN newRel(i)
                                                                                                           ELSE newRel(1 + i)
                                                                                                           ENDIF)")
                                              (("1"
                                                (hide (-2 -3))
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "NSol_all" +)
                                                    (("1"
                                                      (lemma
                                                       "empty_card[real]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand "empty?")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "x!1")
                                                                    (("1"
                                                                      (expand
                                                                       "Sol_all")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "fe")
                                                                        (("1"
                                                                          (expand
                                                                           "newRel"
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             -2)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "rel5"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newp"
                                                                                       +)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_poly_rel"
                                                                                         +)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_poly")
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil)))))))))))
                                                                                 ("2"
                                                                                  (postpone)
                                                                                  nil)))))))))))))
                                                                     ("2"
                                                                      (postpone)
                                                                      nil)))))
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (case
                                                                     "NOT RelF6(fe) = 0")
                                                                    (("1"
                                                                      (expand
                                                                       "newRel"
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "greatify_rel"
                                                                         -2)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (ground)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (postpone)
                                                                      nil)))))
                                                                 ("3"
                                                                  (postpone)
                                                                  nil)))))))))
                                                         ("2"
                                                          (postpone)
                                                          nil)))))))))))
                                               ("2" (postpone) nil)
                                               ("3"
                                                (postpone)
                                                nil)))))))))))))))))))))))
                         ("2" (postpone) nil))))))))))))))))))))))
    nil)
   nil nil)
  (compute_solvable_def-3 nil 3768577094
   ("" (skeep)
    (("" (label "ndef" -1)
      (("" (case "k = 0")
        (("1" (replace -1)
          (("1" (expand "compute_solvable")
            (("1" (lemma "compute_solvable_single_def")
              (("1" (inst - "p(0)" "n(0)")
                (("1" (assert)
                  (("1" (split -)
                    (("1" (inst - "RelF6(0)")
                      (("1" (replaces -1 :dir rl)
                        (("1" (ground)
                          (("1" (skosimp*)
                            (("1" (inst + "x!1") (("1" (inst - "0") nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst - "0") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "compute_solvable" :assert? none)
          (("2" (name "newp" "greatify_poly_rel(p, RelF6)")
            (("2" (replace -1)
              (("2" (name "newRel" "greatify_rel(RelF6)")
                (("2" (replace -1)
                  (("2" (replace 1)
                    (("2" (case "(EXISTS (i:upto(k)): newRel(i)=0)")
                      (("1" (name "fe" "first_eq(newRel, k)")
                        (("1" (assert)
                          (("1" (replace -2)
                            (("1" (replace -1)
                              (("1" (case "NOT fe<=k")
                                (("1" (typepred "fe")
                                  (("1" (assert)
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst - "i!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (typepred "fe")
                                    (("2" (hide -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (typepred
                                             "sturm_tarski_faster(k - 1,
                                                                                                   newp(fe),
                                                                                                   n(fe),
                                                                                                   LAMBDA
                                                                                                   (i):
                                                                                                   IF i < fe
                                                                                                   THEN newp(i)
                                                                                                   ELSE newp(1 + i)
                                                                                                   ENDIF,
                                                                                                   LAMBDA
                                                                                                   (i):
                                                                                                   IF i < fe
                                                                                                   THEN n(i)
                                                                                                   ELSE n(1 + i)
                                                                                                   ENDIF,
                                                                                                   LAMBDA
                                                                                                   (i):
                                                                                                   IF i < fe
                                                                                                   THEN newRel(i)
                                                                                                   ELSE newRel(1 + i)
                                                                                                   ENDIF)")
                                            (("1"
                                              (hide (-2 -3))
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand "NSol_all" +)
                                                  (("1"
                                                    (lemma "empty_card[real]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replaces -1 :dir rl)
                                                        (("1"
                                                          (expand "empty?")
                                                          (("1"
                                                            (expand "member")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "x!1")
                                                                  (("1"
                                                                    (expand
                                                                     "Sol_all")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "fe")
                                                                      (("1"
                                                                        (expand
                                                                         "newRel"
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "greatify_rel"
                                                                           -2)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "rel5"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newp"
                                                                                     +)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "greatify_poly_rel"
                                                                                       +)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_poly")
                                                                                        (("1"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (case
                                                                   "NOT RelF6(fe) = 0")
                                                                  (("1"
                                                                    (expand
                                                                     "newRel"
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "greatify_rel"
                                                                       -2)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (compute_solvable_def-2 nil 3621611318
   ("" (skeep)
    (("" (label "ndef" -1)
      (("" (case "k = 0")
        (("1" (replace -1)
          (("1" (expand "compute_solvable")
            (("1" (lemma "compute_solvable_single_def")
              (("1" (inst - "p(0)" "n(0)")
                (("1" (assert)
                  (("1" (split -)
                    (("1" (inst - "RelF6(0)")
                      (("1" (replaces -1 :dir rl)
                        (("1" (ground)
                          (("1" (skosimp*)
                            (("1" (inst + "x!1") (("1" (inst - "0") nil nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (inst + "x!1")
                              (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst - "0") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "compute_solvable" :assert? none)
          (("2" (name "newp" "greatify_poly_rel(p, RelF6)")
            (("2" (replace -1)
              (("2" (name "newRel" "greatify_rel(RelF6)")
                (("2" (replace -1)
                  (("2" (replace 1)
                    (("2" (case "(EXISTS (i:upto(k)): newRel(i)=0)")
                      (("1" (name "fe" "first_eq(newRel, k)")
                        (("1" (assert)
                          (("1" (replace -2)
                            (("1" (replace -1)
                              (("1" (case "NOT fe<=k")
                                (("1" (typepred "fe")
                                  (("1" (assert)
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst - "i!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (typepred "fe")
                                    (("2" (hide -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (typepred
                                             "sturm_tarski_faster(k - 1,
                                                                                           newp(fe),
                                                                                           n(fe),
                                                                                           LAMBDA
                                                                                           (i):
                                                                                           IF i < fe
                                                                                           THEN newp(i)
                                                                                           ELSE newp(1 + i)
                                                                                           ENDIF,
                                                                                           LAMBDA
                                                                                           (i):
                                                                                           IF i < fe
                                                                                           THEN n(i)
                                                                                           ELSE n(1 + i)
                                                                                           ENDIF,
                                                                                           LAMBDA
                                                                                           (i):
                                                                                           IF i < fe
                                                                                           THEN newRel(i)
                                                                                           ELSE newRel(1 + i)
                                                                                           ENDIF)")
                                            (("1"
                                              (hide (-2 -3))
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand "NSol_all" +)
                                                  (("1"
                                                    (lemma "empty_card[real]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replaces -1 :dir rl)
                                                        (("1"
                                                          (expand "empty?")
                                                          (("1"
                                                            (expand "member")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "x!1")
                                                                  (("1"
                                                                    (expand
                                                                     "Sol_all")
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "fe")
                                                                        (("1"
                                                                          (expand
                                                                           "newRel"
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "greatify_rel"
                                                                             -2)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "rel5"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newp"
                                                                                       +)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_poly_rel"
                                                                                         +)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_poly")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (case
                                                                           "i!2 < fe")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "i!2")
                                                                              (("1"
                                                                                (expand
                                                                                 "rel5"
                                                                                 -3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "newRel"
                                                                                   +)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "greatify_rel"
                                                                                     +)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newp"
                                                                                       +)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_poly_rel"
                                                                                         +)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_poly")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "scal_polynomial2")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "scal_polynomial2")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "1+i!2")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "rel5"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "newRel"
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "newp"
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "greatify_rel"
                                                                                         +)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "greatify_poly_rel"
                                                                                           +)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "greatify_poly")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "scal_polynomial2")
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "x!1")
                                                                  (("2"
                                                                    (case
                                                                     "NOT RelF6(fe) = 0")
                                                                    (("1"
                                                                      (expand
                                                                       "newRel"
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "greatify_rel"
                                                                         -2)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (case
                                                                         "j = fe")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "rel5"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "Sol_all"
                                                                                 -3)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newp"
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "greatify_poly_rel"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_poly")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "j < fe")
                                                                          (("1"
                                                                            (expand
                                                                             "Sol_all")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newp"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newRel"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_poly_rel"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_poly")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "greatify_rel"
                                                                                             -4)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "rel5"
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "Sol_all")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "j-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newp"
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newRel"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_rel"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "greatify_poly_rel"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "greatify_poly")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "rel5"
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "scal_polynomial2")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst-cp - "i!1")
                                                  (("2"
                                                    (inst - "1+i!1")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (expand "newp" -1)
                                                        (("2"
                                                          (expand
                                                           "greatify_poly_rel"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "greatify_poly")
                                                            (("2"
                                                              (expand "*" -1)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst-cp
                                                                       -
                                                                       "i!1")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "1+i!1")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (name "Qprodlist"
                              "prod_polynomials_list(newp, n, LAMBDA i: 1, k)")
                        (("2" (name "Qdeg" "length(Qprodlist) - 1")
                          (("2"
                            (name "Qprod" "LAMBDA (i):
                                                                                         IF i < length(Qprodlist) THEN nth(Qprodlist, i)
                                                                                         ELSE 0
                                                                                         ENDIF")
                            (("2" (assert)
                              (("2" (replace -3)
                                (("2" (replace -2)
                                  (("2" (replace -1)
                                    (("2"
                                      (case
                                       "NOT length(Qprodlist) - 2 = Qdeg -1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (replace 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case "NOT Qdeg>=2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "Qprodlist")
                                                          (("1"
                                                            (replace -2)
                                                            (("1"
                                                              (replace
                                                               -7
                                                               1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "sigma")
                                                                (("1"
                                                                  (expand
                                                                   "sigma")
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "*"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (copy
                                                                           "ndef")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -
                                                                             "k")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "k-1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "sigma_ge_0")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (case
                                                             "EXISTS (pz:upto(k)): polynomial(p(pz),n(pz))(x) = 0")
                                                            (("1"
                                                              (skeep -)
                                                              (("1"
                                                                (case
                                                                 "NOT newRel(pz)=4")
                                                                (("1"
                                                                  (expand
                                                                   "newRel"
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "pz")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "pz")
                                                                      (("1"
                                                                        (expand
                                                                         "rel5"
                                                                         -3)
                                                                        (("1"
                                                                          (expand
                                                                           "greatify_rel"
                                                                           1)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "newRel"
                                                                                 6)
                                                                                (("1"
                                                                                  (expand
                                                                                   "greatify_rel"
                                                                                   6)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "sturm_tarski_faster(k, Qprod, Qdeg, newp, n, newRel)")
                                                                  (("2"
                                                                    (hide
                                                                     (-2 -3))
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "NSol_all"
                                                                         -)
                                                                        (("2"
                                                                          (lemma
                                                                           "empty_card[real]")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "x")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "Sol_all"
                                                                                       +)
                                                                                      (("2"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "Qprodlist")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -11)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "prod_polynomials(newp, n, LAMBDA i: 1, k)")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -5
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "Qdeg")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "product_eq_zero[nat]")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "pz")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "^"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "expt")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "expt")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "newp"
                                                                                                                           +)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "greatify_poly_rel"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "greatify_poly")
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "scal_polynomial2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (hide
                                                                                               (2
                                                                                                3))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "rel5")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "newp"
                                                                                                   +)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "newRel"
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "greatify_poly_rel"
                                                                                                       +)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "greatify_poly")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "greatify_rel"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (ground)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "scal_polynomial2")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "scal_polynomial2")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (name
                                                               "SS"
                                                               "LAMBDA (i:nat): IF newRel(i)/=3 OR (newRel(i)=3 AND polynomial(newp(i),n(i))(x)>=0) THEN 1 ELSE (-1) ENDIF")
                                                              (("2"
                                                                (name
                                                                 "NP"
                                                                 "LAMBDA (i:nat): SS(i)*newp(i)")
                                                                (("2"
                                                                  (lemma
                                                                   "strict_poly_system_solvable")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "k"
                                                                     "n"
                                                                     "NP")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 (1
                                                                                  3))
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "j")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "NP"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "SS"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "newRel"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "greatify_rel"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "rel5"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "j")
                                                                                                          (("1"
                                                                                                            (copy
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "newRel"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "greatify_rel"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "rel5"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 (1
                                                                                  2))
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "j")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "j")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "even_or_odd")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "NP"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "SS"
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*")
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "newRel"
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "greatify_rel"
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "rel5"
                                                                                                                             +)
                                                                                                                            (("1"
                                                                                                                              (ground)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "newRel"
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "greatify_rel"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (expand
                                                                                                                                 "newRel"
                                                                                                                                 +)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "greatify_rel"
                                                                                                                                   +)
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           +)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "rel5"
                                                                                                                             +)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "newRel"
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "greatify_rel"
                                                                                                                           +)
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "rel5"
                                                                                                                               +)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "rel5"
                                                                                                                             +)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp
                                                                                 -1)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "sturm_tarski_faster(k,
                                                         poly_deriv(Qprod),
                                                         Qdeg - 1,
                                                         newp,
                                                         n,
                                                         newRel)")
                                                                                  (("3"
                                                                                    (hide
                                                                                     (-2
                                                                                      -3))
                                                                                    (("3"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "NSol_all"
                                                                                         -9)
                                                                                        (("3"
                                                                                          (lemma
                                                                                           "empty_card[real]")
                                                                                          (("3"
                                                                                            (inst?)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "empty?"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x!1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "Sol_all"
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "EXISTS (nzr: nzreal): nzr*prod_polynomials(NP,
                                                                        n,
                                                                        (LAMBDA (i: nat): 1),
                                                                        k) = Qprod")
                                                                                                            (("1"
                                                                                                              (skeep
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "Qdeg-1 = sigma(0, k, n) - 1")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "poly_deriv_scal")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "Qprodlist")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "n = n*(LAMBDA (i): 1)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (decompose-equality
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "*"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "*"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "Qprodlist")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -14)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -3
                                                                                                                   1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "FORALL (dd:nat): dd<=k IMPLIES EXISTS (nzr: nzreal):
                                     nzr * prod_polynomials(NP, n, (LAMBDA (i: nat): 1), dd) =
                                      prod_polynomials(newp, n, LAMBDA i: 1, dd)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "k")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (induct
                                                                                                                         "dd")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             +
                                                                                                                             "SS(0)")
                                                                                                                            (("1"
                                                                                                                              (decompose-equality
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "*"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "prod_polynomials"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "NP"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "*"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "SS"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if)
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (lift-if)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replace
                                                                                                                               -8
                                                                                                                               :dir
                                                                                                                               rl
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (lift-if
                                                                                                                                   -)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           "d")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (skeep
                                                                                                                                   -)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     +
                                                                                                                                     "SS(1+d)*nzr")
                                                                                                                                    (("1"
                                                                                                                                      (decompose-equality
                                                                                                                                       +)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "prod_polynomials"
                                                                                                                                         +)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "*"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             +
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "polynomial_prod"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "sigma_scal"
                                                                                                                                                 :dir
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "sigma_scal_right"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "sigma_eq")
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "NP"
                                                                                                                                                           +
                                                                                                                                                           2)
                                                                                                                                                          (("1"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "SS"
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "*"
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (case
                                                                                                                                                           "FORALL (gg:nat): rational_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x))) AND
                                         integer_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x)))")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "d")
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (induct
                                                                                                                                                               "gg")
                                                                                                                                                              (("1"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("3"
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("3"
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (("3"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "FORALL (gg:nat): rational_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x))) AND
                                       integer_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x)))")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "d")
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (induct
                                                                                                                                                             "gg")
                                                                                                                                                            (("1"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("3"
                                                                                                                                                      (skosimp*)
                                                                                                                                                      (("3"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (case
                                                                                                                                                     "FORALL (gg:nat): rational_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x))) AND
                                          integer_pred(sigma[nat](0, gg, LAMBDA (x: nat): n(x)))")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       "d")
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (induct
                                                                                                                                                         "gg")
                                                                                                                                                        (("1"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (hide
                                                                                                                                                   2)
                                                                                                                                                  (("3"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("3"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "/=")
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -11
                                                                                                                                         :hide?
                                                                                                                                         t
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (lift-if
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "i")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   5
                                                                                                                   "i")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "NP"
                                                                                                                       -4)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "SS"
                                                                                                                           -4)
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               -)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (inst
                                                                                 +
                                                                                 "x")
                                                                                (("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "NP"
                                                                                     1)
                                                                                    (("4"
                                                                                      (rewrite
                                                                                       "scal_polynomial2")
                                                                                      (("4"
                                                                                        (expand
                                                                                         "SS"
                                                                                         1)
                                                                                        (("4"
                                                                                          (lift-if)
                                                                                          (("4"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "newRel(i)/=3")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       5
                                                                                                       "i")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "i")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "newp"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "newRel"
                                                                                                               5)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "greatify_poly_rel"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "greatify_poly")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "greatify_rel"
                                                                                                                     +)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "i")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "rel5"
                                                                                                                         -6)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "newRel"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "greatify_rel"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "scal_polynomial2")
                                                                                                                                  (("1"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "i")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "newp"
                                                                                                           (-2
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "greatify_poly_rel"
                                                                                                             (-2
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "greatify_poly")
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "scal_polynomial2")
                                                                                                                  (("2"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           ("ndef"
                                                                            1))
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "i")
                                                                              (("2"
                                                                                (expand
                                                                                 "NP")
                                                                                (("2"
                                                                                  (expand
                                                                                   "SS")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "newp")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "newRel")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "greatify_rel")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "greatify_poly_rel")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "greatify_poly")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "*")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (expand
                                                                           "NP")
                                                                          (("2"
                                                                            (expand
                                                                             "newp")
                                                                            (("2"
                                                                              (expand
                                                                               "greatify_poly_rel")
                                                                              (("2"
                                                                                (expand
                                                                                 "greatify_poly")
                                                                                (("2"
                                                                                  (expand
                                                                                   "*")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (typepred
                                                           "sturm_tarski_faster(k, Qprod, Qdeg, newp, n, newRel)")
                                                          (("1"
                                                            (hide (-2 -3))
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (expand
                                                                 "NSol_all"
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "empty_card[real]")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "empty?"
                                                                         1)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (expand
                                                                                 "Sol_all"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "j")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "newRel"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "newp"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "greatify_poly_rel"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "greatify_poly")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "greatify_rel"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "rel5")
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (lemma
                                                             "strict_poly_system_solvable")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "k"
                                                               "n"
                                                               "newp")
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide -1)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "x")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "newp"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "greatify_poly_rel"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "greatify_poly")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "scal_polynomial2")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "rel5")
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "j")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "newRel"
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "greatify_rel")
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lemma
                                                                           "poly_sign_near_infinity")
                                                                          (("2"
                                                                            (case
                                                                             "FORALL (d): d<=k IMPLIES EXISTS (M:posnat): FORALL (j,x): j<=d AND x>=M IMPLIES (sign_ext(polynomial(newp(j),n(j))(x)) = sign_ext(newp(j)(n(j))) AND newp(j)(n(j))/=0)")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "k")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skeep
                                                                                   -)
                                                                                  (("1"
                                                                                    (hide
                                                                                     (2
                                                                                      3))
                                                                                    (("1"
                                                                                      (inst
                                                                                       2
                                                                                       "M")
                                                                                      (("1"
                                                                                        (hide
                                                                                         1)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "j"
                                                                                             "M")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "newp"
                                                                                                       (-1
                                                                                                        -2))
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "newRel"
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "newRel"
                                                                                                             (-1
                                                                                                              -2))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "greatify_poly_rel"
                                                                                                               (-1
                                                                                                                -2
                                                                                                                +))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "greatify_poly")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "greatify_rel"
                                                                                                                   (-1
                                                                                                                    -2
                                                                                                                    +))
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sign_ext")
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "*"
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (lift-if)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "rel5"
                                                                                                                                           (-1
                                                                                                                                            -2
                                                                                                                                            +))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "scal_polynomial2")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "*")
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "p(j)(n(j))/=0")
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (ground)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       "ndef"
                                                                                                                                                       "j")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               (2
                                                                                3
                                                                                4
                                                                                5))
                                                                              (("2"
                                                                                (induct
                                                                                 "d")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "newp(0)"
                                                                                     "n(0)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "M")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (copy
                                                                                                     "ndef")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (label
                                                                                                         "fin"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "newp"
                                                                                                             "fin")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "greatify_poly_rel")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "greatify_poly")
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "*")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           "ndef"
                                                                                           "0")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "newp"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "greatify_poly_rel"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "greatify_poly")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skolem
                                                                                   1
                                                                                   "d")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -3
                                                                                           "newp(1+d)"
                                                                                           "n(1+d)")
                                                                                          (("2"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "max(M!1,M)")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "newp(j)(n(j))=0")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "newp"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "greatify_poly_rel"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "greatify_poly")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "*")
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 "ndef"
                                                                                                                 "j")
                                                                                                                (("1"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "j = 1+d")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "j"
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   "ndef"
                                                                                                   "1+d")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "newp")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "greatify_poly_rel")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "greatify_poly")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "*")
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     "ndef"
                                                                     "i")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "newp"
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           "greatify_poly_rel")
                                                                          (("2"
                                                                            (expand
                                                                             "greatify_poly")
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               -2)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "poly_sign_near_negative_infinity")
                                                            (("2"
                                                              (case
                                                               "FORALL (d): d<=k IMPLIES EXISTS (M:posnat): FORALL (j,x): j<=d AND x<=-M IMPLIES (sign_ext(polynomial(newp(j),n(j))(x)) = sign_ext(IF even?(n(j)) THEN newp(j)(n(j)) ELSE -newp(j)(n(j)) ENDIF) AND newp(j)(n(j))/=0)")
                                                              (("1"
                                                                (inst - "k")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide -2)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "-M")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "j"
                                                                             "-M")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "even_or_odd")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "newp"
                                                                                             (-1
                                                                                              1))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "greatify_poly_rel"
                                                                                               (-1
                                                                                                1))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "greatify_poly")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sign_ext")
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "scal_polynomial2")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "rel5")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "*")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "newRel"
                                                                                                                               (-2
                                                                                                                                -3))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "newp"
                                                                                                                                 (-2
                                                                                                                                  -3))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "greatify_rel"
                                                                                                                                   (-2
                                                                                                                                    -3))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "greatify_poly_rel"
                                                                                                                                     (-2
                                                                                                                                      -3))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "greatify_poly")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "*")
                                                                                                                                        (("1"
                                                                                                                                          (ground)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (induct "d")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "newp(0)"
                                                                     "n(0)")
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "M")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "x")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "j = 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "newp"
                                                                                           1)
                                                                                          (("1"
                                                                                            (label
                                                                                             "igz"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "greatify_poly_rel"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "greatify_poly")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "*")
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       "ndef"
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "newp"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "greatify_poly_rel"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "greatify_poly")
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               -1)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (inst
                                                                                   "ndef"
                                                                                   "0")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skolem
                                                                   1
                                                                   "d")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           -3
                                                                           "newp(1+d)"
                                                                           "n(1+d)")
                                                                          (("2"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "max(M!1,M)")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (case
                                                                                     "j = 1+d")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "newp"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (label
                                                                                                   "igz"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "greatify_poly_rel"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "greatify_poly")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "*")
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             "ndef"
                                                                                                             "1+d")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "j"
                                                                                         "x")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (label
                                                                               "igz"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "newp"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "greatify_poly_rel"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "greatify_poly")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "*")
                                                                                        (("2"
                                                                                          (inst
                                                                                           "ndef"
                                                                                           "1+d")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "sturm_tarski_faster(k,
                                                   poly_deriv(Qprod),
                                                   Qdeg - 1,
                                                   newp,
                                                   n,
                                                   newRel)")
                                                            (("1"
                                                              (hide (-2 -3))
                                                              (("1"
                                                                (replaces -1)
                                                                (("1"
                                                                  (expand
                                                                   "NSol_all"
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "empty_card[real]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (expand
                                                                                 "Sol_all"
                                                                                 -)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "x")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "newRel"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "newp"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "greatify_rel"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "greatify_poly_rel"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "greatify_poly")
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "scal_polynomial2")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "rel5")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le_realorder name-judgement "RealOrder" real_orders reals)
    (prod_polynomials_list def-decl "{ll |
   length(ll) - 1 = sigma(0, k, KF * GP) AND
    prod_polynomials(GF, KF, GP, k) =
     (LAMBDA (i: nat): IF i < length(ll) THEN nth(ll, i) ELSE 0 ENDIF)}"
     poly_families nil)
    (prod_polynomials def-decl "{a |
   (FORALL (x: real):
      polynomial(a, sigma(0, k, KF * GP))(x) =
       product(0, k, LAMBDA (j: nat): polynomial(GF(j), KF(j))(x) ^ GP(j)))
    AND
    ((FORALL (i: nat): i <= k AND GP(i) /= 0 IMPLIES GF(i)(KF(i)) /= 0)
      IMPLIES a(sigma(0, k, KF * GP)) /= 0)
     AND (FORALL (i: nat): i > sigma(0, k, KF * GP) IMPLIES a(i) = 0)}"
     poly_families nil)
    (product def-decl "real" product reals)
    (T_high type-eq-decl nil product reals)
    (T_low type-eq-decl nil product reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (poly_sign_near_negative_infinity formula-decl nil more_polynomial_props
     reals)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign reals)
    (poly_sign_near_infinity formula-decl nil more_polynomial_props reals)
    (product_eq_zero formula-decl nil product reals)
    (poly_deriv_scal formula-decl nil polynomials reals)
    (sigma_scal formula-decl nil sigma reals)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_scal_right formula-decl nil sigma reals)
    (polynomial_prod const-decl "real" polynomials reals)
    (poly_deriv const-decl "real" polynomials reals)
    (strict_poly_system_solvable formula-decl nil poly_systems nil)
    (sigma_ge_0 formula-decl nil sigma reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (sturm_tarski_faster const-decl "{r: real |
   r = NSol_all(k, a, m, p, n, RelF6) AND
    rational_pred(r) AND integer_pred(r)}" system_solvers nil)
    (NSol_all const-decl "nat" poly_families nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (Sol_all const-decl "finite_set[real]" poly_families nil))
   nil)
  (compute_solvable_def-1 nil 3621605469
   ("" (skeep)
    (("" (case "k = 0")
      (("1" (replace -1)
        (("1" (expand "compute_solvable")
          (("1" (lemma "compute_solvable_single_def")
            (("1" (inst - "p(0)" "n(0)")
              (("1" (assert)
                (("1" (split -)
                  (("1" (inst - "RelF6(0)")
                    (("1" (replaces -1 :dir rl)
                      (("1" (ground)
                        (("1" (skosimp*)
                          (("1" (inst + "x!1") (("1" (inst - "0") nil nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (inst + "x!1")
                            (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst - "0") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "compute_solvable" :assert? none)
        (("2" (name "newp" "greatify_poly_rel(p, RelF6)")
          (("2" (replace -1)
            (("2" (name "newRel" "greatify_rel(RelF6)")
              (("2" (replace -1)
                (("2" (replace 1)
                  (("2" (case "(EXISTS (i:upto(k)): newRel(i)=0)")
                    (("1" (name "fe" "first_eq(newRel, k)")
                      (("1" (assert)
                        (("1" (replace -2)
                          (("1" (replace -1)
                            (("1" (case "NOT fe<=k")
                              (("1" (typepred "fe")
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1" (inst - "i!1")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (typepred "fe")
                                  (("2" (hide -1)
                                    (("2" (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (typepred
                                           "sturm_tarski_faster(k - 1,
                                           newp(fe),
                                           n(fe),
                                           LAMBDA
                                           (i):
                                           IF i < fe
                                           THEN newp(i)
                                           ELSE newp(1 + i)
                                           ENDIF,
                                           LAMBDA
                                           (i):
                                           IF i < fe
                                           THEN n(i)
                                           ELSE n(1 + i)
                                           ENDIF,
                                           LAMBDA
                                           (i):
                                           IF i < fe
                                           THEN newRel(i)
                                           ELSE newRel(1 + i)
                                           ENDIF)")
                                          (("1"
                                            (hide (-2 -3))
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "NSol_all" +)
                                                (("1"
                                                  (lemma "empty_card[real]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replaces -1 :dir rl)
                                                      (("1"
                                                        (expand "empty?")
                                                        (("1"
                                                          (expand "member")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "x!1")
                                                                (("1"
                                                                  (expand
                                                                   "Sol_all")
                                                                  (("1"
                                                                    (split 1)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "fe")
                                                                      (("1"
                                                                        (expand
                                                                         "newRel"
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "greatify_rel"
                                                                           -2)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "rel5"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newp"
                                                                                     +)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "greatify_poly_rel"
                                                                                       +)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (case
                                                                         "i!2 < fe")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!2")
                                                                            (("1"
                                                                              (expand
                                                                               "rel5"
                                                                               -3)
                                                                              (("1"
                                                                                (expand
                                                                                 "newRel"
                                                                                 +)
                                                                                (("1"
                                                                                  (expand
                                                                                   "greatify_rel"
                                                                                   +)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newp"
                                                                                     +)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "greatify_poly_rel"
                                                                                       +)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "scal_polynomial2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (rewrite
                                                                                                     "scal_polynomial2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "1+i!2")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "rel5"
                                                                                 -2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "newRel"
                                                                                   +)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "newp"
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "greatify_rel"
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "greatify_poly_rel"
                                                                                         +)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "scal_polynomial2")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst + "x!1")
                                                                (("2"
                                                                  (case
                                                                   "NOT RelF6(fe) = 0")
                                                                  (("1"
                                                                    (expand
                                                                     "newRel"
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "greatify_rel"
                                                                       -2)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (case
                                                                       "j = fe")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "rel5"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "Sol_all"
                                                                               -3)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "newp"
                                                                                   -3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "greatify_poly_rel"
                                                                                     -3)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "j < fe")
                                                                        (("1"
                                                                          (expand
                                                                           "Sol_all")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "newp"
                                                                                   -4)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newRel"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "greatify_poly_rel"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_rel"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "rel5"
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "scal_polynomial2")
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "Sol_all")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "j-1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "newp"
                                                                                   -3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newRel"
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "greatify_rel"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "greatify_poly_rel"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rel5"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "scal_polynomial2")
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst-cp - "i!1")
                                                (("2"
                                                  (inst - "1+i!1")
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (expand "newp" -1)
                                                      (("2"
                                                        (expand
                                                         "greatify_poly_rel"
                                                         -1)
                                                        (("2"
                                                          (expand "*" -1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst-cp
                                                                   -
                                                                   "i!1")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "1+i!1")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (name "Qprodlist"
                            "prod_polynomials_list(newp, n, LAMBDA i: 1, k)")
                      (("2" (name "Qdeg" "length(Qprodlist) - 1")
                        (("2"
                          (name "Qprod" "LAMBDA (i):
                       IF i < length(Qprodlist) THEN nth(Qprodlist, i)
                       ELSE 0
                       ENDIF")
                          (("2" (assert)
                            (("2" (replace -3)
                              (("2" (replace -2)
                                (("2" (replace -1)
                                  (("2"
                                    (case "NOT length(Qprodlist) - 2 = Qdeg -1")
                                    (("1" (assert) nil nil)
                                     ("2" (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (replace 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case "NOT Qdeg>=1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred "Qprodlist")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (replace
                                                             -7
                                                             1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand "sigma")
                                                              (("1"
                                                                (expand
                                                                 "*"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (postpone) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (compute_solvable_new_def 0
  (compute_solvable_new_def-1 nil 3769875749
   ("" (skeep)
    (("" (lemma compute_solvable_improved)
      (("" (inst?)
        (("" (split)
          (("1" (flatten -1)
            (("1" (split 1)
              (("1" (split)
                (("1" (flatten 1) nil nil)
                 ("2" (flatten 2)
                  (("2" (lemma compute_solvable_def)
                    (("2" (inst? -1)
                      (("2" (split)
                        (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (hide -2)
                    (("2" (lemma compute_solvable_def)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (assert) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((compute_solvable_improved formula-decl nil poly_system_strategy nil)
    (compute_solvable_def formula-decl nil poly_system_strategy nil)
    (subrange type-eq-decl nil integers nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (poly_system_list_TCC1 0
  (poly_system_list_TCC1-1 nil 3621682562 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (poly_system_list subtype "poly_system_strategy.i"
    "below[length[list[int]](lli)]")))
 (poly_system_list_TCC2 0
  (poly_system_list_TCC2-1 nil 3621682562 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (poly_system_list subtype "poly_system_strategy.i"
    "below[length[int](nth[list[int]](lli, j))]")))
 (poly_system_list_TCC3 0
  (poly_system_list_TCC3-2 nil 3721850925
   ("" (skeep)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2"
          (typepred "array2list[list[int]]
                            (k + 1)
                            (LAMBDA (j: nat): array2list[int](n(j) + 1)(p(j)))")
          (("2" (inst -3 "i")
            (("2" (typepred "array2list[int](1 + n(i))(p(i))")
              (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3"
          (typepred "array2list[list[int]]
                            (k + 1)
                            (LAMBDA (j: nat): array2list[int](n(j) + 1)(p(j)))")
          (("3" (inst -3 "j_1")
            (("3" (typepred "array2list[int](1 + n(j_1))(p(j_1))")
              (("3" (inst -3 "i") (("3" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
    (length def-decl "nat" list_props nil)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (listn type-eq-decl nil listn structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (poly_system_list subtype
    "array2list[list[int]].array2list((number_fields.+)(poly_system_strategy.k, 1))(LAMBDA (j: naturalnumbers.nat): array2list[int].array2list((number_fields.+)(poly_system_strategy.n(j), 1))(poly_system_strategy.p(j)))"
    "{lli: list_adt[list[int]].list | booleans.AND(list_props[list[int]].length(lli) = (number_fields.+)(1, poly_system_strategy.k), booleans.AND(FORALL (i: naturalnumbers.upto(poly_system_strategy.k)): list_props[int].length(list_props[list[int]].nth(lli, i)) = (number_fields.+)(1, poly_system_strategy.n(i)), FORALL (j: naturalnumbers.upto(poly_system_strategy.k), i: naturalnumbers.upto(poly_system_strategy.n(poly_system_strategy.j))): list_props[int].nth(list_props[list[int]].nth(lli, j), i) = poly_system_strategy.p(j)(i)))}")))
 (tarski_TCC1 0
  (tarski_TCC1-1 nil 3621683322
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (typepred "n")
          (("" (inst - "j")
            (("" (flatten)
              (("" (assert)
                (("" (replace -2 +)
                  (("" (assert)
                    (("" (typepred "rat_poly_to_int(pq(j), n(j))")
                      (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
     clear_denominators Sturm)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (tarski subtype "poly_system_strategy.n"
    "{n | FORALL (j: naturalnumbers.upto(poly_system_strategy.k)): booleans.AND(poly_system_strategy.pi(j)(poly_system_strategy.n(j)) /= 0, reals.>(poly_system_strategy.n(j), 0))}")))
 (tarski_TCC2 0
  (tarski_TCC2-1 nil 3621683322 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
     clear_denominators Sturm)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (poly_system_list const-decl "{lli: list[list[int]] |
   length[list[int]](lli) = k + 1 AND
    (FORALL (i: upto(k)): length[int](nth[list[int]](lli, i)) = n(i) + 1)
     AND
     (FORALL (j: upto(k), i: upto(n(j))):
        nth[int](nth[list[int]](lli, j), i) = p(j)(i))}" poly_system_strategy
     nil))
   nil
   (tarski subtype "poly_system_strategy.i" "below[length[list[int]](pl)]")))
 (tarski_TCC3 0
  (tarski_TCC3-1 nil 3621683322 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
     clear_denominators Sturm)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (poly_system_list const-decl "{lli: list[list[int]] |
   length[list[int]](lli) = k + 1 AND
    (FORALL (i: upto(k)): length[int](nth[list[int]](lli, i)) = n(i) + 1)
     AND
     (FORALL (j: upto(k), i: upto(n(j))):
        nth[int](nth[list[int]](lli, j), i) = p(j)(i))}" poly_system_strategy
     nil))
   nil
   (tarski subtype "poly_system_strategy.j"
    "below[length[int](nth[list[int]](pl, i))]")))
 (tarski_TCC4 0
  (tarski_TCC4-2 nil 3769873857
   ("" (skeep*)
    (("" (typepred "n")
      (("" (inst - "j")
        (("" (assert)
          (("" (flatten)
            (("" (replace -4 +)
              (("" (assert)
                (("" (typepred "pl")
                  (("" (inst? -4)
                    (("" (replace -4)
                      (("" (replace -6)
                        (("" (assert)
                          (("" (typepred "rat_poly_to_int(pq(j), n(j))")
                            (("" (skeep)
                              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
     clear_denominators Sturm)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (tarski subtype "poly_system_strategy.n"
    "{n | FORALL (j: naturalnumbers.upto(poly_system_strategy.k)): booleans.AND(poly_system_strategy.p(j)(poly_system_strategy.n(j)) /= 0, reals.>(poly_system_strategy.n(j), 0))}"))
  (tarski_TCC4-1 nil 3768754718 ("" (subtype-tcc) nil nil) nil nil
   (tarski subtype "poly_system_strategy.n"
    "{n | FORALL (j: naturalnumbers.upto(poly_system_strategy.k)): booleans.AND(poly_system_strategy.p(j)(poly_system_strategy.n(j)) /= 0, reals.>(poly_system_strategy.n(j), 0))}")))
 (tarski_def 0
  (tarski_def-2 nil 3769876448
   ("" (skeep)
    (("" (expand "tarski")
      ((""
        (name "pz" "LAMBDA (i):
                                  LAMBDA (j_1: nat):
                                    IF i <= k AND j_1 <= n(i)
                                      THEN nth[int]
                                           (nth[list[int]]
                                            (poly_system_list
                                             (k,
                                              LAMBDA
                                              (j):
                                              rat_poly_to_int(pq(j), n(j)),
                                              n),
                                             i),
                                            j_1)
                                    ELSE 0
                                    ENDIF")
        (("1" (replaces -1)
          (("1" (lemma "compute_solvable_new_def")
            (("1" (rewrite -1 :dir rl)
              (("1" (hide -1)
                (("1"
                  (case "FORALL (aa,bb:[nat->[nat->rat]]): (FORALL (j:upto(k)): EXISTS (cp:posreal): FORALL (i:upto(n(j))): bb(j)(i) = cp*aa(j)(i)) IMPLIES ((EXISTS (x: real):
                     FORALL (j: upto(k)):
                       rel5(RelF6(j))(polynomial(aa(j), n(j))(x), 0))
                   IFF
                   (EXISTS (x: real):
                      FORALL (j_1: upto(k)):
                        rel5(RelF6(j_1))
                            (polynomial(bb(j_1),
                                        n(j_1))
                                       (x),
                             0)))")
                  (("1" (inst?)
                    (("1" (replace 1)
                      (("1" (hide 2)
                        (("1" (skeep)
                          (("1" (expand "pz" 1)
                            (("1" (typepred "rat_poly_to_int(pq(j), n(j))")
                              (("1" (skeep)
                                (("1" (inst + "cp")
                                  (("1" (skeep)
                                    (("1" (inst - "i")
                                      (("1"
                                        (replaces -1 :dir rl)
                                        (("1"
                                          (typepred
                                           "poly_system_list(k,
                                         LAMBDA (j): rat_poly_to_int(pq(j), n(j)),
                                         n)")
                                          (("1" (rewrite -4) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2"
                        (case "FORALL (x:real,j:upto(k)): ((

                         rel5(RelF6(j))(polynomial(aa(j), n(j))(x), 0))
                     IFF
                     (
                          rel5(RelF6(j))(polynomial(bb(j), n(j))(x), 0)))")
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (skeep)
                              (("1" (inst + "x")
                                (("1" (skosimp*)
                                  (("1" (inst - "x" "j!1")
                                    (("1" (inst - "j!1")
                                      (("1" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (skeep)
                              (("2" (inst + "x")
                                (("2" (skosimp*)
                                  (("2" (inst - "j!1")
                                    (("2" (inst - "x" "j!1")
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (inst - "j")
                              (("2" (skeep)
                                (("2"
                                  (case "polynomial(bb(j),n(j))(x) = cp*polynomial(aa(j),n(j))(x)")
                                  (("1" (replaces -1)
                                    (("1" (expand "rel5" +)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (mult-by 1 "cp")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (mult-by -1 "cp")
                                                (("2" (assert) nil nil))
                                                nil)
                                               ("3"
                                                (mult-by 1 "cp")
                                                (("3" (assert) nil nil))
                                                nil)
                                               ("4"
                                                (mult-by -1 "cp")
                                                (("4" (assert) nil nil))
                                                nil)
                                               ("5"
                                                (mult-by 1 "cp")
                                                (("5" (assert) nil nil))
                                                nil)
                                               ("6"
                                                (mult-by -1 "cp")
                                                (("6" (assert) nil nil))
                                                nil)
                                               ("7"
                                                (mult-by 1 "cp")
                                                (("7" (assert) nil nil))
                                                nil)
                                               ("8"
                                                (mult-by -1 "cp")
                                                (("8" (assert) nil nil))
                                                nil)
                                               ("9"
                                                (mult-by 1 "cp")
                                                (("9" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (rewrite "scal_polynomial2" :dir rl)
                                      (("2"
                                        (rewrite "poly_eq_le_degree")
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "ii!1")
                                              (("2"
                                                (expand "*" +)
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (-1 2))
                (("2" (skeep)
                  (("2" (inst - "j")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (expand "pz")
                            (("2"
                              (typepred "poly_system_list(k,
                                       LAMBDA (j): rat_poly_to_int(pq(j), n(j)),
                                       n)")
                              (("2" (rewrite -4)
                                (("2" (hide (-1 -2 -3 -4))
                                  (("2"
                                    (typepred "rat_poly_to_int(pq(j), n(j))")
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst - "n(j)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (assert)
              (("2"
                (typepred "poly_system_list(k,
                                     LAMBDA (j): rat_poly_to_int(pq(j), n(j)),
                                     n)")
                (("2" (inst - "i!1") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
         ("4" (hide 2)
          (("4" (assert)
            (("4" (skeep)
              (("4" (skosimp*)
                (("4" (inst - "j!1")
                  (("4" (flatten)
                    (("4" (assert)
                      (("4" (flatten)
                        (("4" (typepred "rat_poly_to_int(pq(j!1), n(j!1))")
                          (("4" (skosimp*)
                            (("4" (inst - "n(j!1)") (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tarski const-decl "bool" poly_system_strategy nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff Sturm)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pz skolem-const-decl "[nat -> [nat -> int]]" poly_system_strategy nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (ii!1 skolem-const-decl "nat" poly_system_strategy nil)
    (n skolem-const-decl "[nat -> nat]" poly_system_strategy nil)
    (k skolem-const-decl "nat" poly_system_strategy nil)
    (j skolem-const-decl "upto(k)" poly_system_strategy nil)
    (poly_eq_le_degree formula-decl nil polynomials reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (compute_solvable_new_def formula-decl nil poly_system_strategy nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_system_list const-decl "{lli: list[list[int]] |
   length[list[int]](lli) = k + 1 AND
    (FORALL (i: upto(k)): length[int](nth[list[int]](lli, i)) = n(i) + 1)
     AND
     (FORALL (j: upto(k), i: upto(n(j))):
        nth[int](nth[list[int]](lli, j), i) = p(j)(i))}" poly_system_strategy
     nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
     clear_denominators Sturm))
   nil)
  (tarski_def-1 nil 3621684539
   ("" (skeep)
    (("" (expand "tarski")
      ((""
        (name "pz" "LAMBDA (i):
                           LAMBDA (j_1: nat):
                             IF i <= k AND j_1 <= n(i)
                               THEN nth[int]
                                    (nth[list[int]]
                                     (poly_system_list
                                      (k,
                                       LAMBDA
                                       (j):
                                       rat_poly_to_int(pq(j), n(j)),
                                       n),
                                      i),
                                     j_1)
                             ELSE 0
                             ENDIF")
        (("1" (replaces -1)
          (("1" (lemma "compute_solvable_def")
            (("1" (rewrite -1 :dir rl)
              (("1" (hide -1)
                (("1"
                  (case "FORALL (aa,bb:[nat->[nat->rat]]): (FORALL (j:upto(k)): EXISTS (cp:posreal): FORALL (i:upto(n(j))): bb(j)(i) = cp*aa(j)(i)) IMPLIES ((EXISTS (x: real):
          FORALL (j: upto(k)):
            rel5(RelF6(j))(polynomial(aa(j), n(j))(x), 0))
        IFF
        (EXISTS (x: real):
           FORALL (j_1: upto(k)):
             rel5(RelF6(j_1))
                 (polynomial(bb(j_1),
                             n(j_1))
                            (x),
                  0)))")
                  (("1" (inst?)
                    (("1" (replace 1)
                      (("1" (hide 2)
                        (("1" (skeep)
                          (("1" (expand "pz" 1)
                            (("1" (typepred "rat_poly_to_int(pq(j), n(j))")
                              (("1" (skeep)
                                (("1" (inst + "cp")
                                  (("1" (skeep)
                                    (("1" (inst - "i")
                                      (("1"
                                        (replaces -1 :dir rl)
                                        (("1"
                                          (typepred
                                           "poly_system_list(k,
                                 LAMBDA (j): rat_poly_to_int(pq(j), n(j)),
                                 n)")
                                          (("1" (rewrite -4) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2"
                        (case "FORALL (x:real,j:upto(k)): ((
       
            rel5(RelF6(j))(polynomial(aa(j), n(j))(x), 0))
        IFF
        (
             rel5(RelF6(j))(polynomial(bb(j), n(j))(x), 0)))")
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (skeep)
                              (("1" (inst + "x")
                                (("1" (skosimp*)
                                  (("1" (inst - "x" "j!1")
                                    (("1" (inst - "j!1")
                                      (("1" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (skeep)
                              (("2" (inst + "x")
                                (("2" (skosimp*)
                                  (("2" (inst - "j!1")
                                    (("2" (inst - "x" "j!1")
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (inst - "j")
                              (("2" (skeep)
                                (("2"
                                  (case "polynomial(bb(j),n(j))(x) = cp*polynomial(aa(j),n(j))(x)")
                                  (("1" (replaces -1)
                                    (("1" (expand "rel5" +)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (mult-by 1 "cp")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (mult-by -1 "cp")
                                                (("2" (assert) nil nil))
                                                nil)
                                               ("3"
                                                (mult-by 1 "cp")
                                                (("3" (assert) nil nil))
                                                nil)
                                               ("4"
                                                (mult-by -1 "cp")
                                                (("4" (assert) nil nil))
                                                nil)
                                               ("5"
                                                (mult-by 1 "cp")
                                                (("5" (assert) nil nil))
                                                nil)
                                               ("6"
                                                (mult-by -1 "cp")
                                                (("6" (assert) nil nil))
                                                nil)
                                               ("7"
                                                (mult-by 1 "cp")
                                                (("7" (assert) nil nil))
                                                nil)
                                               ("8"
                                                (mult-by -1 "cp")
                                                (("8" (assert) nil nil))
                                                nil)
                                               ("9"
                                                (mult-by 1 "cp")
                                                (("9" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (rewrite "scal_polynomial2" :dir rl)
                                      (("2"
                                        (rewrite "poly_eq_le_degree")
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "ii!1")
                                              (("2"
                                                (expand "*" +)
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (-1 2))
                (("2" (skeep)
                  (("2" (inst - "j")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (expand "pz")
                            (("2"
                              (typepred "poly_system_list(k,
                                 LAMBDA (j): rat_poly_to_int(pq(j), n(j)),
                                 n)")
                              (("2" (rewrite -4)
                                (("2" (hide (-1 -2 -3 -4))
                                  (("2"
                                    (typepred "rat_poly_to_int(pq(j), n(j))")
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst - "n(j)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (assert)
              (("2"
                (typepred "poly_system_list(k,
                                 LAMBDA (j): rat_poly_to_int(pq(j), n(j)),
                                 n)")
                (("2" (inst - "i!1") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
         ("4" (hide 2)
          (("4" (assert)
            (("4" (skeep)
              (("4" (skosimp*)
                (("4" (inst - "j!1")
                  (("4" (flatten)
                    (("4" (assert)
                      (("4" (flatten)
                        (("4" (typepred "rat_poly_to_int(pq(j!1), n(j!1))")
                          (("4" (skosimp*)
                            (("4" (inst - "n(j!1)") (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (scal_polynomial2 formula-decl nil polynomials reals)
    (poly_eq_le_degree formula-decl nil polynomials reals)
    (rat_poly_to_int const-decl "{ai: [nat -> int] |
   EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
     clear_denominators Sturm))
   shostak)))


(dnf_strategy
 (remove_constants_rec_TCC1 0
  (remove_constants_rec_TCC1-1 nil 3770629764
   ("" (subtype-tcc) nil nil) nil nil
   (remove_constants_rec subtype "dnf_strategy.l"
                         "(list_adt[DNF_Atom].cons?)")))
 (remove_constants_rec_TCC2 0
  (remove_constants_rec_TCC2-1 nil 3770629764
   ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (polylist const-decl "real" polylist "Sturm/")
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/"))
   nil
   (remove_constants_rec termination
                         "dnf_strategy.remove_constants_rec(list_adt[DNF_Atom].cdr(dnf_strategy.l), dnf_strategy.a)"
                         "nil")))
 (remove_constants_rec_TCC3 0
  (remove_constants_rec_TCC3-1 nil 3770629764
   ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/"))
   nil
   (remove_constants_rec termination
                         "dnf_strategy.remove_constants_rec(list_adt[DNF_Atom].cdr(dnf_strategy.l), list_adt[DNF_Atom].cons(list_adt[DNF_Atom].car(dnf_strategy.l), dnf_strategy.a))"
                         "nil")))
 (when_not_none 0
  (when_not_none-1 nil 3770638874
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "remove_constants_rec" 1)
          (("2" (expand "remove_constants_rec" -2)
            (("2" (case "deg(cons1_var`plist) < 1")
              (("1" (assert)
                (("1" (case "eval_atm(cons1_var)(0)")
                  (("1" (assert)
                    (("1" (inst -3 "l2" "l3")
                      (("1" (split -3)
                        (("1" (propax) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert)
                (("2"
                  (inst -1 "cons(cons1_var, l2)" "cons(cons1_var, l3)")
                  (("2" (split -1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (relation_remove_constants_rec 0
  (relation_remove_constants_rec-2 nil 3770641182
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "remove_constants_rec" 1)
        (("2" (case "deg(cons1_var`plist) < 1")
          (("1" (ground)
            (("1" (case "eval_atm(cons1_var)(0)")
              (("1" (ground)
                (("1" (inst? -3)
                  (("1" (split -3)
                    (("1" (propax) nil nil)
                     ("2" (assert)
                      (("2" (hide 2)
                        (("2" (expand "remove_constants_rec" -4)
                          (("2" (hide -1 -2 -3)
                            (("2" (lemma when_not_none)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst -1 "l2")
                                  (("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (hide -1 -2 -3)
                        (("3" (expand "remove_constants_rec" -1)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (ground)
                (("2" (expand "remove_constants_rec" -4)
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (ground)
            (("2"
              (case "cons(cons1_var, append(l2, (: a :))) = append(cons(cons1_var, l2), (: a :))")
              (("1" (replace -1 2)
                (("1" (hide -1)
                  (("1" (inst?)
                    (("1" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (hide 2 3)
                        (("2" (expand "remove_constants_rec" -2)
                          (("2" (hide -1)
                            (("2" (lemma "when_not_none")
                              (("2"
                                (inst
                                 -1
                                 "cons2_var"
                                 "cons(cons1_var, l2)"
                                 "append(cons(cons1_var, l2), (: a :))")
                                (("2"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2 3)
                        (("3" (hide -1)
                          (("3" (expand "remove_constants_rec" -1)
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (when_not_none formula-decl nil dnf_strategy nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (list_induction formula-decl nil list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil)
  (relation_remove_constants_rec-1 nil 3770640283
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "remove_constants_rec" 1)
          (("2" (case "deg(cons1_var`plist) < 1")
            (("1" (ground)
              (("1" (case "eval_atm(cons1_var)(0)")
                (("1" (ground)
                  (("1" (inst -3 "a")
                    (("1" (split -3)
                      (("1" (propax) nil nil)
                       ("2" (expand "remove_constants_rec" -4)
                        (("2" (hide -1 -2 -3)
                          (("2" (hide 2)
                            (("2" (lemma when_not_none)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst -1 "null")
                                  (("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (expand "remove_constants_rec" -4)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground)
                  (("2" (expand "remove_constants_rec" -4)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (ground) (("2" (postpone) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (remove_constants_TCC1 0
  (remove_constants_TCC1-5 nil 3770638653
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "remove_constants_rec" -2)
        (("2" (case " deg(cons1_var`plist) < 1")
          (("1" (assert)
            (("1" (case "eval_atm(cons1_var)(0)")
              (("1" (assert)
                (("1" (split -3)
                  (("1" (typepred "i")
                    (("1" (expand "remove_constants_rec" -1)
                      (("1" (inst -2 "i")
                        (("1" (assert)
                          (("1" (expand "remove_constants_rec" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "remove_constants_rec" 2)
              (("2" (split -1)
                (("1" (typepred "i")
                  (("1" (expand "remove_constants_rec" -1)
                    (("1" (lemma relation_remove_constants_rec)
                      (("1" (inst -1 "cons2_var" "null" "cons1_var")
                        (("1" (split -1)
                          (("1"
                            (case "append(null, (: cons1_var :)) = cons(cons1_var, null[DNF_Atom])")
                            (("1" (replace -1 -2)
                              (("1"
                                (hide -1)
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         "i < length(val(remove_constants_rec(cons2_var, null))) + 1")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (case
                                             " i = length(val(remove_constants_rec(cons2_var, null)))")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (hide -2 -3)
                                                  (("1"
                                                    (case
                                                     " nth[DNF_Atom]
              (append(val(remove_constants_rec(cons2_var, null)),
                      (: cons1_var :)),
               length(val(remove_constants_rec(cons2_var, null)))) = cons1_var")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (lemma
                                                         nth_append[DNF_Atom])
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "i <length(val(remove_constants_rec(cons2_var, null)))")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (case
                                                   "nth(append(val(remove_constants_rec(cons2_var, null)),
                      (: cons1_var :)), i) = 
              nth(val(remove_constants_rec(cons2_var, null)), i)")
                                                  (("1"
                                                    (replace -1 3)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (inst -2 "i")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -2)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (hide 2 3 4)
                                                        (("2"
                                                          (lemma
                                                           nth_append[DNF_Atom])
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -2 -3)
                                          (("2"
                                            (hide 2 3)
                                            (("2"
                                              (lemma
                                               "length_append[DNF_Atom]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (replace -1 -2)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("2" (hide 2 3)
                            (("2" (hide -1 -2)
                              (("2"
                                (lemma "when_not_none")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst
                                     -1
                                     "cons(cons1_var, null[DNF_Atom])")
                                    (("2"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2 3 -1 -2)
                            (("3" (lemma "when_not_none")
                              (("3"
                                (inst?)
                                (("3"
                                  (inst
                                   -1
                                   "cons(cons1_var, null[DNF_Atom])")
                                  (("3"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2 3)
                  (("2" (lemma "when_not_none")
                    (("2"
                      (inst -1 "cons2_var"
                       "cons(cons1_var, null[DNF_Atom])"
                       "null[DNF_Atom]")
                      (("2" (split -1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (relation_remove_constants_rec formula-decl nil dnf_strategy nil)
    (length_append formula-decl nil list_props nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (when_not_none formula-decl nil dnf_strategy nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (list_induction formula-decl nil list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (remove_constants subtype
                     "dnf_strategy.remove_constants_rec(dnf_strategy.l, list_adt[DNF_Atom].null)"
                     "{m: Maybe[list_adt[DNF_Atom].list].Maybe | booleans.IMPLIES(Maybe[list_adt[DNF_Atom].list].some?(m), FORALL (i: naturalnumbers.below(list_props[DNF_Atom].length(Maybe[list_adt[DNF_Atom].list].val(m)))): reals.>=(polylist.deg(list_props[DNF_Atom].nth(Maybe[list_adt[DNF_Atom].list].val(m), i)`plist), 1))}"))
  (remove_constants_TCC1-4 nil 3770638302
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "remove_constants_rec" -2)
        (("2" (case " deg(cons1_var`plist) < 1")
          (("1" (assert)
            (("1" (case "eval_atm(cons1_var)(0)")
              (("1" (assert)
                (("1" (split -3)
                  (("1" (typepred "i")
                    (("1" (expand "remove_constants_rec" -1)
                      (("1" (inst -2 "i")
                        (("1" (assert)
                          (("1" (expand "remove_constants_rec" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "remove_constants_rec" 2)
              (("2" (expand "remove_constants_rec" 2)
                (("2" (case "null?(cons2_var)")
                  (("1" (assert)
                    (("1" (typepred "i")
                      (("1" (expand "remove_constants_rec" -1)
                        (("1" (expand "remove_constants_rec" -1)
                          (("1" (case "i = 0")
                            (("1" (replace -1 2)
                              (("1"
                                (hide -2 -4)
                                (("1"
                                  (case
                                   "nth[DNF_Atom](cons(cons1_var, null[DNF_Atom]), 0) = cons1_var")
                                  (("1"
                                    (replace -1 2)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "nth")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2 -3 -4 2 3)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (remove_constants subtype
                     "dnf_strategy.remove_constants_rec(dnf_strategy.l, list_adt[DNF_Atom].null)"
                     "{m: Maybe[list_adt[DNF_Atom].list].Maybe | booleans.IMPLIES(Maybe[list_adt[DNF_Atom].list].some?(m), FORALL (i: naturalnumbers.below(list_props[DNF_Atom].length(Maybe[list_adt[DNF_Atom].list].val(m)))): reals.>=(polylist.deg(list_props[DNF_Atom].nth(Maybe[list_adt[DNF_Atom].list].val(m), i)`plist), 1))}"))
  (remove_constants_TCC1-3 nil 3770638232
   ("" (induct "l")
    (("1" (grind) nil)
     ("2" (skeep*)
      (("2" (expand "remove_constants_rec" 1)
        (("2" (assert)
          (("2" (case "deg(cons1_var`plist) < 1")
            (("1" (assert)
              (("1" (case "eval_atm(cons1_var)(0)")
                (("1" (assert)
                  (("1" (split -3)
                    (("1" (typepred "i")
                      (("1" (expand "remove_constants_rec" -1)
                        (("1" (inst -2 "i")
                          (("1" (assert)
                            (("1" (expand "remove_constants_rec" 1)
                              (("1" (propax) nil)))))))))))
                     ("2" (propax) nil)))))
                 ("2" (assert) nil)))))
             ("2" (postpone) nil))))))))))
    nil)
   nil nil
   (remove_constants subtype
                     "dnf_strategy.remove_constants_rec(dnf_strategy.l, list_adt[DNF_Atom].null)"
                     "{m: Maybe[list_adt[DNF_Atom].list].Maybe | booleans.IMPLIES(Maybe[list_adt[DNF_Atom].list].some?(m), FORALL (i: naturalnumbers.below(list_props[DNF_Atom].length(Maybe[list_adt[DNF_Atom].list].val(m)))): reals.>=(polylist.deg(list_props[DNF_Atom].nth(Maybe[list_adt[DNF_Atom].list].val(m), i)`plist), 1))}"))
  (remove_constants_TCC1-2 nil 3770637432
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "remove_constants_rec" 1)
        (("2" (assert)
          (("2" (case "deg(cons1_var`plist) < 1")
            (("1" (assert) (("1" (postpone) nil nil)) nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (remove_constants subtype
                     "dnf_strategy.remove_constants_rec(dnf_strategy.l, list_adt[DNF_Atom].null)"
                     "{m: Maybe[list_adt[DNF_Atom].list].Maybe | booleans.IMPLIES(Maybe[list_adt[DNF_Atom].list].some?(m), FORALL (i: naturalnumbers.below(list_props[DNF_Atom].length(Maybe[list_adt[DNF_Atom].list].val(m)))): reals.>=(polylist.deg(list_props[DNF_Atom].nth(Maybe[list_adt[DNF_Atom].list].val(m), i)`plist), 1))}"))
  (remove_constants_TCC1-1 nil 3770629764
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "remove_constants_rec" -2)
          (("2" (assert)
            (("2" (case "length(cons1_var`plist) = 1")
              (("1" (assert)
                (("1" (expand "remove_constants_rec" 1)
                  (("1" (case "eval_atm(cons1_var)(0)")
                    (("1" (assert)
                      (("1" (split -3)
                        (("1" (typepred "i")
                          (("1" (inst -2 "i") nil nil)) nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (remove_constants subtype
                     "dnf_strategy.remove_constants_rec(dnf_strategy.l, list_adt[DNF_Atom].null)"
                     "{m: Maybe[list_adt[DNF_Atom].list].Maybe | booleans.IMPLIES(Maybe[list_adt[DNF_Atom].list].some?(m), FORALL (i: naturalnumbers.below(list_props[DNF_Atom].length(Maybe[list_adt[DNF_Atom].list].val(m)))): reals.>=(polylist.deg(list_props[DNF_Atom].nth(Maybe[list_adt[DNF_Atom].list].val(m), i)`plist), 1))}")))
 (relation_remove_constants_single 0
  (relation_remove_constants_single-1 nil 3770725617
   ("" (skeep)
    (("" (expand "remove_constants")
      (("" (expand "remove_constants_rec")
        (("" (case "deg(a`plist) < 1")
          (("1" (assert)
            (("1" (case "eval_atm(a)(0)")
              (("1" (assert)
                (("1" (expand "remove_constants_rec")
                  (("1" (propax) nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "remove_constants_rec")
              (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil))
   shostak))
 (relation_remove_constants_null_TCC1 0
  (relation_remove_constants_null_TCC1-1 nil 3770726473
   ("" (grind) nil nil)
   ((eval_atm const-decl "bool" dnf_polynomials nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (polylist const-decl "real" polylist "Sturm/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (length def-decl "nat" list_props nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil))
   nil
   (relation_remove_constants_null subtype
    "dnf_strategy.remove_constants((: dnf_strategy.a :))"
    "(Maybe[list_adt[DNF_Atom].list].some?)")))
 (relation_remove_constants_null_TCC2 0
  (relation_remove_constants_null_TCC2-1 nil 3770726473
   ("" (skeep)
    (("" (lemma "when_not_none")
      (("" (expand "remove_constants")
        (("" (expand "remove_constants_rec" -2)
          (("" (case "deg(a`plist) < 1")
            (("1" (assert)
              (("1" (case "eval_atm(a)(0)")
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (inst -1 "l" "cons(a, null)" "null")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((when_not_none formula-decl nil dnf_strategy nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil))
   nil
   (relation_remove_constants_null subtype
    "dnf_strategy.remove_constants(dnf_strategy.l)"
    "(Maybe[list_adt[DNF_Atom].list].some?)")))
 (relation_remove_constants_null 0
  (relation_remove_constants_null-1 nil 3770726474
   ("" (skeep*)
    (("" (expand "remove_constants")
      (("" (expand "remove_constants_rec" 1)
        (("" (expand "remove_constants_rec" -2)
          (("" (case "deg(a`plist) < 1")
            (("1" (assert)
              (("1" (case "eval_atm(a)(0)")
                (("1" (assert)
                  (("1" (case "null?(l)")
                    (("1" (assert) nil nil)
                     ("2" (assert) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polylist const-decl "real" polylist "Sturm/")
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (relation_remove_constants_TCC1 0
  (relation_remove_constants_TCC1-1 nil 3770725412
   ("" (skeep)
    (("" (expand "remove_constants")
      (("" (hide -2)
        (("" (expand "remove_constants_rec" -1)
          (("" (case "deg(a`plist) < 1")
            (("1" (assert)
              (("1" (case "eval_atm(a)(0)")
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (lemma "when_not_none")
                (("2" (inst -1 "l" "cons(a, null)" "null")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (when_not_none formula-decl nil dnf_strategy nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil))
   nil
   (relation_remove_constants subtype
    "dnf_strategy.remove_constants(dnf_strategy.l)"
    "(Maybe[list_adt[DNF_Atom].list].some?)")))
 (relation_remove_constants 0
  (relation_remove_constants-1 nil 3770725415
   ("" (skeep*)
    (("" (expand "remove_constants" 1)
      (("" (expand "remove_constants")
        (("" (expand "remove_constants_rec")
          (("" (case "deg(a`plist) < 1")
            (("1" (assert)
              (("1" (case "eval_atm(a)(0) ")
                (("1" (assert)
                  (("1" (expand "remove_constants_rec" -4)
                    (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "null?(l)")
                (("1" (assert)
                  (("1" (case "l = null")
                    (("1" (replace -1 2)
                      (("1" (expand "remove_constants_rec")
                        (("1" (hide-all-but 2)
                          (("1" (expand "append")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lemma relation_remove_constants_rec)
                    (("2" (inst -1 "l" "null" "a")
                      (("2" (split -1)
                        (("1" (assert)
                          (("1"
                            (case "val(remove_constants_rec(l, append(null, (: a :)))) =append(IF deg(car(l)`plist) < 1
                THEN IF eval_atm(car(l))(0)
                       THEN val(remove_constants_rec(cdr(l), null))
                     ELSE val(None)
                     ENDIF
              ELSE val(remove_constants_rec(cdr(l), cons(car(l), null)))
              ENDIF,
              (: a :))")
                            (("1" (grind) nil nil)
                             ("2" (hide 2 3 4) (("2" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil)
                             ("4" (grind) nil nil)
                             ("5" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil)
                         ("3" (assert)
                          (("3" (hide -2 2 3 4)
                            (("3" (lemma "when_not_none")
                              (("3"
                                (inst?)
                                (("3"
                                  (inst -1 "cons(a, null)")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (when_not_none formula-decl nil dnf_strategy nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (polylist const-decl "real" polylist "Sturm/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (None adt-constructor-decl "(none?)" Maybe "structures/")
    (relation_remove_constants_rec formula-decl nil dnf_strategy nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (eval_truth 0
  (eval_truth-1 nil 3770646535
   ("" (skeep)
    (("" (skeep*)
      (("" (lemma eval_atm_list_prop)
        (("" (inst -1 "x" "(: a :)" "l")
          (("" (case "append((: a :), l) = cons(a, l)")
            (("1" (replace -1 -2)
              (("1" (hide -1)
                (("1"
                  (case "eval_atm_list((: a :))(x) = eval_atm(a)(x)")
                  (("1" (assert)
                    (("1" (replace -1 -2) (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (hide -1)
                      (("2" (expand "eval_atm_list")
                        (("2" (expand "eval_atm_list")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 2)
              (("2" (expand "append")
                (("2" (expand "append") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval_atm_list_prop formula-decl nil dnf_polynomials nil))
   shostak))
 (eval_constant_polys 0
  (eval_constant_polys-2 nil 3770652023
   ("" (skeep)
    (("" (skeep)
      (("" (expand "polylist")
        (("" (expand "eval_polylist")
          (("" (case "null?(cdr(p))")
            (("1" (grind) nil nil)
             ("2" (assert)
              (("2" (lemma eval_polylist_remove_acc)
                (("2" (inst?)
                  (("2"
                    (case "eval_polylist(cdr(p), length(p) - 1, 0)(x) = 0")
                    (("1" (grind) nil nil)
                     ("2" (hide 2 3)
                      (("2" (hide -1)
                        (("2"
                          (case "FORALL (p:Polylist): (deg(p) < 1 AND length(p) > 1) IMPLIES eval_polylist(cdr(p), length(p) - 1, 0)(x) = 0")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (typepred "p")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2" (induct "p")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (expand "eval_polylist" 1)
                                  (("3"
                                    (grind)
                                    (("3"
                                      (lemma eval_polylist_times_x)
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (simplify)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (grind) nil nil)
                               ("5" (grind) nil nil))
                              nil))
                            nil)
                           ("3" (grind) nil nil) ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_polylist def-decl "real" polylist "Sturm/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (eval_polylist_times_x formula-decl nil polylist "Sturm/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deg_rec def-decl
             "{degans: [# allzero: bool, maxnon: below(length(pl)) #] |
   LET (dz, dmax) = (degans`allzero, degans`maxnon), len = length(pl) IN
     (dz IFF (FORALL (j: below(len)): nth(pl, j) = 0)) AND
      (dz OR FORALL (j: below(len)): j > dmax IMPLIES nth(pl, j) = 0) AND
       (dz OR nth(pl, dmax) /= 0)}" polylist "Sturm/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval_polylist_remove_acc formula-decl nil polylist "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/"))
   nil)
  (eval_constant_polys-1 nil 3770647792
   ("" (skeep)
    (("" (skeep)
      (("" (expand "polylist")
        (("" (expand "eval_polylist")
          (("" (case "null?(cdr(p))")
            (("1" (grind) nil nil)
             ("2" (assert)
              (("2" (lemma eval_polylist_remove_acc)
                (("2" (inst?)
                  (("2"
                    (case "eval_polylist(cdr(p), length(p) - 1, 0)(x) = 0")
                    (("1" (grind) nil nil)
                     ("2" (hide 2 3)
                      (("2" (hide -1)
                        (("2"
                          (case "FORALL (p:Polylist): deg(p) < 1 IMPLIES eval_polylist(cdr(p), length(p) - 1, 0)(x) = 0")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 2)
                            (("2" (induct "p")
                              (("1" (postpone) nil nil)
                               ("2" (postpone) nil nil)
                               ("3" (postpone) nil nil)
                               ("4" (postpone) nil nil)
                               ("5" (postpone) nil nil))
                              nil))
                            nil)
                           ("3" (postpone) nil nil)
                           ("4" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (eval_remove_constants_none 0
  (eval_remove_constants_none-1 nil 3770646184
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "remove_constants" -2)
          (("2" (expand "remove_constants_rec" -2)
            (("2" (case "deg(cons1_var`plist) < 1")
              (("1" (assert)
                (("1" (case "eval_atm(cons1_var)(0)")
                  (("1" (assert)
                    (("1" (split -3)
                      (("1" (inst -1 "x")
                        (("1" (lemma eval_truth)
                          (("1" (inst?)
                            (("1" (replace -1 -5)
                              (("1"
                                (hide -1)
                                (("1" (flatten -4) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "remove_constants" 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide -3)
                      (("2" (lemma eval_truth)
                        (("2" (inst?)
                          (("2" (replace -1 -4)
                            (("2" (hide -1)
                              (("2"
                                (flatten -3)
                                (("2"
                                  (hide -4)
                                  (("2"
                                    (expand "eval_atm" -3)
                                    (("2"
                                      (expand "eval_atm" 1)
                                      (("2"
                                        (lemma "polylist_eval")
                                        (("2"
                                          (inst
                                           -1
                                           "cons1_var`plist"
                                           "x")
                                          (("2"
                                            (lemma
                                             "eval_constant_polys")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (inst -1 "0")
                                                  (("1"
                                                    (reveal -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (split -1)
                  (("1" (inst -1 "x")
                    (("1" (hide -1 2)
                      (("1" (lemma eval_truth)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2 2)
                    (("2" (lemma "when_not_none")
                      (("2"
                        (inst -1 "cons2_var" "null"
                         "cons(cons1_var, null)")
                        (("2" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (expand "remove_constants" 2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_atm const-decl "bool" dnf_polynomials nil)
    (eval_truth formula-decl nil dnf_strategy nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_constant_polys formula-decl nil dnf_strategy nil)
    (polylist_eval formula-decl nil polylist "Sturm/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (when_not_none formula-decl nil dnf_strategy nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (list_induction formula-decl nil list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (FALSE const-decl "bool" booleans nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (eval_remove_constants 0
  (eval_remove_constants-5 nil 3770652884
   ("" (skeep)
    (("" (induct "l")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (expand "remove_constants" 1)
          (("2" (expand "remove_constants_rec" 1)
            (("2" (case "deg(cons1_var`plist) < 1")
              (("1" (assert)
                (("1" (case "eval_atm(cons1_var)(0)")
                  (("1" (assert)
                    (("1" (split -3)
                      (("1" (expand "remove_constants" -1)
                        (("1" (replace -1 1)
                          (("1" (hide -1)
                            (("1" (lemma "eval_truth")
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (expand "eval_atm" 1)
                                      (("1"
                                        (lemma eval_constant_polys)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (inst -1 "0")
                                              (("1"
                                                (reveal -1)
                                                (("1"
                                                  (inst -1 "x")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (expand
                                                       "eval_atm"
                                                       -3)
                                                      (("1"
                                                        (replace -2 -3)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "remove_constants")
                          (("2" (expand "remove_constants_rec" -3)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "remove_constants" -3)
                      (("2" (expand "remove_constants_rec" -3)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "remove_constants" -2)
                  (("2" (expand "remove_constants_rec" -2)
                    (("2" (split -1)
                      (("1" (lemma "relation_remove_constants_rec")
                        (("1" (inst -1 "cons2_var" "null" "cons1_var")
                          (("1" (split -1)
                            (("1"
                              (case "append(null, (: cons1_var :)) = cons(cons1_var, null)")
                              (("1"
                                (replace -1 -2)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma "eval_truth")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replace -1 2)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 eval_atm_list_prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 2)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "remove_constants"
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             2)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (case
                                                                 "eval_atm_list((: cons1_var :))(x) = eval_atm(cons1_var)(x)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   2)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "eval_atm_list")
                                                                    (("2"
                                                                      (expand
                                                                       "eval_atm_list")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide -1 2 3)
                              (("2"
                                (case
                                 "append(null, (: cons1_var :)) = cons(cons1_var, null)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2 3 -1)
                              (("3"
                                (lemma "when_not_none")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (inst -1 "cons(cons1_var, null)")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3)
                        (("2" (lemma "when_not_none")
                          (("2"
                            (inst -1 "cons2_var"
                             "cons(cons1_var, null)" "null")
                            (("2" (split -1)
                              (("1"
                                (expand "remove_constants" 1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (list_induction formula-decl nil list_adt nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (eval_truth formula-decl nil dnf_strategy nil)
    (eval_constant_polys formula-decl nil dnf_strategy nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (when_not_none formula-decl nil dnf_strategy nil)
    (append def-decl "list[T]" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (eval_atm_list_prop formula-decl nil dnf_polynomials nil)
    (relation_remove_constants_rec formula-decl nil dnf_strategy nil))
   nil)
  (eval_remove_constants-4 nil 3770652842
   ("" (induct "l")
    (("1" (grind) nil)
     ("2" (skeep*)
      (("2" (expand "remove_constants" 1)
        (("2" (expand "remove_constants_rec" 1)
          (("2" (case "deg(cons1_var`plist) < 1")
            (("1" (assert)
              (("1" (case "eval_atm(cons1_var)(0)")
                (("1" (assert) (("1" (postpone) nil)))
                 ("2" (assert)
                  (("2" (expand "remove_constants" -3)
                    (("2" (expand "remove_constants_rec" -3)
                      (("2" (propax) nil)))))))))))
             ("2" (assert)
              (("2" (expand "remove_constants" -2)
                (("2" (expand "remove_constants_rec" -2)
                  (("2" (split -1)
                    (("1" (lemma "relation_remove_constants_rec")
                      (("1" (inst -1 "cons2_var" "null" "cons1_var")
                        (("1" (split -1)
                          (("1"
                            (case "append(null, (: cons1_var :)) = cons(cons1_var, null)")
                            (("1" (replace -1 -2)
                              (("1"
                                (hide -1)
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "eval_truth")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (postpone)
                                          nil)))))))))))))
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil)))))
                           ("2" (hide -1 2 3)
                            (("2"
                              (case "append(null, (: cons1_var :)) = cons(cons1_var, null)")
                              (("1" (assert) nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil)))))))
                           ("3" (hide 2 3 -1)
                            (("3" (lemma "when_not_none")
                              (("3"
                                (inst?)
                                (("3"
                                  (inst -1 "cons(cons1_var, null)")
                                  (("3" (assert) nil)))))))))))))))
                     ("2" (hide 2 3)
                      (("2" (lemma "when_not_none")
                        (("2"
                          (inst -1 "cons2_var" "cons(cons1_var, null)"
                           "null")
                          (("2" (split -1)
                            (("1" (expand "remove_constants" 1)
                              (("1" (propax) nil)))
                             ("2" (propax)
                              nil))))))))))))))))))))))))))
    nil)
   nil nil)
  (eval_remove_constants-3 nil 3770645042
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "remove_constants" 1)
        (("2" (expand "remove_constants_rec" 1)
          (("2" (case "deg(cons1_var`plist) < 1")
            (("1" (assert)
              (("1" (case "eval_atm(cons1_var)(0)")
                (("1" (assert) (("1" (postpone) nil nil)) nil)
                 ("2" (assert)
                  (("2" (expand "remove_constants" -3)
                    (("2" (expand "remove_constants_rec" -3)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "remove_constants" -2)
                (("2" (expand "remove_constants_rec" -2)
                  (("2" (split -1)
                    (("1" (lemma "relation_remove_constants_rec")
                      (("1" (inst -1 "cons2_var" "null" "cons1_var")
                        (("1" (split -1)
                          (("1"
                            (case "append(null, (: cons1_var :)) = cons(cons1_var, null)")
                            (("1" (replace -1 -2)
                              (("1"
                                (hide -1)
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "eval_truth")
                                      (("1"
                                        (inst?)
                                        (("1" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("2" (hide -1 2 3)
                            (("2"
                              (case "append(null, (: cons1_var :)) = cons(cons1_var, null)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2 3 -1)
                            (("3" (lemma "when_not_none")
                              (("3"
                                (inst?)
                                (("3"
                                  (inst -1 "cons(cons1_var, null)")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3)
                      (("2" (lemma "when_not_none")
                        (("2"
                          (inst -1 "cons2_var" "cons(cons1_var, null)"
                           "null")
                          (("2" (split -1)
                            (("1" (expand "remove_constants" 1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (eval_remove_constants-2 nil 3770644714
   ("" (measure-induct "l" "depth(l)")
    (("1" (grind) nil)
     ("2" (expand "remove_constants" 1)
      (("2" (expand "remove_constants_rec" 1) (("2" (propax) nil)))))
     ("3" (skeep)
      (("3" (split 1)
        (("1" (flatten 1)
          (("1" (expand "remove_constants" 1)
            (("1" (expand "remove_constants_rec" 1)
              (("1" (case "deg(cons1_var`plist) < 1")
                (("1" (assert) (("1" (postpone) nil)))
                 ("2" (postpone) nil)))))))))
         ("2" (flatten 1)
          (("2" (skeep)
            (("2" (expand "remove_constants" -1)
              (("2" (hide -2)
                (("2" (expand "remove_constants_rec" -1)
                  (("2" (postpone) nil))))))))))))))))
    nil)
   nil nil)
  (eval_remove_constants-1 nil 3770644060
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (expand "remove_constants" 1)
      (("2" (expand "remove_constants_rec" 1) (("2" (propax) nil nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (split 1)
        (("1" (flatten 1)
          (("1" (expand "remove_constants" 1)
            (("1" (expand "remove_constants_rec" 1)
              (("1" (case "deg(cons1_var`plist) < 1")
                (("1" (assert) (("1" (postpone) nil nil)) nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten 1)
          (("2" (skeep)
            (("2" (expand "remove_constants" -1)
              (("2" (hide -2)
                (("2" (expand "remove_constants_rec" -1)
                  (("2" (postpone) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (conj_to_tarski_TCC1 0
  (conj_to_tarski_TCC1-1 nil 3770629764 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil))
   nil
   (conj_to_tarski subtype "dnf_strategy.rc"
                   "(Maybe[list_adt[DNF_Atom].list].some?)")))
 (conj_to_tarski_TCC2 0
  (conj_to_tarski_TCC2-1 nil 3770629764 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil))
   nil
   (conj_to_tarski subtype "dnf_strategy.j"
                   "below[length[DNF_Atom](l)]")))
 (conj_to_tarski_TCC3 0
  (conj_to_tarski_TCC3-1 nil 3770631655
   ("" (skeep*)
    (("" (replace -2 -3)
      (("" (hide -1 -2 -4 -5 -6) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (conj_to_tarski subtype "dnf_strategy.k" "nat")))
 (conj_to_tarski_TCC4 0
  (conj_to_tarski_TCC3-1 nil 3770629764
   ("" (skeep*)
    (("" (typepred "j")
      (("" (replace -5 3)
        (("" (replace -6 3)
          (("" (assert)
            (("" (replace -3 3)
              (("" (hide -5 -6)
                (("" (hide -5)
                  (("" (typepred "rc")
                    (("" (split -1)
                      (("1" (inst -1 "j")
                        (("1" (split 3)
                          (("1" (typepred "deg(nth(val(rc), j)`plist)")
                            (("1" (hide -1 -2 -3 -4)
                              (("1"
                                (split -1)
                                (("1"
                                  (hide -3 -4 -5 -6 -7 1 2)
                                  (("1"
                                    (lemma list2array_sound[rat])
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replace -1 -3)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (case
                                             "deg(nth(val(rc), j)`plist) < length(nth(val(rc), j)`plist)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -1 -2)
                                              (("2"
                                                (typepred
                                                 "deg(nth(val(rc), j)`plist)")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (list2array_sound formula-decl nil array2list "structures/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (conj_to_tarski subtype "dnf_strategy.n"
                   "{n | FORALL (j: naturalnumbers.upto(dnf_strategy.k)): booleans.AND(dnf_strategy.pq(j)(poly_system_strategy.n(j)) /= 0, reals.>(poly_system_strategy.n(j), 0))}")))
 (conj_to_tarski_TCC5 0
  (conj_to_tarski_TCC4-1 nil 3770629764 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil))
   nil
   (conj_to_tarski subtype "dnf_strategy.rel"
                   "[nat -> integers.subrange(0, 5)]")))
 (satisfiability_relation_TCC1 0
  (satisfiability_relation_TCC1-1 nil 3770655019
   ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil
   (satisfiability_relation subtype
    "poly_system_strategy.to_nat(dnf_strategy.a`rel)"
    "integers.subrange(0, 5)")))
 (satisfiability_relation 0
  (satisfiability_relation-2 nil 3770655927
   ("" (skeep)
    (("" (skeep)
      (("" (expand "eval_atm")
        (("" (lemma "polylist_eval")
          (("" (inst?)
            (("" (replace -1 1)
              (("" (hide -1)
                (("" (lemma "polylist_eval_deg")
                  (("" (inst?)
                    (("" (split -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1"
                            (case "to_nat(a`rel) = 0 OR to_nat(a`rel) = 1 OR to_nat(a`rel) = 2 OR to_nat(a`rel) = 3 OR to_nat(a`rel) = 4 OR to_nat(a`rel) = 5")
                            (("1" (split -1)
                              (("1"
                                (expand "rel5")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "to_nat")
                                    (("1"
                                      (case "a`rel = peq")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "eval_rel")
                                          (("1"
                                            (assert)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (hide -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "rel5")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "to_nat")
                                    (("2"
                                      (case "a`rel = pgt")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "eval_rel")
                                          (("1"
                                            (assert)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (hide -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "rel5")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "to_nat")
                                    (("3"
                                      (case "a`rel = plt")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "eval_rel")
                                          (("1"
                                            (assert)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (hide -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (expand "rel5")
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand "to_nat")
                                    (("4"
                                      (case "a`rel = pneq")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "eval_rel")
                                          (("1"
                                            (assert)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (hide -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (expand "rel5")
                                (("5"
                                  (assert)
                                  (("5"
                                    (expand "to_nat")
                                    (("5"
                                      (case "a`rel = pge")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "eval_rel")
                                          (("1"
                                            (assert)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (hide -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (expand "rel5")
                                (("6"
                                  (assert)
                                  (("6"
                                    (expand "to_nat")
                                    (("6"
                                      (case "a`rel = ple")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "eval_rel")
                                          (("1"
                                            (assert)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (hide -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_eval_deg formula-decl nil polylist "Sturm/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy nil)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy nil)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy nil)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy nil)
    (pneq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy nil)
    (pneq adt-constructor-decl "(pneq?)" poly_system_strategy nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy nil)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy nil)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (to_nat const-decl "upto(5)" poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_atm const-decl "bool" dnf_polynomials nil))
   nil)
  (satisfiability_relation-1 nil 3770655020
   ("" (skeep)
    (("" (skeep)
      (("" (expand "eval_atm")
        (("" (lemma "polylist_eval")
          (("" (inst?)
            (("" (replace -1 1)
              (("" (hide -1)
                (("" (lemma "polylist_eval_deg")
                  (("" (inst?)
                    (("" (split -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1"
                            (case "to_nat(a`rel) = 0 OR to_nat(a`rel) = 1 OR to_nat(a`rel) = 2 OR to_nat(a`rel) = 3 OR to_nat(a`rel) = 4 OR to_nat(a`rel) = 5")
                            (("1" (split -1)
                              (("1"
                                (expand "rel5")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "to_nat")
                                    (("1"
                                      (case "a`rel = peq")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "eval_rel")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1" (postpone) nil nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (hide -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil)
                               ("3" (postpone) nil nil)
                               ("4" (postpone) nil nil)
                               ("5" (postpone) nil nil)
                               ("6" (postpone) nil nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (satisfiability_relation_system_TCC1 0
  (satisfiability_relation_system_TCC2-1 nil 3770657142
   ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil))
   nil
   (satisfiability_relation_system subtype "dnf_strategy.j"
    "below[length[DNF_Atom](val[list[DNF_Atom]](remove_constants(ll)))]")))
 (satisfiability_relation_system_TCC2 0
  (satisfiability_relation_system_TCC3-1 nil 3770657142
   ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil))
   nil
   (satisfiability_relation_system subtype
    "poly_system_strategy.to_nat(list_props[DNF_Atom].nth(Maybe[list_adt[DNF_Atom].list].val(dnf_strategy.remove_constants(dnf_strategy.ll)), dnf_strategy.j)`rel)"
    "integers.subrange(0, 5)")))
 (satisfiability_relation_system 0
  (satisfiability_relation_system-4 nil 3770729579
   ("" (induct "ll")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (case "cons2_var = null")
        (("1" (replace -1 1)
          (("1" (expand "eval_atm_list" 1)
            (("1" (expand "eval_atm_list" 1)
              (("1" (hide -2)
                (("1" (replace -1 -4)
                  (("1" (replace -1 -2)
                    (("1"
                      (case "cons(cons1_var, cons2_var) = (: cons1_var :)")
                      (("1" (replace -1 -4)
                        (("1"
                          (case "some?(remove_constants((: cons1_var :)))")
                          (("1" (hide -4)
                            (("1" (lemma "satisfiability_relation")
                              (("1"
                                (hide -1)
                                (("1"
                                  (case
                                   " length(val(remove_constants((: cons1_var :)))) = 1")
                                  (("1"
                                    (inst -6 "0")
                                    (("1"
                                      (lemma satisfiability_relation)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (skeep*)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (case
                                                 "(
                              rel5(to_nat(nth(val(remove_constants(cons(cons1_var, null))),
                                              0)`rel))
                                  (polynomial(list2array[rat]
                                                  (0)
                                                  (nth(val(remove_constants
                                                           (cons(cons1_var, null))),
                                                       0)`plist),
                                              deg(nth(val(remove_constants
                                                          (cons(cons1_var, null))),
                                                      0)`plist))
                                             (x),
                                   0))
                            IFF eval_atm(cons1_var)(x)")
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (hide
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (flatten 1)
                                                          (("1"
                                                            (reveal -2)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (reveal
                                                                   -6)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "cons[DNF_Atom](cons1_var, null) = (: cons1_var :)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten 1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep 1)
                                                              (("2"
                                                                (typepred
                                                                 "j")
                                                                (("2"
                                                                  (reveal
                                                                   -2)
                                                                  (("2"
                                                                    (case
                                                                     "j = 0")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (hide
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           "remove_constants"
                                                                           -1)
                                                                          (("2"
                                                                            (reveal
                                                                             -4)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               -3)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (case
                                                     "val(remove_constants(cons(cons1_var, null))) = (: cons1_var :)")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (replace -1 -2)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (case
                                                             " nth((: cons1_var :), 0) = cons1_var")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -3)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "nth")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           "remove_constants")
                                                          (("2"
                                                            (expand
                                                             "remove_constants_rec")
                                                            (("2"
                                                              (case
                                                               "deg(cons1_var`plist) < 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "eval_atm(cons1_var)(0)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       -7)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "remove_constants_rec")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -2 -3 -5)
                                      (("2"
                                        (expand "remove_constants" 1)
                                        (("2"
                                          (expand
                                           "remove_constants"
                                           -2)
                                          (("2"
                                            (expand
                                             "remove_constants_rec")
                                            (("2"
                                              (expand
                                               "remove_constants_rec")
                                              (("2"
                                                (case
                                                 "deg(cons1_var`plist) < 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -2 -3 -4) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (lemma "eval_truth")
            (("2" (inst? -1)
              (("2" (replace -1 2)
                (("2" (hide -1)
                  (("2" (split -1)
                    (("1" (inst -1 "x")
                      (("1" (lemma "relation_remove_constants_single")
                        (("1" (inst -1 "cons1_var")
                          (("1" (split -1)
                            (("1"
                              (lemma relation_remove_constants_null)
                              (("1"
                                (inst -1 "cons2_var" "cons1_var")
                                (("1"
                                  (split -1)
                                  (("1"
                                    (lemma "eval_remove_constants")
                                    (("1"
                                      (inst -1 "x" "(: cons1_var :)")
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (case
                                           "eval_atm(cons1_var)(x) = TRUE")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide-all-but 2)
                                              (("1"
                                                (reveal -5)
                                                (("1"
                                                  (reveal -3)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -2 "j")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -1 "j")
                                                        (("2"
                                                          (replace
                                                           -2
                                                           -1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (hide -7)
                                              (("2"
                                                (hide -4 -5 -6)
                                                (("2"
                                                  (replace -3 -1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -5 -6)
                                            (("2"
                                              (hide -1 -2 -3)
                                              (("2"
                                                (expand
                                                 "remove_constants"
                                                 -1)
                                                (("2"
                                                  (expand
                                                   "remove_constants_rec"
                                                   -1)
                                                  (("2"
                                                    (expand
                                                     "remove_constants"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "remove_constants_rec"
                                                       1)
                                                      (("2"
                                                        (case
                                                         "deg(cons1_var`plist) < 1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "eval_atm(cons1_var)(0)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "remove_constants_rec"
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "remove_constants_rec"
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma relation_remove_constants)
                              (("2"
                                (inst -1 "cons2_var" "cons1_var")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (split 2)
                                      (("1"
                                        (flatten 1)
                                        (("1"
                                          (case
                                           "(FORALL (j: upto(length(val(remove_constants(cons2_var))) - 1)):
                            rel5(to_nat(nth(val(remove_constants(cons2_var)), j)`rel))
                                (polynomial(list2array[rat]
                                                (0)
                                                (nth(val(remove_constants(cons2_var)),
                                                     j)`plist),
                                            deg(nth(val(remove_constants(cons2_var)),
                                                    j)`plist))
                                           (x),
                                 0))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (hide-all-but -4)
                                                (("1"
                                                  (reveal 1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "length(val(remove_constants(cons
                                                                 (cons1_var, cons2_var))))
                                      - 1")
                                                    (("1"
                                                      (lemma
                                                       "nth_append[DNF_Atom]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (reveal
                                                               -5)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2)
                                                                (("1"
                                                                  (case
                                                                   "nth(append(val(remove_constants(cons2_var)), (: cons1_var :)),
                                 length(append(val(remove_constants(cons2_var)), (: cons1_var :)))
                                  - 1) = cons1_var")
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -3)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -3)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (lemma
                                                                             "satisfiability_relation")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "cons1_var")
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (reveal
                                                                                   -9)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "remove_constants"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove_constants_rec"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "eval_atm(cons1_var)(0)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "remove_constants_rec"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               -10)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "remove_constants"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "remove_constants_rec"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (hide
                                                                       -3)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (case
                                                                           "length(append(val(remove_constants(cons2_var)), (: cons1_var :)))
                                    - 1
                                    < length(val(remove_constants(cons2_var)))")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               length_append[DNF_Atom])
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               1)
                                                                              (("2"
                                                                                (lemma
                                                                                 length_append[DNF_Atom])
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     -2)
                                                                                    (("2"
                                                                                      (simplify)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "length[DNF_Atom]((: cons1_var :)) - 1 = 0")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -2)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "nth((: cons1_var :), 0) = cons1_var")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "length_append[DNF_Atom]")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "length[DNF_Atom]((: cons1_var :))
                                          - 1 = 0")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nth")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -1)
                                                              (("2"
                                                                (lemma
                                                                 length_append[DNF_Atom])
                                                                (("2"
                                                                  (reveal
                                                                   -6)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (hide -2 -3 -4 -5 -6)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -1 "j")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred "j")
                                                        (("1"
                                                          (lemma
                                                           nth_append[DNF_Atom])
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (reveal -3)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "length_append[DNF_Atom]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3"
                                              (skeep)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (case
                                             "j <= length(val(remove_constants(cons2_var))) - 1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -7 "j")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     nth_append[DNF_Atom])
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "j = length(val(remove_constants(cons(cons1_var, cons2_var))))- 1")
                                                  (("1"
                                                    (hide -6 -10)
                                                    (("1"
                                                      (reveal 1)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (case
                                                             "nth(append(val(remove_constants(cons2_var)), (: cons1_var :)), j) = cons1_var")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "satisfiability_relation")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -6
                                                                         -7
                                                                         -8)
                                                                        (("2"
                                                                          (typepred
                                                                           "remove_constants((: cons1_var :))")
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "0")
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (reveal
                                                                               -6)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove_constants")
                                                                                (("2"
                                                                                  (expand
                                                                                   "remove_constants_rec")
                                                                                  (("2"
                                                                                    (case
                                                                                     "deg(cons1_var`plist) < 1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "eval_atm(cons1_var)(0)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "remove_constants_rec"
                                                                                             -4)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lemma
                                                                 "nth_append[DNF_Atom]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           length_append[DNF_Atom])
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("1"
                                                                                        (simplify)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (replace
                                                                         -3
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           length_append[DNF_Atom])
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               -2)
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 1)
                                                                                (("2"
                                                                                  (simplify)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (case
                                                                                       "length[DNF_Atom]((: cons1_var :)) = 1")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -7 -9)
                                                    (("2"
                                                      (hide -5 -6)
                                                      (("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (replace
                                                           -4
                                                           -1)
                                                          (("2"
                                                            (replace
                                                             -4
                                                             1)
                                                            (("2"
                                                              (lemma
                                                               length_append[DNF_Atom])
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (hide
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6)
                                                                        (("2"
                                                                          (case
                                                                           "length[DNF_Atom]((: cons1_var :)) = 1")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (simplify)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2 3)
                              (("3"
                                (hide -3 -4)
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (expand "remove_constants")
                                    (("3"
                                      (expand "remove_constants_rec")
                                      (("3"
                                        (case
                                         "deg(cons1_var`plist) < 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "eval_atm(cons1_var)(0)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "remove_constants_rec")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "remove_constants_rec")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3)
                      (("2" (skeep)
                        (("2" (hide -2 -3)
                          (("2"
                            (typepred "remove_constants(cons2_var)")
                            (("2" (split -1)
                              (("1"
                                (inst -1 "j")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (typepred
                                     " deg(nth(val(remove_constants(cons2_var)), j)`plist)")
                                    (("1"
                                      (hide -1 -2 -3 -4)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (lemma
                                           "list2array_sound[rat]")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "remove_constants")
                                  (("2"
                                    (expand "remove_constants_rec" -1)
                                    (("2"
                                      (case "deg(cons1_var`plist) < 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "eval_atm(cons1_var)(0)")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma "when_not_none")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst
                                               -1
                                               "cons(cons1_var, null)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 3)
                      (("3" (hide -2 -3)
                        (("3" (expand "remove_constants")
                          (("3" (expand "remove_constants_rec" -1)
                            (("3" (case "deg(cons1_var`plist) < 1")
                              (("1"
                                (assert)
                                (("1"
                                  (case "eval_atm(cons1_var)(0)")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma "when_not_none")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst -1 "cons(cons1_var, null)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4"
                      (case "length(val(remove_constants(cons2_var))) = 0")
                      (("1" (hide 1)
                        (("1" (lemma "eval_remove_constants")
                          (("1" (inst?)
                            (("1" (split -1)
                              (("1"
                                (hide -5)
                                (("1"
                                  (case
                                   "val(remove_constants(cons2_var)) = null")
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (case
                                       "(FORALL (j:
                                    upto(length(val(remove_constants(cons
                                                                     (cons1_var, cons2_var))))
                                          - 1)):
                            rel5(to_nat(nth(val(remove_constants(cons(cons1_var, cons2_var))),
                                            j)`rel))
                                (polynomial(list2array[rat]
                                                (0)
                                                (nth(val(remove_constants
                                                         (cons(cons1_var, cons2_var))),
                                                     j)`plist),
                                            deg(nth(val(remove_constants
                                                        (cons(cons1_var, cons2_var))),
                                                    j)`plist))
                                           (x),
                                 0))
                          IFF (eval_atm(cons1_var)(x) AND eval_atm_list(null)(x))")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (case
                                           "eval_atm_list(null)(x) = TRUE")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "val(remove_constants(cons(cons1_var, cons2_var))) = (: cons1_var :)")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten 1)
                                                    (("1"
                                                      (inst -1 "0")
                                                      (("1"
                                                        (lemma
                                                         satisfiability_relation)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   -7
                                                                   -8
                                                                   -9
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "remove_constants(cons(cons1_var, cons2_var))")
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "0")
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case "j = 0")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             satisfiability_relation)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "remove_constants(cons(cons1_var, cons2_var))")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "0")
                                                                      (("1"
                                                                        (replace
                                                                         -4
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (typepred
                                                             "j")
                                                            (("2"
                                                              (replace
                                                               -3
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand
                                                   "remove_constants"
                                                   1)
                                                  (("2"
                                                    (expand
                                                     "remove_constants_rec"
                                                     1)
                                                    (("2"
                                                      (case
                                                       "deg(cons1_var`plist) < 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "eval_atm(cons1_var)(0)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "remove_constants"
                                                               -8)
                                                              (("1"
                                                                (expand
                                                                 "remove_constants_rec"
                                                                 -8)
                                                                (("1"
                                                                  (expand
                                                                   "remove_constants"
                                                                   -4)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     -8)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       -8)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "remove_constants"
                                                             -6)
                                                            (("2"
                                                              (expand
                                                               "remove_constants_rec"
                                                               -6)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           relation_remove_constants_rec)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "cons2_var"
                                                             "null"
                                                             "cons1_var")
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "remove_constants"
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "append"
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "append"
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -6)
                                                                  (("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("2"
                                                                      (expand
                                                                       "remove_constants")
                                                                      (("2"
                                                                        (expand
                                                                         "remove_constants_rec"
                                                                         -1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -6)
                                                                (("3"
                                                                  (hide
                                                                   2
                                                                   3
                                                                   4)
                                                                  (("3"
                                                                    (lemma
                                                                     "when_not_none")
                                                                    (("3"
                                                                      (inst?)
                                                                      (("3"
                                                                        (expand
                                                                         "remove_constants"
                                                                         -2)
                                                                        (("3"
                                                                          (expand
                                                                           "remove_constants_rec"
                                                                           -2)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "cons(cons1_var, null)")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand "eval_atm_list")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (skeep)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2 3)
                                    (("2"
                                      (hide -1 -3 -4)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2 3)
                                (("2"
                                  (hide -3 -4)
                                  (("2"
                                    (expand "remove_constants" -1)
                                    (("2"
                                      (expand "remove_constants")
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand
                                           "remove_constants_rec"
                                           -1)
                                          (("2"
                                            (case
                                             "deg(cons1_var`plist) < 1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "eval_atm(cons1_var)(0)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma "when_not_none")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cons(cons1_var, null)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3 4)
                        (("2" (hide -1 -2 -3) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3"
            (typepred "to_nat(nth[DNF_Atom]
                              (val[list[DNF_Atom]](remove_constants(ll)), j1)`rel)")
            (("3" (split 1)
              (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((relation_remove_constants_rec formula-decl nil dnf_strategy nil)
    (list2array_sound formula-decl nil array2list "structures/")
    (when_not_none formula-decl nil dnf_strategy nil)
    (relation_remove_constants formula-decl nil dnf_strategy nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (length_append formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (relation_remove_constants_null formula-decl nil dnf_strategy nil)
    (eval_remove_constants formula-decl nil dnf_strategy nil)
    (relation_remove_constants_single formula-decl nil dnf_strategy
     nil)
    (eval_truth formula-decl nil dnf_strategy nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (satisfiability_relation formula-decl nil dnf_strategy nil)
    (TRUE const-decl "bool" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (polylist const-decl "real" polylist "Sturm/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_constants_rec def-decl "Maybe[list[DNF_Atom]]" dnf_strategy
                          nil)
    (list_induction formula-decl nil list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (subrange type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (list2array def-decl "T" array2list "structures/")
    (to_nat const-decl "upto(5)" poly_system_strategy nil))
   nil)
  (satisfiability_relation_system-3 nil 3770717776
   ("" (induct "ll")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (case "cons2_var = null")
        (("1" (replace -1 1)
          (("1" (expand "eval_atm_list" 1)
            (("1" (expand "eval_atm_list" 1)
              (("1" (hide -2)
                (("1" (replace -1 -4)
                  (("1" (replace -1 -2)
                    (("1"
                      (case "cons(cons1_var, cons2_var) = (: cons1_var :)")
                      (("1" (replace -1 -4)
                        (("1"
                          (case "some?(remove_constants((: cons1_var :)))")
                          (("1" (hide -4)
                            (("1" (lemma "satisfiability_relation")
                              (("1"
                                (hide -1)
                                (("1"
                                  (case
                                   " length(val(remove_constants((: cons1_var :)))) = 1")
                                  (("1"
                                    (inst -6 "0")
                                    (("1"
                                      (lemma satisfiability_relation)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (skeep*)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (case
                                                 "(
         rel5(to_nat(nth(val(remove_constants(cons(cons1_var, null))),
                         0)`rel))
             (polynomial(list2array[rat]
                             (0)
                             (nth(val(remove_constants
                                      (cons(cons1_var, null))),
                                  0)`plist),
                         deg(nth(val(remove_constants
                                     (cons(cons1_var, null))),
                                 0)`plist))
                        (x),
              0))
       IFF eval_atm(cons1_var)(x)")
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (hide
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (flatten 1)
                                                          (("1"
                                                            (reveal -2)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (reveal
                                                                   -6)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "cons[DNF_Atom](cons1_var, null) = (: cons1_var :)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten 1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep 1)
                                                              (("2"
                                                                (typepred
                                                                 "j")
                                                                (("2"
                                                                  (reveal
                                                                   -2)
                                                                  (("2"
                                                                    (case
                                                                     "j = 0")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (hide
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           "remove_constants"
                                                                           -1)
                                                                          (("2"
                                                                            (reveal
                                                                             -4)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               -3)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (case
                                                     "val(remove_constants(cons(cons1_var, null))) = (: cons1_var :)")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (replace -1 -2)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (case
                                                             " nth((: cons1_var :), 0) = cons1_var")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -3)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "nth")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           "remove_constants")
                                                          (("2"
                                                            (expand
                                                             "remove_constants_rec")
                                                            (("2"
                                                              (case
                                                               "deg(cons1_var`plist) < 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "eval_atm(cons1_var)(0)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       -7)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "remove_constants_rec")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -2 -3 -5)
                                      (("2"
                                        (expand "remove_constants" 1)
                                        (("2"
                                          (expand
                                           "remove_constants"
                                           -2)
                                          (("2"
                                            (expand
                                             "remove_constants_rec")
                                            (("2"
                                              (expand
                                               "remove_constants_rec")
                                              (("2"
                                                (case
                                                 "deg(cons1_var`plist) < 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -2 -3 -4) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (lemma "eval_truth")
            (("2" (inst? -1)
              (("2" (replace -1 2)
                (("2" (hide -1)
                  (("2" (split -1)
                    (("1" (inst -1 "x")
                      (("1" (lemma "relation_remove_constants_single")
                        (("1" (inst -1 "cons1_var")
                          (("1" (split -1)
                            (("1"
                              (lemma relation_remove_constants_null)
                              (("1"
                                (inst -1 "cons2_var" "cons1_var")
                                (("1"
                                  (split -1)
                                  (("1"
                                    (lemma "eval_remove_constants")
                                    (("1"
                                      (inst -1 "x" "(: cons1_var :)")
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (case
                                           "eval_atm(cons1_var)(x) = TRUE")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide-all-but 2)
                                              (("1"
                                                (reveal -5)
                                                (("1"
                                                  (reveal -3)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -2 "j")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -1 "j")
                                                        (("2"
                                                          (replace
                                                           -2
                                                           -1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (hide -7)
                                              (("2"
                                                (hide -4 -5 -6)
                                                (("2"
                                                  (replace -3 -1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -5 -6)
                                            (("2"
                                              (hide -1 -2 -3)
                                              (("2"
                                                (expand
                                                 "remove_constants"
                                                 -1)
                                                (("2"
                                                  (expand
                                                   "remove_constants_rec"
                                                   -1)
                                                  (("2"
                                                    (expand
                                                     "remove_constants"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "remove_constants_rec"
                                                       1)
                                                      (("2"
                                                        (case
                                                         "deg(cons1_var`plist) < 1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "eval_atm(cons1_var)(0)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "remove_constants_rec"
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "remove_constants_rec"
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma relation_remove_constants)
                              (("2"
                                (inst -1 "cons2_var" "cons1_var")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (split 2)
                                      (("1"
                                        (flatten 1)
                                        (("1"
                                          (case
                                           "(FORALL (j: upto(length(val(remove_constants(cons2_var))) - 1)):
         rel5(to_nat(nth(val(remove_constants(cons2_var)), j)`rel))
             (polynomial(list2array[rat]
                             (0)
                             (nth(val(remove_constants(cons2_var)),
                                  j)`plist),
                         deg(nth(val(remove_constants(cons2_var)),
                                 j)`plist))
                        (x),
              0))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (hide-all-but -4)
                                                (("1"
                                                  (reveal 1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "length(val(remove_constants(cons
                                                 (cons1_var, cons2_var))))
                      - 1")
                                                    (("1"
                                                      (lemma
                                                       "nth_append[DNF_Atom]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (reveal
                                                               -5)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2)
                                                                (("1"
                                                                  (case
                                                                   "nth(append(val(remove_constants(cons2_var)), (: cons1_var :)),
          length(append(val(remove_constants(cons2_var)), (: cons1_var :)))
           - 1) = cons1_var")
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -3)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -3)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (lemma
                                                                             "satisfiability_relation")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "cons1_var")
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (reveal
                                                                                   -9)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "remove_constants"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "remove_constants_rec"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "eval_atm(cons1_var)(0)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "remove_constants_rec"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               -10)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "remove_constants"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "remove_constants_rec"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (hide
                                                                       -3)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (case
                                                                           "length(append(val(remove_constants(cons2_var)), (: cons1_var :)))
           - 1
           < length(val(remove_constants(cons2_var)))")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               length_append[DNF_Atom])
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               1)
                                                                              (("2"
                                                                                (lemma
                                                                                 length_append[DNF_Atom])
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     -2)
                                                                                    (("2"
                                                                                      (simplify)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "length[DNF_Atom]((: cons1_var :)) - 1 = 0")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -2)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "nth((: cons1_var :), 0) = cons1_var")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "length_append[DNF_Atom]")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "length[DNF_Atom]((: cons1_var :))
           - 1 = 0")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nth")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -1)
                                                              (("2"
                                                                (lemma
                                                                 length_append[DNF_Atom])
                                                                (("2"
                                                                  (reveal
                                                                   -6)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (hide -2 -3 -4 -5 -6)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -1 "j")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred "j")
                                                        (("1"
                                                          (lemma
                                                           nth_append[DNF_Atom])
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (reveal -3)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "length_append[DNF_Atom]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3"
                                              (skeep)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (case
                                             "j < length(val(remove_constants(cons2_var))) - 1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -7 "j")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     nth_append[DNF_Atom])
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "j = length(val(remove_constants(cons(cons1_var, cons2_var))))- 1")
                                                  (("1"
                                                    (postpone)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -7 -9)
                                                    (("2"
                                                      (hide -5 -6)
                                                      (("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (replace
                                                           -4
                                                           -1)
                                                          (("2"
                                                            (replace
                                                             -4
                                                             1)
                                                            (("2"
                                                              (lemma
                                                               length_append[DNF_Atom])
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (hide
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6)
                                                                        (("2"
                                                                          (case
                                                                           "length[DNF_Atom]((: cons1_var :)) = 1")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (simplify)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2 3)
                              (("3"
                                (hide -3 -4)
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (expand "remove_constants")
                                    (("3"
                                      (expand "remove_constants_rec")
                                      (("3"
                                        (case
                                         "deg(cons1_var`plist) < 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "eval_atm(cons1_var)(0)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "remove_constants_rec")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "remove_constants_rec")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3)
                      (("2" (skeep)
                        (("2" (hide -2 -3)
                          (("2"
                            (typepred "remove_constants(cons2_var)")
                            (("2" (split -1)
                              (("1"
                                (inst -1 "j")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (typepred
                                     " deg(nth(val(remove_constants(cons2_var)), j)`plist)")
                                    (("1"
                                      (hide -1 -2 -3 -4)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (lemma
                                           "list2array_sound[rat]")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "remove_constants")
                                  (("2"
                                    (expand "remove_constants_rec" -1)
                                    (("2"
                                      (case "deg(cons1_var`plist) < 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "eval_atm(cons1_var)(0)")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma "when_not_none")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst
                                               -1
                                               "cons(cons1_var, null)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 3)
                      (("3" (hide -2 -3)
                        (("3" (expand "remove_constants")
                          (("3" (expand "remove_constants_rec" -1)
                            (("3" (case "deg(cons1_var`plist) < 1")
                              (("1"
                                (assert)
                                (("1"
                                  (case "eval_atm(cons1_var)(0)")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma "when_not_none")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst -1 "cons(cons1_var, null)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4"
                      (case "length(val(remove_constants(cons2_var))) = 0")
                      (("1" (hide 1)
                        (("1" (lemma "eval_remove_constants")
                          (("1" (inst?)
                            (("1" (split -1)
                              (("1"
                                (hide -5)
                                (("1"
                                  (case
                                   "val(remove_constants(cons2_var)) = null")
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (case
                                       "(FORALL (j:
                 upto(length(val(remove_constants(cons
                                                  (cons1_var, cons2_var))))
                       - 1)):
         rel5(to_nat(nth(val(remove_constants(cons(cons1_var, cons2_var))),
                         j)`rel))
             (polynomial(list2array[rat]
                             (0)
                             (nth(val(remove_constants
                                      (cons(cons1_var, cons2_var))),
                                  j)`plist),
                         deg(nth(val(remove_constants
                                     (cons(cons1_var, cons2_var))),
                                 j)`plist))
                        (x),
              0))
       IFF (eval_atm(cons1_var)(x) AND eval_atm_list(null)(x))")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (case
                                           "eval_atm_list(null)(x) = TRUE")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "val(remove_constants(cons(cons1_var, cons2_var))) = (: cons1_var :)")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten 1)
                                                    (("1"
                                                      (inst -1 "0")
                                                      (("1"
                                                        (lemma
                                                         satisfiability_relation)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   -7
                                                                   -8
                                                                   -9
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "remove_constants(cons(cons1_var, cons2_var))")
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "0")
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case "j = 0")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             satisfiability_relation)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "remove_constants(cons(cons1_var, cons2_var))")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "0")
                                                                      (("1"
                                                                        (replace
                                                                         -4
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (typepred
                                                             "j")
                                                            (("2"
                                                              (replace
                                                               -3
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand
                                                   "remove_constants"
                                                   1)
                                                  (("2"
                                                    (expand
                                                     "remove_constants_rec"
                                                     1)
                                                    (("2"
                                                      (case
                                                       "deg(cons1_var`plist) < 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "eval_atm(cons1_var)(0)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "remove_constants"
                                                               -8)
                                                              (("1"
                                                                (expand
                                                                 "remove_constants_rec"
                                                                 -8)
                                                                (("1"
                                                                  (expand
                                                                   "remove_constants"
                                                                   -4)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     -8)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       -8)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "remove_constants"
                                                             -6)
                                                            (("2"
                                                              (expand
                                                               "remove_constants_rec"
                                                               -6)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           relation_remove_constants_rec)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "cons2_var"
                                                             "null"
                                                             "cons1_var")
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "remove_constants"
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "append"
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "append"
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -6)
                                                                  (("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("2"
                                                                      (expand
                                                                       "remove_constants")
                                                                      (("2"
                                                                        (expand
                                                                         "remove_constants_rec"
                                                                         -1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -6)
                                                                (("3"
                                                                  (hide
                                                                   2
                                                                   3
                                                                   4)
                                                                  (("3"
                                                                    (lemma
                                                                     "when_not_none")
                                                                    (("3"
                                                                      (inst?)
                                                                      (("3"
                                                                        (expand
                                                                         "remove_constants"
                                                                         -2)
                                                                        (("3"
                                                                          (expand
                                                                           "remove_constants_rec"
                                                                           -2)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "cons(cons1_var, null)")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand "eval_atm_list")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (skeep)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2 3)
                                    (("2"
                                      (hide -1 -3 -4)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2 3)
                                (("2"
                                  (hide -3 -4)
                                  (("2"
                                    (expand "remove_constants" -1)
                                    (("2"
                                      (expand "remove_constants")
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand
                                           "remove_constants_rec"
                                           -1)
                                          (("2"
                                            (case
                                             "deg(cons1_var`plist) < 1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "eval_atm(cons1_var)(0)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma "when_not_none")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cons(cons1_var, null)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3 4)
                        (("2" (hide -1 -2 -3) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3"
            (typepred "to_nat(nth[DNF_Atom]
                          (val[list[DNF_Atom]](remove_constants(ll)), j1)`rel)")
            (("3" (split 1)
              (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (satisfiability_relation_system-2 nil 3770717500
   ("" (induct "ll")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (case "cons2_var = null")
        (("1" (replace -1 1)
          (("1" (expand "eval_atm_list" 1)
            (("1" (expand "eval_atm_list" 1)
              (("1" (hide -2)
                (("1" (replace -1 -4)
                  (("1" (replace -1 -2)
                    (("1"
                      (case "cons(cons1_var, cons2_var) = (: cons1_var :)")
                      (("1" (replace -1 -4)
                        (("1"
                          (case "some?(remove_constants((: cons1_var :)))")
                          (("1" (hide -4)
                            (("1" (lemma "satisfiability_relation")
                              (("1"
                                (hide -1)
                                (("1"
                                  (case
                                   " length(val(remove_constants((: cons1_var :)))) = 1")
                                  (("1"
                                    (inst -6 "0")
                                    (("1"
                                      (lemma satisfiability_relation)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "j")
                                                  (("1"
                                                    (case "j = 0")
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (case
                                                         "(eval_atm(nth(val(remove_constants(cons(cons1_var, null))), 0))(x)) IFF eval_atm(cons1_var)(x)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide
                                                               -3
                                                               -4)
                                                              (("2"
                                                                (case
                                                                 "val(remove_constants(cons(cons1_var, null))) = (: cons1_var :)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (hide
                                                                       -4
                                                                       -6)
                                                                      (("2"
                                                                        (expand
                                                                         "remove_constants")
                                                                        (("2"
                                                                          (expand
                                                                           "remove_constants_rec")
                                                                          (("2"
                                                                            (case
                                                                             "deg(cons1_var`plist) < 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "eval_atm(cons1_var)(0)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "remove_constants_rec"
                                                                                     -6)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       -6)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove_constants_rec"
                                                                                 2)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (hide -3)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (replace
                                                             -4
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               -1)
                                                              (("2"
                                                                (simplify)
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   -7)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -2 -3 -5)
                                      (("2"
                                        (expand "remove_constants" 1)
                                        (("2"
                                          (expand
                                           "remove_constants"
                                           -2)
                                          (("2"
                                            (expand
                                             "remove_constants_rec")
                                            (("2"
                                              (expand
                                               "remove_constants_rec")
                                              (("2"
                                                (case
                                                 "deg(cons1_var`plist) < 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -2 -3 -4) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (lemma "eval_truth")
            (("2" (inst? -1)
              (("2" (replace -1 2)
                (("2" (hide -1) (("2" (postpone) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3"
            (typepred "to_nat(nth[DNF_Atom]
                      (val[list[DNF_Atom]](remove_constants(ll)), j1)`rel)")
            (("3" (split 1)
              (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (satisfiability_relation_system-1 nil 3770657146
   ("" (induct "ll")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (case "cons2_var = null")
        (("1" (replace -1 1)
          (("1" (expand "eval_atm_list" 1)
            (("1" (expand "eval_atm_list" 1)
              (("1" (hide -2)
                (("1" (replace -1 -4)
                  (("1" (replace -1 -2)
                    (("1"
                      (case "cons(cons1_var, cons2_var) = (: cons1_var :)")
                      (("1" (replace -1 -4)
                        (("1"
                          (case "some?(remove_constants((: cons1_var :)))")
                          (("1" (hide -4)
                            (("1" (lemma "satisfiability_relation")
                              (("1"
                                (hide -1)
                                (("1"
                                  (case
                                   " length(val(remove_constants((: cons1_var :)))) = 1")
                                  (("1"
                                    (inst -6 "0")
                                    (("1"
                                      (lemma satisfiability_relation)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "j")
                                                  (("1"
                                                    (case "j = 0")
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (case
                                                         "(eval_atm(nth(val(remove_constants(cons(cons1_var, null))), 0))(x)) IFF eval_atm(cons1_var)(x)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide
                                                               -3
                                                               -4)
                                                              (("2"
                                                                (case
                                                                 "val(remove_constants(cons(cons1_var, null))) = (: cons1_var :)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (hide
                                                                       -4
                                                                       -6)
                                                                      (("2"
                                                                        (expand
                                                                         "remove_constants")
                                                                        (("2"
                                                                          (expand
                                                                           "remove_constants_rec")
                                                                          (("2"
                                                                            (case
                                                                             "deg(cons1_var`plist) < 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "eval_atm(cons1_var)(0)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "remove_constants_rec"
                                                                                     -6)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       -6)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove_constants_rec"
                                                                                 2)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (hide -3)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (replace
                                                             -4
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               -1)
                                                              (("2"
                                                                (simplify)
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   -7)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -2 -3 -5)
                                      (("2"
                                        (expand "remove_constants" 1)
                                        (("2"
                                          (expand
                                           "remove_constants"
                                           -2)
                                          (("2"
                                            (expand
                                             "remove_constants_rec")
                                            (("2"
                                              (expand
                                               "remove_constants_rec")
                                              (("2"
                                                (case
                                                 "deg(cons1_var`plist) < 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -2 -3 -4) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (split -1)
              (("1" (postpone) nil nil) ("2" (postpone) nil nil)
               ("3" (hide 3 -3)
                (("3" (expand "remove_constants")
                  (("3" (expand "remove_constants_rec" -1)
                    (("3" (case "deg(cons1_var`plist) < 1")
                      (("1" (assert)
                        (("1" (case "eval_atm(cons1_var)(0)")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "when_not_none")
                          (("2"
                            (inst -1 "cons2_var"
                             "cons(cons1_var, null)" "null")
                            (("2" (split -1)
                              (("1" (propax) nil nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide -3 3)
                (("4" (expand "remove_constants")
                  (("4" (expand "remove_constants_rec" -2)
                    (("4" (case "deg(cons1_var`plist) < 1")
                      (("1" (assert)
                        (("1" (case "eval_atm(cons1_var)(0)")
                          (("1" (assert) nil nil)
                           ("2" (expand "remove_constants_rec" -2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma relation_remove_constants_rec)
                          (("2" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3"
            (typepred "to_nat(nth[DNF_Atom]
                  (val[list[DNF_Atom]](remove_constants(ll)), j1)`rel)")
            (("3" (split 1)
              (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (conj_to_tarski_sound 0
  (conj_to_tarski_sound-1 nil 3770653842
   ("" (skeep)
    (("" (expand "conj_to_tarski")
      (("" (case "remove_constants(ll) = None")
        (("1" (assert)
          (("1" (lemma eval_remove_constants_none)
            (("1" (inst?)
              (("1" (split -1)
                (("1" (hide -2)
                  (("1" (skeep -2)
                    (("1" (inst -1 "x") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (case "length(val(remove_constants(ll))) = 0")
            (("1" (assert)
              (("1" (lemma "eval_remove_constants")
                (("1" (inst?)
                  (("1" (inst -1 "0")
                    (("1" (split -1)
                      (("1" (inst 2 "0")
                        (("1" (replace 2 -1)
                          (("1" (grind)
                            (("1" (expand "eval_atm_list")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma tarski_def)
                (("2" (inst?)
                  (("1" (lemma satisfiability_relation_system)
                    (("1" (inst? -1)
                      (("1" (split -1)
                        (("1"
                          (case " tarski(length(val(remove_constants(ll))) - 1,
             LAMBDA (j: nat):
               IF j <= length(val(remove_constants(ll))) - 1
                 THEN list2array[rat]
                          (0)(nth(val(remove_constants(ll)), j)`plist)
               ELSE LAMBDA (i: nat) -> rat: 0
               ENDIF,
             LAMBDA (j: nat):
               IF j <= length(val(remove_constants(ll))) - 1
                 THEN deg(nth(val(remove_constants(ll)), j)`plist)
               ELSE 0
               ENDIF,
             LAMBDA (j: nat):
               IF j <= length(val(remove_constants(ll))) - 1
                 THEN to_nat(nth(val(remove_constants(ll)), j)`rel)
               ELSE 0
               ENDIF) IFF (EXISTS (x: real): (FORALL (j: upto(length(val(remove_constants(ll))) - 1)): rel5(to_nat(nth(val(remove_constants(ll)), j)`rel)) (polynomial(list2array[rat] (0) (nth(val(remove_constants(ll)), j)`plist), deg(nth(val(remove_constants(ll)), j)`plist)) (x), 0)))")
                          (("1" (hide -3)
                            (("1" (split 3)
                              (("1"
                                (flatten 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep -2)
                                    (("1"
                                      (inst -3 "x")
                                      (("1"
                                        (inst 1 "x")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (skeep -1)
                                    (("2"
                                      (hide 1)
                                      (("2"
                                        (inst -2 "x")
                                        (("2"
                                          (inst 1 "x")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 4)
                            (("2" (split -2)
                              (("1"
                                (hide -2)
                                (("1"
                                  (case
                                   "(EXISTS (x: real):
          FORALL (j_1: upto(length(val(remove_constants(ll))) - 1)):
            rel5(IF j_1 <= length(val(remove_constants(ll))) - 1
                   THEN to_nat(nth(val(remove_constants(ll)), j_1)`rel)
                 ELSE 0
                 ENDIF)
                (polynomial(IF j_1 <= length(val(remove_constants(ll))) - 1
                              THEN list2array[rat]
                                       (0)
                                       (nth
                                        (val(remove_constants(ll)),
                                         j_1)`plist)
                            ELSE LAMBDA (i: nat) -> rat: 0
                            ENDIF,
                            IF j_1 <= length(val(remove_constants(ll))) - 1
                              THEN deg(nth
                                       (val(remove_constants(ll)),
                                        j_1)`plist)
                            ELSE 0
                            ENDIF)
                           (x),
                 0)) IFF (EXISTS (x: real):
          (FORALL (j: upto(length(val(remove_constants(ll))) - 1)):
             rel5(to_nat(nth(val(remove_constants(ll)), j)`rel))
                 (polynomial(list2array[rat]
                                 (0)
                                 (nth(val(remove_constants(ll)), j)`plist),
                             deg(nth(val(remove_constants(ll)), j)`plist))
                            (x),
                  0)))")
                                  (("1"
                                    (assert)
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (flatten 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "x")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -1 "j")
                                                (("1"
                                                  (typepred "j")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten 1)
                                        (("2"
                                          (skeep -1)
                                          (("2"
                                            (inst 1 "x")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -1 "j_1")
                                                (("2"
                                                  (typepred "j_1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (skeep)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred
                                         "remove_constants(ll)")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst -1 "j_1")
                                            (("1"
                                              (typepred
                                               "deg(nth(val(remove_constants(ll)), j_1)`plist) ")
                                              (("1"
                                                (hide -1 -2 -3 -4)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2 -4)
                                                    (("1"
                                                      (lemma
                                                       list2array_sound[rat])
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 -2 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (typepred
                                           "remove_constants(ll)")
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -1 "j_1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (hide 2 3)
                              (("3"
                                (hide -1 -2)
                                (("3"
                                  (skeep)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (hide -2)
                            (("5" (hide 4)
                              (("5"
                                (hide -1)
                                (("5"
                                  (skeep)
                                  (("5"
                                    (typepred "remove_constants(ll)")
                                    (("5"
                                      (split -1)
                                      (("1"
                                        (inst -1 "j_1")
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (typepred
                                             "deg(nth(val(remove_constants(ll)), j_1)`plist)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -2 -3 -4)
                                                (("1"
                                                  (lemma
                                                   "list2array_sound[rat]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (hide 2 3 4)
                            (("6" (hide-all-but 1)
                              (("6" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 4 -1)
                          (("2" (typepred "remove_constants(ll)")
                            (("2" (split -1)
                              (("1"
                                (skeep 1)
                                (("1"
                                  (inst -1 "j")
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (typepred
                                       "deg(nth(val(remove_constants(ll)), j)`plist) ")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -2 -3 -4)
                                          (("1"
                                            (lemma
                                             "list2array_sound[rat]")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -1 2 4) (("3" (assert) nil nil))
                          nil)
                         ("4" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3 4)
                    (("2" (skeep)
                      (("2"
                        (typepred "to_nat(nth[DNF_Atom]
                  (val[list[DNF_Atom]](remove_constants(ll)), j)`rel)")
                        (("1" (grind) nil nil)
                         ("2"
                          (typepred "to_nat(nth[DNF_Atom]
                  (val[list[DNF_Atom]](remove_constants(ll)), j)`rel)")
                          (("1" (grind) nil nil)
                           ("2"
                            (typepred "to_nat(nth[DNF_Atom]
                  (val[list[DNF_Atom]](remove_constants(ll)), j)`rel)")
                            (("1" (grind) nil nil)
                             ("2"
                              (typepred "to_nat(nth[DNF_Atom]
                  (val[list[DNF_Atom]](remove_constants(ll)), j)`rel)")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2 3 4) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (conj_to_tarski const-decl "bool" dnf_strategy nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (to_nat const-decl "upto(5)" poly_system_strategy nil)
    (subrange type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (list2array def-decl "T" array2list "structures/")
    (tarski const-decl "bool" poly_system_strategy nil)
    (rel5 const-decl "bool" preprocessing_univariate nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (list2array_sound formula-decl nil array2list "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (satisfiability_relation_system formula-decl nil dnf_strategy nil)
    (tarski_def formula-decl nil poly_system_strategy nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (polylist const-decl "real" polylist "Sturm/")
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eval_remove_constants formula-decl nil dnf_strategy nil)
    (eval_remove_constants_none formula-decl nil dnf_strategy nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (Maybe type-decl nil Maybe "structures/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (deg const-decl "{d: below(length(pl)) |
   (d > 0 IFF EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0) AND
    (d > 0 IMPLIES
      (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
     AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (remove_constants const-decl "{m: Maybe[list[DNF_Atom]] |
   some?(m) IMPLIES
    FORALL (i: below(length(val(m)))): deg(nth(val(m), i)`plist) >= 1}"
                      dnf_strategy nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (None adt-constructor-decl "(none?)" Maybe "structures/"))
   shostak))
 (dnf_eval_truth 0
  (dnf_eval_truth-1 nil 3770737292
   ("" (induct "d")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "x")
          (("2" (expand "eval" 1)
            (("2" (split 1)
              (("1" (flatten 1)
                (("1" (split -1)
                  (("1" (inst 1 "0")
                    (("1" (expand "nth" 1) (("1" (propax) nil nil))
                      nil)
                     ("2" (assert) (("2" (grind) nil nil)) nil))
                    nil)
                   ("2" (assert)
                    (("2" (skeep)
                      (("2" (inst 1 "i + 1")
                        (("1" (grind) nil nil)
                         ("2" (typepred "i")
                          (("2" (hide -2 -3) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten 1)
                (("2" (skeep -1)
                  (("2" (typepred "i")
                    (("2" (case "i = 0")
                      (("1" (replace -1 -3)
                        (("1" (hide-all-but -3)
                          (("1" (reveal 1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -3)
                        (("2" (split -3)
                          (("1" (propax) nil nil)
                           ("2" (inst 1 "i - 1")
                            (("1" (grind) nil nil)
                             ("2" (hide -2)
                              (("2"
                                (hide 3 4)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (rel_to_tarski_sound 0
  (rel_to_tarski_sound-1 nil 3770736851
   ("" (skeep)
    (("" (expand "rel_to_tarski")
      (("" (lemma "dnf_preserves_truth")
        (("" (inst?)
          ((""
            (case "(EXISTS (i: below(length(dnf(rel)))):
         conj_to_tarski(nth(dnf(rel), i)))
       IFF EXISTS (x: real): eval(dnf(rel))(x)")
            (("1" (assert)
              (("1" (ground)
                (("1" (skeep -3)
                  (("1" (inst -4 "x")
                    (("1" (inst 1 "x") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (skeep -1)
                  (("2" (inst -2 "x")
                    (("2" (inst 2 "x") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma dnf_eval_truth)
                (("2" (split 1)
                  (("1" (flatten 1)
                    (("1" (skeep -1)
                      (("1" (lemma "conj_to_tarski_sound")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (skeep -1)
                              (("1"
                                (inst -3 "dnf(rel)" "x")
                                (("1"
                                  (inst 1 "x")
                                  (("1"
                                    (assert)
                                    (("1" (inst 2 "i") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten 1)
                    (("2" (skeep -1)
                      (("2" (inst -2 "dnf(rel)" "x")
                        (("2" (assert)
                          (("2" (skeep -2)
                            (("2" (lemma conj_to_tarski_sound)
                              (("2"
                                (inst?)
                                (("2"
                                  (inst 1 "i")
                                  (("2"
                                    (assert)
                                    (("2" (inst 1 "x") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel_to_tarski const-decl "bool" dnf_strategy nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (conj_to_tarski_sound formula-decl nil dnf_strategy nil)
    (dnf_eval_truth formula-decl nil dnf_strategy nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (dnf const-decl "DNF" dnf_polynomials nil)
    (below type-eq-decl nil naturalnumbers nil)
    (conj_to_tarski const-decl "bool" dnf_strategy nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (dnf_preserves_truth formula-decl nil dnf_polynomials nil))
   shostak))
 (example_odd_1_TCC1 0
  (example_odd_1_TCC1-1 nil 3771607834 ("" (subtype-tcc) nil nil) nil
   nil
   (example_odd_1 subtype "(27)"
    "{i: integers.int | booleans.OR(dnf_strategy.x /= 0, reals.>=(i, 0))}")))
 (example_odd_1_TCC2 0
  (example_odd_1_TCC2-1 nil 3771607834 ("" (subtype-tcc) nil nil) nil
   nil
   (example_odd_1 subtype "2"
    "{i: integers.int | booleans.OR(dnf_strategy.x /= 0, reals.>=(i, 0))}")))
 (example_odd_1_TCC3 0
  (example_odd_1_TCC3-1 nil 3771607834 ("" (subtype-tcc) nil nil) nil
   nil
   (example_odd_1 subtype "22"
    "{i: integers.int | booleans.OR(dnf_strategy.x /= 0, reals.>=(i, 0))}")))
 (example_odd_1 0
  (example_odd_1-1 nil 3771607836 ("" (dnftarski) nil nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
            polylist "Sturm/")
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
          polylist "Sturm/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy nil)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy nil)
    (PREL adt-constructor-decl
     "[[Polylist, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (polylist_monom formula-decl nil polylist "Sturm/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (pl__78 skolem-const-decl "{pql: Polylist |
   FORALL (x: real):
     polylist(pql)(x) =
      polylist(pconst(1200000))(x) +
       polylist(psum(psum(pmonom(1, (27)), pmonom(312, 2)),
                     pmonom(513, 22)))
               (x)}" dnf_strategy nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (rel_to_tarski const-decl "bool" dnf_strategy nil)
    (rel_to_tarski_sound formula-decl nil dnf_strategy nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff "Sturm/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)))


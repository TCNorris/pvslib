(dnf_polynomials
 (eval_TCC1 0
  (eval_TCC1-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe1)" "nil")))
 (eval_TCC2 0
  (eval_TCC2-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe2)" "nil")))
 (eval_TCC3 0
  (eval_TCC3-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe1)" "nil")))
 (eval_TCC4 0
  (eval_TCC4-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe2)" "nil")))
 (eval_TCC5 0
  (eval_TCC5-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe)" "nil")))
 (eval_TCC6 0
  (eval_TCC6-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe1)" "nil")))
 (eval_TCC7 0
  (eval_TCC7-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe2)" "nil")))
 (eval_TCC8 0
  (eval_TCC9-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe2)" "nil")))
 (eval_TCC9 0
  (eval_TCC8-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe1)" "nil")))
 (eval_TCC10 0
  (eval_TCC10-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe1)" "nil")))
 (eval_TCC11 0
  (eval_TCC11-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe2)" "nil")))
 (eval_TCC12 0
  (eval_TCC14-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe1)" "nil")))
 (eval_TCC13 0
  (eval_TCC12-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe2)" "nil")))
 (eval_TCC14 0
  (eval_TCC15-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil (eval termination "dnf_polynomials.eval(dnf_polynomials.pe3)" "nil")))
 (eval_atm_list_TCC1 0
  (eval_atm_list_TCC1-1 nil 3770397240 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil))
   nil
   (eval_atm_list subtype "dnf_polynomials.dnf_atm_lst"
    "(list_adt[DNF_Atom].cons?)")))
 (eval_atm_list_TCC2 0
  (eval_atm_list_TCC2-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (length def-decl "nat" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (eval_atm_list termination
    "dnf_polynomials.eval_atm_list(list_adt[DNF_Atom].cdr(dnf_polynomials.dnf_atm_lst))"
    "nil")))
 (eval_TCC15 0
  (eval_TCC15-1 nil 3769959726 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (DNF type-eq-decl nil dnf_polynomials nil))
   nil
   (eval subtype "dnf_polynomials.dnf" "(list_adt[list[DNF_Atom]].cons?)")))
 (eval_TCC16 0
  (eval_TCC16-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (eval termination
         "dnf_polynomials.eval(list_adt[list[DNF_Atom]].cdr(dnf_polynomials.dnf))"
         "nil")))
 (degr_rec_TCC1 0
  (degr_rec_TCC1-1 nil 3772801120 ("" (subtype-tcc) nil nil) nil nil
   (degr_rec subtype "0" "naturalnumbers.upto(dnf_polynomials.deg)")))
 (degr_rec_TCC2 0
  (degr_rec_TCC2-1 nil 3772801120 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (degr_rec subtype "dnf_polynomials.deg"
    "naturalnumbers.upto(dnf_polynomials.deg)")))
 (degr_rec_TCC3 0
  (degr_rec_TCC3-1 nil 3772801120 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (/= const-decl "boolean" notequal nil))
   nil (degr_rec subtype "(number_fields.-)(dnf_polynomials.deg, 1)" "nat")))
 (degr_rec_TCC4 0
  (degr_rec_TCC4-1 nil 3772801120 ("" (termination-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (degr_rec termination
    "dnf_polynomials.degr_rec(dnf_polynomials.polyn, (number_fields.-)(dnf_polynomials.deg, 1))"
    "nil")))
 (degr_rec_TCC5 0
  (degr_rec_TCC5-1 nil 3772801120 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (/= const-decl "boolean" notequal nil))
   nil
   (degr_rec subtype
    "dnf_polynomials.degr_rec(dnf_polynomials.polyn, (number_fields.-)(dnf_polynomials.deg, 1))"
    "naturalnumbers.upto(dnf_polynomials.deg)")))
 (degr_rec_lemma 0
  (degr_rec_lemma-1 nil 3772801948
   ("" (skeep)
    (("" (induct "deg")
      (("1" (skeep) (("1" (expand "degr_rec") (("1" (propax) nil nil)) nil))
        nil)
       ("2" (assert)
        (("2" (skeep)
          (("2" (skeep)
            (("2" (inst -1 "x")
              (("2" (expand "degr_rec" 1)
                (("2" (case "polyn(1 + j) /= 0")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (case "polyn(1 + j) = 0")
                      (("1" (hide 1)
                        (("1" (lemma "poly_reduce_degree")
                          (("1" (inst -1 "polyn" "j" "1 + j" "x")
                            (("1" (split -1)
                              (("1" (assert) nil nil) ("2" (assert) nil nil)
                               ("3" (skeep)
                                (("3" (typepred "ii") (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (rat nonempty-type-eq-decl nil rationals nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_reduce_degree formula-decl nil polynomials reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (degr_rec_change_function 0
  (degr_rec_change_function-1 nil 3772802502
   ("" (skeep)
    (("" (skeep)
      (("" (induct "deg")
        (("1" (expand "degr_rec") (("1" (propax) nil nil)) nil)
         ("2" (skeep)
          (("2" (expand "degr_rec" 1)
            (("2" (case "NOT change_function(polyn, re)(1 + j) = 0")
              (("1" (assert)
                (("1" (expand "change_function" 1) (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "change_function" -1) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (change_function const-decl "[nat -> rat]" dnf_polynomials nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (construct_record_TCC1 0
  (construct_record_TCC1-1 nil 3772807183
   ("" (induct "deg")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "degr_rec" -2)
          (("2" (case " polyn(1 + j) = 0")
            (("1" (assert)
              (("1" (inst -2 "polyn" "re")
                (("1" (split -2)
                  (("1" (assert)
                    (("1" (expand "degr_rec" -4) (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "degr_rec" -3)
                (("2" (expand "change_function" -3) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (change_function const-decl "[nat -> rat]" dnf_polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (construct_record subtype
    "(# pn := dnf_polynomials.change_function(dnf_polynomials.polyn, dnf_polynomials.re), d := dnf_polynomials.degr_rec(dnf_polynomials.polyn, dnf_polynomials.deg), rel := dnf_polynomials.trel #)"
    "DNF_Atom")))
 (depth_TCC1 0
  (depth_TCC1-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil
   (depth termination "dnf_polynomials.depth(dnf_polynomials.pe2)" "nil")))
 (depth_TCC2 0
  (depth_TCC2-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil
   (depth termination "dnf_polynomials.depth(dnf_polynomials.pe2)" "nil")))
 (depth_TCC3 0
  (depth_TCC3-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil
   (depth termination "dnf_polynomials.depth(dnf_polynomials.pe2)" "nil")))
 (depth_TCC4 0
  (depth_TCC5-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil
   (depth termination "dnf_polynomials.depth(dnf_polynomials.pe1)" "nil")))
 (depth_TCC5 0
  (depth_TCC4-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil
   (depth termination "dnf_polynomials.depth(dnf_polynomials.pe2)" "nil")))
 (depth_TCC6 0
  (depth_TCC7-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil
   (depth termination "dnf_polynomials.depth(dnf_polynomials.pe3)" "nil")))
 (abs_nnf_rel_preserves_truth 0
  (abs_nnf_rel_preserves_truth-10 nil 3772553711
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "abs_nnf_rel")
              (("1" (expand "eval")
                (("1" (expand "eval")
                  (("1" (flatten 1)
                    (("1" (expand "eval_rel")
                      (("1" (expand "abs")
                        (("1" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "abs_nnf_rel")
              (("2" (expand "eval")
                (("2" (expand "eval")
                  (("2" (flatten 1)
                    (("2" (expand "eval_rel")
                      (("2" (expand "abs")
                        (("2" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "abs_nnf_rel")
              (("3" (expand "eval")
                (("3" (expand "eval")
                  (("3" (flatten 1)
                    (("3" (expand "eval_rel")
                      (("3" (expand "abs")
                        (("3" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "abs_nnf_rel")
              (("4" (expand "eval")
                (("4" (expand "eval")
                  (("4" (flatten 1)
                    (("4" (expand "eval_rel")
                      (("4" (expand "abs")
                        (("4" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "abs_nnf_rel")
              (("5" (expand "eval")
                (("5" (expand "eval")
                  (("5" (flatten 1)
                    (("5" (expand "eval_rel")
                      (("5" (expand "abs")
                        (("5" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (expand "abs_nnf_rel")
              (("6" (expand "eval")
                (("6" (expand "eval")
                  (("6" (flatten 1)
                    (("6" (expand "eval_rel")
                      (("6" (expand "abs")
                        (("6" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("7" (expand "abs_nnf_rel")
              (("7" (expand "eval")
                (("7" (expand "eval")
                  (("7" (flatten 1)
                    (("7" (expand "eval_rel")
                      (("7" (expand "abs")
                        (("7" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("8" (expand "abs_nnf_rel")
              (("8" (expand "eval")
                (("8" (expand "eval")
                  (("8" (flatten 1)
                    (("8" (expand "eval_rel")
                      (("8" (expand "abs")
                        (("8" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("9" (expand "abs_nnf_rel")
              (("9" (expand "eval")
                (("9" (expand "eval")
                  (("9" (flatten 1)
                    (("9" (expand "eval_rel")
                      (("9" (expand "abs")
                        (("9" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("10" (expand "abs_nnf_rel")
              (("10" (expand "eval")
                (("10" (expand "eval")
                  (("10" (flatten 1)
                    (("10" (expand "eval_rel")
                      (("10" (expand "abs")
                        (("10" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("11" (expand "abs_nnf_rel")
              (("11" (expand "eval")
                (("11" (expand "eval")
                  (("11" (flatten 1)
                    (("11" (expand "eval_rel")
                      (("11" (expand "abs")
                        (("11" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("12" (expand "abs_nnf_rel")
              (("12" (expand "eval")
                (("12" (expand "eval")
                  (("12" (flatten 1)
                    (("12" (expand "eval_rel")
                      (("12" (expand "abs")
                        (("12" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (< const-decl "bool" reals nil) (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TarskiRel_induction formula-decl nil poly_system_strategy nil)
    (PABS adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PABS?)]" PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (abs_nnf_rel const-decl "PolyRelExpr" dnf_polynomials nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TarskiRel type-decl nil poly_system_strategy nil))
   nil)
  (abs_nnf_rel_preserves_truth-9 nil 3772553655
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "abs_nnf_rel")
              (("1" (expand "eval")
                (("1" (expand "eval")
                  (("1" (flatten 1)
                    (("1" (expand "eval_rel")
                      (("1" (expand "abs")
                        (("1" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "abs_nnf_rel")
              (("2" (expand "eval")
                (("2" (expand "eval")
                  (("2" (flatten 1)
                    (("2" (expand "eval_rel")
                      (("2" (expand "abs")
                        (("2" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "abs_nnf_rel")
              (("3" (expand "eval")
                (("3" (expand "eval")
                  (("3" (flatten 1)
                    (("3" (expand "eval_rel")
                      (("3" (expand "abs")
                        (("3" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "abs_nnf_rel")
              (("4" (expand "eval")
                (("4" (expand "eval")
                  (("4" (flatten 1)
                    (("4" (expand "eval_rel")
                      (("4" (expand "abs")
                        (("4" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "abs_nnf_rel")
              (("5" (expand "eval")
                (("5" (expand "eval")
                  (("5" (flatten 1)
                    (("5" (expand "eval_rel")
                      (("5" (expand "abs")
                        (("5" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (expand "abs_nnf_rel")
              (("6" (expand "eval")
                (("6" (expand "eval")
                  (("6" (flatten 1)
                    (("6" (expand "eval_rel")
                      (("6" (expand "abs")
                        (("6" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("7" (expand "abs_nnf_rel")
              (("7" (expand "eval")
                (("7" (expand "eval")
                  (("7" (flatten 1)
                    (("7" (expand "eval_rel")
                      (("7" (expand "abs")
                        (("7" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("8" (postpone) nil nil) ("9" (postpone) nil nil)
             ("10" (postpone) nil nil) ("11" (postpone) nil nil)
             ("12" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (abs_nnf_rel_preserves_truth-8 nil 3772553612
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "abs_nnf_rel")
              (("1" (expand "eval")
                (("1" (expand "eval")
                  (("1" (flatten 1)
                    (("1" (expand "eval_rel")
                      (("1" (expand "abs")
                        (("1" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "abs_nnf_rel")
              (("2" (expand "eval")
                (("2" (expand "eval")
                  (("2" (flatten 1)
                    (("2" (expand "eval_rel")
                      (("2" (expand "abs")
                        (("2" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "abs_nnf_rel")
              (("3" (expand "eval")
                (("3" (expand "eval")
                  (("3" (flatten 1)
                    (("3" (expand "eval_rel")
                      (("3" (expand "abs")
                        (("3" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "abs_nnf_rel")
              (("4" (expand "eval")
                (("4" (expand "eval")
                  (("4" (flatten 1)
                    (("4" (expand "eval_rel")
                      (("4" (expand "abs")
                        (("4" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "abs_nnf_rel")
              (("5" (expand "eval")
                (("5" (expand "eval")
                  (("5" (flatten 1)
                    (("5" (expand "eval_rel")
                      (("5" (expand "abs")
                        (("5" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (expand "abs_nnf_rel")
              (("6" (expand "eval")
                (("6" (expand "eval")
                  (("6" (flatten 1)
                    (("6" (expand "eval_rel")
                      (("6" (expand "abs")
                        (("6" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("7" (postpone) nil nil) ("8" (postpone) nil nil)
             ("9" (postpone) nil nil) ("10" (postpone) nil nil)
             ("11" (postpone) nil nil) ("12" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (abs_nnf_rel_preserves_truth-7 nil 3772553584
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "abs_nnf_rel")
              (("1" (expand "eval")
                (("1" (expand "eval")
                  (("1" (flatten 1)
                    (("1" (expand "eval_rel")
                      (("1" (expand "abs")
                        (("1" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "abs_nnf_rel")
              (("2" (expand "eval")
                (("2" (expand "eval")
                  (("2" (flatten 1)
                    (("2" (expand "eval_rel")
                      (("2" (expand "abs")
                        (("2" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (postpone) nil nil) ("4" (postpone) nil nil)
             ("5" (postpone) nil nil) ("6" (postpone) nil nil)
             ("7" (postpone) nil nil) ("8" (postpone) nil nil)
             ("9" (postpone) nil nil) ("10" (postpone) nil nil)
             ("11" (postpone) nil nil) ("12" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (abs_nnf_rel_preserves_truth-6 nil 3770461721
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "abs_nnf_rel")
              (("1" (expand "eval")
                (("1" (expand "eval")
                  (("1" (flatten 1)
                    (("1" (expand "eval_rel")
                      (("1" (expand "abs")
                        (("1" (case " polynomial(pn, d)(x) < 0")
                          (("1" (assert) (("1" (assert) nil nil)) nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil) ("5" (postpone) nil nil)
             ("6" (postpone) nil nil) ("7" (postpone) nil nil)
             ("8" (postpone) nil nil) ("9" (postpone) nil nil)
             ("10" (postpone) nil nil) ("11" (postpone) nil nil)
             ("12" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (polylist const-decl "real" polylist Sturm)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (TarskiRel_induction formula-decl nil poly_system_strategy nil)
    (PABS adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PABS?)]" PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (TarskiRel type-decl nil poly_system_strategy nil))
   nil)
  (abs_nnf_rel_preserves_truth-5 nil 3770461671
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (induct "rel")
          (("1" (expand "abs_nnf_rel")
            (("1" (expand "eval")
              (("1" (expand "eval")
                (("1" (expand "eval_rel")
                  (("1" (expand "abs")
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "abs_nnf_rel")
            (("2" (expand "eval")
              (("2" (expand "eval")
                (("2" (expand "eval_rel")
                  (("2" (expand "abs")
                    (("2" (ground) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "abs_nnf_rel")
            (("3" (expand "eval")
              (("3" (expand "eval")
                (("3" (expand "eval_rel")
                  (("3" (expand "abs")
                    (("3" (ground)
                      (("1" (grind) (("1" (postpone) nil nil)) nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (expand "abs_nnf_rel")
            (("4" (expand "eval")
              (("4" (expand "eval")
                (("4" (expand "eval_rel")
                  (("4" (expand "abs")
                    (("4" (ground) (("4" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (expand "abs_nnf_rel")
            (("5" (expand "eval")
              (("5" (expand "eval")
                (("5" (expand "eval_rel")
                  (("5" (expand "abs")
                    (("5" (ground) (("5" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (expand "abs_nnf_rel")
            (("6" (expand "eval")
              (("6" (expand "eval")
                (("6" (expand "eval_rel")
                  (("6" (expand "abs")
                    (("6" (ground) (("6" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (expand "abs_nnf_rel")
            (("7" (expand "eval")
              (("7" (expand "eval")
                (("7" (expand "eval_rel")
                  (("7" (expand "abs")
                    (("7" (ground) (("7" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("8" (expand "abs_nnf_rel")
            (("8" (expand "eval")
              (("8" (expand "eval")
                (("8" (expand "eval_rel")
                  (("8" (expand "abs")
                    (("8" (ground)
                      (("1" (grind) (("1" (postpone) nil nil)) nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("9" (postpone) nil nil) ("10" (postpone) nil nil)
           ("11" (postpone) nil nil) ("12" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (abs_nnf_rel_preserves_truth-4 nil 3770461615
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (induct "rel")
          (("1" (expand "abs_nnf_rel")
            (("1" (expand "eval")
              (("1" (expand "eval")
                (("1" (expand "eval_rel")
                  (("1" (expand "abs")
                    (("1" (ground) (("1" (grind) nil)))))))))))))
           ("2" (expand "abs_nnf_rel")
            (("2" (expand "eval")
              (("2" (expand "eval")
                (("2" (expand "eval_rel")
                  (("2" (expand "abs")
                    (("2" (ground) (("2" (grind) nil)))))))))))))
           ("3" (expand "abs_nnf_rel")
            (("3" (expand "eval")
              (("3" (expand "eval")
                (("3" (expand "eval_rel")
                  (("3" (expand "abs")
                    (("3" (ground) (("3" (grind) nil)))))))))))))
           ("4" (expand "abs_nnf_rel")
            (("4" (expand "eval")
              (("4" (expand "eval")
                (("4" (expand "eval_rel")
                  (("4" (expand "abs")
                    (("4" (ground) (("4" (grind) nil)))))))))))))
           ("5" (expand "abs_nnf_rel")
            (("5" (expand "eval")
              (("5" (expand "eval")
                (("5" (expand "eval_rel")
                  (("5" (expand "abs")
                    (("5" (ground) (("5" (grind) nil)))))))))))))
           ("6" (postpone) nil) ("7" (postpone) nil) ("8" (postpone) nil)
           ("9" (postpone) nil) ("10" (postpone) nil) ("11" (postpone) nil)
           ("12" (postpone) nil))))))))
    nil)
   nil nil)
  (abs_nnf_rel_preserves_truth-3 nil 3770461173
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (induct "rel")
          (("1" (expand "abs_nnf_rel")
            (("1" (expand "eval")
              (("1" (expand "eval")
                (("1" (expand "eval_rel")
                  (("1" (expand "abs")
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil)
           ("4" (postpone) nil nil) ("5" (postpone) nil nil)
           ("6" (postpone) nil nil) ("7" (postpone) nil nil)
           ("8" (postpone) nil nil) ("9" (postpone) nil nil)
           ("10" (postpone) nil nil) ("11" (postpone) nil nil)
           ("12" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (abs_nnf_rel_preserves_truth-2 nil 3770461019
   ("" (skeep)
    (("" (skeep)
      (("" (induct "rel")
        (("1" (skeep)
          (("1" (expand "abs_nnf_rel")
            (("1" (expand "eval")
              (("1" (expand "abs")
                (("1" (expand "eval_rel")
                  (("1" (expand "eval")
                    (("1" (expand "eval_rel") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (expand "abs_nnf_rel")
            (("2" (expand "eval")
              (("2" (expand "abs")
                (("2" (expand "eval_rel")
                  (("2" (expand "eval")
                    (("2" (expand "eval_rel") (("2" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "abs_nnf_rel")
            (("3" (expand "eval")
              (("3" (expand "abs")
                (("3" (expand "eval_rel")
                  (("3" (expand "eval")
                    (("3" (expand "eval_rel") (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (expand "abs_nnf_rel")
            (("4" (expand "eval")
              (("4" (expand "abs")
                (("4" (expand "eval_rel")
                  (("4" (expand "eval")
                    (("4" (expand "eval_rel") (("4" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (expand "abs_nnf_rel")
            (("5" (expand "eval")
              (("5" (expand "abs")
                (("5" (expand "eval_rel")
                  (("5" (expand "eval")
                    (("5" (expand "eval_rel") (("5" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (skeep)
          (("6" (expand "abs_nnf_rel")
            (("6" (expand "eval")
              (("6" (expand "abs")
                (("6" (expand "eval_rel")
                  (("6" (expand "eval")
                    (("6" (expand "eval_rel") (("6" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (abs_nnf_rel_preserves_truth-1 nil 3770460790
   ("" (skeep)
    (("" (skeep)
      (("" (induct "rel")
        (("1" (skeep)
          (("1" (expand "abs_nnf_rel")
            (("1" (expand "eval")
              (("1" (expand "abs")
                (("1" (expand "eval_rel")
                  (("1" (expand "eval")
                    (("1" (expand "eval_rel") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep) (("2" (postpone) nil nil)) nil) ("3" (postpone) nil nil)
         ("4" (postpone) nil nil) ("5" (postpone) nil nil)
         ("6" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (abs_nnf_rel_pnot_preserves_truth 0
  (abs_nnf_rel_pnot_preserves_truth-9 "" 3772554279
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "not_eval_rel")
              (("1" (expand "eval")
                (("1" (expand "eval")
                  (("1" (expand "eval_rel") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "not_eval_rel")
              (("2" (expand "eval")
                (("2" (expand "eval")
                  (("2" (expand "eval_rel") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (expand "not_eval_rel")
              (("3" (expand "eval")
                (("3" (expand "eval")
                  (("3" (expand "eval_rel") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (expand "not_eval_rel")
              (("4" (expand "eval")
                (("4" (expand "eval")
                  (("4" (expand "eval_rel") (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("5" (expand "not_eval_rel")
              (("5" (expand "eval")
                (("5" (expand "eval")
                  (("5" (expand "eval_rel") (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (expand "not_eval_rel")
              (("6" (expand "eval")
                (("6" (expand "eval")
                  (("6" (expand "eval_rel") (("6" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (TarskiRel_induction formula-decl nil poly_system_strategy nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (not_eval_rel const-decl "TarskiRel" dnf_polynomials nil)
    (PABS adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PABS?)]" PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TarskiRel type-decl nil poly_system_strategy nil))
   nil)
  (abs_nnf_rel_pnot_preserves_truth-8 "" 3772554261
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "not_eval_rel")
              (("1" (expand "eval")
                (("1" (expand "eval")
                  (("1" (expand "eval_rel") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "not_eval_rel")
              (("2" (expand "eval")
                (("2" (expand "eval")
                  (("2" (expand "eval_rel") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (expand "not_eval_rel")
              (("3" (expand "eval")
                (("3" (expand "eval")
                  (("3" (expand "eval_rel") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (expand "not_eval_rel")
              (("4" (expand "eval")
                (("4" (expand "eval_rel")
                  (("4" (expand "abs")
                    (("4" (case "polynomial(pn, d)(x) < 0")
                      (("1" (assert)
                        (("1" (expand "eval")
                          (("1" (expand "eval_rel")
                            (("1" (expand "abs") (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "eval")
                          (("2" (expand "eval_rel")
                            (("2" (expand "abs") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "not_eval_rel")
              (("5" (expand "eval")
                (("5" (expand "eval")
                  (("5" (expand "eval_rel") (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (expand "not_eval_rel")
              (("6" (expand "eval")
                (("6" (expand "eval")
                  (("6" (expand "eval_rel") (("6" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TarskiRel type-decl nil poly_system_strategy nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PABS adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PABS?)]" PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (TarskiRel_induction formula-decl nil poly_system_strategy nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (polynomial const-decl "[real -> real]" polynomials reals))
   nil)
  (abs_nnf_rel_pnot_preserves_truth-7 "" 3772554246
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "not_eval_rel")
              (("1" (expand "eval")
                (("1" (expand "eval")
                  (("1" (expand "eval_rel") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "not_eval_rel")
              (("2" (expand "eval")
                (("2" (expand "eval")
                  (("2" (expand "eval_rel") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (expand "eval")
              (("3" (expand "eval")
                (("3" (expand "abs")
                  (("3" (case "polynomial(pn, d)(x) < 0")
                    (("1" (assert)
                      (("1" (expand "eval_rel")
                        (("1" (expand "not_eval_rel") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "eval_rel")
                        (("2" (expand "not_eval_rel") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "not_eval_rel")
              (("4" (expand "eval")
                (("4" (expand "eval_rel")
                  (("4" (expand "abs")
                    (("4" (case "polynomial(pn, d)(x) < 0")
                      (("1" (assert)
                        (("1" (expand "eval")
                          (("1" (expand "eval_rel")
                            (("1" (expand "abs") (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "eval")
                          (("2" (expand "eval_rel")
                            (("2" (expand "abs") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "not_eval_rel")
              (("5" (expand "eval")
                (("5" (expand "eval")
                  (("5" (expand "eval_rel") (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (expand "not_eval_rel")
              (("6" (expand "eval")
                (("6" (expand "eval")
                  (("6" (expand "eval_rel") (("6" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TarskiRel type-decl nil poly_system_strategy nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PABS adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PABS?)]" PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (TarskiRel_induction formula-decl nil poly_system_strategy nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil)
  (abs_nnf_rel_pnot_preserves_truth-6 "" 3772554225
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "not_eval_rel")
              (("1" (expand "eval")
                (("1" (expand "eval")
                  (("1" (expand "eval_rel") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "eval")
              (("2" (expand "abs")
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval")
                    (("2" (expand "eval_rel")
                      (("2" (expand "abs")
                        (("2" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "eval")
              (("3" (expand "eval")
                (("3" (expand "abs")
                  (("3" (case "polynomial(pn, d)(x) < 0")
                    (("1" (assert)
                      (("1" (expand "eval_rel")
                        (("1" (expand "not_eval_rel") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "eval_rel")
                        (("2" (expand "not_eval_rel") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "not_eval_rel")
              (("4" (expand "eval")
                (("4" (expand "eval_rel")
                  (("4" (expand "abs")
                    (("4" (case "polynomial(pn, d)(x) < 0")
                      (("1" (assert)
                        (("1" (expand "eval")
                          (("1" (expand "eval_rel")
                            (("1" (expand "abs") (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "eval")
                          (("2" (expand "eval_rel")
                            (("2" (expand "abs") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "not_eval_rel")
              (("5" (expand "eval")
                (("5" (expand "eval")
                  (("5" (expand "eval_rel") (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (expand "not_eval_rel")
              (("6" (expand "eval")
                (("6" (expand "eval")
                  (("6" (expand "eval_rel") (("6" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TarskiRel type-decl nil poly_system_strategy nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PABS adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PABS?)]" PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (TarskiRel_induction formula-decl nil poly_system_strategy nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (polynomial const-decl "[real -> real]" polynomials reals))
   nil)
  (abs_nnf_rel_pnot_preserves_truth-5 "" 3772554205
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "eval")
              (("1" (expand "abs")
                (("1" (expand "not_eval_rel")
                  (("1" (expand "eval")
                    (("1" (expand "eval_rel") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "eval")
              (("2" (expand "abs")
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval")
                    (("2" (expand "eval_rel")
                      (("2" (expand "abs")
                        (("2" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "eval")
              (("3" (expand "eval")
                (("3" (expand "abs")
                  (("3" (case "polynomial(pn, d)(x) < 0")
                    (("1" (assert)
                      (("1" (expand "eval_rel")
                        (("1" (expand "not_eval_rel") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "eval_rel")
                        (("2" (expand "not_eval_rel") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "not_eval_rel")
              (("4" (expand "eval")
                (("4" (expand "eval_rel")
                  (("4" (expand "abs")
                    (("4" (case "polynomial(pn, d)(x) < 0")
                      (("1" (assert)
                        (("1" (expand "eval")
                          (("1" (expand "eval_rel")
                            (("1" (expand "abs") (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "eval")
                          (("2" (expand "eval_rel")
                            (("2" (expand "abs") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "not_eval_rel")
              (("5" (expand "eval")
                (("5" (expand "eval")
                  (("5" (expand "eval_rel") (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (expand "not_eval_rel")
              (("6" (expand "eval")
                (("6" (expand "eval")
                  (("6" (expand "eval_rel") (("6" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TarskiRel type-decl nil poly_system_strategy nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PABS adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PABS?)]" PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (TarskiRel_induction formula-decl nil poly_system_strategy nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil)
  (abs_nnf_rel_pnot_preserves_truth-4 "" 3772553805
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "eval")
              (("1" (expand "abs")
                (("1" (expand "not_eval_rel")
                  (("1" (expand "eval")
                    (("1" (expand "eval_rel") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "eval")
              (("2" (expand "abs")
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval")
                    (("2" (expand "eval_rel")
                      (("2" (expand "abs")
                        (("2" (case "polynomial(pn, d)(x) < 0")
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "eval")
              (("3" (expand "eval")
                (("3" (expand "abs")
                  (("3" (case "polynomial(pn, d)(x) < 0")
                    (("1" (assert)
                      (("1" (expand "eval_rel")
                        (("1" (expand "not_eval_rel") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "eval_rel")
                        (("2" (expand "not_eval_rel") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "not_eval_rel")
              (("4" (expand "eval")
                (("4" (expand "eval_rel")
                  (("4" (expand "abs")
                    (("4" (case "polynomial(pn, d)(x) < 0")
                      (("1" (assert)
                        (("1" (expand "eval")
                          (("1" (expand "eval_rel")
                            (("1" (expand "abs") (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "eval")
                          (("2" (expand "eval_rel")
                            (("2" (expand "abs") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "not_eval_rel")
              (("5" (expand "eval")
                (("5" (expand "eval")
                  (("5" (expand "eval_rel") (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (abs_nnf_rel_pnot_preserves_truth-3 "" 3772553778
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "rel")
            (("1" (expand "eval")
              (("1" (expand "not_eval_rel")
                (("1" (expand "eval")
                  (("1" (expand "eval_rel") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil) ("5" (postpone) nil nil)
             ("6" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (abs_nnf_rel_pnot_preserves_truth-2 nil 3770463010
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (induct "rel")
          (("1" (expand "eval")
            (("1" (expand "abs")
              (("1" (expand "not_eval_rel")
                (("1" (expand "eval")
                  (("1" (expand "eval_rel") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "eval")
            (("2" (expand "abs")
              (("2" (expand "not_eval_rel")
                (("2" (expand "eval")
                  (("2" (expand "eval_rel") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "eval")
            (("3" (expand "abs")
              (("3" (expand "not_eval_rel")
                (("3" (expand "eval")
                  (("3" (expand "eval_rel") (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (expand "eval")
            (("4" (expand "abs")
              (("4" (expand "not_eval_rel")
                (("4" (expand "eval")
                  (("4" (expand "eval_rel") (("4" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (expand "eval")
            (("5" (expand "abs")
              (("5" (expand "not_eval_rel")
                (("5" (expand "eval")
                  (("5" (expand "eval_rel") (("5" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (expand "eval")
            (("6" (expand "abs")
              (("6" (expand "not_eval_rel")
                (("6" (expand "eval")
                  (("6" (expand "eval_rel") (("6" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TarskiRel type-decl nil poly_system_strategy nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist Sturm)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PABS adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PABS?)]" PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (TarskiRel_induction formula-decl nil poly_system_strategy nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (polylist const-decl "real" polylist Sturm)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil)
  (abs_nnf_rel_pnot_preserves_truth-1 nil 3770462960
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (induct "rel")
          (("1" (expand "eval")
            (("1" (expand "abs")
              (("1" (expand "not_eval_rel")
                (("1" (expand "eval")
                  (("1" (expand "eval_rel") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil)
           ("4" (postpone) nil nil) ("5" (postpone) nil nil)
           ("6" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nnf_TCC1 0
  (nnf_TCC1-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe1)" "nil")))
 (nnf_TCC2 0
  (nnf_TCC1-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe2)" "nil")))
 (nnf_TCC3 0
  (nnf_TCC3-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe1)" "nil")))
 (nnf_TCC4 0
  (nnf_TCC2-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe2)" "nil")))
 (nnf_TCC5 0
  (no "" 3769966244
   ("" (skeep)
    (("" (skeep) (("" (expand "depth") (("" (grind) nil nil)) nil)) nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   shostak
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe1))" "nil"))
  (nnf_TCC3-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PolyRelExpr])" PolyRelExpr_adt
     nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe1))" "nil")))
 (nnf_TCC6 0
  (nnf_TCC4-1 nil 3769959726 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe2))" "nil")))
 (nnf_TCC7 0
  (nnf_TCC3-1 nil 3769965722 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe1))" "nil")))
 (nnf_TCC8 0
  (nnf_TCC4-1 nil 3769965722 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe2))" "nil")))
 (nnf_TCC9 0
  (nnf_TCC9-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((depth def-decl "nat" dnf_polynomials nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe1)" "nil")))
 (nnf_TCC10 0
  (nnf_TCC10-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((depth def-decl "nat" dnf_polynomials nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe1)" "nil")))
 (nnf_TCC11 0
  (nnf_TCC5-1 nil 3769965722 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe2))" "nil")))
 (nnf_TCC12 0
  (nnf_TCC6-1 nil 3769965722 ("" (termination-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe1))" "nil")))
 (nnf_TCC13 0
  (nnf_TCC13-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((depth def-decl "nat" dnf_polynomials nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe2)" "nil")))
 (nnf_TCC14 0
  (nnf_TCC14-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((depth def-decl "nat" dnf_polynomials nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe1)" "nil")))
 (nnf_TCC15 0
  (nnf_TCC10-1 nil 3769965722 ("" (termination-tcc) nil nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe2))" "nil")))
 (nnf_TCC16 0
  (nnf_TCC9-1 nil 3769965722 ("" (termination-tcc) nil nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe1))" "nil")))
 (nnf_TCC17 0
  (nnf_TCC15-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((depth def-decl "nat" dnf_polynomials nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe2)" "nil")))
 (nnf_TCC18 0
  (nnf_TCC18-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((depth def-decl "nat" dnf_polynomials nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe1)" "nil")))
 (nnf_TCC19 0
  (nnf_TCC19-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe2))" "nil")))
 (nnf_TCC20 0
  (nnf_TCC20-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe1))" "nil")))
 (nnf_TCC21 0
  (nnf_TCC21-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe3))" "nil")))
 (nnf_TCC22 0
  (nnf_TCC24-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe1))" "nil")))
 (nnf_TCC23 0
  (nnf_TCC21-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe2)" "nil")))
 (nnf_TCC24 0
  (nnf_TCC22-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe1)" "nil")))
 (nnf_TCC25 0
  (nnf_TCC25-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe2))" "nil")))
 (nnf_TCC26 0
  (nnf_TCC26-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe1))" "nil")))
 (nnf_TCC27 0
  (nnf_TCC23-1 nil 3770024185 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe2)" "nil")))
 (nnf_TCC28 0
  (nnf_TCC28-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe1)" "nil")))
 (nnf_TCC29 0
  (nnf_TCC29-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe2))" "nil")))
 (nnf_TCC30 0
  (nnf_TCC30-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil
   (nnf termination
    "dnf_polynomials.nnf(PolyRelExpr_adt.PNOT(dnf_polynomials.pe1))" "nil")))
 (nnf_TCC31 0
  (nnf_TCC31-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe2)" "nil")))
 (nnf_TCC32 0
  (nnf_TCC32-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe1)" "nil")))
 (nnf_TCC33 0
  (nnf_TCC33-1 nil 3770397240 ("" (termination-tcc) nil nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (depth def-decl "nat" dnf_polynomials nil))
   nil (nnf termination "dnf_polynomials.nnf(dnf_polynomials.pe3)" "nil")))
 (nnf_not_has_special_form 0
  (nnf_not_has_special_form-6 nil 3770399857
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (expand "nnf" 1)
          (("4" (expand "has_special_form" 1)
            (("4" (expand "nnf" -4)
              (("4" (expand "has_special_form" -4)
                (("4" (flatten -4)
                  (("4" (split 1)
                    (("1" (inst -3 "PAND1_var")
                      (("1" (assert)
                        (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
                      nil)
                     ("2" (inst -3 "PAND2_var")
                      (("2" (assert)
                        (("2" (hide 1 2) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (expand "nnf" 1)
          (("5" (expand "has_special_form" 1)
            (("5" (expand "nnf" -4)
              (("5" (expand "has_special_form" -4)
                (("5" (flatten -4)
                  (("5" (split 1)
                    (("1" (inst -3 "POR1_var")
                      (("1" (assert)
                        (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
                      nil)
                     ("2" (inst -3 "POR2_var")
                      (("2" (assert)
                        (("2" (hide 1 2) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep)
        (("6" (expand "nnf" 1)
          (("6" (expand "nnf" -3)
            (("6" (lift-if)
              (("6" (ground)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "has_special_form" -2)
                  (("4" (flatten -2)
                    (("4"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 4)
                        (("1" (expand "nnf" 4)
                          (("1" (expand "has_special_form" 4)
                            (("1" (split 4)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3 4 5)
                        (("2" (apply-extensionality) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "has_special_form" -2)
                  (("5" (flatten -2)
                    (("5"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (expand "nnf" 5)
                          (("1" (expand "has_special_form" 5)
                            (("1" (split 5)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide -1)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide 2 3 4 5 6 7) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("7"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var),pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (expand "nnf" 7)
                      (("1" (expand "has_special_form" 7)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 7)
                              (("1" (hide 2 3 4 5 6 7)
                                (("1" (inst -6 "pe1(PNOT1_var)")
                                  (("1" (split -6)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2) (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2 3 4 5 6 7)
                                (("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -6)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2) (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("8"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" 8)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 8)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "pe2(PNOT1_var)")
                                (("2" (split -6)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("9"
                  (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 9)
                    (("1" (expand "nnf" 9)
                      (("1" (expand "has_special_form" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (assert)
                            (("1" (expand "has_special_form" -3)
                              (("1" (expand "has_special_form" -3)
                                (("1" (flatten -3)
                                  (("1" (hide -1 -2)
                                    (("1" (inst -6 "pe1(PNOT1_var)")
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (inst -1 "pe2(PNOT1_var)")
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst -1 "PNOT(pe1(PNOT1_var))")
                                              (("1"
                                                (reveal -1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1" (assert) nil nil)
                                                       ("2" (propax) nil nil)
                                                       ("3"
                                                        (hide-all-but 1)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (propax) nil nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3" (grind) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("10" (case "PITE?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PITE(pe1(PNOT1_var),pe2(PNOT1_var),pe3(PNOT1_var))")
                    (("1" (replace -1 10)
                      (("1" (hide -2 -3 -4)
                        (("1" (hide 1 2 3 4 5 6 7 8 9)
                          (("1" (expand "nnf" 1)
                            (("1" (expand "has_special_form" 1)
                              (("1" (expand "has_special_form" 1)
                                (("1" (inst -2 "pe1(PNOT1_var)")
                                  (("1" (reveal -1)
                                    (("1" (inst -1 "PNOT(pe1(PNOT1_var))")
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (inst -1 "PNOT(pe2(PNOT1_var))")
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst -1 "PNOT(pe3(PNOT1_var))")
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (split -5)
                                                      (("1"
                                                        (expand "nnf" -2)
                                                        (("1"
                                                          (expand "nnf" -3)
                                                          (("1"
                                                            (expand "nnf" -4)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand "nnf" -1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but 1)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (split -4)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (reveal -4)
                                                          (("2"
                                                            (replace -4 -1)
                                                            (("2"
                                                              (expand
                                                               "nnf"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "has_special_form"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "has_special_form"
                                                                   -1)
                                                                  (("2"
                                                                    (flatten
                                                                     -1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but 1)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3" (grind) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (reveal -4)
                                                      (("2"
                                                        (hide -2 -3 -5)
                                                        (("2"
                                                          (replace -2 -1)
                                                          (("2"
                                                            (expand "nnf" -1)
                                                            (("2"
                                                              (expand
                                                               "has_special_form"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "has_special_form"
                                                                 -1)
                                                                (("2"
                                                                  (flatten -1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -4)
                                                  (("2"
                                                    (hide -2 -3 -5)
                                                    (("2"
                                                      (replace -2 -1)
                                                      (("2"
                                                        (expand "nnf" -1)
                                                        (("2"
                                                          (expand
                                                           "has_special_form"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "has_special_form"
                                                             -1)
                                                            (("2"
                                                              (flatten -1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("11" (grind) nil nil) ("12" (grind) nil nil)
                 ("13" (grind) nil nil)
                 ("14" (expand "has_special_form" -2)
                  (("14" (flatten -2)
                    (("14"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (hide 4)
                        (("1" (replace -1 4)
                          (("1" (expand "nnf" 4)
                            (("1" (expand "has_special_form" 4)
                              (("1" (split 4)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("15" (expand "has_special_form" -2)
                  (("15" (flatten -2)
                    (("15"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (hide 6)
                          (("1" (expand "nnf" 5)
                            (("1" (expand "has_special_form" 5)
                              (("1" (split 5)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("16" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide 7)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide 2 3 4 5 6 7) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("17"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (hide 8)
                      (("1" (expand "nnf" 7)
                        (("1" (expand "has_special_form" 7)
                          (("1" (expand "has_special_form" -3)
                            (("1" (flatten -3)
                              (("1" (split 7)
                                (("1" (inst -5 "pe1(PNOT1_var)")
                                  (("1" (split -5)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("18"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" -3)
                        (("1" (expand "has_special_form" 8)
                          (("1" (split 8)
                            (("1" (inst -4 "PNOT(pe1(PNOT1_var))")
                              (("1" (split -4)
                                (("1" (expand "nnf" -1)
                                  (("1" (propax) nil nil)) nil)
                                 ("2" (flatten -3) nil nil)
                                 ("3" (flatten -3)
                                  (("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten -3)
                              (("2" (inst -5 " pe2(PNOT1_var)")
                                (("2" (split -5)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("19"
                  (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 9)
                    (("1" (expand "nnf" 9)
                      (("1" (expand "has_special_form" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (split 9)
                            (("1" (expand "has_special_form" -3)
                              (("1" (expand "has_special_form" -3)
                                (("1" (flatten -3) nil nil)) nil))
                              nil)
                             ("2" (expand "has_special_form" -3)
                              (("2" (expand "has_special_form" -3)
                                (("2" (flatten -3) nil nil)) nil))
                              nil)
                             ("3" (expand "has_special_form" -3)
                              (("3" (expand "has_special_form" -3)
                                (("3" (flatten -3) nil nil)) nil))
                              nil)
                             ("4" (expand "has_special_form" -3)
                              (("4" (expand "has_special_form" -3)
                                (("4" (flatten -3) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("20" (case "PITE?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PITE(pe1(PNOT1_var),pe2(PNOT1_var),pe3(PNOT1_var))")
                    (("1" (hide 1 2 3 4 5 6 7 8 9 10)
                      (("1" (replace -1 1)
                        (("1" (hide -2 -3)
                          (("1" (expand "nnf" 1)
                            (("1" (expand "has_special_form" 1)
                              (("1" (expand "has_special_form" 1)
                                (("1" (reveal -2)
                                  (("1" (expand "has_special_form" -1)
                                    (("1" (expand "has_special_form" -1)
                                      (("1"
                                        (flatten -1)
                                        (("1"
                                          (inst -6 "pe1(PNOT1_var)")
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst -1 "PNOT(pe2(PNOT1_var))")
                                              (("1"
                                                (reveal -1)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "PNOT(pe1(PNOT1_var))")
                                                  (("1"
                                                    (reveal -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       " PNOT(pe3(PNOT1_var))")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (split -3)
                                                            (("1"
                                                              (split -9)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (reveal -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "PNOT(pe2(PNOT1_var))")
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "nnf"
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (reveal
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "PNOT(pe3(PNOT1_var))")
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "nnf"
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (hide-all-but 1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (hide-all-but 1)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (hide-all-but 1)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("21" (grind) nil nil) ("22" (grind) nil nil)
                 ("23" (grind) nil nil)
                 ("24" (expand "has_special_form" -2)
                  (("24" (flatten -2)
                    (("24" (assert)
                      (("24" (skeep)
                        (("24" (inst -6 "y")
                          (("24" (split -6)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide 2 3 4 5 6)
                              (("3" (hide -1 -2 -3 -5) (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("25" (hide 1 2 3 4 6)
                  (("25" (hide -1 -2)
                    (("25" (skeep)
                      (("25" (inst -3 "y")
                        (("25" (split)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("26" (hide 1 2 3 4 5 6 7 9)
                  (("26" (hide -1 -2)
                    (("26" (reveal 6)
                      (("26" (skeep)
                        (("26" (inst -3 "y")
                          (("26" (split -3)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide -2 2) (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("27" (hide 1 2 3 4 5 7)
                  (("27" (hide -1 -2)
                    (("27" (reveal 6)
                      (("27" (skeep)
                        (("27" (inst -3 "y")
                          (("27" (split -3)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide -2 2 3 4) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("28" (hide 1 2 3 4 5 6 8)
                  (("28" (hide -2 -1)
                    (("28" (reveal 7)
                      (("28" (skeep)
                        (("28" (inst -3 "y")
                          (("28" (split -3)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide -2 2 3 4) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("29" (hide 1 2 3 4 5 6 7 8 10)
                  (("29" (hide -1)
                    (("29" (skeep)
                      (("29" (inst -4 "y")
                        (("29" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide -1 -3 2) (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("30" (hide 1 2 3 4 5 6 7 8 9 11)
                  (("30" (skeep)
                    (("30" (inst -4 "y")
                      (("30" (split -4)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide -1 -3 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (expand "has_special_form" 1)
            (("7" (expand "nnf" -4)
              (("7" (expand "has_special_form" -4)
                (("7" (flatten -4)
                  (("7" (split 1)
                    (("1" (inst -3 "PNOT(PIMPLIES1_var)")
                      (("1" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil nil)) nil)
                         ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -3 "PIMPLIES2_var")
                      (("2" (split -3)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "nnf" -4)
            (("8" (expand "has_special_form" 1)
              (("8" (expand "has_special_form" 1)
                (("8" (expand "has_special_form" -4)
                  (("8" (expand "has_special_form" -4)
                    (("8" (flatten -4)
                      (("8" (split 1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil) ("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (expand "nnf" 1)
          (("9" (expand "nnf" -4)
            (("9" (expand "has_special_form" -4)
              (("9" (expand "has_special_form" 1)
                (("9" (flatten -4)
                  (("9" (split 1)
                    (("1" (inst -3 "PWHEN1_var")
                      (("1" (split -3)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -3 "PNOT(PWHEN2_var)")
                      (("2" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil nil)) nil)
                         ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skeep)
        (("10" (expand "nnf" 1)
          (("10" (expand "has_special_form" 1)
            (("10" (expand "nnf" -5)
              (("10" (expand "has_special_form" -5)
                (("10" (expand "has_special_form" 1)
                  (("10" (expand "has_special_form" -5)
                    (("10" (assert)
                      (("10" (flatten -5)
                        (("10" (hide -1 -2 -3)
                          (("10" (inst -1 "PNOT(PITE1_var)")
                            (("10" (reveal -1)
                              (("10" (inst -1 "PITE2_var")
                                (("10" (reveal -1)
                                  (("10" (inst -1 "PITE3_var")
                                    (("10" (reveal -1)
                                      (("10"
                                        (inst -1 "PITE1_var")
                                        (("10"
                                          (split -1)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (split -3)
                                              (("1"
                                                (split -4)
                                                (("1"
                                                  (expand "nnf" -1)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3" (grind) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (not_eval_rel const-decl "TarskiRel" dnf_polynomials nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs_nnf_rel const-decl "PolyRelExpr" dnf_polynomials nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PolyRelExpr_PITE_extensionality formula-decl nil PolyRelExpr_adt nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (pe3 adt-accessor-decl "[(PITE?) -> PolyRelExpr]" PolyRelExpr_adt nil)
    (PITE adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr, PolyRelExpr] -> (PITE?)]" PolyRelExpr_adt
     nil)
    (PIFF adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PIFF?)]"
     PolyRelExpr_adt nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (PolyRelExpr_PIFF_extensionality formula-decl nil PolyRelExpr_adt nil)
    (PWHEN adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PWHEN?)]"
     PolyRelExpr_adt nil)
    (PolyRelExpr_PWHEN_extensionality formula-decl nil PolyRelExpr_adt nil)
    (PIMPLIES adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PIMPLIES?)]" PolyRelExpr_adt nil)
    (PolyRelExpr_PIMPLIES_extensionality formula-decl nil PolyRelExpr_adt nil)
    (pe adt-accessor-decl "[(PNOT?) -> PolyRelExpr]" PolyRelExpr_adt nil)
    (PolyRelExpr_PNOT_extensionality formula-decl nil PolyRelExpr_adt nil)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt nil)
    (PolyRelExpr_POR_extensionality formula-decl nil PolyRelExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PIFF? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PWHEN? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PITE? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (pe1 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (pe2 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (PolyRelExpr_PAND_extensionality formula-decl nil PolyRelExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (depth def-decl "nat" dnf_polynomials nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (nnf_not_has_special_form-5 nil 3770399763
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x")
      (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
       ("4" (skeep)
        (("4" (expand "nnf" 1)
          (("4" (expand "has_special_form" 1)
            (("4" (expand "nnf" -4)
              (("4" (expand "has_special_form" -4)
                (("4" (flatten -4)
                  (("4" (split 1)
                    (("1" (inst -3 "PAND1_var")
                      (("1" (assert) (("1" (hide 1 2) (("1" (grind) nil)))))))
                     ("2" (inst -3 "PAND2_var")
                      (("2" (assert)
                        (("2" (hide 1 2)
                          (("2" (grind) nil)))))))))))))))))))))
       ("5" (skeep)
        (("5" (expand "nnf" 1)
          (("5" (expand "has_special_form" 1)
            (("5" (expand "nnf" -4)
              (("5" (expand "has_special_form" -4)
                (("5" (flatten -4)
                  (("5" (split 1)
                    (("1" (inst -3 "POR1_var")
                      (("1" (assert) (("1" (hide 1 2) (("1" (grind) nil)))))))
                     ("2" (inst -3 "POR2_var")
                      (("2" (assert)
                        (("2" (hide 1 2)
                          (("2" (grind) nil)))))))))))))))))))))
       ("6" (skeep)
        (("6" (expand "nnf" 1)
          (("6" (expand "nnf" -3)
            (("6" (lift-if)
              (("6" (ground)
                (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
                 ("4" (expand "has_special_form" -2)
                  (("4" (flatten -2)
                    (("4"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 4)
                        (("1" (expand "nnf" 4)
                          (("1" (expand "has_special_form" 4)
                            (("1" (split 4)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5)
                                    (("3" (grind) nil)))))))
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5)
                                    (("3" (grind) nil)))))))))))))))
                       ("2" (hide 2 3 4 5)
                        (("2" (apply-extensionality) nil)))))))))
                 ("5" (expand "has_special_form" -2)
                  (("5" (flatten -2)
                    (("5"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (expand "nnf" 5)
                          (("1" (expand "has_special_form" 5)
                            (("1" (split 5)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil)))))))
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil)))))))))))))))
                       ("2" (apply-extensionality) nil)))))))
                 ("6" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide -1)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil) ("2" (propax) nil)
                           ("3" (hide 2 3 4 5 6 7)
                            (("3" (grind) nil)))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("7"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var),pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (expand "nnf" 7)
                      (("1" (expand "has_special_form" 7)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 7)
                              (("1" (hide 2 3 4 5 6 7)
                                (("1" (inst -6 "pe1(PNOT1_var)")
                                  (("1" (split -6)
                                    (("1" (propax) nil) ("2" (propax) nil)
                                     ("3" (hide 2) (("3" (grind) nil)))))))))
                               ("2" (hide 2 3 4 5 6 7)
                                (("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -6)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2)
                                      (("3" (grind) nil)))))))))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("8"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" 8)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 8)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil)))))))
                               ("2" (inst -6 "pe2(PNOT1_var)")
                                (("2" (split -6)
                                  (("1" (propax) nil) ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil)))))))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("9"
                  (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 9)
                    (("1" (expand "nnf" 9)
                      (("1" (expand "has_special_form" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (assert)
                            (("1" (expand "has_special_form" -3)
                              (("1" (expand "has_special_form" -3)
                                (("1" (flatten -3)
                                  (("1" (hide -1 -2)
                                    (("1" (inst -6 "pe1(PNOT1_var)")
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (inst -1 "pe2(PNOT1_var)")
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst -1 "PNOT(pe1(PNOT1_var))")
                                              (("1"
                                                (reveal -1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1" (assert) nil)
                                                       ("2" (propax) nil)
                                                       ("3"
                                                        (hide-all-but 1)
                                                        (("3" (grind) nil)))))
                                                     ("2" (propax) nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3" (grind) nil)))))
                                                   ("2" (propax) nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (grind)
                                                      nil)))))))))))))))))))))))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("10" (case "PITE?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PITE(pe1(PNOT1_var),pe2(PNOT1_var),pe3(PNOT1_var))")
                    (("1" (replace -1 10)
                      (("1" (hide -2 -3 -4)
                        (("1" (hide 1 2 3 4 5 6 7 8 9)
                          (("1" (expand "nnf" 1)
                            (("1" (expand "has_special_form" 1)
                              (("1" (expand "has_special_form" 1)
                                (("1" (inst -2 "pe1(PNOT1_var)")
                                  (("1" (reveal -1)
                                    (("1" (inst -1 "PNOT(pe1(PNOT1_var))")
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (inst -1 "pe2(PNOT1_var)")
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst -1 "pe3(PNOT1_var)")
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (split -5)
                                                      (("1"
                                                        (expand "nnf" -2)
                                                        (("1"
                                                          (postpone)
                                                          nil)))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand "nnf" -1)
                                                          (("2"
                                                            (propax)
                                                            nil)))))
                                                       ("3"
                                                        (hide-all-but 1)
                                                        (("3" (grind) nil)))))
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (split -4)
                                                        (("1" (propax) nil)
                                                         ("2" (postpone) nil)
                                                         ("3"
                                                          (hide-all-but 1)
                                                          (("3"
                                                            (grind)
                                                            nil)))))))
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3" (grind) nil)))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2" (postpone) nil)))
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3" (grind) nil)))))
                                                 ("2" (postpone) nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (grind)
                                                    nil)))))))))))))))))))))))))))))))
                     ("2" (apply-extensionality) nil)))
                   ("2" (assert) nil)))
                 ("11" (grind) nil) ("12" (grind) nil) ("13" (grind) nil)
                 ("14" (expand "has_special_form" -2)
                  (("14" (flatten -2)
                    (("14"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (hide 4)
                        (("1" (replace -1 4)
                          (("1" (expand "nnf" 4)
                            (("1" (expand "has_special_form" 4)
                              (("1" (split 4)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil)))))))
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil)))))))))))))))))
                       ("2" (apply-extensionality) nil)))))))
                 ("15" (expand "has_special_form" -2)
                  (("15" (flatten -2)
                    (("15"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (hide 6)
                          (("1" (expand "nnf" 5)
                            (("1" (expand "has_special_form" 5)
                              (("1" (split 5)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil)))))))
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil)))))))))))))))))
                       ("2" (apply-extensionality) nil)))))))
                 ("16" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide 7)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil) ("2" (propax) nil)
                           ("3" (hide 2 3 4 5 6 7)
                            (("3" (grind) nil)))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("17"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (hide 8)
                      (("1" (expand "nnf" 7)
                        (("1" (expand "has_special_form" 7)
                          (("1" (expand "has_special_form" -3)
                            (("1" (flatten -3)
                              (("1" (split 7)
                                (("1" (inst -5 "pe1(PNOT1_var)")
                                  (("1" (split -5)
                                    (("1" (propax) nil) ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil)))))))
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil)))))))))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("18"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" -3)
                        (("1" (expand "has_special_form" 8)
                          (("1" (split 8)
                            (("1" (inst -4 "PNOT(pe1(PNOT1_var))")
                              (("1" (split -4)
                                (("1" (expand "nnf" -1) (("1" (propax) nil)))
                                 ("2" (flatten -3) nil)
                                 ("3" (flatten -3)
                                  (("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil)))))))))
                             ("2" (flatten -3)
                              (("2" (inst -5 " pe2(PNOT1_var)")
                                (("2" (split -5)
                                  (("1" (propax) nil) ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil)))))))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("19"
                  (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 9)
                    (("1" (expand "nnf" 9)
                      (("1" (expand "has_special_form" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (split 9)
                            (("1" (expand "has_special_form" -3)
                              (("1" (expand "has_special_form" -3)
                                (("1" (flatten -3) nil)))))
                             ("2" (expand "has_special_form" -3)
                              (("2" (expand "has_special_form" -3)
                                (("2" (flatten -3) nil)))))
                             ("3" (expand "has_special_form" -3)
                              (("3" (expand "has_special_form" -3)
                                (("3" (flatten -3) nil)))))
                             ("4" (expand "has_special_form" -3)
                              (("4" (expand "has_special_form" -3)
                                (("4" (flatten -3) nil)))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("20" (case "PITE?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PITE(pe1(PNOT1_var),pe2(PNOT1_var),pe3(PNOT1_var))")
                    (("1" (hide 1 2 3 4 5 6 7 8 9 10)
                      (("1" (replace -1 1)
                        (("1" (hide -2 -3)
                          (("1" (expand "nnf" 1)
                            (("1" (expand "has_special_form" 1)
                              (("1" (expand "has_special_form" 1)
                                (("1" (postpone) nil)))))))))))))
                     ("2" (apply-extensionality) nil)))
                   ("2" (assert) nil)))
                 ("21" (grind) nil) ("22" (grind) nil) ("23" (grind) nil)
                 ("24" (expand "has_special_form" -2)
                  (("24" (flatten -2)
                    (("24" (assert)
                      (("24" (skeep)
                        (("24" (inst -6 "y")
                          (("24" (split -6)
                            (("1" (propax) nil) ("2" (propax) nil)
                             ("3" (hide 2 3 4 5 6)
                              (("3" (hide -1 -2 -3 -5)
                                (("3" (grind) nil)))))))))))))))))
                 ("25" (hide 1 2 3 4 6)
                  (("25" (hide -1 -2)
                    (("25" (skeep)
                      (("25" (inst -3 "y")
                        (("25" (split)
                          (("1" (propax) nil) ("2" (propax) nil)
                           ("3" (grind) nil)))))))))))
                 ("26" (hide 1 2 3 4 5 6 7 9)
                  (("26" (hide -1 -2)
                    (("26" (reveal 6)
                      (("26" (skeep)
                        (("26" (inst -3 "y")
                          (("26" (split -3)
                            (("1" (propax) nil) ("2" (propax) nil)
                             ("3" (hide -2 2) (("3" (grind) nil)))))))))))))))
                 ("27" (hide 1 2 3 4 5 7)
                  (("27" (hide -1 -2)
                    (("27" (reveal 6)
                      (("27" (skeep)
                        (("27" (inst -3 "y")
                          (("27" (split -3)
                            (("1" (propax) nil) ("2" (propax) nil)
                             ("3" (hide -2 2 3 4)
                              (("3" (grind) nil)))))))))))))))
                 ("28" (hide 1 2 3 4 5 6 8)
                  (("28" (hide -2 -1)
                    (("28" (reveal 7)
                      (("28" (skeep)
                        (("28" (inst -3 "y")
                          (("28" (split -3)
                            (("1" (propax) nil) ("2" (propax) nil)
                             ("3" (hide -2 2 3 4)
                              (("3" (grind) nil)))))))))))))))
                 ("29" (hide 1 2 3 4 5 6 7 8 10)
                  (("29" (hide -1)
                    (("29" (skeep)
                      (("29" (inst -4 "y")
                        (("29" (split -4)
                          (("1" (propax) nil) ("2" (propax) nil)
                           ("3" (hide -1 -3 2) (("3" (grind) nil)))))))))))))
                 ("30" (hide 1 2 3 4 5 6 7 8 9 11)
                  (("30" (skeep)
                    (("30" (inst -4 "y")
                      (("30" (split -4)
                        (("1" (propax) nil) ("2" (propax) nil)
                         ("3" (hide -1 -3 2)
                          (("3" (grind) nil)))))))))))))))))))))
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (expand "has_special_form" 1)
            (("7" (expand "nnf" -4)
              (("7" (expand "has_special_form" -4)
                (("7" (flatten -4)
                  (("7" (split 1)
                    (("1" (inst -3 "PNOT(PIMPLIES1_var)")
                      (("1" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil)))
                         ("2" (propax) nil)
                         ("3" (hide 2) (("3" (grind) nil)))))))
                     ("2" (inst -3 "PIMPLIES2_var")
                      (("2" (split -3)
                        (("1" (propax) nil) ("2" (propax) nil)
                         ("3" (hide 2) (("3" (grind) nil)))))))))))))))))))))
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "nnf" -4)
            (("8" (expand "has_special_form" 1)
              (("8" (expand "has_special_form" 1)
                (("8" (expand "has_special_form" -4)
                  (("8" (expand "has_special_form" -4)
                    (("8" (flatten -4)
                      (("8" (split 1)
                        (("1" (propax) nil) ("2" (propax) nil)
                         ("3" (propax) nil)
                         ("4" (propax) nil)))))))))))))))))))
       ("9" (skeep)
        (("9" (expand "nnf" 1)
          (("9" (expand "nnf" -4)
            (("9" (expand "has_special_form" -4)
              (("9" (expand "has_special_form" 1)
                (("9" (flatten -4)
                  (("9" (split 1)
                    (("1" (inst -3 "PWHEN1_var")
                      (("1" (split -3)
                        (("1" (propax) nil) ("2" (propax) nil)
                         ("3" (hide 2) (("3" (grind) nil)))))))
                     ("2" (inst -3 "PNOT(PWHEN2_var)")
                      (("2" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil)))
                         ("2" (propax) nil)
                         ("3" (hide 2) (("3" (grind) nil)))))))))))))))))))))
       ("10" (skeep)
        (("10" (expand "nnf" 1)
          (("10" (expand "has_special_form" 1)
            (("10" (expand "nnf" -5)
              (("10" (expand "has_special_form" -5)
                (("10" (expand "has_special_form" 1)
                  (("10" (expand "has_special_form" -5)
                    (("10" (assert)
                      (("10" (flatten -5)
                        (("10" (hide -1 -2 -3)
                          (("10" (inst -1 "PNOT(PITE1_var)")
                            (("10" (reveal -1)
                              (("10" (inst -1 "PITE2_var")
                                (("10" (reveal -1)
                                  (("10" (inst -1 "PITE3_var")
                                    (("10" (reveal -1)
                                      (("10"
                                        (inst -1 "PITE1_var")
                                        (("10"
                                          (split -1)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (split -3)
                                              (("1"
                                                (split -4)
                                                (("1"
                                                  (expand "nnf" -1)
                                                  (("1" (assert) nil)))
                                                 ("2" (propax) nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3" (grind) nil)))))
                                               ("2" (propax) nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil)))))
                                             ("2" (propax) nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil)))))
                                           ("2" (propax) nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3"
                                              (grind)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (nnf_not_has_special_form-4 nil 3770398247
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (expand "nnf" 1)
          (("4" (expand "has_special_form" 1)
            (("4" (expand "nnf" -4)
              (("4" (expand "has_special_form" -4)
                (("4" (flatten -4)
                  (("4" (split 1)
                    (("1" (inst -3 "PAND1_var")
                      (("1" (assert)
                        (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
                      nil)
                     ("2" (inst -3 "PAND2_var")
                      (("2" (assert)
                        (("2" (hide 1 2) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (expand "nnf" 1)
          (("5" (expand "has_special_form" 1)
            (("5" (expand "nnf" -4)
              (("5" (expand "has_special_form" -4)
                (("5" (flatten -4)
                  (("5" (split 1)
                    (("1" (inst -3 "POR1_var")
                      (("1" (assert)
                        (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
                      nil)
                     ("2" (inst -3 "POR2_var")
                      (("2" (assert)
                        (("2" (hide 1 2) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep)
        (("6" (expand "nnf" 1)
          (("6" (expand "nnf" -3)
            (("6" (lift-if)
              (("6" (ground)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "has_special_form" -2)
                  (("4" (flatten -2)
                    (("4"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 4)
                        (("1" (expand "nnf" 4)
                          (("1" (expand "has_special_form" 4)
                            (("1" (split 4)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3 4 5)
                        (("2" (apply-extensionality) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "has_special_form" -2)
                  (("5" (flatten -2)
                    (("5"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (expand "nnf" 5)
                          (("1" (expand "has_special_form" 5)
                            (("1" (split 5)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide -1)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide 2 3 4 5 6 7) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("7"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var),pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (expand "nnf" 7)
                      (("1" (expand "has_special_form" 7)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 7)
                              (("1" (hide 2 3 4 5 6 7)
                                (("1" (inst -6 "pe1(PNOT1_var)")
                                  (("1" (split -6)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2) (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2 3 4 5 6 7)
                                (("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -6)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2) (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("8"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" 8)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 8)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "pe2(PNOT1_var)")
                                (("2" (split -6)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("9"
                  (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 9)
                    (("1" (expand "nnf" 9)
                      (("1" (expand "has_special_form" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (assert)
                            (("1" (expand "has_special_form" -3)
                              (("1" (expand "has_special_form" -3)
                                (("1" (flatten -3)
                                  (("1" (hide -1 -2)
                                    (("1" (inst -6 "pe1(PNOT1_var)")
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (inst -1 "pe2(PNOT1_var)")
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst -1 "PNOT(pe1(PNOT1_var))")
                                              (("1"
                                                (reveal -1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1" (assert) nil nil)
                                                       ("2" (propax) nil nil)
                                                       ("3"
                                                        (hide-all-but 1)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (propax) nil nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3" (grind) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("10" (case "PITE?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PITE(pe1(PNOT1_var),pe2(PNOT1_var),pe3(PNOT1_var))")
                    (("1" (replace -1 10)
                      (("1" (hide -2 -3 -4)
                        (("1" (hide 1 2 3 4 5 6 7 8 9)
                          (("1" (expand "nnf" 1)
                            (("1" (expand "has_special_form" 1)
                              (("1" (expand "has_special_form" 1)
                                (("1" (inst -2 "pe1(PNOT1_var)")
                                  (("1" (reveal -1)
                                    (("1" (inst -1 "PNOT(pe1(PNOT1_var))")
                                      (("1"
                                        (reveal -1)
                                        (("1"
                                          (inst -1 "pe2(PNOT1_var)")
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst -1 "pe3(PNOT1_var)")
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (split -5)
                                                      (("1"
                                                        (expand "nnf" -2)
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand "nnf" -1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but 1)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (split -4)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (hide-all-but 1)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3" (grind) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2" (postpone) nil nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -1)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "PNOT(pe3(PNOT1_var))")
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (expand "nnf" -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (reveal -1)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "pe3(PNOT1_var)")
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (reveal -1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "PNOT(pe3(PNOT1_var))")
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nnf"
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (split -1)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but 1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but 1)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("11" (grind) nil nil) ("12" (grind) nil nil)
                 ("13" (grind) nil nil)
                 ("14" (expand "has_special_form" -2)
                  (("14" (flatten -2)
                    (("14"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (hide 4)
                        (("1" (replace -1 4)
                          (("1" (expand "nnf" 4)
                            (("1" (expand "has_special_form" 4)
                              (("1" (split 4)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("15" (expand "has_special_form" -2)
                  (("15" (flatten -2)
                    (("15"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (hide 6)
                          (("1" (expand "nnf" 5)
                            (("1" (expand "has_special_form" 5)
                              (("1" (split 5)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("16" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide 7)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide 2 3 4 5 6 7) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("17"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (hide 8)
                      (("1" (expand "nnf" 7)
                        (("1" (expand "has_special_form" 7)
                          (("1" (expand "has_special_form" -3)
                            (("1" (flatten -3)
                              (("1" (split 7)
                                (("1" (inst -5 "pe1(PNOT1_var)")
                                  (("1" (split -5)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("18"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" -3)
                        (("1" (expand "has_special_form" 8)
                          (("1" (split 8)
                            (("1" (inst -4 "PNOT(pe1(PNOT1_var))")
                              (("1" (split -4)
                                (("1" (expand "nnf" -1)
                                  (("1" (propax) nil nil)) nil)
                                 ("2" (flatten -3) nil nil)
                                 ("3" (flatten -3)
                                  (("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten -3)
                              (("2" (inst -5 " pe2(PNOT1_var)")
                                (("2" (split -5)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("19"
                  (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 9)
                    (("1" (expand "nnf" 9)
                      (("1" (expand "has_special_form" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (split 9)
                            (("1" (expand "has_special_form" -3)
                              (("1" (expand "has_special_form" -3)
                                (("1" (flatten -3) nil nil)) nil))
                              nil)
                             ("2" (expand "has_special_form" -3)
                              (("2" (expand "has_special_form" -3)
                                (("2" (flatten -3) nil nil)) nil))
                              nil)
                             ("3" (expand "has_special_form" -3)
                              (("3" (expand "has_special_form" -3)
                                (("3" (flatten -3) nil nil)) nil))
                              nil)
                             ("4" (expand "has_special_form" -3)
                              (("4" (expand "has_special_form" -3)
                                (("4" (flatten -3) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("20" (case "PITE?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PITE(pe1(PNOT1_var),pe2(PNOT1_var),pe3(PNOT1_var))")
                    (("1" (hide 1 2 3 4 5 6 7 8 9 10)
                      (("1" (replace -1 1)
                        (("1" (hide -2 -3)
                          (("1" (expand "nnf" 1)
                            (("1" (expand "has_special_form" 1)
                              (("1" (expand "has_special_form" 1)
                                (("1" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("21" (grind) nil nil) ("22" (grind) nil nil)
                 ("23" (grind) nil nil)
                 ("24" (expand "has_special_form" -2)
                  (("24" (flatten -2)
                    (("24" (assert)
                      (("24" (skeep)
                        (("24" (inst -6 "y")
                          (("24" (split -6)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide 2 3 4 5 6)
                              (("3" (hide -1 -2 -3 -5) (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("25" (hide 1 2 3 4 6)
                  (("25" (hide -1 -2)
                    (("25" (skeep)
                      (("25" (inst -3 "y")
                        (("25" (split)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("26" (hide 1 2 3 4 5 6 7 9)
                  (("26" (hide -1 -2)
                    (("26" (reveal 6)
                      (("26" (skeep)
                        (("26" (inst -3 "y")
                          (("26" (split -3)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide -2 2) (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("27" (hide 1 2 3 4 5 7)
                  (("27" (hide -1 -2)
                    (("27" (reveal 6)
                      (("27" (skeep)
                        (("27" (inst -3 "y")
                          (("27" (split -3)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide -2 2 3 4) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("28" (hide 1 2 3 4 5 6 8)
                  (("28" (hide -2 -1)
                    (("28" (reveal 7)
                      (("28" (skeep)
                        (("28" (inst -3 "y")
                          (("28" (split -3)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide -2 2 3 4) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("29" (hide 1 2 3 4 5 6 7 8 10)
                  (("29" (hide -1)
                    (("29" (skeep)
                      (("29" (inst -4 "y")
                        (("29" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide -1 -3 2) (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("30" (hide 1 2 3 4 5 6 7 8 9 11)
                  (("30" (skeep)
                    (("30" (inst -4 "y")
                      (("30" (split -4)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide -1 -3 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (expand "has_special_form" 1)
            (("7" (expand "nnf" -4)
              (("7" (expand "has_special_form" -4)
                (("7" (flatten -4)
                  (("7" (split 1)
                    (("1" (inst -3 "PNOT(PIMPLIES1_var)")
                      (("1" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil nil)) nil)
                         ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -3 "PIMPLIES2_var")
                      (("2" (split -3)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "nnf" -4)
            (("8" (expand "has_special_form" 1)
              (("8" (expand "has_special_form" 1)
                (("8" (expand "has_special_form" -4)
                  (("8" (expand "has_special_form" -4)
                    (("8" (flatten -4)
                      (("8" (split 1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil) ("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (expand "nnf" 1)
          (("9" (expand "nnf" -4)
            (("9" (expand "has_special_form" -4)
              (("9" (expand "has_special_form" 1)
                (("9" (flatten -4)
                  (("9" (split 1)
                    (("1" (inst -3 "PWHEN1_var")
                      (("1" (split -3)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -3 "PNOT(PWHEN2_var)")
                      (("2" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil nil)) nil)
                         ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skeep)
        (("10" (expand "nnf" 1)
          (("10" (expand "has_special_form" 1)
            (("10" (expand "nnf" -5)
              (("10" (expand "has_special_form" -5)
                (("10" (expand "has_special_form" 1)
                  (("10" (expand "has_special_form" -5)
                    (("10" (assert)
                      (("10" (flatten -5)
                        (("10" (hide -1 -2 -3)
                          (("10" (inst -1 "PNOT(PITE1_var)")
                            (("10" (reveal -1)
                              (("10" (inst -1 "PITE2_var")
                                (("10" (reveal -1)
                                  (("10" (inst -1 "PITE3_var")
                                    (("10" (reveal -1)
                                      (("10"
                                        (inst -1 "PITE1_var")
                                        (("10"
                                          (split -1)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (split -3)
                                              (("1"
                                                (split -4)
                                                (("1"
                                                  (expand "nnf" -1)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3" (grind) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (nnf_not_has_special_form-3 nil 3770397838
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x")
      (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
       ("4" (skeep)
        (("4" (expand "nnf" 1)
          (("4" (expand "has_special_form" 1)
            (("4" (expand "nnf" -4)
              (("4" (expand "has_special_form" -4)
                (("4" (flatten -4)
                  (("4" (split 1)
                    (("1" (inst -3 "PAND1_var")
                      (("1" (assert) (("1" (hide 1 2) (("1" (grind) nil)))))))
                     ("2" (inst -3 "PAND2_var")
                      (("2" (assert)
                        (("2" (hide 1 2)
                          (("2" (grind) nil)))))))))))))))))))))
       ("5" (skeep)
        (("5" (expand "nnf" 1)
          (("5" (expand "has_special_form" 1)
            (("5" (expand "nnf" -4)
              (("5" (expand "has_special_form" -4)
                (("5" (flatten -4)
                  (("5" (split 1)
                    (("1" (inst -3 "POR1_var")
                      (("1" (assert) (("1" (hide 1 2) (("1" (grind) nil)))))))
                     ("2" (inst -3 "POR2_var")
                      (("2" (assert)
                        (("2" (hide 1 2)
                          (("2" (grind) nil)))))))))))))))))))))
       ("6" (skeep)
        (("6" (expand "nnf" 1)
          (("6" (expand "nnf" -3)
            (("6" (lift-if)
              (("6" (ground)
                (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
                 ("4" (expand "has_special_form" -2)
                  (("4" (flatten -2)
                    (("4"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 4)
                        (("1" (expand "nnf" 4)
                          (("1" (expand "has_special_form" 4)
                            (("1" (split 4)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5)
                                    (("3" (grind) nil)))))))
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5)
                                    (("3" (grind) nil)))))))))))))))
                       ("2" (hide 2 3 4 5)
                        (("2" (apply-extensionality) nil)))))))))
                 ("5" (expand "has_special_form" -2)
                  (("5" (flatten -2)
                    (("5"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (expand "nnf" 5)
                          (("1" (expand "has_special_form" 5)
                            (("1" (split 5)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil)))))))
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil)))))))))))))))
                       ("2" (apply-extensionality) nil)))))))
                 ("6" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide -1)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil) ("2" (propax) nil)
                           ("3" (hide 2 3 4 5 6 7)
                            (("3" (grind) nil)))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("7"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var),pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (expand "nnf" 7)
                      (("1" (expand "has_special_form" 7)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 7)
                              (("1" (hide 2 3 4 5 6 7)
                                (("1" (inst -6 "pe1(PNOT1_var)")
                                  (("1" (split -6)
                                    (("1" (propax) nil) ("2" (propax) nil)
                                     ("3" (hide 2) (("3" (grind) nil)))))))))
                               ("2" (hide 2 3 4 5 6 7)
                                (("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -6)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2)
                                      (("3" (grind) nil)))))))))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("8"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" 8)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 8)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil)))
                                   ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil)))))))
                               ("2" (inst -6 "pe2(PNOT1_var)")
                                (("2" (split -6)
                                  (("1" (propax) nil) ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil)))))))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("9"
                  (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 9)
                    (("1" (expand "nnf" 9)
                      (("1" (expand "has_special_form" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (assert) (("1" (postpone) nil)))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("10" (postpone) nil) ("11" (grind) nil) ("12" (grind) nil)
                 ("13" (grind) nil)
                 ("14" (expand "has_special_form" -2)
                  (("14" (flatten -2)
                    (("14"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (hide 4)
                        (("1" (replace -1 4)
                          (("1" (expand "nnf" 4)
                            (("1" (expand "has_special_form" 4)
                              (("1" (split 4)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil)))))))
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil)))))))))))))))))
                       ("2" (apply-extensionality) nil)))))))
                 ("15" (expand "has_special_form" -2)
                  (("15" (flatten -2)
                    (("15"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (hide 6)
                          (("1" (expand "nnf" 5)
                            (("1" (expand "has_special_form" 5)
                              (("1" (split 5)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil)))))))
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil)))))))))))))))))
                       ("2" (apply-extensionality) nil)))))))
                 ("16" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide 7)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil) ("2" (propax) nil)
                           ("3" (hide 2 3 4 5 6 7)
                            (("3" (grind) nil)))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("17"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (hide 8)
                      (("1" (expand "nnf" 7)
                        (("1" (expand "has_special_form" 7)
                          (("1" (expand "has_special_form" -3)
                            (("1" (flatten -3)
                              (("1" (split 7)
                                (("1" (inst -5 "pe1(PNOT1_var)")
                                  (("1" (split -5)
                                    (("1" (propax) nil) ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil)))))))
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil)))
                                     ("2" (propax) nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil)))))))))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("18"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" -3)
                        (("1" (expand "has_special_form" 8)
                          (("1" (split 8)
                            (("1" (inst -4 "PNOT(pe1(PNOT1_var))")
                              (("1" (split -4)
                                (("1" (expand "nnf" -1) (("1" (propax) nil)))
                                 ("2" (flatten -3) nil)
                                 ("3" (flatten -3)
                                  (("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil)))))))))
                             ("2" (flatten -3)
                              (("2" (inst -5 " pe2(PNOT1_var)")
                                (("2" (split -5)
                                  (("1" (propax) nil) ("2" (propax) nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil)))))))))))))))))))
                   ("2" (apply-extensionality) nil)))
                 ("19" (case "PIFF?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                    (("1" (replace -1 9)
                      (("1" (expand "nnf" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (expand "has_special_form" 9)
                            (("1" (split 9)
                              (("1" (postpone) nil) ("2" (postpone) nil)
                               ("3" (postpone) nil)
                               ("4" (postpone) nil)))))))))))
                     ("2" (apply-extensionality) nil)))
                   ("2" (propax) nil)))
                 ("20" (postpone) nil) ("21" (grind) nil) ("22" (grind) nil)
                 ("23" (grind) nil)
                 ("24" (expand "has_special_form" -2)
                  (("24" (flatten -2)
                    (("24" (assert)
                      (("24" (skeep)
                        (("24" (inst -6 "y")
                          (("24" (split -6)
                            (("1" (propax) nil) ("2" (propax) nil)
                             ("3" (hide 2 3 4 5 6)
                              (("3" (hide -1 -2 -3 -5)
                                (("3" (grind) nil)))))))))))))))))
                 ("25" (hide 1 2 3 4 6)
                  (("25" (hide -1 -2)
                    (("25" (skeep)
                      (("25" (inst -3 "y")
                        (("25" (split)
                          (("1" (propax) nil) ("2" (propax) nil)
                           ("3" (grind) nil)))))))))))
                 ("26" (hide 1 2 3 4 5 6 7 9)
                  (("26" (hide -1 -2) (("26" (postpone) nil)))))
                 ("27" (hide 1 2 3 4 5 7)
                  (("27" (hide -1 -2) (("27" (postpone) nil)))))
                 ("28" (hide 1 2 3 4 5 6 8)
                  (("28" (hide -2 -1) (("28" (postpone) nil)))))
                 ("29" (hide 1 2 3 4 5 6 7 8 10)
                  (("29" (hide -1) (("29" (skeep) (("29" (postpone) nil)))))))
                 ("30" (postpone) nil)))))))))))
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (expand "has_special_form" 1)
            (("7" (expand "nnf" -4)
              (("7" (expand "has_special_form" -4)
                (("7" (flatten -4)
                  (("7" (split 1)
                    (("1" (inst -3 "PNOT(PIMPLIES1_var)")
                      (("1" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil)))
                         ("2" (propax) nil)
                         ("3" (hide 2) (("3" (grind) nil)))))))
                     ("2" (inst -3 "PIMPLIES2_var")
                      (("2" (split -3)
                        (("1" (propax) nil) ("2" (propax) nil)
                         ("3" (hide 2) (("3" (grind) nil)))))))))))))))))))))
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "nnf" -4)
            (("8" (expand "has_special_form" 1)
              (("8" (expand "has_special_form" 1)
                (("8" (expand "has_special_form" -4)
                  (("8" (expand "has_special_form" -4)
                    (("8" (flatten -4)
                      (("8" (split 1)
                        (("1" (propax) nil) ("2" (propax) nil)
                         ("3" (propax) nil)
                         ("4" (propax) nil)))))))))))))))))))
       ("9" (skeep)
        (("9" (expand "nnf" 1)
          (("9" (expand "nnf" -4)
            (("9" (expand "has_special_form" -4)
              (("9" (expand "has_special_form" 1)
                (("9" (flatten -4)
                  (("9" (split 1)
                    (("1" (inst -3 "PWHEN1_var")
                      (("1" (split -3)
                        (("1" (propax) nil) ("2" (propax) nil)
                         ("3" (hide 2) (("3" (grind) nil)))))))
                     ("2" (inst -3 "PNOT(PWHEN2_var)")
                      (("2" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil)))
                         ("2" (propax) nil)
                         ("3" (hide 2) (("3" (grind) nil)))))))))))))))))))))
       ("10" (postpone) nil))))
    nil)
   nil nil)
  (nnf_not_has_special_form-2 nil 3770397626
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (expand "nnf" 1)
          (("4" (expand "has_special_form" 1)
            (("4" (expand "nnf" -4)
              (("4" (expand "has_special_form" -4)
                (("4" (flatten -4)
                  (("4" (split 1)
                    (("1" (inst -3 "PAND1_var")
                      (("1" (assert)
                        (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
                      nil)
                     ("2" (inst -3 "PAND2_var")
                      (("2" (assert)
                        (("2" (hide 1 2) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (expand "nnf" 1)
          (("5" (expand "has_special_form" 1)
            (("5" (expand "nnf" -4)
              (("5" (expand "has_special_form" -4)
                (("5" (flatten -4)
                  (("5" (split 1)
                    (("1" (inst -3 "POR1_var")
                      (("1" (assert)
                        (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
                      nil)
                     ("2" (inst -3 "POR2_var")
                      (("2" (assert)
                        (("2" (hide 1 2) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep)
        (("6" (expand "nnf" 1)
          (("6" (expand "nnf" -3)
            (("6" (lift-if)
              (("6" (ground)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "has_special_form" -2)
                  (("4" (flatten -2)
                    (("4"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 4)
                        (("1" (expand "nnf" 4)
                          (("1" (expand "has_special_form" 4)
                            (("1" (split 4)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3 4 5)
                        (("2" (apply-extensionality) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "has_special_form" -2)
                  (("5" (flatten -2)
                    (("5"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (expand "nnf" 5)
                          (("1" (expand "has_special_form" 5)
                            (("1" (split 5)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide -1)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide 2 3 4 5 6 7) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("7"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var),pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (expand "nnf" 7)
                      (("1" (expand "has_special_form" 7)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 7)
                              (("1" (hide 2 3 4 5 6 7)
                                (("1" (inst -6 "pe1(PNOT1_var)")
                                  (("1" (split -6)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2) (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2 3 4 5 6 7)
                                (("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -6)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2) (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("8"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" 8)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 8)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "pe2(PNOT1_var)")
                                (("2" (split -6)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("9" (case "PIFF?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                    (("1" (replace -1 9)
                      (("1" (expand "nnf" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (expand "has_special_form" 9)
                            (("1" (assert) (("1" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("10" (postpone) nil nil) ("11" (grind) nil nil)
                 ("12" (grind) nil nil) ("13" (grind) nil nil)
                 ("14" (expand "has_special_form" -2)
                  (("14" (flatten -2)
                    (("14"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (hide 4)
                        (("1" (replace -1 4)
                          (("1" (expand "nnf" 4)
                            (("1" (expand "has_special_form" 4)
                              (("1" (split 4)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("15" (expand "has_special_form" -2)
                  (("15" (flatten -2)
                    (("15"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (hide 6)
                          (("1" (expand "nnf" 5)
                            (("1" (expand "has_special_form" 5)
                              (("1" (split 5)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("16" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide 7)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide 2 3 4 5 6 7) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("17"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (hide 8)
                      (("1" (expand "nnf" 7)
                        (("1" (expand "has_special_form" 7)
                          (("1" (expand "has_special_form" -3)
                            (("1" (flatten -3)
                              (("1" (split 7)
                                (("1" (inst -5 "pe1(PNOT1_var)")
                                  (("1" (split -5)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("18"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" -3)
                        (("1" (expand "has_special_form" 8)
                          (("1" (split 8)
                            (("1" (inst -4 "PNOT(pe1(PNOT1_var))")
                              (("1" (split -4)
                                (("1" (expand "nnf" -1)
                                  (("1" (propax) nil nil)) nil)
                                 ("2" (flatten -3) nil nil)
                                 ("3" (flatten -3)
                                  (("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten -3)
                              (("2" (inst -5 " pe2(PNOT1_var)")
                                (("2" (split -5)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("19" (case "PIFF?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                    (("1" (replace -1 9)
                      (("1" (expand "nnf" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (expand "has_special_form" 9)
                            (("1" (split 9)
                              (("1" (postpone) nil nil)
                               ("2" (postpone) nil nil)
                               ("3" (postpone) nil nil)
                               ("4" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("20" (postpone) nil nil) ("21" (grind) nil nil)
                 ("22" (grind) nil nil) ("23" (grind) nil nil)
                 ("24" (expand "has_special_form" -2)
                  (("24" (flatten -2)
                    (("24" (assert)
                      (("24" (skeep)
                        (("24" (inst -6 "y")
                          (("24" (split -6)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide 2 3 4 5 6)
                              (("3" (hide -1 -2 -3 -5) (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("25" (hide 1 2 3 4 6)
                  (("25" (hide -1 -2)
                    (("25" (skeep)
                      (("25" (inst -3 "y")
                        (("25" (split)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("26" (hide 1 2 3 4 5 6 7 9)
                  (("26" (hide -1 -2) (("26" (postpone) nil nil)) nil)) nil)
                 ("27" (hide 1 2 3 4 5 7)
                  (("27" (hide -1 -2) (("27" (postpone) nil nil)) nil)) nil)
                 ("28" (hide 1 2 3 4 5 6 8)
                  (("28" (hide -2 -1) (("28" (postpone) nil nil)) nil)) nil)
                 ("29" (hide 1 2 3 4 5 6 7 8 10)
                  (("29" (hide -1)
                    (("29" (skeep) (("29" (postpone) nil nil)) nil)) nil))
                  nil)
                 ("30" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (expand "has_special_form" 1)
            (("7" (expand "nnf" -4)
              (("7" (expand "has_special_form" -4)
                (("7" (flatten -4)
                  (("7" (split 1)
                    (("1" (inst -3 "PNOT(PIMPLIES1_var)")
                      (("1" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil nil)) nil)
                         ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -3 "PIMPLIES2_var")
                      (("2" (split -3)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "nnf" -4)
            (("8" (expand "has_special_form" 1)
              (("8" (expand "has_special_form" 1)
                (("8" (expand "has_special_form" -4)
                  (("8" (expand "has_special_form" -4)
                    (("8" (flatten -4)
                      (("8" (split 1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil) ("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (expand "nnf" 1)
          (("9" (expand "nnf" -4)
            (("9" (expand "has_special_form" -4)
              (("9" (expand "has_special_form" 1)
                (("9" (flatten -4)
                  (("9" (split 1)
                    (("1" (inst -3 "PWHEN1_var")
                      (("1" (split -3)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -3 "PNOT(PWHEN2_var)")
                      (("2" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil nil)) nil)
                         ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_not_has_special_form-1 nil 3770028479
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (expand "nnf" 1)
          (("4" (expand "has_special_form" 1)
            (("4" (expand "nnf" -4)
              (("4" (expand "has_special_form" -4)
                (("4" (flatten -4)
                  (("4" (split 1)
                    (("1" (inst -3 "PAND1_var")
                      (("1" (assert)
                        (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
                      nil)
                     ("2" (inst -3 "PAND2_var")
                      (("2" (assert)
                        (("2" (hide 1 2) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (expand "nnf" 1)
          (("5" (expand "has_special_form" 1)
            (("5" (expand "nnf" -4)
              (("5" (expand "has_special_form" -4)
                (("5" (flatten -4)
                  (("5" (split 1)
                    (("1" (inst -3 "POR1_var")
                      (("1" (assert)
                        (("1" (hide 1 2) (("1" (grind) nil nil)) nil)) nil))
                      nil)
                     ("2" (inst -3 "POR2_var")
                      (("2" (assert)
                        (("2" (hide 1 2) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep)
        (("6" (expand "nnf" 1)
          (("6" (expand "nnf" -3)
            (("6" (lift-if)
              (("6" (ground)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "has_special_form" -2)
                  (("4" (flatten -2)
                    (("4"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 4)
                        (("1" (expand "nnf" 4)
                          (("1" (expand "has_special_form" 4)
                            (("1" (split 4)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3 4 5)
                        (("2" (apply-extensionality) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "has_special_form" -2)
                  (("5" (flatten -2)
                    (("5"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (expand "nnf" 5)
                          (("1" (expand "has_special_form" 5)
                            (("1" (split 5)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                (("2" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide -1)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide 2 3 4 5 6 7) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("7"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var),pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (expand "nnf" 7)
                      (("1" (expand "has_special_form" 7)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 7)
                              (("1" (hide 2 3 4 5 6 7)
                                (("1" (inst -6 "pe1(PNOT1_var)")
                                  (("1" (split -6)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2) (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2 3 4 5 6 7)
                                (("2" (inst -6 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -6)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2) (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("8"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" 8)
                        (("1" (expand "has_special_form" -3)
                          (("1" (flatten -3)
                            (("1" (split 8)
                              (("1" (inst -6 "PNOT(pe1(PNOT1_var))")
                                (("1" (split -6)
                                  (("1" (expand "nnf" -1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (inst -6 "pe2(PNOT1_var)")
                                (("2" (split -6)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("9" (case "PIFF?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                    (("1" (replace -1 9)
                      (("1" (expand "nnf" 9)
                        (("1" (expand "has_special_form" 9)
                          (("1" (expand "has_special_form" 9)
                            (("1" (expand "has_special_form" -3)
                              (("1" (expand "has_special_form" -3)
                                (("1" (flatten -3) (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("10" (grind) nil nil) ("11" (grind) nil nil)
                 ("12" (grind) nil nil)
                 ("13" (expand "has_special_form" -2)
                  (("13" (flatten -2)
                    (("13"
                      (case "PNOT1_var = PAND(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (hide 4)
                        (("1" (replace -1 4)
                          (("1" (expand "nnf" 4)
                            (("1" (expand "has_special_form" 4)
                              (("1" (split 4)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("14" (expand "has_special_form" -2)
                  (("14" (flatten -2)
                    (("14"
                      (case "PNOT1_var = POR(pe1(PNOT1_var), pe2(PNOT1_var))")
                      (("1" (replace -1 5)
                        (("1" (hide 6)
                          (("1" (expand "nnf" 5)
                            (("1" (expand "has_special_form" 5)
                              (("1" (split 5)
                                (("1" (inst -5 "PNOT(pe1(PNOT1_var))")
                                  (("1" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil)
                 ("15" (case "PNOT1_var = PNOT(pe(PNOT1_var))")
                  (("1" (replace -1 6)
                    (("1" (hide 7)
                      (("1" (inst -4 "pe(PNOT1_var)")
                        (("1" (split -4)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (hide 2 3 4 5 6 7) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("16"
                  (case "PNOT1_var = PIMPLIES(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 7)
                    (("1" (hide 8)
                      (("1" (expand "nnf" 7)
                        (("1" (expand "has_special_form" 7)
                          (("1" (expand "has_special_form" -3)
                            (("1" (flatten -3)
                              (("1" (split 7)
                                (("1" (inst -5 "pe1(PNOT1_var)")
                                  (("1" (split -5)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst -5 "PNOT(pe2(PNOT1_var))")
                                  (("2" (split -5)
                                    (("1" (expand "nnf" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (propax) nil nil)
                                     ("3" (hide 2 3 4 5 6 7 8)
                                      (("3" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("17"
                  (case "PNOT1_var = PWHEN(pe1(PNOT1_var), pe2(PNOT1_var))")
                  (("1" (replace -1 8)
                    (("1" (expand "nnf" 8)
                      (("1" (expand "has_special_form" -3)
                        (("1" (expand "has_special_form" 8)
                          (("1" (split 8)
                            (("1" (inst -4 "PNOT(pe1(PNOT1_var))")
                              (("1" (split -4)
                                (("1" (expand "nnf" -1)
                                  (("1" (propax) nil nil)) nil)
                                 ("2" (flatten -3) nil nil)
                                 ("3" (flatten -3)
                                  (("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten -3)
                              (("2" (inst -5 " pe2(PNOT1_var)")
                                (("2" (split -5)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (hide 2 3 4 5 6 7 8 9 10)
                                    (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil)
                 ("18" (case "PIFF?(PNOT1_var)")
                  (("1"
                    (case "PNOT1_var = PIFF(pe1(PNOT1_var), pe2(PNOT1_var))")
                    (("1" (replace -1 9)
                      (("1" (expand "nnf" 9)
                        (("1" (expand "has_special_form" -3)
                          (("1" (expand "has_special_form" 9)
                            (("1" (expand "has_special_form" -3)
                              (("1" (flatten -3)
                                (("1" (expand "has_special_form" 9)
                                  (("1" (split 9)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil)
                                     ("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("19" (grind) nil nil) ("20" (grind) nil nil)
                 ("21" (grind) nil nil)
                 ("22" (expand "has_special_form" -2)
                  (("22" (flatten -2)
                    (("22" (assert)
                      (("22" (skeep)
                        (("22" (inst -6 "y")
                          (("22" (split -6)
                            (("1" (propax) nil nil) ("2" (propax) nil nil)
                             ("3" (hide 2 3 4 5 6)
                              (("3" (hide -1 -2 -3 -5) (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("23" (hide 1 2 3 4 6)
                  (("23" (hide -1 -2)
                    (("23" (skeep)
                      (("23" (inst -3 "y")
                        (("23" (split)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("24" (hide 1 2 3 4 5 7)
                  (("24" (hide -1 -2)
                    (("24" (skeep)
                      (("24" (inst -3 "y")
                        (("24" (split -3)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("25" (hide 1 2 3 4 5 6 8)
                  (("25" (hide -2 -1)
                    (("25" (skeep)
                      (("25" (inst -3 "y")
                        (("25" (split)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("26" (hide 1 2 3 4 5 6 7 9)
                  (("26" (hide -1 -2)
                    (("26" (skeep)
                      (("26" (inst -3 "y")
                        (("26" (split)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("27" (hide 1 2 3 4 5 6 7 8 10)
                  (("27" (hide -1)
                    (("27" (skeep)
                      (("27" (inst -3 "y")
                        (("27" (split)
                          (("1" (propax) nil nil) ("2" (propax) nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (expand "has_special_form" 1)
            (("7" (expand "nnf" -4)
              (("7" (expand "has_special_form" -4)
                (("7" (flatten -4)
                  (("7" (split 1)
                    (("1" (inst -3 "PNOT(PIMPLIES1_var)")
                      (("1" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil nil)) nil)
                         ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -3 "PIMPLIES2_var")
                      (("2" (split -3)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "nnf" -4)
            (("8" (expand "has_special_form" 1)
              (("8" (expand "has_special_form" 1)
                (("8" (expand "has_special_form" -4)
                  (("8" (expand "has_special_form" -4)
                    (("8" (flatten -4)
                      (("8" (split 1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (propax) nil nil) ("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (expand "nnf" 1)
          (("9" (expand "nnf" -4)
            (("9" (expand "has_special_form" -4)
              (("9" (expand "has_special_form" 1)
                (("9" (flatten -4)
                  (("9" (split 1)
                    (("1" (inst -3 "PWHEN1_var")
                      (("1" (split -3)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst -3 "PNOT(PWHEN2_var)")
                      (("2" (split -3)
                        (("1" (expand "nnf" -1) (("1" (propax) nil nil)) nil)
                         ("2" (propax) nil nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (PolyRelExpr_PIFF_extensionality formula-decl nil PolyRelExpr_adt nil)
    (PIFF adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PIFF?)]"
     PolyRelExpr_adt nil)
    (PWHEN adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PWHEN?)]"
     PolyRelExpr_adt nil)
    (PolyRelExpr_PWHEN_extensionality formula-decl nil PolyRelExpr_adt nil)
    (PIMPLIES adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PIMPLIES?)]" PolyRelExpr_adt nil)
    (PolyRelExpr_PIMPLIES_extensionality formula-decl nil PolyRelExpr_adt nil)
    (pe adt-accessor-decl "[(PNOT?) -> PolyRelExpr]" PolyRelExpr_adt nil)
    (PolyRelExpr_PNOT_extensionality formula-decl nil PolyRelExpr_adt nil)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt nil)
    (PolyRelExpr_POR_extensionality formula-decl nil PolyRelExpr_adt nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PIFF? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PWHEN? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (pe1 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (pe2 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (PolyRelExpr_PAND_extensionality formula-decl nil PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   shostak))
 (nnf_has_special_form 0
  (nnf_has_special_form-1 nil 3769959809
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (lemma nnf_not_has_special_form) (("6" (propax) nil nil)) nil)
     ("7" (skeep)
      (("7" (expand "nnf" 1)
        (("7" (expand "has_special_form" 1)
          (("7" (split)
            (("1" (lemma "nnf_not_has_special_form")
              (("1" (inst?)
                (("1" (split) (("1" (propax) nil nil) ("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skeep)
      (("8" (expand "nnf" 1)
        (("8" (expand "has_special_form" 1)
          (("8" (split)
            (("1" (expand "has_special_form" 1)
              (("1" (split)
                (("1" (lemma "nnf_not_has_special_form")
                  (("1" (inst?)
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (expand "has_special_form" 1)
              (("2" (lemma "nnf_not_has_special_form")
                (("2" (inst?)
                  (("2" (split)
                    (("1" (lemma "nnf_not_has_special_form")
                      (("1" (inst -1 "PIFF2_var")
                        (("1" (split)
                          (("1" (split 1)
                            (("1" (propax) nil nil) ("2" (propax) nil nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skeep)
      (("9" (expand "nnf" 1)
        (("9" (expand "has_special_form" 1)
          (("9" (split)
            (("1" (propax) nil nil)
             ("2" (lemma "nnf_not_has_special_form")
              (("2" (inst?)
                (("2" (split) (("1" (propax) nil nil) ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skeep)
      (("10" (expand "nnf" 1)
        (("10" (expand "has_special_form" 1)
          (("10" (expand "has_special_form" 1)
            (("10" (lemma nnf_not_has_special_form)
              (("10" (inst -1 "PITE1_var")
                (("10" (split -1)
                  (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnf_not_has_special_form formula-decl nil dnf_polynomials nil)
    (abs_nnf_rel const-decl "PolyRelExpr" dnf_polynomials nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   shostak))
 (pull_out_conjunctions_TCC1 0
  (pull_out_conjunctions_TCC1-1 nil 3770129304
   ("" (skeep)
    (("" (typepred "p")
      (("" (replace -2 -1)
        (("" (expand "has_special_form" -1) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (pull_out_conjunctions subtype "dnf_polynomials.pe1" "NNF_expr")))
 (pull_out_conjunctions_TCC2 0
  (pull_out_conjunctions_TCC2-1 nil 3770129304
   ("" (skeep)
    (("" (typepred "p")
      (("" (replace -2 -1)
        (("" (expand "has_special_form" -1) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (pull_out_conjunctions subtype "dnf_polynomials.pe2" "NNF_expr")))
 (pull_out_conjunctions_TCC3 0
  (pull_out_conjunctions_TCC3-1 nil 3770129304
   ("" (skeep)
    (("" (typepred "p")
      (("" (expand "has_special_form") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (pull_out_conjunctions cases "dnf_polynomials.p" "PolyRelExpr: DATATYPE
 BEGIN
  IMPORTING poly_system_strategy

  PCONST(pb: bool): PCONST?
  PREL(pn: [nat -> rat], d: nat, rel: TarskiRel, r: rat): PREL?
  PABS(pn: [nat -> rat], d: nat, rel: TarskiRel, r: rat): PABS?
  PAND(pe1, pe2: PolyRelExpr): PAND?
  POR(pe1, pe2: PolyRelExpr): POR?
  PNOT(pe: PolyRelExpr): PNOT?
  PIMPLIES(pe1, pe2: PolyRelExpr): PIMPLIES?
  PIFF(pe1, pe2: PolyRelExpr): PIFF?
  PWHEN(pe1, pe2: PolyRelExpr): PWHEN?
  PITE(pe1, pe2, pe3: PolyRelExpr): PITE?
 END PolyRelExpr")))
 (length_pull_out_conjunctions 0
  (length_pull_out_conjunctions-3 nil 3770463338
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (skeep)
      (("6" (expand "has_special_form" -3)
        (("6" (flatten -3)
          (("6" (assert)
            (("6" (expand "pull_out_conjunctions" 1)
              (("6" (expand "append" 1) (("6" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (append def-decl "list[T]" list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (pull_out_conjunctions def-decl "list[NNF_expr]" dnf_polynomials nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   nil)
  (length_pull_out_conjunctions-2 nil 3770463310
   ("" (induct "p")
    (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil)
     ("5" (skeep)
      (("5" (expand "has_special_form" -3)
        (("5" (flatten -3)
          (("5" (assert)
            (("5" (expand "pull_out_conjunctions" 1)
              (("5" (expand "append" 1) (("5" (grind) nil)))))))))))))
     ("6" (grind) nil) ("7" (grind) nil) ("8" (grind) nil) ("9" (grind) nil)
     ("10" (grind) nil))
    nil)
   nil nil)
  (length_pull_out_conjunctions-1 nil 3770130360
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (skeep)
      (("6" (expand "has_special_form" -3)
        (("6" (flatten -3)
          (("6" (assert)
            (("6" (expand "pull_out_conjunctions" 1)
              (("6" (expand "append" 1) (("6" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil))
    nil)
   ((PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (list type-decl nil list_adt nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   shostak))
 (conjunct_element_TCC1 0
  (conjunct_element_TCC1-1 nil 3770129790
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil))
   nil
   (conjunct_element subtype
    "(: PolyRelExpr_adt.PAND(dnf_polynomials.p, list_adt[NNF_expr].car(dnf_polynomials.b)) :)"
    "list[NNF_expr]")))
 (conjunct_element_TCC2 0
  (conjunct_element_TCC2-1 nil 3770129790 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil))
   nil
   (conjunct_element subtype "dnf_polynomials.b"
    "(list_adt[NNF_expr].cons?)")))
 (conjunct_element_TCC3 0
  (conjunct_element_TCC3-1 nil 3770129790 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (conjunct_element termination
    "dnf_polynomials.conjunct_element(dnf_polynomials.p, list_adt[NNF_expr].cdr(dnf_polynomials.b))"
    "nil")))
 (conjunct_lists_TCC1 0
  (conjunct_lists_TCC1-1 nil 3770129790 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil))
   nil
   (conjunct_lists subtype "dnf_polynomials.a" "(list_adt[NNF_expr].cons?)")))
 (conjunct_lists_TCC2 0
  (conjunct_lists_TCC2-1 nil 3770129790 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (conjunct_lists termination
    "dnf_polynomials.conjunct_lists(list_adt[NNF_expr].cdr(dnf_polynomials.a), dnf_polynomials.b)"
    "nil")))
 (length_conjunct_lists 0
  (length_conjunct_lists-1 nil 3770139335
   ("" (skeep)
    (("" (lemma "length_pull_out_conjunctions")
      (("" (inst?)
        (("" (lemma "length_pull_out_conjunctions")
          (("" (inst -1 "p2")
            (("" (expand "conjunct_lists" 1)
              (("" (expand "conjunct_element" 1) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_pull_out_conjunctions formula-decl nil dnf_polynomials nil)
    (conjunct_lists def-decl "list[NNF_expr]" dnf_polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (conjunct_element def-decl "list[NNF_expr]" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   shostak))
 (form_disjunction_TCC1 0
  (form_disjunction_TCC1-1 nil 3770129790 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (form_disjunction subtype "dnf_polynomials.a"
    "(list_adt[NNF_expr].cons?)")))
 (form_disjunction_TCC2 0
  (form_disjunction_TCC2-1 nil 3770129790 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (form_disjunction subtype "dnf_polynomials.a"
    "(list_adt[NNF_expr].cons?)")))
 (form_disjunction_TCC3 0
  (form_disjunction_TCC3-1 nil 3770129790
   ("" (skeep)
    (("" (typepred "a")
      (("" (case "length(a) > 1")
        (("1" (grind) (("1" (expand "length" 2) (("1" (grind) nil nil)) nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil
   (form_disjunction subtype "list_adt[NNF_expr].cdr(dnf_polynomials.a)"
    "{a: list_adt[NNF_expr].list | reals.>(list_props[NNF_expr].length(a), 0)}")))
 (form_disjunction_TCC4 0
  (form_disjunction_TCC4-1 nil 3770129790
   ("" (grind) (("" (expand "length" 2) (("" (grind) nil nil)) nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   nil
   (form_disjunction termination
    "dnf_polynomials.form_disjunction(list_adt[NNF_expr].cdr(dnf_polynomials.a))"
    "nil")))
 (form_disjunction_TCC5 0
  (form_disjunction_TCC5-1 nil 3770129790 ("" (grind) nil nil)
   ((has_special_form def-decl "bool" dnf_polynomials nil)) nil
   (form_disjunction subtype
    "PolyRelExpr_adt.POR(list_adt[NNF_expr].car(dnf_polynomials.a), dnf_polynomials.form_disjunction(list_adt[NNF_expr].cdr(dnf_polynomials.a)))"
    "NNF_expr")))
 (distribute_ands_TCC1 0
  (distribute_ands_TCC1-1 nil 3770025288 ("" (grind) nil nil)
   ((has_special_form def-decl "bool" dnf_polynomials nil)) nil
   (distribute_ands subtype "PolyRelExpr_adt.PCONST(dnf_polynomials.pb)"
    "NNF_expr")))
 (distribute_ands_TCC2 0
  (distribute_ands_TCC2-1 nil 3770025288 ("" (grind) nil nil)
   ((has_special_form def-decl "bool" dnf_polynomials nil)) nil
   (distribute_ands subtype
    "PolyRelExpr_adt.PREL(dnf_polynomials.pn, dnf_polynomials.d, dnf_polynomials.rel, dnf_polynomials.r)"
    "NNF_expr")))
 (distribute_ands_TCC3 0
  (distribute_ands_TCC3-1 nil 3770025288 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (has_special_form def-decl "bool" dnf_polynomials nil))
   nil
   (distribute_ands subtype
    "PolyRelExpr_adt.PABS(dnf_polynomials.pn, dnf_polynomials.d, dnf_polynomials.rel, dnf_polynomials.r)"
    "NNF_expr")))
 (distribute_ands_TCC4 0
  (distribute_ands_TCC6-1 nil 3769962132 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil))
   nil (distribute_ands subtype "dnf_polynomials.pe1" "NNF_expr")))
 (distribute_ands_TCC5 0
  (distribute_ands_TCC8-1 nil 3769962132 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil))
   nil (distribute_ands subtype "dnf_polynomials.pe2" "NNF_expr")))
 (distribute_ands_TCC6 0
  (distribute_ands_TCC10-1 nil 3770025288
   ("" (skeep)
    (("" (skeep*)
      (("" (lemma "length_pull_out_conjunctions")
        (("" (typepred "a")
          (("" (typepred "b")
            (("" (inst -3 "a")
              (("" (lemma length_pull_out_conjunctions)
                (("" (inst -1 "b")
                  (("" (expand "conjunct_lists" 1)
                    (("" (grind)
                      (("" (expand "length" 1) (("" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (conjunct_element def-decl "list[NNF_expr]" dnf_polynomials nil)
    (append def-decl "list[T]" list_props nil)
    (conjunct_lists def-decl "list[NNF_expr]" dnf_polynomials nil)
    (length_pull_out_conjunctions formula-decl nil dnf_polynomials nil))
   nil
   (distribute_ands subtype
    "dnf_polynomials.conjunct_lists(dnf_polynomials.pull_out_conjunctions(dnf_polynomials.a), dnf_polynomials.pull_out_conjunctions(dnf_polynomials.b))"
    "{a: list_adt[NNF_expr].list | reals.>(list_props[NNF_expr].length(a), 0)}")))
 (distribute_ands_TCC7 0
  (distribute_ands_TCC19-1 nil 3770025288
   ("" (skeep*)
    (("" (expand "has_special_form" 1) (("" (propax) nil nil)) nil)) nil)
   ((has_special_form def-decl "bool" dnf_polynomials nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (distribute_ands subtype
    "PolyRelExpr_adt.POR(dnf_polynomials.distribute_ands(dnf_polynomials.pe1), dnf_polynomials.distribute_ands(dnf_polynomials.pe2))"
    "NNF_expr")))
 (distribute_ands_TCC8 0
  (distribute_ands_TCC8-1 nil 3770463291 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil))
   nil
   (distribute_ands cases "dnf_polynomials.p" "PolyRelExpr: DATATYPE
 BEGIN
  IMPORTING poly_system_strategy

  PCONST(pb: bool): PCONST?
  PREL(pn: [nat -> rat], d: nat, rel: TarskiRel, r: rat): PREL?
  PABS(pn: [nat -> rat], d: nat, rel: TarskiRel, r: rat): PABS?
  PAND(pe1, pe2: PolyRelExpr): PAND?
  POR(pe1, pe2: PolyRelExpr): POR?
  PNOT(pe: PolyRelExpr): PNOT?
  PIMPLIES(pe1, pe2: PolyRelExpr): PIMPLIES?
  PIFF(pe1, pe2: PolyRelExpr): PIFF?
  PWHEN(pe1, pe2: PolyRelExpr): PWHEN?
  PITE(pe1, pe2, pe3: PolyRelExpr): PITE?
 END PolyRelExpr")))
 (conjunct_element_prop 0
  (conjunct_element_prop-1 nil 3770378885
   ("" (skeep)
    (("" (induct "b")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (inst -2 "q")
            (("2" (reveal -1)
              (("2" (hide -3)
                (("2" (split -2)
                  (("1" (inst -1 "q")
                    (("1" (expand "conjunct_element" -4)
                      (("1" (lemma "member_append_fi[NNF_expr]")
                        (("1" (inst?)
                          (("1" (split -1)
                            (("1" (case "has_no_ors(cons1_var)")
                              (("1" (expand "member" -2)
                                (("1" (split -2)
                                  (("1" (replace -1 1)
                                    (("1" (expand "has_no_ors" 1)
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (expand "member" -1)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst -3 "cons1_var")
                                (("2" (split -3)
                                  (("1" (propax) nil nil)
                                   ("2" (expand "member" 1)
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil) ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep 1)
                    (("2" (inst -2 "q!1")
                      (("2" (split -2)
                        (("1" (propax) nil nil)
                         ("2" (hide -2 -3 2 3)
                          (("2" (expand "member" 1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (has_no_ors def-decl "bool" dnf_polynomials nil)
    (conjunct_element def-decl "list[NNF_expr]" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member_append_fi formula-decl nil more_list_props structures))
   shostak))
 (conjunct_lists_prop 0
  (conjunct_lists_prop-1 nil 3770378260
   ("" (induct "a")
    (("1" (induct "b") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (inst -3 "q")
            (("2" (inst -2 "q")
              (("2" (inst -1 "b")
                (("2" (split -1)
                  (("1" (inst -1 "q")
                    (("1" (expand "conjunct_lists" -4)
                      (("1" (lemma "member_append_fi[NNF_expr]")
                        (("1" (inst?)
                          (("1" (split -1)
                            (("1" (hide -2)
                              (("1" (case "has_no_ors(cons1_var)")
                                (("1" (hide -5)
                                  (("1" (hide -3)
                                    (("1" (lemma "conjunct_element_prop")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (reveal -9)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (inst -1 "q")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (reveal -5)
                                    (("2" (inst -1 "cons1_var")
                                      (("2"
                                        (split -1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil) ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (reveal -2)
                    (("2" (hide -2 -3 -4)
                      (("2" (skeep)
                        (("2" (inst -1 "q!1")
                          (("2" (split)
                            (("1" (propax) nil nil)
                             ("2" (expand "member" 1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (reveal -3) (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conjunct_element def-decl "list[NNF_expr]" dnf_polynomials nil)
    (conjunct_element_prop formula-decl nil dnf_polynomials nil)
    (member_append_fi formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (conjunct_lists def-decl "list[NNF_expr]" dnf_polynomials nil)
    (has_no_ors def-decl "bool" dnf_polynomials nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (conjunct_elements_truth_prop 0
  (conjunct_elements_truth_prop-1 nil 3770387153
   ("" (induct "p")
    (("1" (typepred "p!1") (("1" (propax) nil nil)) nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (case "cons2_var = null")
            (("1" (hide -2)
              (("1" (replace -1 -2)
                (("1" (replace -1 1)
                  (("1" (hide -1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (skeep -1)
                          (("1" (expand "member" 1)
                            (("1" (expand "member" 1)
                              (("1" (case "eval(c)(x) AND eval(cons1_var)(x)")
                                (("1" (assert)
                                  (("1" (ground)
                                    (("1" (inst 1 "cons1_var") nil nil)) nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (expand "conjunct_element")
                                    (("2" (expand "conjunct_element")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "append")
                                          (("2"
                                            (split -2)
                                            (("1"
                                              (replace -1 -2)
                                              (("1"
                                                (expand "eval" -2)
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "append" -1)
                                              (("2"
                                                (expand "member")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten 1)
                        (("2" (skeep -2)
                          (("2" (expand "member" -2)
                            (("2" (split -2)
                              (("1" (replace -1 -3)
                                (("1" (inst 1 "PAND(c, cons1_var)")
                                  (("1" (assert)
                                    (("1" (split 1)
                                      (("1"
                                        (expand "eval" 1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "conjunct_element")
                                        (("2"
                                          (expand "conjunct_element")
                                          (("2"
                                            (expand "append")
                                            (("2"
                                              (expand "append")
                                              (("2"
                                                (expand "member")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (typepred "c")
                                    (("2" (typepred "cons1_var")
                                      (("2"
                                        (expand "has_special_form" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -2 -3 -4 1)
                                (("2" (expand "member")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "length(cons2_var) > 0 ")
              (("1" (assert)
                (("1" (inst -2 "c")
                  (("1" (inst -2 "x")
                    (("1" (split 2)
                      (("1" (flatten 1)
                        (("1" (skeep -1)
                          (("1" (lemma "member_append_fi[NNF_expr]")
                            (("1" (expand "conjunct_element" -3)
                              (("1" (inst? -1)
                                (("1" (split -1)
                                  (("1" (hide -3)
                                    (("1" (expand "member" -1)
                                      (("1"
                                        (expand "member" -1)
                                        (("1"
                                          (hide -4 -5 -6)
                                          (("1"
                                            (replace -1 -2)
                                            (("1"
                                              (expand "eval" -2)
                                              (("1"
                                                (flatten -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "cons1_var")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "member")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "(EXISTS (a: NNF_expr):
         eval(a)(x) AND member(a, conjunct_element(c, cons2_var)))")
                                    (("1" (assert)
                                      (("1"
                                        (hide -7)
                                        (("1"
                                          (case
                                           "(eval(c)(x) AND
         EXISTS (b: NNF_expr): member(b, cons2_var) AND eval(b)(x))")
                                          (("1"
                                            (flatten -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep -2)
                                                (("1"
                                                  (inst 1 "b")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "member" 1)
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (hide -2 -3 -4)
                                              (("2"
                                                (hide -2 -4)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2 3)
                                      (("2"
                                        (inst 1 "a")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten 1)
                        (("2" (skeep -2)
                          (("2" (inst 1 "PAND(c, b)")
                            (("1" (expand "member" -2)
                              (("1" (split -2)
                                (("1" (replace -1 1)
                                  (("1" (replace -1 -3)
                                    (("1" (hide -4 -5 -6 -7)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "eval" 1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (expand "conjunct_element" 1)
                                          (("2"
                                            (expand "member" 1)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (split -6)
                                  (("1" (reveal 1)
                                    (("1" (hide 2 3)
                                      (("1"
                                        (skeep -1)
                                        (("1"
                                          (inst 1 "a")
                                          (("1"
                                            (split 1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (expand "conjunct_element" 1)
                                              (("2"
                                                (expand "member" 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (inst 1 "b") (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (typepred "c")
                                (("2" (typepred "b")
                                  (("2" (expand "has_special_form" 1)
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3 -1 -2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (member_append_fi formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (b skolem-const-decl "NNF_expr" dnf_polynomials nil)
    (append def-decl "list[T]" list_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (c skolem-const-decl "NNF_expr" dnf_polynomials nil)
    (cons1_var skolem-const-decl "NNF_expr" dnf_polynomials nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (conjunct_element def-decl "list[NNF_expr]" dnf_polynomials nil)
    (member def-decl "bool" list_props nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (conjunct_truth_prop 0
  (conjunct_truth_prop-1 nil 3770384821
   ("" (induct "p1")
    (("1" (typepred "p1!1") (("1" (propax) nil nil)) nil)
     ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (case "cons2_var = null")
            (("1" (replace -1 1)
              (("1" (replace -1 -2)
                (("1" (replace -1 -3)
                  (("1" (hide -1)
                    (("1" (hide -1)
                      (("1" (split 1)
                        (("1" (flatten 1)
                          (("1" (skeep)
                            (("1" (expand "conjunct_lists")
                              (("1" (expand "conjunct_lists")
                                (("1" (lemma "member_append_fi[NNF_expr]")
                                  (("1" (inst?)
                                    (("1" (split -1)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (case
                                           "( eval(cons1_var)(x)
        AND EXISTS (b: NNF_expr): member(b, p2) AND eval(b)(x))")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (inst 1 "cons1_var")
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               conjunct_elements_truth_prop)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (flatten -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "(eval(cons1_var)(x) AND
         EXISTS (b: NNF_expr): member(b, p2) AND eval(b)(x))")
                                                      (("1" (propax) nil nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (inst 1 "p")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 -3 -4 1)
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten 1)
                          (("2" (skeep)
                            (("2" (skeep)
                              (("2" (expand "member" -1)
                                (("2" (split -1)
                                  (("1" (replace -1 -2)
                                    (("1" (hide -1)
                                      (("1"
                                        (expand "conjunct_lists" 1)
                                        (("1"
                                          (expand "conjunct_lists" 1)
                                          (("1"
                                            (lemma
                                             conjunct_elements_truth_prop)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst -1 "x")
                                                (("1"
                                                  (case
                                                   "append(conjunct_element(cons1_var, p2), null) = conjunct_element(cons1_var, p2)")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (flatten -2)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (skeep -1)
                                                          (("1"
                                                            (inst 1 "a!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (inst 1 "b")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten -1)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (skeep -1)
                                                          (("1"
                                                            (inst 2 "a!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide 1)
                                                                (("1"
                                                                  (lemma
                                                                   member_append_l[NNF_expr])
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (inst 1 "b")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 -3 -4 -5 1)
                                    (("2" (expand "member")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "length(cons2_var) > 0")
              (("1" (assert)
                (("1" (inst -2 "p2")
                  (("1" (inst -2 "x")
                    (("1" (split 2)
                      (("1" (flatten 1)
                        (("1" (skeep -1)
                          (("1" (split -4)
                            (("1" (assert)
                              (("1" (hide -2 -3 -4 -5 -6 2)
                                (("1" (split 1)
                                  (("1" (flatten -1)
                                    (("1" (skeep -1)
                                      (("1"
                                        (inst 1 "a")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten -1) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "conjunct_lists" -1)
                              (("2" (lemma "member_append_fi[NNF_expr]")
                                (("2" (inst?)
                                  (("2" (split -1)
                                    (("1" (lemma conjunct_elements_truth_prop)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (flatten -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (hide -2 -3 -4 -5 -6 -7 -8)
                                                (("1"
                                                  (hide 1 3)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (flatten -1)
                                                      (("1"
                                                        (inst 1 "cons1_var")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten -1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 4 -7)
                                                (("2"
                                                  (hide -2 -3)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (reveal -2 -3 -4)
                                                        (("2"
                                                          (inst 1 "p")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst 1 "p")
                                      (("2" (assert) nil nil)) nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten 1)
                        (("2" (expand "conjunct_lists" 1)
                          (("2" (expand "member" -1)
                            (("2" (skeep -1)
                              (("2" (split -1)
                                (("1" (skeep -3)
                                  (("1" (hide -6 -7 -8)
                                    (("1"
                                      (lemma "conjunct_elements_truth_prop")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (flatten -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep -1)
                                                    (("1"
                                                      (inst 1 "a!1")
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (lemma
                                                           "member_append_l[NNF_expr]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 1 "b")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "((EXISTS (a: NNF_expr): member(a, cons2_var) AND eval(a)(x)) AND
        EXISTS (b: NNF_expr): member(b, p2) AND eval(b)(x))")
                                  (("1" (hide -2 -3 -4 -5 -6)
                                    (("1" (assert)
                                      (("1"
                                        (flatten -1)
                                        (("1"
                                          (case
                                           "EXISTS (p: NNF_expr):
         member(p, conjunct_lists(cons2_var, p2)) AND eval(p)(x)")
                                          (("1"
                                            (skeep -1)
                                            (("1"
                                              (inst 1 "p")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "member_append_r[NNF_expr]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (split)
                                                      (("1" (propax) nil nil)
                                                       ("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (split -3)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2 3)
                                    (("2" (split 1)
                                      (("1"
                                        (inst 1 "a")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3) (("2" (hide -1 -2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append_r formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (append def-decl "list[T]" list_props nil)
    (member_append_l formula-decl nil more_list_props structures)
    (member_append_fi formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (conjunct_elements_truth_prop formula-decl nil dnf_polynomials nil)
    (conjunct_element def-decl "list[NNF_expr]" dnf_polynomials nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (conjunct_lists def-decl "list[NNF_expr]" dnf_polynomials nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (form_disjunction_prop 0
  (form_disjunction_prop-3 nil 3770464018
   ("" (induct "a")
    (("1" (typepred "a!1") (("1" (propax) nil nil)) nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var = null")
          (("1" (replace -1 1)
            (("1" (replace -1 -3)
              (("1" (hide -1 -2)
                (("1" (case "length(cons(cons1_var, null)) = 1")
                  (("1" (expand "form_disjunction")
                    (("1" (assert)
                      (("1" (expand "pull_out_conjunctions")
                        (("1" (case "cons(cons1_var, null) = (: cons1_var :)")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (grind)
                                (("1" (apply-extensionality) nil nil)
                                 ("2" (apply-extensionality) nil nil)
                                 ("3" (apply-extensionality) nil nil)
                                 ("4" (reveal -1)
                                  (("4" (hide -3)
                                    (("4" (inst -1 "cons1_var")
                                      (("4"
                                        (case "POR?(cons1_var)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "cons1_var")
                                          (("2"
                                            (expand "has_special_form" -1)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5" (apply-extensionality) nil nil)
                                 ("6" (apply-extensionality) nil nil)
                                 ("7" (apply-extensionality) nil nil)
                                 ("8" (reveal -1)
                                  (("8" (inst -1 "cons1_var")
                                    (("8" (case "POR?(cons1_var)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "cons1_var")
                                        (("2"
                                          (expand "has_special_form" -1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("9" (apply-extensionality) nil nil)
                                 ("10" (apply-extensionality) nil nil)
                                 ("11" (apply-extensionality) nil nil)
                                 ("12" (case "POR?(cons1_var)")
                                  (("1" (assert) nil nil)
                                   ("2" (typepred "cons1_var")
                                    (("2" (expand "has_special_form" -1)
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "length(cons2_var) > 0")
            (("1" (assert)
              (("1" (inst -2 "p")
                (("1" (split -2)
                  (("1" (inst -4 "p")
                    (("1"
                      (case "(member(p,
                                            pull_out_conjunctions(form_disjunction
                                                                  (cons(cons1_var, cons2_var))))
                                      IFF (p = cons1_var OR member(p, cons2_var)))")
                      (("1" (assert)
                        (("1" (hide -2 -3 -4 -5 1)
                          (("1" (expand "member") (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3)
                        (("2" (expand "form_disjunction" 1)
                          (("2"
                            (case "length(cons(cons1_var, cons2_var)) = 1")
                            (("1" (assert)
                              (("1" (hide -2 -3 -4 -5 1)
                                (("1" (grind) nil nil)) nil))
                              nil)
                             ("2" (assert)
                              (("2" (expand "pull_out_conjunctions" 2)
                                (("2" (split 2)
                                  (("1" (flatten 1)
                                    (("1" (lemma "member_append_fi[NNF_expr]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (hide -2 -3 -4 -5 -6)
                                            (("1"
                                              (hide 2 3 4)
                                              (("1"
                                                (expand
                                                 "pull_out_conjunctions")
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (case "POR?(cons1_var)")
                                                    (("1"
                                                      (reveal -7)
                                                      (("1"
                                                        (inst -1 "cons1_var")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "cons1_var")
                                                      (("2"
                                                        (expand
                                                         "has_special_form"
                                                         -1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten 1)
                                    (("2" (split -1)
                                      (("1"
                                        (case
                                         "member(p, pull_out_conjunctions(cons1_var))")
                                        (("1"
                                          (lemma member_append_l[NNF_expr])
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (expand
                                                 "pull_out_conjunctions")
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (case "POR?(cons1_var)")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (typepred "cons1_var")
                                                      (("2"
                                                        (expand
                                                         "has_special_form"
                                                         -1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "member(p, pull_out_conjunctions(form_disjunction(cons2_var)))")
                                        (("1"
                                          (lemma member_append_r[NNF_expr])
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep 1)
                    (("2" (hide 2 3)
                      (("2" (inst -4 "q")
                        (("2" (expand "member" -4) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (pe2 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (pe1 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (PITE? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PWHEN? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PIFF? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PolyRelExpr_PAND_extensionality formula-decl nil PolyRelExpr_adt nil)
    (r shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> rat]" PolyRelExpr_adt nil)
    (rel shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> TarskiRel]" PolyRelExpr_adt
     nil)
    (d shared-adt-accessor-decl
       "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> nat]" PolyRelExpr_adt nil)
    (pn shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> [nat -> rat]]"
     PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PolyRelExpr_PREL_extensionality formula-decl nil PolyRelExpr_adt nil)
    (pb adt-accessor-decl "[(PCONST?) -> bool]" PolyRelExpr_adt nil)
    (PCONST adt-constructor-decl "[bool -> (PCONST?)]" PolyRelExpr_adt nil)
    (PCONST? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PolyRelExpr_PCONST_extensionality formula-decl nil PolyRelExpr_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (member_append_fi formula-decl nil more_list_props structures)
    (member_append_l formula-decl nil more_list_props structures)
    (member_append_r formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (form_disjunction def-decl "NNF_expr" dnf_polynomials nil)
    (pull_out_conjunctions def-decl "list[NNF_expr]" dnf_polynomials nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (has_no_ors def-decl "bool" dnf_polynomials nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil)
  (form_disjunction_prop-2 nil 3770463820
   ("" (induct "a")
    (("1" (typepred "a!1") (("1" (propax) nil))) ("2" (grind) nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var = null")
          (("1" (replace -1 1)
            (("1" (replace -1 -3)
              (("1" (hide -1 -2)
                (("1" (case "length(cons(cons1_var, null)) = 1")
                  (("1" (expand "form_disjunction")
                    (("1" (assert)
                      (("1" (expand "pull_out_conjunctions")
                        (("1" (case "cons(cons1_var, null) = (: cons1_var :)")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (grind)
                                (("1" (apply-extensionality) nil)
                                 ("2" (apply-extensionality) nil)
                                 ("3" (apply-extensionality) nil)
                                 ("4" (reveal -1)
                                  (("4" (hide -3)
                                    (("4" (inst -1 "cons1_var")
                                      (("4"
                                        (case "POR?(cons1_var)")
                                        (("1" (assert) nil)
                                         ("2"
                                          (typepred "cons1_var")
                                          (("2"
                                            (expand "has_special_form" -1)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil)))))))))))))))
                                 ("5" (apply-extensionality) nil)
                                 ("6" (apply-extensionality) nil)
                                 ("7" (apply-extensionality) nil)
                                 ("8" (reveal -1)
                                  (("8" (inst -1 "cons1_var")
                                    (("8" (case "POR?(cons1_var)")
                                      (("1" (assert) nil)
                                       ("2"
                                        (typepred "cons1_var")
                                        (("2"
                                          (expand "has_special_form" -1)
                                          (("2" (grind) nil)))))))))))
                                 ("9" (apply-extensionality) nil)
                                 ("10" (apply-extensionality) nil)
                                 ("11" (apply-extensionality) nil)
                                 ("12" (case "POR?(cons1_var)")
                                  (("1" (assert) nil)
                                   ("2" (typepred "cons1_var")
                                    (("2" (expand "has_special_form" -1)
                                      (("2" (grind) nil)))))))))))))
                           ("2" (propax) nil)))))))))
                   ("2" (assert) nil)))))))))
           ("2" (case "length(cons2_var) > 0")
            (("1" (assert)
              (("1" (inst -2 "p")
                (("1" (split -2)
                  (("1" (inst -4 "p")
                    (("1"
                      (case "(member(p,
                             pull_out_conjunctions(form_disjunction
                                                   (cons(cons1_var, cons2_var))))
                       IFF (p = cons1_var OR member(p, cons2_var)))")
                      (("1" (assert)
                        (("1" (hide -2 -3 -4 -5 1)
                          (("1" (expand "member") (("1" (grind) nil)))))))
                       ("2" (hide 3)
                        (("2" (expand "form_disjunction" 1)
                          (("2"
                            (case "length(cons(cons1_var, cons2_var)) = 1")
                            (("1" (assert)
                              (("1" (hide -2 -3 -4 -5 1)
                                (("1" (grind) nil)))))
                             ("2" (assert)
                              (("2" (expand "pull_out_conjunctions" 2)
                                (("2" (split 2)
                                  (("1" (flatten 1)
                                    (("1" (lemma "member_append_fi[NNF_expr]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (hide -2 -3 -4 -5 -6)
                                            (("1"
                                              (hide 2 3 4)
                                              (("1"
                                                (expand
                                                 "pull_out_conjunctions")
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (apply-extensionality)
                                                    nil)
                                                   ("2"
                                                    (apply-extensionality)
                                                    nil)
                                                   ("3"
                                                    (apply-extensionality)
                                                    nil)
                                                   ("4"
                                                    (apply-extensionality)
                                                    nil)
                                                   ("5"
                                                    (case "POR?(cons1_var)")
                                                    (("1"
                                                      (reveal -7)
                                                      (("1"
                                                        (inst -1 "cons1_var")
                                                        (("1"
                                                          (assert)
                                                          nil)))))
                                                     ("2"
                                                      (typepred "cons1_var")
                                                      (("2"
                                                        (expand
                                                         "has_special_form"
                                                         -1)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))))
                                           ("2" (assert) nil)
                                           ("3" (propax) nil)))))))))
                                   ("2" (flatten 1)
                                    (("2" (split -1)
                                      (("1"
                                        (case
                                         "member(p, pull_out_conjunctions(cons1_var))")
                                        (("1"
                                          (lemma member_append_l[NNF_expr])
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil)))))
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (expand
                                                 "pull_out_conjunctions")
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (apply-extensionality)
                                                    nil)
                                                   ("2"
                                                    (apply-extensionality)
                                                    nil)
                                                   ("3"
                                                    (apply-extensionality)
                                                    nil)
                                                   ("4"
                                                    (apply-extensionality)
                                                    nil)
                                                   ("5"
                                                    (case "POR?(cons1_var)")
                                                    (("1" (assert) nil)
                                                     ("2"
                                                      (typepred "cons1_var")
                                                      (("2"
                                                        (expand
                                                         "has_special_form"
                                                         -1)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))))))))
                                       ("2"
                                        (case
                                         "member(p, pull_out_conjunctions(form_disjunction(cons2_var)))")
                                        (("1"
                                          (lemma member_append_r[NNF_expr])
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil)))))
                                         ("2"
                                          (assert)
                                          nil)))))))))))))))))))))))
                   ("2" (skeep 1)
                    (("2" (hide 2 3)
                      (("2" (inst -4 "q")
                        (("2" (expand "member" -4)
                          (("2" (assert) nil)))))))))))))))
             ("2" (hide 3) (("2" (grind) nil))))))))))))
    nil)
   nil nil)
  (form_disjunction_prop-1 nil 3770373711
   ("" (induct "a")
    (("1" (typepred "a!1") (("1" (propax) nil nil)) nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var = null")
          (("1" (replace -1 1)
            (("1" (replace -1 -3)
              (("1" (hide -1 -2)
                (("1" (case "length(cons(cons1_var, null)) = 1")
                  (("1" (expand "form_disjunction")
                    (("1" (assert)
                      (("1" (expand "pull_out_conjunctions")
                        (("1" (case "cons(cons1_var, null) = (: cons1_var :)")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (grind)
                                (("1" (apply-extensionality) nil nil)
                                 ("2" (apply-extensionality) nil nil)
                                 ("3" (apply-extensionality) nil nil)
                                 ("4" (apply-extensionality) nil nil)
                                 ("5" (reveal -1)
                                  (("5" (hide -3)
                                    (("5" (inst -1 "cons1_var")
                                      (("5"
                                        (case "POR?(cons1_var)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "cons1_var")
                                          (("2"
                                            (expand "has_special_form" -1)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6" (apply-extensionality) nil nil)
                                 ("7" (apply-extensionality) nil nil)
                                 ("8" (apply-extensionality) nil nil)
                                 ("9" (apply-extensionality) nil nil)
                                 ("10" (reveal -1)
                                  (("10" (inst -1 "cons1_var")
                                    (("10" (case "POR?(cons1_var)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "cons1_var")
                                        (("2"
                                          (expand "has_special_form" -1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("11" (apply-extensionality) nil nil)
                                 ("12" (apply-extensionality) nil nil)
                                 ("13" (apply-extensionality) nil nil)
                                 ("14" (apply-extensionality) nil nil)
                                 ("15" (case "POR?(cons1_var)")
                                  (("1" (assert) nil nil)
                                   ("2" (typepred "cons1_var")
                                    (("2" (expand "has_special_form" -1)
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "length(cons2_var) > 0")
            (("1" (assert)
              (("1" (inst -2 "p")
                (("1" (split -2)
                  (("1" (inst -4 "p")
                    (("1"
                      (case "(member(p,
              pull_out_conjunctions(form_disjunction
                                    (cons(cons1_var, cons2_var))))
        IFF (p = cons1_var OR member(p, cons2_var)))")
                      (("1" (assert)
                        (("1" (hide -2 -3 -4 -5 1)
                          (("1" (expand "member") (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3)
                        (("2" (expand "form_disjunction" 1)
                          (("2"
                            (case "length(cons(cons1_var, cons2_var)) = 1")
                            (("1" (assert)
                              (("1" (hide -2 -3 -4 -5 1)
                                (("1" (grind) nil nil)) nil))
                              nil)
                             ("2" (assert)
                              (("2" (expand "pull_out_conjunctions" 2)
                                (("2" (split 2)
                                  (("1" (flatten 1)
                                    (("1" (lemma "member_append_fi[NNF_expr]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (hide -2 -3 -4 -5 -6)
                                            (("1"
                                              (hide 2 3 4)
                                              (("1"
                                                (expand
                                                 "pull_out_conjunctions")
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("5"
                                                    (case "POR?(cons1_var)")
                                                    (("1"
                                                      (reveal -7)
                                                      (("1"
                                                        (inst -1 "cons1_var")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "cons1_var")
                                                      (("2"
                                                        (expand
                                                         "has_special_form"
                                                         -1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten 1)
                                    (("2" (split -1)
                                      (("1"
                                        (case
                                         "member(p, pull_out_conjunctions(cons1_var))")
                                        (("1"
                                          (lemma member_append_l[NNF_expr])
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (expand
                                                 "pull_out_conjunctions")
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("5"
                                                    (case "POR?(cons1_var)")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (typepred "cons1_var")
                                                      (("2"
                                                        (expand
                                                         "has_special_form"
                                                         -1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "member(p, pull_out_conjunctions(form_disjunction(cons2_var)))")
                                        (("1"
                                          (lemma member_append_r[NNF_expr])
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep 1)
                    (("2" (hide 2 3)
                      (("2" (inst -4 "q")
                        (("2" (expand "member" -4) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (pe2 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (pe1 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (PITE? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PWHEN? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PIFF? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PolyRelExpr_PAND_extensionality formula-decl nil PolyRelExpr_adt nil)
    (PABS adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PABS?)]" PolyRelExpr_adt nil)
    (PolyRelExpr_PABS_extensionality formula-decl nil PolyRelExpr_adt nil)
    (r shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> rat]" PolyRelExpr_adt nil)
    (rel shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> TarskiRel]" PolyRelExpr_adt
     nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (Polylist type-eq-decl nil polylist Sturm)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PolyRelExpr_PREL_extensionality formula-decl nil PolyRelExpr_adt nil)
    (pb adt-accessor-decl "[(PCONST?) -> bool]" PolyRelExpr_adt nil)
    (PCONST adt-constructor-decl "[bool -> (PCONST?)]" PolyRelExpr_adt nil)
    (PCONST? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PolyRelExpr_PCONST_extensionality formula-decl nil PolyRelExpr_adt nil)
    (member_append_fi formula-decl nil more_list_props structures)
    (member_append_l formula-decl nil more_list_props structures)
    (member_append_r formula-decl nil more_list_props structures)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (list_induction formula-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (distrib_ands_special_form 0
  (distrib_ands_special_form-1 nil 3770377256
   ("" (induct "a")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand "has_special_form" -3)
          (("5" (flatten -3)
            (("5" (assert)
              (("5" (inst -1 "q")
                (("5" (inst -2 "q")
                  (("5" (expand "distribute_ands" -5)
                    (("5" (lemma "form_disjunction_prop")
                      (("5" (inst?)
                        (("5" (split -1)
                          (("1"
                            (case "member(q,
               conjunct_lists(pull_out_conjunctions(distribute_ands
                                                    (PAND1_var)),
                              pull_out_conjunctions(distribute_ands
                                                    (PAND2_var))))")
                            (("1" (hide -2 -7)
                              (("1" (lemma "conjunct_lists_prop")
                                (("1" (inst?)
                                  (("1" (split -1)
                                    (("1" (inst -1 "q")
                                      (("1"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (reveal -6) (("2" (propax) nil nil))
                                      nil)
                                     ("3" (reveal -5) (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (skeep)
                            (("2" (hide -2 -3 -4 -5 -6 2)
                              (("2" (reveal -7 -8)
                                (("2" (lemma conjunct_lists_prop)
                                  (("2" (inst?)
                                    (("2" (split -1)
                                      (("1"
                                        (inst -1 "q!1")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (propax) nil nil)
                                       ("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (expand "distribute_ands" 1)
        (("6" (expand "pull_out_conjunctions" 1)
          (("6" (skeep)
            (("6" (expand "has_special_form" -3)
              (("6" (flatten -3)
                (("6" (assert)
                  (("6" (inst -1 "q")
                    (("6" (inst -2 "q")
                      (("6" (lemma "member_append_fi[NNF_expr]")
                        (("6" (inst?)
                          (("6" (split)
                            (("1" (assert) nil nil) ("2" (assert) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil))
    nil)
   ((member_append_fi formula-decl nil more_list_props structures)
    (form_disjunction_prop formula-decl nil dnf_polynomials nil)
    (conjunct_lists_prop formula-decl nil dnf_polynomials nil)
    (conjunct_lists def-decl "list[NNF_expr]" dnf_polynomials nil)
    (length def-decl "nat" list_props nil) (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (has_no_ors def-decl "bool" dnf_polynomials nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (pull_out_conjunctions def-decl "list[NNF_expr]" dnf_polynomials nil)
    (member def-decl "bool" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   shostak))
 (special_form_conjunct 0
  (special_form_conjunct-1 nil 3770377098
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lemma conjunct_lists_prop)
          (("" (inst?)
            (("" (split -1)
              (("1" (inst -1 "q")
                (("1" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil)
               ("2" (hide -1)
                (("2" (skeep)
                  (("2" (hide 2)
                    (("2" (lemma distrib_ands_special_form)
                      (("2" (inst -1 "a" "q!1")
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 2)
                (("3" (skeep)
                  (("3" (lemma distrib_ands_special_form)
                    (("3" (inst -1 "b" "q!1")
                      (("3" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conjunct_lists_prop formula-decl nil dnf_polynomials nil)
    (distrib_ands_special_form formula-decl nil dnf_polynomials nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (pull_out_conjunctions def-decl "list[NNF_expr]" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   shostak))
 (form_disjunction_eval 0
  (form_disjunction_eval-1 nil 3770136998
   ("" (induct "a")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (case "cons2_var = null")
        (("1" (grind) nil nil)
         ("2" (case "length(cons2_var) > 0")
          (("1" (assert)
            (("1" (skeep)
              (("1" (expand "member" 2)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (expand "form_disjunction" -1)
                      (("1" (case "length(cons(cons1_var, cons2_var)) > 1")
                        (("1" (assert)
                          (("1" (expand "eval" -2)
                            (("1" (split -2)
                              (("1" (grind) nil nil)
                               ("2" (inst -4 "x")
                                (("2" (assert)
                                  (("2" (skeep)
                                    (("2" (inst 1 "p")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten 1)
                    (("2" (skeep)
                      (("2" (typepred "p") (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 3) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (list_induction formula-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (form_disjunction def-decl "NNF_expr" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (pull_out_conjunctions_eval 0
  (pull_out_conjunctions_eval-3 nil 3772555117
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep*)
      (("3" (expand "has_special_form")
        (("3" (assert)
          (("3" (expand "distribute_ands")
            (("3" (expand "pull_out_conjunctions")
              (("3" (split 1)
                (("1" (flatten 1)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (expand "member") (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (expand "has_special_form") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten 1)
                  (("2" (skeep)
                    (("2" (expand "member")
                      (("2" (expand "member")
                        (("2" (replace -1 -2) (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (expand "has_special_form") (("4" (propax) nil nil)) nil)) nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand "has_special_form" -3)
          (("5" (flatten -3)
            (("5" (assert)
              (("5" (inst -1 "x")
                (("5" (inst -2 "x")
                  (("5"
                    (case "eval(distribute_ands(PAND(PAND1_var, PAND2_var)))(x) = eval(form_disjunction(conjunct_lists(pull_out_conjunctions(distribute_ands(PAND1_var)), pull_out_conjunctions(distribute_ands(PAND2_var)))))(x)")
                    (("1" (lemma form_disjunction_eval)
                      (("1" (inst?)
                        (("1" (replace -2 1)
                          (("1" (hide -2)
                            (("1" (split 1)
                              (("1" (flatten 1)
                                (("1" (assert)
                                  (("1" (hide -1)
                                    (("1" (skeep -1)
                                      (("1"
                                        (hide -7 -8)
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (hide -5)
                                            (("1"
                                              (hide -4 -3)
                                              (("1"
                                                (inst 1 p)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (expand
                                                       "distribute_ands"
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         form_disjunction_prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide -1 2)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (lemma
                                                                   "special_form_conjunct")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten 1)
                                (("2" (assert)
                                  (("2"
                                    (case "distribute_ands(PAND(PAND1_var, PAND2_var)) =  form_disjunction(conjunct_lists(pull_out_conjunctions(distribute_ands(PAND1_var)), pull_out_conjunctions(distribute_ands(PAND2_var))))")
                                    (("1" (replace -1 -2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (skeep -1)
                                            (("1"
                                              (hide -3 -4 -5 -6 -7 -8)
                                              (("1"
                                                (inst 1 "p_1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (lemma
                                                       form_disjunction_prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide -1 2)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (lemma
                                                                 special_form_conjunct)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2 3) (("2" (grind) nil nil))
                                      nil)
                                     ("3" (hide 2 3)
                                      (("3"
                                        (expand "has_special_form" 1)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (hide 2)
                      (("3" (hide -1 -2)
                        (("3" (lemma "length_pull_out_conjunctions")
                          (("3" (inst?)
                            (("3" (lemma "length_pull_out_conjunctions")
                              (("3" (inst -1 "distribute_ands(PAND2_var)")
                                (("3" (lemma length_conjunct_lists)
                                  (("3" (inst?) (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (expand "has_special_form" -3)
        (("6" (flatten -3)
          (("6" (assert)
            (("6" (skeep)
              (("6" (inst -1 "x")
                (("6" (inst -2 "x")
                  (("6" (expand "distribute_ands" 1)
                    (("6"
                      (case " eval(POR(distribute_ands(POR1_var), distribute_ands(POR2_var)))(x) =  (eval(distribute_ands(POR2_var))(x) OR  eval(distribute_ands(POR1_var))(x))")
                      (("1" (replace -1 1)
                        (("1" (expand "pull_out_conjunctions" 1)
                          (("1" (split 1)
                            (("1" (flatten 1)
                              (("1" (split -1)
                                (("1" (assert)
                                  (("1" (hide -3)
                                    (("1" (hide -2)
                                      (("1"
                                        (skeep -2)
                                        (("1"
                                          (inst 1 "p_1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "member_append_r[NNF_expr]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split)
                                                  (("1" (propax) nil nil)
                                                   ("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (hide -4)
                                    (("2" (skeep -3)
                                      (("2"
                                        (inst 1 "p_1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "member_append_l[NNF_expr]")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten 1)
                              (("2" (skeep -1)
                                (("2"
                                  (case "member(p_1,pull_out_conjunctions(distribute_ands(POR2_var))) OR member(p_1, pull_out_conjunctions(distribute_ands(POR1_var)))")
                                  (("1" (hide -4 -5)
                                    (("1" (hide -5)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (split -4)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst 1 "p_1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -2)
                                          (("2"
                                            (split -3)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst 1 "p_1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2 3)
                                    (("2" (hide -5 -6 -7 -8 -9)
                                      (("2"
                                        (hide -2 -3 -4)
                                        (("2"
                                          (lemma "member_append_fi[NNF_expr]")
                                          (("2"
                                            (inst
                                             -1
                                             "p_1"
                                             "pull_out_conjunctions(distribute_ands(POR1_var))"
                                             " pull_out_conjunctions(distribute_ands(POR2_var))")
                                            (("2"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil))
    nil)
   ((POR? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member_append_fi formula-decl nil more_list_props structures)
    (member_append_l formula-decl nil more_list_props structures)
    (member_append_r formula-decl nil more_list_props structures)
    (length_pull_out_conjunctions formula-decl nil dnf_polynomials nil)
    (length_conjunct_lists formula-decl nil dnf_polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (form_disjunction_eval formula-decl nil dnf_polynomials nil)
    (special_form_conjunct formula-decl nil dnf_polynomials nil)
    (form_disjunction_prop formula-decl nil dnf_polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (> const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (form_disjunction def-decl "NNF_expr" dnf_polynomials nil)
    (conjunct_lists def-decl "list[NNF_expr]" dnf_polynomials nil)
    (TRUE const-decl "bool" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (PREL1_var skolem-const-decl "[nat -> rat]" dnf_polynomials nil)
    (PREL2_var skolem-const-decl "nat" dnf_polynomials nil)
    (PREL3_var skolem-const-decl "TarskiRel" dnf_polynomials nil)
    (PREL4_var skolem-const-decl "rat" dnf_polynomials nil)
    (PCONST? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PCONST adt-constructor-decl "[bool -> (PCONST?)]" PolyRelExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (pull_out_conjunctions def-decl "list[NNF_expr]" dnf_polynomials nil)
    (member def-decl "bool" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   nil)
  (pull_out_conjunctions_eval-2 nil 3772554582
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep*)
      (("3" (expand "has_special_form")
        (("3" (assert)
          (("3" (expand "distribute_ands")
            (("3" (expand "pull_out_conjunctions") (("3" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (expand "distribute_ands")
      (("4" (skeep)
        (("4" (expand "has_special_form") (("4" (propax) nil nil)) nil)) nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand "has_special_form" -3)
          (("5" (flatten -3)
            (("5" (assert)
              (("5" (inst -1 "x")
                (("5" (inst -2 "x")
                  (("5"
                    (case "eval(distribute_ands(PAND(PAND1_var, PAND2_var)))(x) = eval(form_disjunction(conjunct_lists(pull_out_conjunctions(distribute_ands(PAND1_var)), pull_out_conjunctions(distribute_ands(PAND2_var)))))(x)")
                    (("1" (lemma form_disjunction_eval)
                      (("1" (inst?)
                        (("1" (replace -2 1)
                          (("1" (hide -2)
                            (("1" (split 1)
                              (("1" (flatten 1)
                                (("1" (assert)
                                  (("1" (hide -1)
                                    (("1" (skeep -1)
                                      (("1"
                                        (hide -7 -8)
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (hide -5)
                                            (("1"
                                              (hide -4 -3)
                                              (("1"
                                                (inst 1 p)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (expand
                                                       "distribute_ands"
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         form_disjunction_prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide -1 2)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (lemma
                                                                   "special_form_conjunct")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten 1)
                                (("2" (assert)
                                  (("2"
                                    (case "distribute_ands(PAND(PAND1_var, PAND2_var)) =  form_disjunction(conjunct_lists(pull_out_conjunctions(distribute_ands(PAND1_var)), pull_out_conjunctions(distribute_ands(PAND2_var))))")
                                    (("1" (replace -1 -2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (skeep -1)
                                            (("1"
                                              (hide -3 -4 -5 -6 -7 -8)
                                              (("1"
                                                (inst 1 "p_1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (lemma
                                                       form_disjunction_prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide -1 2)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (lemma
                                                                 special_form_conjunct)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2 3) (("2" (grind) nil nil))
                                      nil)
                                     ("3" (hide 2 3)
                                      (("3"
                                        (expand "has_special_form" 1)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (hide 2)
                      (("3" (hide -1 -2)
                        (("3" (lemma "length_pull_out_conjunctions")
                          (("3" (inst?)
                            (("3" (lemma "length_pull_out_conjunctions")
                              (("3" (inst -1 "distribute_ands(PAND2_var)")
                                (("3" (lemma length_conjunct_lists)
                                  (("3" (inst?) (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (expand "has_special_form" -3)
        (("6" (flatten -3)
          (("6" (assert)
            (("6" (skeep)
              (("6" (inst -1 "x")
                (("6" (inst -2 "x")
                  (("6" (expand "distribute_ands" 1)
                    (("6"
                      (case " eval(POR(distribute_ands(POR1_var), distribute_ands(POR2_var)))(x) =  (eval(distribute_ands(POR2_var))(x) OR  eval(distribute_ands(POR1_var))(x))")
                      (("1" (replace -1 1)
                        (("1" (expand "pull_out_conjunctions" 1)
                          (("1" (split 1)
                            (("1" (flatten 1)
                              (("1" (split -1)
                                (("1" (assert)
                                  (("1" (hide -3)
                                    (("1" (hide -2)
                                      (("1"
                                        (skeep -2)
                                        (("1"
                                          (inst 1 "p_1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "member_append_r[NNF_expr]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split)
                                                  (("1" (propax) nil nil)
                                                   ("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (hide -4)
                                    (("2" (skeep -3)
                                      (("2"
                                        (inst 1 "p_1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "member_append_l[NNF_expr]")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten 1)
                              (("2" (skeep -1)
                                (("2"
                                  (case "member(p_1,pull_out_conjunctions(distribute_ands(POR2_var))) OR member(p_1, pull_out_conjunctions(distribute_ands(POR1_var)))")
                                  (("1" (hide -4 -5)
                                    (("1" (hide -5)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (split -4)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst 1 "p_1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -2)
                                          (("2"
                                            (split -3)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst 1 "p_1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2 3)
                                    (("2" (hide -5 -6 -7 -8 -9)
                                      (("2"
                                        (hide -2 -3 -4)
                                        (("2"
                                          (lemma "member_append_fi[NNF_expr]")
                                          (("2"
                                            (inst
                                             -1
                                             "p_1"
                                             "pull_out_conjunctions(distribute_ands(POR1_var))"
                                             " pull_out_conjunctions(distribute_ands(POR2_var))")
                                            (("2"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil))
    nil)
   nil nil)
  (pull_out_conjunctions_eval-1 nil 3770137743
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand "has_special_form" -3)
          (("5" (flatten -3)
            (("5" (assert)
              (("5" (inst -1 "x")
                (("5" (inst -2 "x")
                  (("5"
                    (case "eval(distribute_ands(PAND(PAND1_var, PAND2_var)))(x) = eval(form_disjunction(conjunct_lists(pull_out_conjunctions(distribute_ands(PAND1_var)), pull_out_conjunctions(distribute_ands(PAND2_var)))))(x)")
                    (("1" (lemma form_disjunction_eval)
                      (("1" (inst?)
                        (("1" (replace -2 1)
                          (("1" (hide -2)
                            (("1" (split 1)
                              (("1" (flatten 1)
                                (("1" (assert)
                                  (("1" (hide -1)
                                    (("1" (skeep -1)
                                      (("1"
                                        (hide -7 -8)
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (hide -5)
                                            (("1"
                                              (hide -4 -3)
                                              (("1"
                                                (inst 1 p)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (expand
                                                       "distribute_ands"
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         form_disjunction_prop)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide -1 2)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (lemma
                                                                   "special_form_conjunct")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten 1)
                                (("2" (assert)
                                  (("2"
                                    (case "distribute_ands(PAND(PAND1_var, PAND2_var)) =  form_disjunction(conjunct_lists(pull_out_conjunctions(distribute_ands(PAND1_var)), pull_out_conjunctions(distribute_ands(PAND2_var))))")
                                    (("1" (replace -1 -2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (skeep -1)
                                            (("1"
                                              (hide -3 -4 -5 -6 -7 -8)
                                              (("1"
                                                (inst 1 "p_1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (lemma
                                                       form_disjunction_prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide -1 2)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (lemma
                                                                 special_form_conjunct)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2 3) (("2" (grind) nil nil))
                                      nil)
                                     ("3" (hide 2 3)
                                      (("3"
                                        (expand "has_special_form" 1)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (hide 2)
                      (("3" (hide -1 -2)
                        (("3" (lemma "length_pull_out_conjunctions")
                          (("3" (inst?)
                            (("3" (lemma "length_pull_out_conjunctions")
                              (("3" (inst -1 "distribute_ands(PAND2_var)")
                                (("3" (lemma length_conjunct_lists)
                                  (("3" (inst?) (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (expand "has_special_form" -3)
        (("6" (flatten -3)
          (("6" (assert)
            (("6" (skeep)
              (("6" (inst -1 "x")
                (("6" (inst -2 "x")
                  (("6" (expand "distribute_ands" 1)
                    (("6"
                      (case " eval(POR(distribute_ands(POR1_var), distribute_ands(POR2_var)))(x) =  (eval(distribute_ands(POR2_var))(x) OR  eval(distribute_ands(POR1_var))(x))")
                      (("1" (replace -1 1)
                        (("1" (expand "pull_out_conjunctions" 1)
                          (("1" (split 1)
                            (("1" (flatten 1)
                              (("1" (split -1)
                                (("1" (assert)
                                  (("1" (hide -3)
                                    (("1" (hide -2)
                                      (("1"
                                        (skeep -2)
                                        (("1"
                                          (inst 1 "p_1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "member_append_r[NNF_expr]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split)
                                                  (("1" (propax) nil nil)
                                                   ("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (hide -4)
                                    (("2" (skeep -3)
                                      (("2"
                                        (inst 1 "p_1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "member_append_l[NNF_expr]")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (split)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten 1)
                              (("2" (skeep -1)
                                (("2"
                                  (case "member(p_1,pull_out_conjunctions(distribute_ands(POR2_var))) OR member(p_1, pull_out_conjunctions(distribute_ands(POR1_var)))")
                                  (("1" (hide -4 -5)
                                    (("1" (hide -5)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (split -4)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst 1 "p_1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -2)
                                          (("2"
                                            (split -3)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (inst 1 "p_1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2 3)
                                    (("2" (hide -5 -6 -7 -8 -9)
                                      (("2"
                                        (hide -2 -3 -4)
                                        (("2"
                                          (lemma "member_append_fi[NNF_expr]")
                                          (("2"
                                            (inst
                                             -1
                                             "p_1"
                                             "pull_out_conjunctions(distribute_ands(POR1_var))"
                                             " pull_out_conjunctions(distribute_ands(POR2_var))")
                                            (("2"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil))
    nil)
   ((POR? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt nil)
    (member_append_fi formula-decl nil more_list_props structures)
    (member_append_l formula-decl nil more_list_props structures)
    (member_append_r formula-decl nil more_list_props structures)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (polylist const-decl "real" polylist Sturm)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist Sturm)
    (PCONST? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PCONST adt-constructor-decl "[bool -> (PCONST?)]" PolyRelExpr_adt nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (list type-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   shostak))
 (form_disjunction_truth_TCC1 0
  (form_disjunction_truth_TCC1-1 nil 3770133875
   ("" (skeep)
    (("" (lemma length_pull_out_conjunctions)
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((length_pull_out_conjunctions formula-decl nil dnf_polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   nil
   (form_disjunction_truth subtype
    "dnf_polynomials.pull_out_conjunctions(dnf_polynomials.distribute_ands(dnf_polynomials.p))"
    "{a: list_adt[NNF_expr].list | reals.>(list_props[NNF_expr].length(a), 0)}")))
 (form_disjunction_truth 0
  (form_disjunction_truth-1 nil 3770133878
   ("" (skeep)
    (("" (skeep)
      (("" (split)
        (("1" (flatten)
          (("1" (lemma form_disjunction_eval)
            (("1" (inst?)
              (("1" (flatten -1)
                (("1" (hide -1)
                  (("1" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (lemma "pull_out_conjunctions_eval")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma form_disjunction_eval)
            (("2" (inst?)
              (("2" (flatten -1)
                (("2" (split -1)
                  (("1" (hide -2)
                    (("1" (skeep)
                      (("1" (lemma "pull_out_conjunctions_eval")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst 1 "p_1") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (pull_out_conjunctions def-decl "list[NNF_expr]" dnf_polynomials nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (pull_out_conjunctions_eval formula-decl nil dnf_polynomials nil)
    (form_disjunction_eval formula-decl nil dnf_polynomials nil))
   shostak))
 (dnf_TCC1 0
  (dnf_TCC1-1 nil 3769959782
   ("" (lemma "nnf_has_special_form") (("" (propax) nil nil)) nil)
   ((nnf_has_special_form formula-decl nil dnf_polynomials nil)) nil
   (dnf subtype "dnf_polynomials.nnf(dnf_polynomials.p)" "NNF_expr")))
 (nnf_pnot_preserves_truth 0
  (nnf_pnot_preserves_truth-27 nil 3772558018
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (expand "nnf" 1)
              (("3" (lemma abs_nnf_rel_preserves_truth)
                (("3" (inst?)
                  (("3" (inst -1 "x")
                    (("3" (expand "nnf" 1)
                      (("3" (replace -1 1)
                        (("3" (expand "eval" 1)
                          (("3" (expand "eval" 1)
                            (("3" (hide -2 -3)
                              (("3"
                                (case "eval(abs_nnf_rel(PABS1_var, PABS2_var, PABS3_var, PABS4_var))(x) = eval_rel(PABS3_var)
                                                                     (abs(polynomial(PABS1_var, PABS2_var)(x)), PABS4_var)")
                                (("1" (assert) (("1" (ground) nil nil)) nil)
                                 ("2" (hide 2)
                                  (("2" (hide -1)
                                    (("2" (expand "eval_rel")
                                      (("2"
                                        (expand "abs_nnf_rel")
                                        (("2"
                                          (case "PABS3_var = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (case "PABS4_var <= 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case
                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "eval")
                                                    (("2"
                                                      (expand "eval")
                                                      (("2"
                                                        (expand "eval_rel")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "PABS3_var = ple")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "eval")
                                                (("1"
                                                  (case "PABS4_var < 0")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (case
                                                         " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "eval")
                                                          (("2"
                                                            (expand
                                                             "eval_rel")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "PABS3_var = pgt")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "eval")
                                                  (("1"
                                                    (case "PABS4_var < 0")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (expand "eval")
                                                            (("1"
                                                              (expand
                                                               "eval_rel")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "eval")
                                                            (("2"
                                                              (expand
                                                               "eval_rel")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "PABS3_var = pge")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case "PABS4_var < 0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "PABS4_var <= 0 ")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               " PABS4_var <= 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "PABS3_var = peq")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "eval")
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval_rel")
                                                          (("1"
                                                            (case
                                                             "PABS4_var < 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (case
                                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "polynomial(PABS1_var, PABS2_var)(x) = -1 * PABS4_var")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "PABS3_var = pneq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (case
                                                               "PABS4_var < 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (case
                                                                     "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "-polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (expand "nnf" 1)
              (("4" (expand "nnf" 1)
                (("4" (expand "eval" 1)
                  (("4" (hide -1 -2 -3)
                    (("4" (inst -1 "PNOT(PAND1_var)")
                      (("4" (reveal -1)
                        (("4" (inst -1 "PNOT(PAND2_var)")
                          (("4" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (expand "nnf" -1)
                                    (("1" (expand "nnf" -2)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (skeep)
            (("5" (expand "nnf" 1)
              (("5" (expand "nnf" 1)
                (("5" (expand "eval" 1)
                  (("5" (hide -1 -2 -3)
                    (("5" (inst -1 "PNOT(POR1_var)")
                      (("5" (reveal -1)
                        (("5" (inst -1 "PNOT(POR2_var)")
                          (("5" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x") (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (skeep)
          (("6" (skeep)
            (("6" (expand "nnf" 1)
              (("6" (inst -3 "PNOT1_var_1")
                (("6" (hide -1 -2)
                  (("6" (split)
                    (("1" (inst -1 "x")
                      (("1" (replace -1 1) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (skeep)
          (("7" (skeep)
            (("7" (expand "nnf" 1)
              (("7" (expand "nnf" 1)
                (("7" (expand "eval" 1)
                  (("7" (hide -1 -2 -3)
                    (("7" (inst -1 "PIMPLIES1_var")
                      (("7" (reveal -1)
                        (("7" (inst -1 "PNOT(PIMPLIES2_var)")
                          (("7" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (replace -1 1) (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (skeep)
          (("8" (skeep)
            (("8" (expand "nnf" 1)
              (("8" (expand "nnf" 1)
                (("8" (expand "eval" 1)
                  (("8" (expand "eval" 1)
                    (("8" (hide -1 -2 -3)
                      (("8" (inst -1 "PIFF1_var")
                        (("8" (reveal -1)
                          (("8" (inst -1 "PIFF2_var")
                            (("8" (reveal -1)
                              (("8" (inst -1 "PNOT(PIFF1_var)")
                                (("8" (reveal -1)
                                  (("8" (inst -1 "PNOT(PIFF2_var)")
                                    (("8" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (inst -2 "x")
                                                (("1"
                                                  (inst -3 "x")
                                                  (("1"
                                                    (inst -4 "x")
                                                    (("1"
                                                      (expand "nnf" -3)
                                                      (("1"
                                                        (expand "nnf" -4)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (replace -2 1)
                                                            (("1"
                                                              (replace -3 1)
                                                              (("1"
                                                                (replace -4 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (skeep)
          (("9" (skeep)
            (("9" (expand "nnf" 1)
              (("9" (hide -1 -2)
                (("9" (hide -1)
                  (("9" (expand "nnf" 1)
                    (("9" (expand "eval" 1)
                      (("9" (inst -1 "PNOT(PWHEN1_var)")
                        (("9" (reveal -1)
                          (("9" (inst -1 "PWHEN2_var")
                            (("9" (split)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (inst -2 "x")
                                    (("1" (expand "nnf" -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("10" (skeep)
          (("10" (skeep)
            (("10" (expand "nnf" 1)
              (("10" (expand "nnf" 1)
                (("10" (expand "eval" 1)
                  (("10" (expand "eval" 1)
                    (("10" (hide -1 -2 -3)
                      (("10" (hide -1)
                        (("10" (inst -1 "PITE1_var")
                          (("10" (reveal -1)
                            (("10" (inst -1 "PNOT(PITE2_var)")
                              (("10" (reveal -1)
                                (("10" (inst -1 "PNOT(PITE1_var)")
                                  (("10" (reveal -1)
                                    (("10" (inst -1 "PNOT(PITE3_var)")
                                      (("10"
                                        (split -1)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (inst -1 "x")
                                                (("1"
                                                  (inst -2 "x")
                                                  (("1"
                                                    (inst -3 "x")
                                                    (("1"
                                                      (inst -4 "x")
                                                      (("1"
                                                        (expand "nnf" -2)
                                                        (("1"
                                                          (expand "nnf" -3)
                                                          (("1"
                                                            (expand "nnf" -4)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (replace -2 1)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skeep)
        (("7" (skeep)
          (("7" (hide -1 -2)
            (("7" (expand "nnf" 1)
              (("7" (expand "eval" 1)
                (("7" (inst -1 "PNOT(PIMPLIES1_var)")
                  (("7" (reveal -1)
                    (("7" (inst -1 "PIMPLIES2_var")
                      (("7" (split)
                        (("1" (split)
                          (("1" (inst -1 "x")
                            (("1" (inst -2 "x")
                              (("1" (expand "nnf" -1)
                                (("1" (replace -1 1)
                                  (("1" (replace -2 1)
                                    (("1" (hide -1 -2) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (skeep)
          (("8" (expand "nnf" 1)
            (("8" (expand "eval" 1)
              (("8" (expand "eval" 1)
                (("8" (hide -1 -2)
                  (("8" (inst -1 "PIFF1_var")
                    (("8" (reveal -1)
                      (("8" (inst -1 "PIFF2_var")
                        (("8" (reveal -1)
                          (("8" (inst -1 "PNOT(PIFF2_var)")
                            (("8" (reveal -1)
                              (("8" (inst -1 "PNOT(PIFF1_var)")
                                (("8" (split)
                                  (("1" (split)
                                    (("1" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (inst -2 "x")
                                            (("1"
                                              (inst -3 "x")
                                              (("1"
                                                (inst -4 "x")
                                                (("1"
                                                  (expand "nnf" -3)
                                                  (("1"
                                                    (expand "nnf" -4)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (replace -3 1)
                                                          (("1"
                                                            (replace -4 1)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               -4)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (skeep)
          (("9" (expand "nnf" 1)
            (("9" (expand "eval" 1)
              (("9" (hide -1 -2)
                (("9" (inst -1 "PWHEN1_var")
                  (("9" (reveal -1)
                    (("9" (inst -1 "PNOT(PWHEN2_var)")
                      (("9" (split)
                        (("1" (split)
                          (("1" (inst -1 "x")
                            (("1" (inst -2 "x")
                              (("1" (expand "nnf" -2)
                                (("1" (replace -1 1)
                                  (("1" (replace -2 1) (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skeep)
        (("10" (skeep)
          (("10" (hide -1 -2 -3)
            (("10" (expand "nnf" 1)
              (("10" (expand "eval" 1)
                (("10" (expand "eval" 1)
                  (("10" (inst -1 "PNOT(PITE1_var)")
                    (("10" (reveal -1)
                      (("10" (inst -1 "PITE2_var")
                        (("10" (reveal -1)
                          (("10" (inst -1 "PITE3_var")
                            (("10" (reveal -1)
                              (("10" (inst -1 "PITE1_var")
                                (("10" (split -1)
                                  (("1" (split -2)
                                    (("1" (split -3)
                                      (("1"
                                        (split -4)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (inst -2 "x")
                                            (("1"
                                              (inst -3 "x")
                                              (("1"
                                                (inst -4 "x")
                                                (("1"
                                                  (expand "nnf" -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (replace -3 1)
                                                        (("1"
                                                          (replace -4 1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2" (grind) nil nil)) nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (not_eval_rel const-decl "TarskiRel" dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy nil)
    (pneq adt-constructor-decl "(pneq?)" poly_system_strategy nil)
    (pneq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy nil)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy nil)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (abs_nnf_rel_preserves_truth formula-decl nil dnf_polynomials nil)
    (abs_nnf_rel_pnot_preserves_truth formula-decl nil dnf_polynomials nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs_nnf_rel const-decl "PolyRelExpr" dnf_polynomials nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (depth def-decl "nat" dnf_polynomials nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (nnf_pnot_preserves_truth-26 nil 3772557916
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (expand "nnf" 1)
              (("3" (lemma abs_nnf_rel_preserves_truth)
                (("3" (inst?)
                  (("3" (inst -1 "x")
                    (("3" (expand "nnf" 1)
                      (("3" (replace -1 1)
                        (("3" (expand "eval" 1)
                          (("3" (expand "eval" 1)
                            (("3" (hide -2 -3)
                              (("3"
                                (case "eval(abs_nnf_rel(PABS1_var, PABS2_var, PABS3_var, PABS4_var))(x) = eval_rel(PABS3_var)
                                                          (abs(polynomial(PABS1_var, PABS2_var)(x)), PABS4_var)")
                                (("1" (assert) (("1" (ground) nil nil)) nil)
                                 ("2" (hide 2)
                                  (("2" (hide -1)
                                    (("2" (expand "eval_rel")
                                      (("2"
                                        (expand "abs_nnf_rel")
                                        (("2"
                                          (case "PABS3_var = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (case "PABS4_var <= 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case
                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "eval")
                                                    (("2"
                                                      (expand "eval")
                                                      (("2"
                                                        (expand "eval_rel")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "PABS3_var = ple")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "eval")
                                                (("1"
                                                  (case "PABS4_var < 0")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (case
                                                         " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "eval")
                                                          (("2"
                                                            (expand
                                                             "eval_rel")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "PABS3_var = pgt")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "eval")
                                                  (("1"
                                                    (case "PABS4_var < 0")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (expand "eval")
                                                            (("1"
                                                              (expand
                                                               "eval_rel")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "eval")
                                                            (("2"
                                                              (expand
                                                               "eval_rel")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "PABS3_var = pge")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case "PABS4_var < 0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "PABS4_var <= 0 ")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               " PABS4_var <= 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "PABS3_var = peq")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "eval")
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval_rel")
                                                          (("1"
                                                            (case
                                                             "PABS4_var < 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (case
                                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "polynomial(PABS1_var, PABS2_var)(x) = -1 * PABS4_var")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "PABS3_var = pneq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (case
                                                               "PABS4_var < 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (case
                                                                     "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "-polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (expand "nnf" 1)
              (("4" (expand "nnf" 1)
                (("4" (expand "eval" 1)
                  (("4" (hide -1 -2 -3)
                    (("4" (inst -1 "PNOT(PAND1_var)")
                      (("4" (reveal -1)
                        (("4" (inst -1 "PNOT(PAND2_var)")
                          (("4" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (expand "nnf" -1)
                                    (("1" (expand "nnf" -2)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (skeep)
            (("5" (expand "nnf" 1)
              (("5" (expand "nnf" 1)
                (("5" (expand "eval" 1)
                  (("5" (hide -1 -2 -3)
                    (("5" (inst -1 "PNOT(POR1_var)")
                      (("5" (reveal -1)
                        (("5" (inst -1 "PNOT(POR2_var)")
                          (("5" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x") (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (skeep)
          (("6" (skeep)
            (("6" (expand "nnf" 1)
              (("6" (inst -3 "PNOT1_var_1")
                (("6" (hide -1 -2)
                  (("6" (split)
                    (("1" (inst -1 "x")
                      (("1" (replace -1 1) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (skeep)
          (("7" (skeep)
            (("7" (expand "nnf" 1)
              (("7" (expand "nnf" 1)
                (("7" (expand "eval" 1)
                  (("7" (hide -1 -2 -3)
                    (("7" (inst -1 "PIMPLIES1_var")
                      (("7" (reveal -1)
                        (("7" (inst -1 "PNOT(PIMPLIES2_var)")
                          (("7" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (replace -1 1) (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (skeep)
          (("8" (skeep)
            (("8" (expand "nnf" 1)
              (("8" (expand "nnf" 1)
                (("8" (expand "eval" 1)
                  (("8" (expand "eval" 1)
                    (("8" (hide -1 -2 -3)
                      (("8" (inst -1 "PIFF1_var")
                        (("8" (reveal -1)
                          (("8" (inst -1 "PIFF2_var")
                            (("8" (reveal -1)
                              (("8" (inst -1 "PNOT(PIFF1_var)")
                                (("8" (reveal -1)
                                  (("8" (inst -1 "PNOT(PIFF2_var)")
                                    (("8" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (inst -2 "x")
                                                (("1"
                                                  (inst -3 "x")
                                                  (("1"
                                                    (inst -4 "x")
                                                    (("1"
                                                      (expand "nnf" -3)
                                                      (("1"
                                                        (expand "nnf" -4)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (replace -2 1)
                                                            (("1"
                                                              (replace -3 1)
                                                              (("1"
                                                                (replace -4 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (postpone) nil nil) ("10" (postpone) nil nil))
        nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil) ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-25 nil 3772557821
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil)))))))
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel")
                              (("1" (assert) nil)))))))
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil)))))
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil)))))))
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil)))))
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil)))))
                                 ("2" (assert) nil)))))))))))))))))))))))))))
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil)))))))))))))))
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil)))))))
                                 ("2" (hide 2) (("2" (grind) nil)))))))))))
                         ("2" (hide 2) (("2" (grind) nil)))))))))))))))))))))
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil)))))
                               ("2" (hide 2) (("2" (grind) nil)))))))))
                         ("2" (hide 2) (("2" (grind) nil)))))))))))))))))))))
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil) ("2" (grind) nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (expand "nnf" 1)
              (("3" (lemma abs_nnf_rel_preserves_truth)
                (("3" (inst?)
                  (("3" (inst -1 "x")
                    (("3" (expand "nnf" 1)
                      (("3" (replace -1 1)
                        (("3" (expand "eval" 1)
                          (("3" (expand "eval" 1)
                            (("3" (hide -2 -3)
                              (("3"
                                (case "eval(abs_nnf_rel(PABS1_var, PABS2_var, PABS3_var, PABS4_var))(x) = eval_rel(PABS3_var)
                                               (abs(polynomial(PABS1_var, PABS2_var)(x)), PABS4_var)")
                                (("1" (assert) (("1" (ground) nil)))
                                 ("2" (hide 2)
                                  (("2" (hide -1)
                                    (("2" (expand "eval_rel")
                                      (("2"
                                        (expand "abs_nnf_rel")
                                        (("2"
                                          (case "PABS3_var = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (case "PABS4_var <= 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case
                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                      (("1" (assert) nil)
                                                       ("2"
                                                        (assert)
                                                        nil)))))))
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "eval")
                                                    (("2"
                                                      (expand "eval")
                                                      (("2"
                                                        (expand "eval_rel")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1" (assert) nil)
                                                           ("2"
                                                            (assert)
                                                            nil)))))))))))))))))
                                           ("2"
                                            (case "PABS3_var = ple")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "eval")
                                                (("1"
                                                  (case "PABS4_var < 0")
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (case
                                                         " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (assert)
                                                              nil)))))
                                                         ("2"
                                                          (expand "eval")
                                                          (("2"
                                                            (expand
                                                             "eval_rel")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))
                                             ("2"
                                              (case "PABS3_var = pgt")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "eval")
                                                  (("1"
                                                    (case "PABS4_var < 0")
                                                    (("1" (assert) nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (expand "eval")
                                                            (("1"
                                                              (expand
                                                               "eval_rel")
                                                              (("1"
                                                                (assert)
                                                                nil)))))
                                                           ("2"
                                                            (expand "eval")
                                                            (("2"
                                                              (expand
                                                               "eval_rel")
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))))))))
                                               ("2"
                                                (case "PABS3_var = pge")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case "PABS4_var < 0")
                                                      (("1" (assert) nil)
                                                       ("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "PABS4_var <= 0 ")
                                                              (("1"
                                                                (assert)
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               " PABS4_var <= 0")
                                                              (("1"
                                                                (assert)
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (propax)
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (case "PABS3_var = peq")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "eval")
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval_rel")
                                                          (("1"
                                                            (case
                                                             "PABS4_var < 0")
                                                            (("1"
                                                              (assert)
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (propax)
                                                                      nil)))))
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (case
                                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "polynomial(PABS1_var, PABS2_var)(x) = -1 * PABS4_var")
                                                                          (("1"
                                                                            (assert)
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("2"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))
                                                   ("2"
                                                    (case "PABS3_var = pneq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (case
                                                               "PABS4_var < 0")
                                                              (("1"
                                                                (assert)
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (case
                                                                     "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "-polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil)))))
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil)))))))))))))))))))))
                                                     ("2"
                                                      (assert)
                                                      nil)))))))))))))))))))))))))))))))))))))))))))))
         ("4" (skeep)
          (("4" (skeep)
            (("4" (expand "nnf" 1)
              (("4" (expand "nnf" 1)
                (("4" (expand "eval" 1)
                  (("4" (hide -1 -2 -3)
                    (("4" (inst -1 "PNOT(PAND1_var)")
                      (("4" (reveal -1)
                        (("4" (inst -1 "PNOT(PAND2_var)")
                          (("4" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (expand "nnf" -1)
                                    (("1" (expand "nnf" -2)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (grind) nil)))))))))))))
                               ("2" (hide 2) (("2" (grind) nil)))))
                             ("2" (hide 2)
                              (("2" (grind) nil)))))))))))))))))))))))
         ("5" (skeep)
          (("5" (skeep)
            (("5" (expand "nnf" 1)
              (("5" (expand "nnf" 1)
                (("5" (expand "eval" 1)
                  (("5" (hide -1 -2 -3)
                    (("5" (inst -1 "PNOT(POR1_var)")
                      (("5" (reveal -1)
                        (("5" (inst -1 "PNOT(POR2_var)")
                          (("5" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x") (("1" (grind) nil)))))
                               ("2" (hide 2) (("2" (grind) nil)))))
                             ("2" (hide 2)
                              (("2" (grind) nil)))))))))))))))))))))))
         ("6" (postpone) nil) ("7" (postpone) nil) ("8" (postpone) nil)
         ("9" (postpone) nil) ("10" (postpone) nil)))
       ("7" (postpone) nil) ("8" (postpone) nil) ("9" (postpone) nil)
       ("10" (postpone) nil))))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-24 nil 3772557735
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (expand "nnf" 1)
              (("3" (lemma abs_nnf_rel_preserves_truth)
                (("3" (inst?)
                  (("3" (inst -1 "x")
                    (("3" (expand "nnf" 1)
                      (("3" (replace -1 1)
                        (("3" (expand "eval" 1)
                          (("3" (expand "eval" 1)
                            (("3" (hide -2 -3)
                              (("3"
                                (case "eval(abs_nnf_rel(PABS1_var, PABS2_var, PABS3_var, PABS4_var))(x) = eval_rel(PABS3_var)
                                    (abs(polynomial(PABS1_var, PABS2_var)(x)), PABS4_var)")
                                (("1" (assert) (("1" (ground) nil nil)) nil)
                                 ("2" (hide 2)
                                  (("2" (hide -1)
                                    (("2" (expand "eval_rel")
                                      (("2"
                                        (expand "abs_nnf_rel")
                                        (("2"
                                          (case "PABS3_var = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (case "PABS4_var <= 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case
                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "eval")
                                                    (("2"
                                                      (expand "eval")
                                                      (("2"
                                                        (expand "eval_rel")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "PABS3_var = ple")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "eval")
                                                (("1"
                                                  (case "PABS4_var < 0")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (case
                                                         " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "eval")
                                                          (("2"
                                                            (expand
                                                             "eval_rel")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "PABS3_var = pgt")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "eval")
                                                  (("1"
                                                    (case "PABS4_var < 0")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (expand "eval")
                                                            (("1"
                                                              (expand
                                                               "eval_rel")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "eval")
                                                            (("2"
                                                              (expand
                                                               "eval_rel")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "PABS3_var = pge")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case "PABS4_var < 0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "PABS4_var <= 0 ")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               " PABS4_var <= 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "PABS3_var = peq")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "eval")
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval_rel")
                                                          (("1"
                                                            (case
                                                             "PABS4_var < 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (case
                                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "polynomial(PABS1_var, PABS2_var)(x) = -1 * PABS4_var")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "PABS3_var = pneq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (case
                                                               "PABS4_var < 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (case
                                                                     "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "-polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (expand "nnf" 1)
              (("4" (expand "nnf" 1)
                (("4" (expand "eval" 1)
                  (("4" (hide -1 -2 -3)
                    (("4" (inst -1 "PNOT(PAND1_var)")
                      (("4" (reveal -1)
                        (("4" (inst -1 "PNOT(PAND2_var)")
                          (("4" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (expand "nnf" -1)
                                    (("1" (expand "nnf" -2)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep) (("5" (skeep) (("5" (postpone) nil nil)) nil)) nil)
         ("6" (postpone) nil nil) ("7" (postpone) nil nil)
         ("8" (postpone) nil nil) ("9" (postpone) nil nil)
         ("10" (postpone) nil nil))
        nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil) ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-23 nil 3772557236
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (expand "nnf" 1)
              (("3" (lemma abs_nnf_rel_preserves_truth)
                (("3" (inst?)
                  (("3" (inst -1 "x")
                    (("3" (expand "nnf" 1)
                      (("3" (replace -1 1)
                        (("3" (expand "eval" 1)
                          (("3" (expand "eval" 1)
                            (("3" (hide -2 -3)
                              (("3"
                                (case "eval(abs_nnf_rel(PABS1_var, PABS2_var, PABS3_var, PABS4_var))(x) = eval_rel(PABS3_var)
                         (abs(polynomial(PABS1_var, PABS2_var)(x)), PABS4_var)")
                                (("1" (assert) (("1" (ground) nil nil)) nil)
                                 ("2" (hide 2)
                                  (("2" (hide -1)
                                    (("2" (expand "eval_rel")
                                      (("2"
                                        (expand "abs_nnf_rel")
                                        (("2"
                                          (case "PABS3_var = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (case "PABS4_var <= 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case
                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "eval")
                                                    (("2"
                                                      (expand "eval")
                                                      (("2"
                                                        (expand "eval_rel")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "PABS3_var = ple")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "eval")
                                                (("1"
                                                  (case "PABS4_var < 0")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (case
                                                         " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "eval")
                                                          (("2"
                                                            (expand
                                                             "eval_rel")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "PABS3_var = pgt")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "eval")
                                                  (("1"
                                                    (case "PABS4_var < 0")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (expand "eval")
                                                            (("1"
                                                              (expand
                                                               "eval_rel")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "eval")
                                                            (("2"
                                                              (expand
                                                               "eval_rel")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "PABS3_var = pge")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case "PABS4_var < 0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "PABS4_var <= 0 ")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               " PABS4_var <= 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "eval")
                                                                  (("2"
                                                                    (expand
                                                                     "eval_rel")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "PABS3_var = peq")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "eval")
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval_rel")
                                                          (("1"
                                                            (case
                                                             "PABS4_var < 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (case
                                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "polynomial(PABS1_var, PABS2_var)(x) = -1 * PABS4_var")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "PABS3_var = pneq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "eval")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (case
                                                               "PABS4_var < 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (case
                                                                     "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "-polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "polynomial(PABS1_var, PABS2_var)(x) = PABS4_var")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (postpone) nil nil) ("5" (postpone) nil nil)
         ("6" (postpone) nil nil) ("7" (postpone) nil nil)
         ("8" (postpone) nil nil) ("9" (postpone) nil nil)
         ("10" (postpone) nil nil))
        nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil) ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-22 nil 3772556716
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (expand "nnf" 1)
              (("3" (lemma abs_nnf_rel_preserves_truth)
                (("3" (inst?)
                  (("3" (inst -1 "x")
                    (("3" (expand "nnf" 1)
                      (("3" (replace -1 1)
                        (("3" (expand "eval" 1)
                          (("3" (expand "eval" 1)
                            (("3" (hide -2 -3)
                              (("3"
                                (case "eval(abs_nnf_rel(PABS1_var, PABS2_var, PABS3_var, PABS4_var))(x) = eval_rel(PABS3_var)
              (abs(polynomial(PABS1_var, PABS2_var)(x)), PABS4_var)")
                                (("1" (assert) (("1" (ground) nil nil)) nil)
                                 ("2" (hide 2)
                                  (("2" (hide -1)
                                    (("2" (expand "eval_rel")
                                      (("2"
                                        (expand "abs_nnf_rel")
                                        (("2"
                                          (case "PABS3_var = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (case "PABS4_var <= 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (case
                                                       "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "eval")
                                                    (("2"
                                                      (expand "eval")
                                                      (("2"
                                                        (expand "eval_rel")
                                                        (("2"
                                                          (case
                                                           "polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "PABS3_var = ple")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "eval")
                                                (("1"
                                                  (case "PABS4_var < 0")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (case
                                                         " polynomial(PABS1_var, PABS2_var)(x) < 0")
                                                        (("1"
                                                          (expand "eval")
                                                          (("1"
                                                            (expand
                                                             "eval_rel")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "eval")
                                                          (("2"
                                                            (expand
                                                             "eval_rel")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "PABS3_var = pgt")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "eval")
                                                  (("1"
                                                    (expand "eval")
                                                    (("1"
                                                      (expand "eval_rel")
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (case
                                                           "PABS4_var < 0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "PABS3_var = pge")
                                                (("1"
                                                  (assert)
                                                  (("1" (postpone) nil nil))
                                                  nil)
                                                 ("2"
                                                  (case "PABS3_var = peq")
                                                  (("1"
                                                    (assert)
                                                    (("1" (postpone) nil nil))
                                                    nil)
                                                   ("2"
                                                    (case "PABS3_var = pneq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (postpone) nil nil) ("5" (postpone) nil nil)
         ("6" (postpone) nil nil) ("7" (postpone) nil nil)
         ("8" (postpone) nil nil) ("9" (postpone) nil nil)
         ("10" (postpone) nil nil))
        nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil) ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-21 nil 3772556567
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil)))))))
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel")
                              (("1" (assert) nil)))))))
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil)))))
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil)))))))
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil)))))
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil)))))
                                 ("2" (assert) nil)))))))))))))))))))))))))))
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil)))))))))))))))
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil)))))))
                                 ("2" (hide 2) (("2" (grind) nil)))))))))))
                         ("2" (hide 2) (("2" (grind) nil)))))))))))))))))))))
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil)))))
                               ("2" (hide 2) (("2" (grind) nil)))))))))
                         ("2" (hide 2) (("2" (grind) nil)))))))))))))))))))))
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil) ("2" (grind) nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (skeep)
              (("3" (expand "nnf" 1)
                (("3" (lemma abs_nnf_rel_preserves_truth)
                  (("3" (inst?)
                    (("3" (inst -1 "x")
                      (("3" (expand "nnf" 1)
                        (("3" (replace -1 1)
                          (("3" (postpone) nil)))))))))))))))))))
         ("4" (postpone) nil) ("5" (postpone) nil) ("6" (postpone) nil)
         ("7" (postpone) nil) ("8" (postpone) nil) ("9" (postpone) nil)
         ("10" (postpone) nil)))
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (expand "nnf" 1)
            (("7" (expand "eval" 1)
              (("7" (hide -1 -2 -3)
                (("7" (skeep)
                  (("7" (inst -1 "PIMPLIES1_var")
                    (("7" (reveal -1)
                      (("7" (inst -1 "PNOT(PIMPLIES2_var)")
                        (("7" (split)
                          (("1" (split)
                            (("1" (inst -1 "x")
                              (("1" (inst -2 "x")
                                (("1" (replace -1 1) (("1" (grind) nil)))))))
                             ("2" (hide 2) (("2" (grind) nil)))))
                           ("2" (hide 2)
                            (("2" (grind) nil)))))))))))))))))))))))
       ("8" (postpone) nil) ("9" (postpone) nil) ("10" (postpone) nil))))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-20 nil 3772556327
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil)))))))
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel")
                              (("1" (assert) nil)))))))
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil)))))
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil)))))))
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil)))))
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil)))))
                                 ("2" (assert) nil)))))))))))))))))))))))))))
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil)))))))))))))))
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil)))))))
                                 ("2" (hide 2) (("2" (grind) nil)))))))))))
                         ("2" (hide 2) (("2" (grind) nil)))))))))))))))))))))
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil)))))
                               ("2" (hide 2) (("2" (grind) nil)))))))))
                         ("2" (hide 2) (("2" (grind) nil)))))))))))))))))))))
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil) ("2" (grind) nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (skeep)
              (("3" (expand "nnf" 1)
                (("3" (lemma abs_nnf_rel_preserves_truth)
                  (("3" (inst?)
                    (("3" (inst -1 "x")
                      (("3" (expand "nnf" 1)
                        (("3" (replace -1 1)
                          (("3" (postpone) nil)))))))))))))))))))
         ("4" (postpone) nil) ("5" (postpone) nil) ("6" (postpone) nil)
         ("7" (postpone) nil) ("8" (postpone) nil) ("9" (postpone) nil)
         ("10" (postpone) nil)))
       ("7" (postpone) nil) ("8" (postpone) nil) ("9" (postpone) nil)
       ("10" (postpone) nil))))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-19 nil 3772556181
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (expand "nnf" 1)
              (("3" (lemma abs_nnf_rel_preserves_truth)
                (("3" (inst?)
                  (("3" (inst -1 "x")
                    (("3" (expand "nnf" 1)
                      (("3" (replace -1 1) (("3" (postpone) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (postpone) nil nil) ("5" (postpone) nil nil)
         ("6" (postpone) nil nil) ("7" (postpone) nil nil)
         ("8" (postpone) nil nil) ("9" (postpone) nil nil)
         ("10" (postpone) nil nil))
        nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil) ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-18 nil 3772556151
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (postpone) nil nil) ("6" (postpone) nil nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil) ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-17 nil 3772556118
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil)
       ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-16 nil 3772555714
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (case "PREL3_var = plt")
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (expand "eval_rel") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "PREL3_var = pge")
                        (("1" (replace -1 2)
                          (("1" (assert)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "PREL3_var = ple")
                          (("1" (replace -1 3)
                            (("1" (expand "eval_rel") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "PREL3_var = pgt")
                            (("1" (replace -1 4)
                              (("1" (assert)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (case "PREL3_var = peq")
                              (("1" (replace -1 5)
                                (("1" (expand "eval_rel")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (case "PREL3_var = pneq")
                                (("1" (replace -1 6)
                                  (("1" (expand "eval_rel")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (lemma abs_nnf_rel_preserves_truth)
            (("3" (inst?)
              (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                (("3" (inst?)
                  (("3" (inst?) (("3" (inst?) (("3" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil)
       ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-15 nil 3772555643
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1) (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (postpone) nil nil) ("4" (postpone) nil nil)
       ("5" (postpone) nil nil) ("6" (postpone) nil nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil) ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-14 nil 3770462523
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 2)
                            (("1" (expand "eval_rel")
                              (("1" (assert) (("1" (ground) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (lemma abs_nnf_rel_preserves_truth)
              (("3" (inst?)
                (("3" (replace -1 1)
                  (("3" (lemma abs_nnf_rel_pnot_preserves_truth)
                    (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (expand "nnf" 1)
              (("3" (lemma abs_nnf_rel_preserves_truth)
                (("3" (inst?)
                  (("3" (inst -1 "x")
                    (("3" (expand "nnf" 1)
                      (("3" (replace -1 1) (("3" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (skeep)
              (("4" (expand "nnf" 1)
                (("4" (expand "eval" 1)
                  (("4" (hide -1 -2 -3)
                    (("4" (inst -1 "PNOT(PAND1_var)")
                      (("4" (reveal -1)
                        (("4" (inst -1 "PNOT(PAND2_var)")
                          (("4" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (expand "nnf" -1)
                                    (("1" (expand "nnf" -2)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (skeep)
            (("5" (expand "nnf" 1)
              (("5" (expand "nnf" 1)
                (("5" (expand "eval" 1)
                  (("5" (hide -1 -2 -3)
                    (("5" (inst -1 "PNOT(POR1_var)")
                      (("5" (reveal -1)
                        (("5" (inst -1 "PNOT(POR2_var)")
                          (("5" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x") (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (skeep)
          (("6" (expand "nnf" 1)
            (("6" (inst -3 "PNOT1_var_1")
              (("6" (hide -1 -2)
                (("6" (split)
                  (("1" (skeep)
                    (("1" (inst -1 "x")
                      (("1" (replace -1 1) (("1" (grind) nil nil)) nil)) nil))
                    nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (skeep)
          (("7" (expand "nnf" 1)
            (("7" (expand "nnf" 1)
              (("7" (expand "eval" 1)
                (("7" (hide -1 -2 -3)
                  (("7" (skeep)
                    (("7" (inst -1 "PIMPLIES1_var")
                      (("7" (reveal -1)
                        (("7" (inst -1 "PNOT(PIMPLIES2_var)")
                          (("7" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (replace -1 1) (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (skeep)
          (("8" (expand "nnf" 1)
            (("8" (expand "nnf" 1)
              (("8" (expand "eval" 1)
                (("8" (expand "eval" 1)
                  (("8" (skeep)
                    (("8" (hide -1 -2 -3)
                      (("8" (inst -1 "PIFF1_var")
                        (("8" (reveal -1)
                          (("8" (inst -1 "PIFF2_var")
                            (("8" (reveal -1)
                              (("8" (inst -1 "PNOT(PIFF1_var)")
                                (("8" (reveal -1)
                                  (("8" (inst -1 "PNOT(PIFF2_var)")
                                    (("8" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (inst -2 "x")
                                                (("1"
                                                  (inst -3 "x")
                                                  (("1"
                                                    (inst -4 "x")
                                                    (("1"
                                                      (expand "nnf" -3)
                                                      (("1"
                                                        (expand "nnf" -4)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (replace -2 1)
                                                            (("1"
                                                              (replace -3 1)
                                                              (("1"
                                                                (replace -4 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (skeep)
          (("9" (expand "nnf" 1)
            (("9" (hide -1 -2)
              (("9" (hide -1)
                (("9" (skeep)
                  (("9" (expand "nnf" 1)
                    (("9" (expand "eval" 1)
                      (("9" (inst -1 "PNOT(PWHEN1_var)")
                        (("9" (reveal -1)
                          (("9" (inst -1 "PWHEN2_var")
                            (("9" (split)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (inst -2 "x")
                                    (("1" (expand "nnf" -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("10" (skeep)
          (("10" (skeep)
            (("10" (expand "nnf" 1)
              (("10" (expand "nnf" 1)
                (("10" (expand "eval" 1)
                  (("10" (expand "eval" 1)
                    (("10" (hide -1 -2 -3)
                      (("10" (hide -1)
                        (("10" (inst -1 "PITE1_var")
                          (("10" (reveal -1)
                            (("10" (inst -1 "PNOT(PITE2_var)")
                              (("10" (reveal -1)
                                (("10" (inst -1 "PNOT(PITE1_var)")
                                  (("10" (reveal -1)
                                    (("10" (inst -1 "PNOT(PITE3_var)")
                                      (("10"
                                        (split -1)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (inst -1 "x")
                                                (("1"
                                                  (inst -2 "x")
                                                  (("1"
                                                    (inst -3 "x")
                                                    (("1"
                                                      (inst -4 "x")
                                                      (("1"
                                                        (expand "nnf" -2)
                                                        (("1"
                                                          (expand "nnf" -3)
                                                          (("1"
                                                            (expand "nnf" -4)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (replace -2 1)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skeep)
        (("7" (skeep)
          (("7" (hide -1 -2)
            (("7" (expand "nnf" 1)
              (("7" (expand "eval" 1)
                (("7" (inst -1 "PNOT(PIMPLIES1_var)")
                  (("7" (reveal -1)
                    (("7" (inst -1 "PIMPLIES2_var")
                      (("7" (split)
                        (("1" (split)
                          (("1" (inst -1 "x")
                            (("1" (inst -2 "x")
                              (("1" (expand "nnf" -1)
                                (("1" (replace -1 1)
                                  (("1" (replace -2 1)
                                    (("1" (hide -1 -2) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (skeep)
          (("8" (expand "nnf" 1)
            (("8" (expand "eval" 1)
              (("8" (expand "eval" 1)
                (("8" (hide -1 -2)
                  (("8" (inst -1 "PIFF1_var")
                    (("8" (reveal -1)
                      (("8" (inst -1 "PIFF2_var")
                        (("8" (reveal -1)
                          (("8" (inst -1 "PNOT(PIFF2_var)")
                            (("8" (reveal -1)
                              (("8" (inst -1 "PNOT(PIFF1_var)")
                                (("8" (split)
                                  (("1" (split)
                                    (("1" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (inst -2 "x")
                                            (("1"
                                              (inst -3 "x")
                                              (("1"
                                                (inst -4 "x")
                                                (("1"
                                                  (expand "nnf" -3)
                                                  (("1"
                                                    (expand "nnf" -4)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (replace -3 1)
                                                          (("1"
                                                            (replace -4 1)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               -4)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (skeep)
          (("9" (expand "nnf" 1)
            (("9" (expand "eval" 1)
              (("9" (hide -1 -2)
                (("9" (inst -1 "PWHEN1_var")
                  (("9" (reveal -1)
                    (("9" (inst -1 "PNOT(PWHEN2_var)")
                      (("9" (split)
                        (("1" (split)
                          (("1" (inst -1 "x")
                            (("1" (inst -2 "x")
                              (("1" (expand "nnf" -2)
                                (("1" (replace -1 1)
                                  (("1" (replace -2 1) (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skeep)
        (("10" (skeep)
          (("10" (hide -1 -2 -3)
            (("10" (expand "nnf" 1)
              (("10" (expand "eval" 1)
                (("10" (expand "eval" 1)
                  (("10" (inst -1 "PNOT(PITE1_var)")
                    (("10" (reveal -1)
                      (("10" (inst -1 "PITE2_var")
                        (("10" (reveal -1)
                          (("10" (inst -1 "PITE3_var")
                            (("10" (reveal -1)
                              (("10" (inst -1 "PITE1_var")
                                (("10" (split -1)
                                  (("1" (split -2)
                                    (("1" (split -3)
                                      (("1"
                                        (split -4)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (inst -2 "x")
                                            (("1"
                                              (inst -3 "x")
                                              (("1"
                                                (inst -4 "x")
                                                (("1"
                                                  (expand "nnf" -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (replace -3 1)
                                                        (("1"
                                                          (replace -4 1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2" (grind) nil nil)) nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (polylist const-decl "real" polylist Sturm)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy nil)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy nil)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy nil)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy nil)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy nil)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pneq adt-constructor-decl "(pneq?)" poly_system_strategy nil)
    (pneq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist Sturm)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   nil)
  (nnf_pnot_preserves_truth-13 nil 3770462144
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 2)
                            (("1" (expand "eval_rel")
                              (("1" (assert) (("1" (ground) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep) (("3" (skeep) (("3" (postpone) nil nil)) nil)) nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (postpone) nil nil)
         ("4" (postpone) nil nil) ("5" (postpone) nil nil)
         ("6" (postpone) nil nil) ("7" (postpone) nil nil)
         ("8" (postpone) nil nil) ("9" (postpone) nil nil)
         ("10" (postpone) nil nil))
        nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil) ("10" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-12 nil 3770047949
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 2)
                            (("1" (expand "eval_rel")
                              (("1" (assert) (("1" (ground) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (expand "eval")
              (("3" (hide -1)
                (("3" (expand "not_eval_rel")
                  (("3" (expand "eval" 1)
                    (("3" (grind)
                      (("1" (case "PABS2_var = plt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (case "PABS2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("3" (case "PABS2_var = ple")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("4" (case "PABS2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("5" (case "PABS2_var = pgt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("6" (expand "eval_rel") (("6" (ground) nil nil)) nil)
                       ("7" (case "PABS2_var = pge")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PABS2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PABS2_var = peq")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PABS2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 -5)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("13" (case "PABS2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("14" (case "PABS2_var = plt")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("15" (case "PABS2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("16" (case "PABS2_var = ple")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("17" (case "PABS2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("18" (case "PABS2_var = pgt")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("19" (case "PABS2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("20" (case "PABS2_var = pge")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("21" (case "PABS2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("22" (case "PABS2_var = peq")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("23" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 7)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("24" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 8)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (reveal -1)
                    (("4" (inst -1 "PAND2_var")
                      (("4" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (replace -1 1)
                                    (("1" (hide -1) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (reveal -1)
                    (("5" (inst -1 "POR2_var")
                      (("5" (split)
                        (("1" (inst -1 "x")
                          (("1" (replace -1 1)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (induct "PNOT1_var")
        (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
         ("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (skeep)
              (("4" (expand "nnf" 1)
                (("4" (expand "eval" 1)
                  (("4" (hide -1 -2 -3)
                    (("4" (inst -1 "PNOT(PAND1_var)")
                      (("4" (reveal -1)
                        (("4" (inst -1 "PNOT(PAND2_var)")
                          (("4" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (expand "nnf" -1)
                                    (("1" (expand "nnf" -2)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (skeep)
            (("5" (expand "nnf" 1)
              (("5" (expand "nnf" 1)
                (("5" (expand "eval" 1)
                  (("5" (hide -1 -2 -3)
                    (("5" (inst -1 "PNOT(POR1_var)")
                      (("5" (reveal -1)
                        (("5" (inst -1 "PNOT(POR2_var)")
                          (("5" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x") (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (skeep)
          (("6" (expand "nnf" 1)
            (("6" (inst -3 "PNOT1_var_1")
              (("6" (hide -1 -2)
                (("6" (split)
                  (("1" (skeep)
                    (("1" (inst -1 "x")
                      (("1" (replace -1 1) (("1" (grind) nil nil)) nil)) nil))
                    nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (skeep)
          (("7" (expand "nnf" 1)
            (("7" (expand "nnf" 1)
              (("7" (expand "eval" 1)
                (("7" (hide -1 -2 -3)
                  (("7" (skeep)
                    (("7" (inst -1 "PIMPLIES1_var")
                      (("7" (reveal -1)
                        (("7" (inst -1 "PNOT(PIMPLIES2_var)")
                          (("7" (split)
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (inst -2 "x")
                                  (("1" (replace -1 1) (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (skeep)
          (("8" (expand "nnf" 1)
            (("8" (expand "nnf" 1)
              (("8" (expand "eval" 1)
                (("8" (expand "eval" 1)
                  (("8" (skeep)
                    (("8" (hide -1 -2 -3)
                      (("8" (inst -1 "PIFF1_var")
                        (("8" (reveal -1)
                          (("8" (inst -1 "PIFF2_var")
                            (("8" (reveal -1)
                              (("8" (inst -1 "PNOT(PIFF1_var)")
                                (("8" (reveal -1)
                                  (("8" (inst -1 "PNOT(PIFF2_var)")
                                    (("8" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (inst -2 "x")
                                                (("1"
                                                  (inst -3 "x")
                                                  (("1"
                                                    (inst -4 "x")
                                                    (("1"
                                                      (expand "nnf" -3)
                                                      (("1"
                                                        (expand "nnf" -4)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (replace -2 1)
                                                            (("1"
                                                              (replace -3 1)
                                                              (("1"
                                                                (replace -4 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (skeep)
          (("9" (expand "nnf" 1)
            (("9" (hide -1 -2)
              (("9" (hide -1)
                (("9" (skeep)
                  (("9" (expand "nnf" 1)
                    (("9" (expand "eval" 1)
                      (("9" (inst -1 "PNOT(PWHEN1_var)")
                        (("9" (reveal -1)
                          (("9" (inst -1 "PWHEN2_var")
                            (("9" (split)
                              (("1" (split)
                                (("1" (inst -1 "x")
                                  (("1" (inst -2 "x")
                                    (("1" (expand "nnf" -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("10" (skeep)
          (("10" (skeep)
            (("10" (expand "nnf" 1)
              (("10" (expand "nnf" 1)
                (("10" (expand "eval" 1)
                  (("10" (expand "eval" 1)
                    (("10" (hide -1 -2 -3)
                      (("10" (hide -1)
                        (("10" (inst -1 "PITE1_var")
                          (("10" (reveal -1)
                            (("10" (inst -1 "PNOT(PITE2_var)")
                              (("10" (reveal -1)
                                (("10" (inst -1 "PNOT(PITE1_var)")
                                  (("10" (reveal -1)
                                    (("10" (inst -1 "PNOT(PITE3_var)")
                                      (("10"
                                        (split -1)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (inst -1 "x")
                                                (("1"
                                                  (inst -2 "x")
                                                  (("1"
                                                    (inst -3 "x")
                                                    (("1"
                                                      (inst -4 "x")
                                                      (("1"
                                                        (expand "nnf" -2)
                                                        (("1"
                                                          (expand "nnf" -3)
                                                          (("1"
                                                            (expand "nnf" -4)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (replace -2 1)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skeep)
        (("7" (skeep)
          (("7" (hide -1 -2)
            (("7" (expand "nnf" 1)
              (("7" (expand "eval" 1)
                (("7" (inst -1 "PNOT(PIMPLIES1_var)")
                  (("7" (reveal -1)
                    (("7" (inst -1 "PIMPLIES2_var")
                      (("7" (split)
                        (("1" (split)
                          (("1" (inst -1 "x")
                            (("1" (inst -2 "x")
                              (("1" (expand "nnf" -1)
                                (("1" (replace -1 1)
                                  (("1" (replace -2 1)
                                    (("1" (hide -1 -2) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (skeep)
          (("8" (expand "nnf" 1)
            (("8" (expand "eval" 1)
              (("8" (expand "eval" 1)
                (("8" (hide -1 -2)
                  (("8" (inst -1 "PIFF1_var")
                    (("8" (reveal -1)
                      (("8" (inst -1 "PIFF2_var")
                        (("8" (reveal -1)
                          (("8" (inst -1 "PNOT(PIFF2_var)")
                            (("8" (reveal -1)
                              (("8" (inst -1 "PNOT(PIFF1_var)")
                                (("8" (split)
                                  (("1" (split)
                                    (("1" (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (inst -2 "x")
                                            (("1"
                                              (inst -3 "x")
                                              (("1"
                                                (inst -4 "x")
                                                (("1"
                                                  (expand "nnf" -3)
                                                  (("1"
                                                    (expand "nnf" -4)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (replace -3 1)
                                                          (("1"
                                                            (replace -4 1)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               -4)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (skeep)
          (("9" (expand "nnf" 1)
            (("9" (expand "eval" 1)
              (("9" (hide -1 -2)
                (("9" (inst -1 "PWHEN1_var")
                  (("9" (reveal -1)
                    (("9" (inst -1 "PNOT(PWHEN2_var)")
                      (("9" (split)
                        (("1" (split)
                          (("1" (inst -1 "x")
                            (("1" (inst -2 "x")
                              (("1" (expand "nnf" -2)
                                (("1" (replace -1 1)
                                  (("1" (replace -2 1) (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skeep)
        (("10" (skeep)
          (("10" (hide -1 -2 -3)
            (("10" (expand "nnf" 1)
              (("10" (expand "eval" 1)
                (("10" (expand "eval" 1)
                  (("10" (inst -1 "PNOT(PITE1_var)")
                    (("10" (reveal -1)
                      (("10" (inst -1 "PITE2_var")
                        (("10" (reveal -1)
                          (("10" (inst -1 "PITE3_var")
                            (("10" (reveal -1)
                              (("10" (inst -1 "PITE1_var")
                                (("10" (split -1)
                                  (("1" (split -2)
                                    (("1" (split -3)
                                      (("1"
                                        (split -4)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (inst -2 "x")
                                            (("1"
                                              (inst -3 "x")
                                              (("1"
                                                (inst -4 "x")
                                                (("1"
                                                  (expand "nnf" -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (replace -3 1)
                                                        (("1"
                                                          (replace -4 1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2" (grind) nil nil)) nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (pneq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pneq adt-constructor-decl "(pneq?)" poly_system_strategy nil)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy nil)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy nil)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy nil)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (polylist const-decl "real" polylist Sturm)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil))
   nil)
  (nnf_pnot_preserves_truth-11 nil 3770047862
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 2)
                            (("1" (expand "eval_rel")
                              (("1" (assert) (("1" (ground) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (expand "eval")
              (("3" (hide -1)
                (("3" (expand "not_eval_rel")
                  (("3" (expand "eval" 1)
                    (("3" (grind)
                      (("1" (case "PABS2_var = plt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (case "PABS2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("3" (case "PABS2_var = ple")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("4" (case "PABS2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("5" (case "PABS2_var = pgt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("6" (expand "eval_rel") (("6" (ground) nil nil)) nil)
                       ("7" (case "PABS2_var = pge")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PABS2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PABS2_var = peq")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PABS2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 -5)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("13" (case "PABS2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("14" (case "PABS2_var = plt")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("15" (case "PABS2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("16" (case "PABS2_var = ple")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("17" (case "PABS2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("18" (case "PABS2_var = pgt")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("19" (postpone) nil nil) ("20" (postpone) nil nil)
                       ("21" (postpone) nil nil) ("22" (postpone) nil nil)
                       ("23" (postpone) nil nil) ("24" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-10 nil 3770047811
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 2)
                            (("1" (expand "eval_rel")
                              (("1" (assert) (("1" (ground) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (expand "eval")
              (("3" (hide -1)
                (("3" (expand "not_eval_rel")
                  (("3" (expand "eval" 1)
                    (("3" (grind)
                      (("1" (case "PABS2_var = plt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (case "PABS2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("3" (case "PABS2_var = ple")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("4" (case "PABS2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("5" (case "PABS2_var = pgt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("6" (expand "eval_rel") (("6" (ground) nil nil)) nil)
                       ("7" (case "PABS2_var = pge")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PABS2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PABS2_var = peq")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PABS2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 -5)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("13" (case "PABS2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("14" (case "PABS2_var = plt")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("15" (case "PABS2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("16" (case "PABS2_var = ple")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("17" (postpone) nil nil) ("18" (postpone) nil nil)
                       ("19" (postpone) nil nil) ("20" (postpone) nil nil)
                       ("21" (postpone) nil nil) ("22" (postpone) nil nil)
                       ("23" (postpone) nil nil) ("24" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-9 nil 3770047231
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 2)
                            (("1" (expand "eval_rel")
                              (("1" (assert) (("1" (ground) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (expand "eval")
              (("3" (hide -1)
                (("3" (expand "not_eval_rel")
                  (("3" (expand "eval" 1)
                    (("3" (grind)
                      (("1" (case "PABS2_var = plt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (case "PABS2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("3" (case "PABS2_var = ple")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("4" (case "PABS2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("5" (case "PABS2_var = pgt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("6" (expand "eval_rel") (("6" (ground) nil nil)) nil)
                       ("7" (case "PABS2_var = pge")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PABS2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PABS2_var = peq")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PABS2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 -5)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PABS2_var)")
                        (("1" (case "PABS2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("13" (case "PABS2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("14" (case "PABS2_var = plt")
                        (("1" (replace -1 3)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("15" (postpone) nil nil) ("16" (postpone) nil nil)
                       ("17" (postpone) nil nil) ("18" (postpone) nil nil)
                       ("19" (postpone) nil nil) ("20" (postpone) nil nil)
                       ("21" (postpone) nil nil) ("22" (postpone) nil nil)
                       ("23" (postpone) nil nil) ("24" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-8 nil 3770047075
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 2)
                            (("1" (expand "eval_rel")
                              (("1" (assert) (("1" (ground) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (expand "eval")
              (("3" (hide -1)
                (("3" (expand "not_eval_rel")
                  (("3" (expand "eval" 1)
                    (("3" (grind)
                      (("1" (case "PABS2_var = plt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (case "PABS2_var = ple")
                        (("1" (expand "eval_rel") (("1" (ground) nil nil))
                          nil)
                         ("2" (case "PABS2_var = plt")
                          (("1" (postpone) nil nil) ("2" (postpone) nil nil))
                          nil))
                        nil)
                       ("3" (case "PABS2_var = pgt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil)
                       ("4" (case "PABS2_var = pge")
                        (("1" (expand "eval_rel") (("1" (ground) nil nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil)
                       ("5" (case "PABS2_var = peq")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil)
                       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
                       ("8" (postpone) nil nil) ("9" (postpone) nil nil)
                       ("10" (postpone) nil nil) ("11" (postpone) nil nil)
                       ("12" (postpone) nil nil) ("13" (postpone) nil nil)
                       ("14" (postpone) nil nil) ("15" (postpone) nil nil)
                       ("16" (postpone) nil nil) ("17" (postpone) nil nil)
                       ("18" (postpone) nil nil) ("19" (postpone) nil nil)
                       ("20" (postpone) nil nil) ("21" (postpone) nil nil)
                       ("22" (postpone) nil nil) ("23" (postpone) nil nil)
                       ("24" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-7 nil 3770046951
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 2)
                            (("1" (expand "eval_rel")
                              (("1" (assert) (("1" (ground) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "nnf" 1)
            (("3" (expand "eval")
              (("3" (hide -1)
                (("3" (expand "not_eval_rel")
                  (("3" (expand "eval" 1)
                    (("3" (grind)
                      (("1" (case "PABS2_var = plt")
                        (("1" (replace -1 -5)
                          (("1" (expand "eval_rel") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
                       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
                       ("8" (postpone) nil nil) ("9" (postpone) nil nil)
                       ("10" (postpone) nil nil) ("11" (postpone) nil nil)
                       ("12" (postpone) nil nil) ("13" (postpone) nil nil)
                       ("14" (postpone) nil nil) ("15" (postpone) nil nil)
                       ("16" (postpone) nil nil) ("17" (postpone) nil nil)
                       ("18" (postpone) nil nil) ("19" (postpone) nil nil)
                       ("20" (postpone) nil nil) ("21" (postpone) nil nil)
                       ("22" (postpone) nil nil) ("23" (postpone) nil nil)
                       ("24" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-6 nil 3770046878
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil)))))
                         ("2" (hide -2 -3) (("2" (assert) nil)))))
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil)))))
                         ("2" (hide -2 -3) (("2" (assert) nil)))))
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil)))))
                         ("2" (hide -2 -3) (("2" (assert) nil)))))
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil)))))
                         ("2" (hide -2 -3) (("2" (assert) nil)))))
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil)))))
                         ("2" (hide -2 -3) (("2" (assert) nil)))))
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil)))))
                           ("2" (hide -2 -3) (("2" (assert) nil)))))
                         ("2" (assert) nil)))
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil)))))))
                         ("2" (assert) nil)))
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil)))))))
                         ("2" (assert) nil)))
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil)))))))
                         ("2" (assert) nil)))
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil)))))))
                         ("2" (assert) nil)))
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil)))))))
                         ("2" (assert) nil)))
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 2)
                            (("1" (expand "eval_rel")
                              (("1" (assert) (("1" (ground) nil)))))))
                           ("2" (assert) nil)))
                         ("2" (assert) nil)))))))))))))))))))
       ("3" (postpone) nil) ("4" (postpone) nil) ("5" (postpone) nil)
       ("6" (postpone) nil) ("7" (postpone) nil) ("8" (postpone) nil)
       ("9" (postpone) nil))))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-5 nil 3770046838
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (case "PREL2_var = ple")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("9" (case "PREL2_var = pgt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("10" (case "PREL2_var = pge")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("11" (case "PREL2_var = peq")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("12" (case "pneq?(PREL2_var)")
                        (("1" (postpone) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (postpone) nil nil) ("4" (postpone) nil nil)
       ("5" (postpone) nil nil) ("6" (postpone) nil nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-4 nil 3770046597
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (case "PREL2_var = pneq")
                          (("1" (replace -1 -4)
                            (("1" (expand "eval_rel") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("7" (case "PREL2_var = plt")
                        (("1" (replace -1 2)
                          (("1" (expand "eval_rel")
                            (("1" (assert) (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("8" (postpone) nil nil) ("9" (postpone) nil nil)
                       ("10" (postpone) nil nil) ("11" (postpone) nil nil)
                       ("12" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (postpone) nil nil) ("4" (postpone) nil nil)
       ("5" (postpone) nil nil) ("6" (postpone) nil nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-3 nil 3770046568
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (case "PREL2_var = pgt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("4" (case "PREL2_var = pge")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("5" (case "PREL2_var = peq")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (postpone) nil nil) ("2" (assert) nil nil)) nil)
                       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
                       ("9" (postpone) nil nil) ("10" (postpone) nil nil)
                       ("11" (postpone) nil nil) ("12" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (postpone) nil nil) ("4" (postpone) nil nil)
       ("5" (postpone) nil nil) ("6" (postpone) nil nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-2 nil 3770046496
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "PREL2_var = ple")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (postpone) nil nil) ("4" (postpone) nil nil)
                       ("5" (postpone) nil nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (postpone) nil nil) ("2" (assert) nil nil)) nil)
                       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
                       ("9" (postpone) nil nil) ("10" (postpone) nil nil)
                       ("11" (postpone) nil nil) ("12" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (postpone) nil nil) ("4" (postpone) nil nil)
       ("5" (postpone) nil nil) ("6" (postpone) nil nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_pnot_preserves_truth-1 nil 3770043987
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nnf" 1)
            (("2" (expand "eval")
              (("2" (hide -1)
                (("2" (expand "not_eval_rel")
                  (("2" (expand "eval" 1)
                    (("2" (grind)
                      (("1" (case "PREL2_var = plt")
                        (("1" (replace -1 -4)
                          (("1" (expand "eval_rel") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (hide -2 -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
                       ("6" (case "pneq?(PREL2_var)")
                        (("1" (postpone) nil nil) ("2" (assert) nil nil)) nil)
                       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
                       ("9" (postpone) nil nil) ("10" (postpone) nil nil)
                       ("11" (postpone) nil nil) ("12" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (postpone) nil nil) ("4" (postpone) nil nil)
       ("5" (postpone) nil nil) ("6" (postpone) nil nil)
       ("7" (postpone) nil nil) ("8" (postpone) nil nil)
       ("9" (postpone) nil nil))
      nil))
    nil)
   ((PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (polylist const-decl "real" polylist Sturm)
    (lt_realorder name-judgement "RealOrder" real_orders reals))
   shostak))
 (nnf_preserves_truth 0
  (nnf_preserves_truth-7 nil 3770463195
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (skeep)
        (("3" (lemma "abs_nnf_rel_preserves_truth")
          (("3" (hide -2)
            (("3" (skeep)
              (("3" (expand "nnf" 1)
                (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (split)
                    (("1" (inst -1 "x")
                      (("1" (reveal -2)
                        (("1" (inst -1 "PAND2_var")
                          (("1" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1)
                                (("1" (replace -2 1) (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (split)
                    (("1" (inst -1 "x")
                      (("1" (replace -1 1)
                        (("1" (reveal -2)
                          (("1" (inst -1 "POR2_var")
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep)
        (("6" (lemma nnf_pnot_preserves_truth)
          (("6" (hide -2 -3) (("6" (inst?) nil nil)) nil)) nil))
        nil)
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (skeep)
            (("7" (expand "eval" 1)
              (("7" (hide -1 -2)
                (("7" (lemma nnf_pnot_preserves_truth)
                  (("7" (inst?)
                    (("7" (replace -1 1)
                      (("7" (hide -1)
                        (("7" (inst -1 "PIMPLIES2_var")
                          (("7" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1) (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "eval" 1)
            (("8" (skeep)
              (("8" (hide -1 -2)
                (("8"
                  (case " ((eval(nnf(PNOT(PIFF1_var)))(x) OR eval(nnf(PIFF2_var))(x)) AND
                                   (eval(nnf(PIFF1_var))(x) OR eval(nnf(PNOT(PIFF2_var)))(x)))
                                  =
                                  ((eval(PIFF1_var)(x) AND eval(PIFF2_var)(x)) OR
                                    ((NOT (eval(PIFF1_var)(x))) AND (NOT (eval(PIFF2_var)(x)))))")
                  (("1" (hide -2) (("1" (grind) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (inst -1 "PIFF1_var")
                      (("2" (reveal -1)
                        (("2" (inst -1 "PIFF2_var")
                          (("2" (reveal -1)
                            (("2" (inst -1 "PNOT(PIFF2_var)")
                              (("2" (reveal -1)
                                (("2" (inst -1 "PNOT(PIFF1_var)")
                                  (("2" (split -1)
                                    (("1" (split -2)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (inst -1 "x")
                                            (("1"
                                              (inst -2 "x")
                                              (("1"
                                                (inst -3 "x")
                                                (("1"
                                                  (inst -4 "x")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (replace -3 1)
                                                        (("1"
                                                          (replace -4 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case
                                                               "eval(PNOT(PIFF1_var))(x) = (NOT (eval(PIFF1_var)(x)))")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (case
                                                                   " eval(PNOT(PIFF2_var))(x) = (NOT (eval(PIFF2_var)(x)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (case
                                                                         "(eval(PIFF1_var)(x) AND eval(PIFF2_var)(x))")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           " ((NOT (eval(PIFF1_var)(x))) AND (NOT (eval(PIFF2_var)(x))))")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "(NOT (eval(PIFF1_var)(x))) OR (NOT (eval(PIFF2_var)(x)))")
                                                                            (("1"
                                                                              (case
                                                                               "(eval(PIFF1_var)(x)) OR (eval(PIFF2_var)(x))")
                                                                              (("1"
                                                                                (case
                                                                                 "eval(PIFF1_var)(x)")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (skeep)
          (("9" (expand "nnf" 1)
            (("9" (expand "eval" 1)
              (("9" (hide -1 -2)
                (("9" (inst -1 "PWHEN1_var")
                  (("9" (reveal -1)
                    (("9" (inst -1 "PNOT(PWHEN2_var)")
                      (("9" (split)
                        (("1" (split)
                          (("1" (inst -1 "x")
                            (("1" (inst -2 "x")
                              (("1" (replace -1 1)
                                (("1" (replace -2 1) (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skeep)
        (("10" (skeep)
          (("10" (expand "nnf" 1)
            (("10" (expand "eval" 1)
              (("10" (hide -1 -2 -3)
                (("10" (inst -1 "PITE1_var")
                  (("10" (reveal -1)
                    (("10" (inst -1 "PNOT(PITE1_var)")
                      (("10" (reveal -1)
                        (("10" (inst -1 "PITE2_var")
                          (("10" (reveal -1)
                            (("10" (inst -1 "PITE3_var")
                              (("10" (split -1)
                                (("1" (split -2)
                                  (("1" (split -3)
                                    (("1" (split -4)
                                      (("1"
                                        (inst -1 "x")
                                        (("1"
                                          (inst -2 "x")
                                          (("1"
                                            (inst -3 "x")
                                            (("1"
                                              (inst -4 "x")
                                              (("1"
                                                (case
                                                 "((eval(nnf(PNOT(PITE1_var)))(x) OR eval(nnf(PITE2_var))(x)) AND
                         (eval(nnf(PITE1_var))(x) OR eval(nnf(PITE3_var))(x))) = (((NOT eval(PITE1_var)(x)) OR eval(PITE2_var)(x)) AND
                          ((eval(PITE1_var)(x)) OR (eval(PITE3_var)(x))))")
                                                (("1"
                                                  (hide -2 -3 -4 -5)
                                                  (("1" (grind) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (replace -2 1)
                                                      (("2"
                                                        (replace -3 1)
                                                        (("2"
                                                          (replace -4 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2" (grind) nil nil)) nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil)
                                 ("2" (hide-all-but 1) (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (abs_nnf_rel_preserves_truth formula-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnf_pnot_preserves_truth formula-decl nil dnf_polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (depth def-decl "nat" dnf_polynomials nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (nnf_preserves_truth-6 nil 3770052166
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (split)
                    (("1" (inst -1 "x")
                      (("1" (reveal -2)
                        (("1" (inst -1 "PAND2_var")
                          (("1" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1)
                                (("1" (replace -2 1) (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (split)
                    (("1" (inst -1 "x")
                      (("1" (replace -1 1)
                        (("1" (reveal -2)
                          (("1" (inst -1 "POR2_var")
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep)
        (("6" (lemma nnf_pnot_preserves_truth)
          (("6" (hide -2 -3) (("6" (inst?) nil nil)) nil)) nil))
        nil)
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (skeep)
            (("7" (expand "eval" 1)
              (("7" (hide -1 -2)
                (("7" (lemma nnf_pnot_preserves_truth)
                  (("7" (inst?)
                    (("7" (replace -1 1)
                      (("7" (hide -1)
                        (("7" (inst -1 "PIMPLIES2_var")
                          (("7" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1) (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "eval" 1)
            (("8" (skeep)
              (("8" (hide -1 -2)
                (("8"
                  (case " ((eval(nnf(PNOT(PIFF1_var)))(x) OR eval(nnf(PIFF2_var))(x)) AND
                          (eval(nnf(PIFF1_var))(x) OR eval(nnf(PNOT(PIFF2_var)))(x)))
                         =
                         ((eval(PIFF1_var)(x) AND eval(PIFF2_var)(x)) OR
                           ((NOT (eval(PIFF1_var)(x))) AND (NOT (eval(PIFF2_var)(x)))))")
                  (("1" (hide -2) (("1" (grind) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (inst -1 "PIFF1_var")
                      (("2" (reveal -1)
                        (("2" (inst -1 "PIFF2_var")
                          (("2" (reveal -1)
                            (("2" (inst -1 "PNOT(PIFF2_var)")
                              (("2" (reveal -1)
                                (("2" (inst -1 "PNOT(PIFF1_var)")
                                  (("2" (split -1)
                                    (("1" (split -2)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (inst -1 "x")
                                            (("1"
                                              (inst -2 "x")
                                              (("1"
                                                (inst -3 "x")
                                                (("1"
                                                  (inst -4 "x")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (replace -3 1)
                                                        (("1"
                                                          (replace -4 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case
                                                               "eval(PNOT(PIFF1_var))(x) = (NOT (eval(PIFF1_var)(x)))")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (case
                                                                   " eval(PNOT(PIFF2_var))(x) = (NOT (eval(PIFF2_var)(x)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (case
                                                                         "(eval(PIFF1_var)(x) AND eval(PIFF2_var)(x))")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           " ((NOT (eval(PIFF1_var)(x))) AND (NOT (eval(PIFF2_var)(x))))")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "(NOT (eval(PIFF1_var)(x))) OR (NOT (eval(PIFF2_var)(x)))")
                                                                            (("1"
                                                                              (case
                                                                               "(eval(PIFF1_var)(x)) OR (eval(PIFF2_var)(x))")
                                                                              (("1"
                                                                                (case
                                                                                 "eval(PIFF1_var)(x)")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (skeep)
          (("9" (expand "nnf" 1)
            (("9" (expand "eval" 1)
              (("9" (hide -1 -2)
                (("9" (inst -1 "PWHEN1_var")
                  (("9" (reveal -1)
                    (("9" (inst -1 "PNOT(PWHEN2_var)")
                      (("9" (split)
                        (("1" (split)
                          (("1" (inst -1 "x")
                            (("1" (inst -2 "x")
                              (("1" (replace -1 1)
                                (("1" (replace -2 1) (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skeep)
        (("10" (skeep)
          (("10" (expand "nnf" 1)
            (("10" (expand "eval" 1)
              (("10" (hide -1 -2 -3)
                (("10" (inst -1 "PITE1_var")
                  (("10" (reveal -1)
                    (("10" (inst -1 "PNOT(PITE1_var)")
                      (("10" (reveal -1)
                        (("10" (inst -1 "PITE2_var")
                          (("10" (reveal -1)
                            (("10" (inst -1 "PITE3_var")
                              (("10" (split -1)
                                (("1" (split -2)
                                  (("1" (split -3)
                                    (("1" (split -4)
                                      (("1"
                                        (inst -1 "x")
                                        (("1"
                                          (inst -2 "x")
                                          (("1"
                                            (inst -3 "x")
                                            (("1"
                                              (inst -4 "x")
                                              (("1"
                                                (case
                                                 "((eval(nnf(PNOT(PITE1_var)))(x) OR eval(nnf(PITE2_var))(x)) AND
        (eval(nnf(PITE1_var))(x) OR eval(nnf(PITE3_var))(x))) = (((NOT eval(PITE1_var)(x)) OR eval(PITE2_var)(x)) AND
         ((eval(PITE1_var)(x)) OR (eval(PITE3_var)(x))))")
                                                (("1"
                                                  (hide -2 -3 -4 -5)
                                                  (("1" (grind) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (replace -2 1)
                                                      (("2"
                                                        (replace -3 1)
                                                        (("2"
                                                          (replace -4 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2" (grind) nil nil)) nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil)
                                 ("2" (hide-all-but 1) (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]" PolyRelExpr_adt nil)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (polylist const-decl "real" polylist Sturm)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil))
   nil)
  (nnf_preserves_truth-5 nil 3770052058
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (split)
                    (("1" (inst -1 "x")
                      (("1" (reveal -2)
                        (("1" (inst -1 "PAND2_var")
                          (("1" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1)
                                (("1" (replace -2 1) (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (split)
                    (("1" (inst -1 "x")
                      (("1" (replace -1 1)
                        (("1" (reveal -2)
                          (("1" (inst -1 "POR2_var")
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep)
        (("6" (lemma nnf_pnot_preserves_truth)
          (("6" (hide -2 -3) (("6" (inst?) nil nil)) nil)) nil))
        nil)
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (skeep)
            (("7" (expand "eval" 1)
              (("7" (hide -1 -2)
                (("7" (lemma nnf_pnot_preserves_truth)
                  (("7" (inst?)
                    (("7" (replace -1 1)
                      (("7" (hide -1)
                        (("7" (inst -1 "PIMPLIES2_var")
                          (("7" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1) (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "eval" 1)
            (("8" (skeep)
              (("8" (hide -1 -2)
                (("8"
                  (case " ((eval(nnf(PNOT(PIFF1_var)))(x) OR eval(nnf(PIFF2_var))(x)) AND
                 (eval(nnf(PIFF1_var))(x) OR eval(nnf(PNOT(PIFF2_var)))(x)))
                =
                ((eval(PIFF1_var)(x) AND eval(PIFF2_var)(x)) OR
                  ((NOT (eval(PIFF1_var)(x))) AND (NOT (eval(PIFF2_var)(x)))))")
                  (("1" (hide -2) (("1" (grind) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (inst -1 "PIFF1_var")
                      (("2" (reveal -1)
                        (("2" (inst -1 "PIFF2_var")
                          (("2" (reveal -1)
                            (("2" (inst -1 "PNOT(PIFF2_var)")
                              (("2" (reveal -1)
                                (("2" (inst -1 "PNOT(PIFF1_var)")
                                  (("2" (split -1)
                                    (("1" (split -2)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (inst -1 "x")
                                            (("1"
                                              (inst -2 "x")
                                              (("1"
                                                (inst -3 "x")
                                                (("1"
                                                  (inst -4 "x")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (replace -3 1)
                                                        (("1"
                                                          (replace -4 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case
                                                               "eval(PNOT(PIFF1_var))(x) = (NOT (eval(PIFF1_var)(x)))")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (case
                                                                   " eval(PNOT(PIFF2_var))(x) = (NOT (eval(PIFF2_var)(x)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (case
                                                                         "(eval(PIFF1_var)(x) AND eval(PIFF2_var)(x))")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           " ((NOT (eval(PIFF1_var)(x))) AND (NOT (eval(PIFF2_var)(x))))")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "(NOT (eval(PIFF1_var)(x))) OR (NOT (eval(PIFF2_var)(x)))")
                                                                            (("1"
                                                                              (case
                                                                               "(eval(PIFF1_var)(x)) OR (eval(PIFF2_var)(x))")
                                                                              (("1"
                                                                                (case
                                                                                 "eval(PIFF1_var)(x)")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skeep)
        (("9" (skeep)
          (("9" (expand "nnf" 1)
            (("9" (expand "eval" 1)
              (("9" (hide -1 -2)
                (("9" (inst -1 "PWHEN2_var")
                  (("9" (reveal -1)
                    (("9" (inst -1 "PNOT(PWHEN1_var)")
                      (("9" (split)
                        (("1" (split)
                          (("1" (inst -1 "x")
                            (("1" (inst -2 "x") (("1" (postpone) nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (nnf_preserves_truth-4 nil 3770045979
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (split)
                    (("1" (inst -1 "x")
                      (("1" (reveal -2)
                        (("1" (inst -1 "PAND2_var")
                          (("1" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1)
                                (("1" (replace -2 1) (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (inst -1 "POR1_var")
                  (("5" (split)
                    (("1" (inst -1 "x")
                      (("1" (replace -1 1)
                        (("1" (reveal -2)
                          (("1" (inst -1 "POR2_var")
                            (("1" (split)
                              (("1" (inst -1 "x")
                                (("1" (replace -1 1) (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skeep)
        (("6" (lemma nnf_pnot_preserves_truth)
          (("6" (hide -2 -3) (("6" (inst?) nil nil)) nil)) nil))
        nil)
       ("7" (skeep)
        (("7" (expand "nnf" 1)
          (("7" (skeep)
            (("7" (expand "eval" 1)
              (("7" (hide -1 -2)
                (("7" (lemma nnf_pnot_preserves_truth)
                  (("7" (inst?)
                    (("7" (replace -1 1)
                      (("7" (hide -1)
                        (("7" (inst -1 "PIMPLIES2_var")
                          (("7" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1) (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skeep)
        (("8" (expand "nnf" 1)
          (("8" (expand "eval" 1)
            (("8" (skeep)
              (("8" (hide -1 -2)
                (("8"
                  (case " (eval(nnf(PNOT(PIFF1_var)))(x) OR eval(nnf(PIFF2_var))(x)) AND
        (eval(nnf(PIFF1_var))(x) OR eval(nnf(PNOT(PIFF2_var)))(x))
       =
       ((eval(PIFF1_var)(x) AND eval(PIFF2_var)(x)) OR
         ((NOT (eval(PIFF1_var)(x))) AND (NOT (eval(PIFF2_var)(x)))))")
                  (("1" (hide -2) (("1" (grind) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (inst -1 "PIFF1_var")
                      (("2" (reveal -1)
                        (("2" (inst -1 "PIFF2_var")
                          (("2" (reveal -1)
                            (("2" (inst -1 "PNOT(PIFF2_var)")
                              (("2" (reveal -1)
                                (("2" (inst -1 "PNOT(PIFF1_var)")
                                  (("2" (split -1)
                                    (("1" (split -2)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (inst -1 "x")
                                            (("1"
                                              (inst -2 "x")
                                              (("1"
                                                (inst -3 "x")
                                                (("1"
                                                  (inst -4 "x")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (replace -3 1)
                                                        (("1"
                                                          (replace -4 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case
                                                               "eval(PNOT(PIFF1_var))(x) = (NOT (eval(PIFF1_var)(x)))")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (case
                                                                   " eval(PNOT(PIFF2_var))(x) = (NOT (eval(PIFF2_var)(x)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (case
                                                                         "(eval(PIFF1_var)(x) AND eval(PIFF2_var)(x))")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           " ((NOT (eval(PIFF1_var)(x))) AND (NOT (eval(PIFF2_var)(x))))")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "(NOT (eval(PIFF1_var)(x))) OR (NOT (eval(PIFF2_var)(x)))")
                                                                            (("1"
                                                                              (case
                                                                               "(eval(PIFF1_var)(x)) OR (eval(PIFF2_var)(x))")
                                                                              (("1"
                                                                                (case
                                                                                 "eval(PIFF1_var)(x)")
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_preserves_truth-3 nil 3770045929
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (split)
                    (("1" (inst -1 "x")
                      (("1" (reveal -2)
                        (("1" (inst -1 "PAND2_var")
                          (("1" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1)
                                (("1" (replace -2 1) (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (expand "nnf" 1)
            (("5" (expand "eval" 1)
              (("5" (hide -1 -2)
                (("5" (reveal -2)
                  (("5" (split)
                    (("1" (inst -1 "x")
                      (("1" (replace -1 1) (("1" (postpone) nil nil)) nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (grind)
                        (("1" (postpone) nil nil) ("2" (postpone) nil nil)
                         ("3" (postpone) nil nil) ("4" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_preserves_truth-2 nil 3770043757
   ("" (measure-induct "depth(p)" "p")
    (("" (induct "x_1")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "nnf" 1)
            (("4" (expand "eval" 1)
              (("4" (hide -1 -2)
                (("4" (inst -1 "PAND1_var")
                  (("4" (split)
                    (("1" (inst -1 "x")
                      (("1" (reveal -2)
                        (("1" (inst -1 "PAND2_var")
                          (("1" (split)
                            (("1" (inst -1 "x")
                              (("1" (replace -1 1)
                                (("1" (replace -2 1) (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep) (("5" (skeep) (("5" (postpone) nil nil)) nil)) nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (nnf_preserves_truth-1 nil 3770043695
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (inst -1 "x")
          (("4" (inst -2 "x")
            (("4" (expand "nnf" 1) (("4" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("5" (postpone) nil nil) ("6" (postpone) nil nil)
     ("7" (postpone) nil nil) ("8" (postpone) nil nil)
     ("9" (postpone) nil nil))
    nil)
   nil shostak))
 (distribute_pand_preserves_truth_new_TCC1 0
  (distribute_pand_preserves_truth_new_TCC1-1 nil 3770382892
   ("" (skeep)
    (("" (typepred "p1")
      (("" (typepred "p2")
        (("" (expand "has_special_form" 1) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (distribute_pand_preserves_truth_new subtype
    "PolyRelExpr_adt.PAND(dnf_polynomials.p1, dnf_polynomials.p2)"
    "NNF_expr")))
 (distribute_pand_preserves_truth_new 0
  (distribute_pand_preserves_truth_new-1 nil 3770382387
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "distribute_ands" 1)
          (("" (lemma "form_disjunction_eval")
            (("" (inst?)
              (("" (replace -1 1)
                (("" (hide -1)
                  (("" (split 1)
                    (("1" (flatten 1)
                      (("1" (expand "eval" 1)
                        (("1" (lemma pull_out_conjunctions_eval)
                          (("1" (inst?)
                            (("1"
                              (case "eval(distribute_ands(p1))(x) AND eval(distribute_ands(p2))(x)")
                              (("1" (expand "distribute_ands" -1)
                                (("1" (propax) nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (reveal -1)
                                  (("2" (reveal -1)
                                    (("2" (hide -3)
                                      (("2"
                                        (inst -1 "p1" "x")
                                        (("2"
                                          (inst -2 "p2" "x")
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (replace -2 1)
                                              (("2"
                                                (hide -1 -2)
                                                (("2"
                                                  (lemma conjunct_truth_prop)
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten -1)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (case
                                                             "((EXISTS (a: NNF_expr):
           member(a, pull_out_conjunctions(distribute_ands(p1))) AND
            eval(a)(x))
         AND
         EXISTS (b: NNF_expr):
           member(b, pull_out_conjunctions(distribute_ands(p2))) AND
            eval(b)(x))")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       length_pull_out_conjunctions)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (lemma
                                                         length_pull_out_conjunctions)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten 1)
                      (("2"
                        (case "eval(PAND(distribute_ands(p1), distribute_ands(p2)))(x)")
                        (("1" (hide -2)
                          (("1" (expand "eval" -1)
                            (("1" (lemma pull_out_conjunctions_eval)
                              (("1" (inst?)
                                (("1" (replace -1 -2)
                                  (("1" (hide -1)
                                    (("1" (lemma pull_out_conjunctions_eval)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replace -1 -2)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (flatten -1)
                                              (("1"
                                                (lemma conjunct_truth_prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (case
                                                     " (EXISTS (p: NNF_expr):
          member(p,
                 conjunct_lists(pull_out_conjunctions(distribute_ands(p1)),
                                pull_out_conjunctions(distribute_ands
                                                      (p2))))
           AND eval(p)(x))")
                                                    (("1" (propax) nil nil)
                                                     ("2" (grind) nil nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     length_pull_out_conjunctions)
                                                    (("2"
                                                      (inst?)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     length_pull_out_conjunctions)
                                                    (("3"
                                                      (inst?)
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "distribute_ands" 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (conjunct_lists def-decl "list[NNF_expr]" dnf_polynomials nil)
    (pull_out_conjunctions def-decl "list[NNF_expr]" dnf_polynomials nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (pull_out_conjunctions_eval formula-decl nil dnf_polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (conjunct_truth_prop formula-decl nil dnf_polynomials nil)
    (length_pull_out_conjunctions formula-decl nil dnf_polynomials nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member def-decl "bool" list_props nil)
    (p2 skolem-const-decl "NNF_expr" dnf_polynomials nil)
    (p1 skolem-const-decl "NNF_expr" dnf_polynomials nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (form_disjunction_eval formula-decl nil dnf_polynomials nil))
   shostak))
 (distribute_ands_preserves_truth 0
  (distribute_ands_preserves_truth-1 nil 3770131071
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand "has_special_form" -3)
          (("5" (flatten -3)
            (("5" (assert)
              (("5" (inst -1 "x")
                (("5" (inst -2 "x")
                  (("5" (lemma distribute_pand_preserves_truth_new)
                    (("5" (inst?)
                      (("5" (replace -1 1)
                        (("5" (hide -1)
                          (("5" (expand "eval" 1) (("5" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (expand "distribute_ands" 1) (("6" (grind) nil nil)) nil)) nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil))
    nil)
   ((distribute_pand_preserves_truth_new formula-decl nil dnf_polynomials nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   shostak))
 (dnf_const_preserves_truth 0
  (dnf_const_preserves_truth-1 nil 3770465454
   ("" (skeep*)
    (("" (case "p = PCONST(pb(p))")
      (("1" (replace -1 1)
        (("1" (hide -2)
          (("1" (expand "nnf")
            (("1" (expand "distribute_ands")
              (("1" (expand "construct_dnf")
                (("1" (expand "construct_dnf_bool")
                  (("1" (expand "eval")
                    (("1" (expand "eval_atm_list")
                      (("1" (expand "eval_atm_list")
                        (("1" (expand "eval_atm")
                          (("1" (expand "construct_record")
                            (("1" (expand "eval_rel")
                              (("1" (case "pb(p)")
                                (("1" (assert) (("1" (grind) nil nil)) nil)
                                 ("2" (assert) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (apply-extensionality) nil nil) ("3" (propax) nil nil))
      nil))
    nil)
   ((pb adt-accessor-decl "[(PCONST?) -> bool]" PolyRelExpr_adt nil)
    (PCONST adt-constructor-decl "[bool -> (PCONST?)]" PolyRelExpr_adt nil)
    (PCONST? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (construct_dnf_bool const-decl "DNF" dnf_polynomials nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (change_function const-decl "[nat -> rat]" dnf_polynomials nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (construct_record const-decl "DNF_Atom" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (PolyRelExpr_PCONST_extensionality formula-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (dnf_const_preserves_truth_1_TCC1 0
  (dnf_const_preserves_truth_1_TCC1-1 nil 3770485608 ("" (grind) nil nil)
   ((has_special_form def-decl "bool" dnf_polynomials nil)) nil
   (dnf_const_preserves_truth_1 subtype "dnf_polynomials.p" "NNF_expr")))
 (dnf_const_preserves_truth_1 0
  (dnf_const_preserves_truth_1-2 nil 3770485746
   ("" (skeep*)
    (("" (case "p = PCONST(pb(p))")
      (("1" (replace -1 1)
        (("1" (hide -2)
          (("1" (expand "construct_dnf")
            (("1" (expand "construct_dnf_bool")
              (("1" (expand "eval")
                (("1" (expand "eval_atm_list")
                  (("1" (expand "eval_atm_list")
                    (("1" (expand "eval_atm")
                      (("1" (expand "construct_record")
                        (("1" (expand "eval_rel")
                          (("1" (case "pb(p)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2" (assert) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (apply-extensionality) nil nil) ("3" (propax) nil nil))
      nil))
    nil)
   ((pb adt-accessor-decl "[(PCONST?) -> bool]" PolyRelExpr_adt nil)
    (PCONST adt-constructor-decl "[bool -> (PCONST?)]" PolyRelExpr_adt nil)
    (PCONST? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (construct_dnf_bool const-decl "DNF" dnf_polynomials nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (change_function const-decl "[nat -> rat]" dnf_polynomials nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (construct_record const-decl "DNF_Atom" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (PolyRelExpr_PCONST_extensionality formula-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (dnf_const_preserves_truth_1-1 nil 3770485609
   ("" (skeep)
    (("" (skeep)
      (("" (case "p = PCONST(pb(p))")
        (("1" (replace -1 1)
          (("1" (hide -1 -2)
            (("1" (expand "eval")
              (("1" (expand "construct_dnf")
                (("1" (expand "construct_dnf_bool")
                  (("1" (expand "eval_atm_list")
                    (("1" (expand "eval_atm_list")
                      (("1" (expand "eval_atm")
                        (("1" (expand "construct_record")
                          (("1" (expand "eval_rel")
                            (("1" (expand "append")
                              (("1" (expand "append")
                                (("1" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality) nil nil) ("3" (propax) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (eval_rel_preserves_truth 0
  (eval_rel_preserves_truth-1 nil 3770483038
   ("" (induct "rel")
    (("1" (skeep) (("1" (expand "eval_rel") (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep) (("2" (expand "eval_rel") (("2" (grind) nil nil)) nil)) nil)
     ("3" (skeep) (("3" (expand "eval_rel") (("3" (grind) nil nil)) nil)) nil)
     ("4" (skeep) (("4" (expand "eval_rel") (("4" (grind) nil nil)) nil)) nil)
     ("5" (skeep) (("5" (expand "eval_rel") (("5" (grind) nil nil)) nil)) nil)
     ("6" (skeep) (("6" (expand "eval_rel") (("6" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TarskiRel_induction formula-decl nil poly_system_strategy nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (dnf_prel_preserves_truth_len1_TCC1 0
  (dnf_prel_preserves_truth_len1_TCC1-1 nil 3770473166
   ("" (subtype-tcc) nil nil) nil nil
   (dnf_prel_preserves_truth_len1 subtype "dnf_polynomials.p"
    "{x: PolyRelExpr_adt.PolyRelExpr | booleans.OR(PolyRelExpr_adt.PREL?(x), PolyRelExpr_adt.PABS?(x))}")))
 (dnf_prel_preserves_truth_len1 0
  (dnf_prel_preserves_truth_len1-3 nil 3770636010
   ("" (skeep*)
    (("" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
      (("1" (replace -1 1)
        (("1" (expand "nnf")
          (("1" (expand "distribute_ands")
            (("1" (expand "construct_dnf")
              (("1" (expand "construct_record")
                (("1" (case "d(p) = 1")
                  (("1" (replace -1 1)
                    (("1" (expand "eval")
                      (("1" (expand "eval")
                        (("1" (expand "eval_atm_list")
                          (("1" (expand "eval_atm")
                            (("1" (expand "polynomial")
                              (("1" (expand "sigma")
                                (("1" (expand "sigma")
                                  (("1" (expand "sigma")
                                    (("1" (expand "eval_atm_list")
                                      (("1"
                                        (expand "change_function")
                                        (("1"
                                          (expand "eval_rel")
                                          (("1"
                                            (ground)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (apply-extensionality) nil nil))
      nil))
    nil)
   ((r shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> rat]" PolyRelExpr_adt nil)
    (rel shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> TarskiRel]" PolyRelExpr_adt
     nil)
    (d shared-adt-accessor-decl
       "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> nat]" PolyRelExpr_adt nil)
    (pn shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> [nat -> rat]]"
     PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (change_function const-decl "[nat -> rat]" dnf_polynomials nil)
    (sigma def-decl "real" sigma reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (construct_record const-decl "DNF_Atom" dnf_polynomials nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (PolyRelExpr_PREL_extensionality formula-decl nil PolyRelExpr_adt nil)
    (p skolem-const-decl "PolyRelExpr" dnf_polynomials nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (dnf_prel_preserves_truth_len1-2 nil 3770635879
   ("" (skeep)
    (("" (skeep)
      (("" (case "p = PREL(plist(p),rel(p),r(p))")
        (("1" (replace -1 1)
          (("1" (expand "nnf")
            (("1" (expand "distribute_ands")
              (("1" (expand "construct_dnf")
                (("1" (assert)
                  (("1" (expand "eval")
                    (("1" (expand "eval")
                      (("1" (expand "eval_atm_list")
                        (("1" (expand "eval_atm_list")
                          (("1" (expand "eval_atm")
                            (("1" (expand "construct_record")
                              (("1" (expand "append")
                                (("1" (expand "nth")
                                  (("1" (expand "append")
                                    (("1" (case "cons(1, (: :)) = (: 1 :)")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (case
                                           "eval_rel(rel(p))(car(plist(p)), r(p))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "eval_rel(pneq)(polylist((: 1 :))(x), 0) = TRUE")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (expand "polylist")
                                                  (("1"
                                                    (expand "eval_polylist")
                                                    (("1"
                                                      (grind)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "eval_rel")
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide 1)
                                              (("2"
                                                (case
                                                 "eval_rel(peq)(polylist((: 1 :))(x), 0) = FALSE")
                                                (("1"
                                                  (expand "polylist")
                                                  (("1"
                                                    (expand "eval_polylist")
                                                    (("1"
                                                      (grind)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "eval_rel")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth_len1-1 nil 3770473169
   ("" (skeep)
    (("" (skeep)
      (("" (case "p = PREL(plist(p),rel(p),r(p))")
        (("1" (replace -1 1)
          (("1" (expand "nnf")
            (("1" (expand "distribute_ands")
              (("1" (expand "construct_dnf")
                (("1" (assert)
                  (("1" (expand "construct_dnf_bool")
                    (("1" (expand "eval")
                      (("1" (expand "eval")
                        (("1" (expand "eval_atm_list")
                          (("1" (expand "eval_atm_list")
                            (("1" (expand "eval_atm")
                              (("1" (expand "construct_record")
                                (("1" (expand "append")
                                  (("1" (expand "nth")
                                    (("1" (expand "append")
                                      (("1"
                                        (case "cons(1, (: :)) = (: 1 :)")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "eval_rel(rel(p))(car(plist(p)), r(p))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "eval_rel(pneq)(polylist((: 1 :))(x), 0) = TRUE")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (expand "polylist")
                                                        (("1"
                                                          (expand
                                                           "eval_polylist")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "eval_rel")
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide 1)
                                                  (("2"
                                                    (case
                                                     "eval_rel(peq)(polylist((: 1 :))(x), 0) = FALSE")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (expand "polylist")
                                                        (("1"
                                                          (expand
                                                           "eval_polylist")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "eval_rel")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality) nil nil))
        nil))
      nil))
    nil)
   ((PolyRelExpr_PREL_extensionality formula-decl nil PolyRelExpr_adt nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pneq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pneq adt-constructor-decl "(pneq?)" poly_system_strategy nil)
    (polylist const-decl "real" polylist Sturm)
    (eval_polylist def-decl "real" polylist Sturm)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy nil)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist Sturm)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (rel shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> TarskiRel]" PolyRelExpr_adt
     nil)
    (r shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> rat]" PolyRelExpr_adt nil))
   shostak))
 (dnf_prel_preserves_truth_len0 0
  (dnf_prel_preserves_truth_len0-1 nil 3770473418
   ("" (skeep*)
    (("" (typepred "d(p)")
      (("" (assert)
        (("" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
          (("1" (replace -1 1)
            (("1" (expand "nnf")
              (("1" (expand "distribute_ands")
                (("1" (expand "construct_dnf")
                  (("1" (expand "construct_record")
                    (("1" (replace -4 1)
                      (("1" (expand "eval")
                        (("1" (expand "eval")
                          (("1" (expand "eval_atm_list")
                            (("1" (expand "eval_atm_list")
                              (("1" (expand "polynomial")
                                (("1" (expand "sigma")
                                  (("1" (expand "sigma")
                                    (("1" (expand "change_function")
                                      (("1"
                                        (expand "eval_atm")
                                        (("1"
                                          (expand "polynomial")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "eval_rel")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (apply-extensionality) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((d shared-adt-accessor-decl
       "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> nat]" PolyRelExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (r shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> rat]" PolyRelExpr_adt nil)
    (rel shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> TarskiRel]" PolyRelExpr_adt
     nil)
    (pn shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> [nat -> rat]]"
     PolyRelExpr_adt nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (sigma def-decl "real" sigma reals)
    (change_function const-decl "[nat -> rat]" dnf_polynomials nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (construct_record const-decl "DNF_Atom" dnf_polynomials nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (PolyRelExpr_PREL_extensionality formula-decl nil PolyRelExpr_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (dnf_prel_preserves_truth 0
  (dnf_prel_preserves_truth-29 nil 3772801740
   ("" (skeep)
    (("" (skeep)
      (("" (case "d(p) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "d(p) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "d(p) > 1")
            (("1" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (case
                                         "polynomial(change_function(pn(p), r(p)),
                                         degr_rec(pn(p), d(p)))
                                        (x) = polynomial(change_function(pn(p), r(p)), d(p))(x)")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand "eval_rel")
                                              (("1"
                                                (case "rel(p) = plt")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "polynomial_eq_a0_plus")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "polynomial_eq_a0_plus")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "pn(p)"
                                                                 "d(p)"
                                                                 "x")
                                                                (("1"
                                                                  (split -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "change_function")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case "rel(p) = ple")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "polynomial_eq_a0_plus")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace -1 2)
                                                              (("1"
                                                                (lemma
                                                                 "polynomial_eq_a0_plus")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "pn(p)"
                                                                   "d(p)"
                                                                   "x")
                                                                  (("1"
                                                                    (split -1)
                                                                    (("1"
                                                                      (expand
                                                                       "change_function")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "rel(p) = pgt")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "polynomial_eq_a0_plus")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (replace -1 3)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "polynomial_eq_a0_plus")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "pn(p)"
                                                                       "d(p)"
                                                                       "x")
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           3)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "change_function")
                                                                              (("1"
                                                                                (hide
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (case
                                                                                   "-r(p) > 0 = 0 > r(p)")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2
                                                                                     -3
                                                                                     -4
                                                                                     -5)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -2
                                                                                       -3
                                                                                       -4)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "both_sides_plus_lt1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "0"
                                                                                           "-r(p)"
                                                                                           "r(p)")
                                                                                          (("2"
                                                                                            (simplify)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2
                                                                           3
                                                                           4)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -4)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -4
                                                                 2
                                                                 3
                                                                 4)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "rel(p) = pge")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1 1 2 3)
                                                            (("1"
                                                              (lemma
                                                               "polynomial_eq_a0_plus")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (split -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "polynomial_eq_a0_plus")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "pn(p)"
                                                                         "d(p)"
                                                                         "x")
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "change_function")
                                                                                (("1"
                                                                                  (case
                                                                                   "-r(p) >= 0 = 0 >= r(p)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -2
                                                                                       -3)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -4
                                                                             2)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -3
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "rel(p) = peq")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               1
                                                               2
                                                               3
                                                               4)
                                                              (("1"
                                                                (lemma
                                                                 "polynomial_eq_a0_plus")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (split -1)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "polynomial_eq_a0_plus")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "pn(p)"
                                                                           "d(p)"
                                                                           "x")
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "change_function")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     -3)
                                                                                    (("1"
                                                                                      (case
                                                                                       "(pn(p)(0) - r(p)) +
                                                                                              x * polynomial(LAMBDA (i: nat): pn(p)(1 + i), d(p) - 1)(x)
                                                                                              = 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               -4
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       -3
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "rel(p) = pneq")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 1
                                                                 2
                                                                 3
                                                                 4
                                                                 5)
                                                                (("1"
                                                                  (lemma
                                                                   "polynomial_eq_a0_plus")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "polynomial_eq_a0_plus")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "pn(p)"
                                                                             "d(p)"
                                                                             "x")
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "change_function")
                                                                                    (("1"
                                                                                      (case
                                                                                       "(pn(p)(0) - r(p)) +
                                           x * polynomial(LAMBDA (i: nat): pn(p)(1 + i), d(p) - 1)(x)
                                           = 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -4
                                                                                 2
                                                                                 3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -3
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (hide -1 -2 -3)
                                            (("2"
                                              (lemma "degr_rec_lemma")
                                              (("2"
                                                (inst
                                                 -1
                                                 "change_function(pn(p), r(p))"
                                                 "d(p)"
                                                 "x")
                                                (("2"
                                                  (case
                                                   "degr_rec(change_function(pn(p), r(p)), d(p)) = degr_rec(pn(p), d(p))")
                                                  (("1"
                                                    (replace -1 -2)
                                                    (("1" (propax) nil nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 -1)
                                                    (("2"
                                                      (lemma
                                                       "degr_rec_change_function")
                                                      (("2" (inst?) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((dnf_prel_preserves_truth_len0 formula-decl nil dnf_polynomials nil)
    (r shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> rat]" PolyRelExpr_adt nil)
    (rel shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> TarskiRel]" PolyRelExpr_adt
     nil)
    (pn shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> [nat -> rat]]"
     PolyRelExpr_adt nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (construct_record const-decl "DNF_Atom" dnf_polynomials nil)
    (degr_rec_lemma formula-decl nil dnf_polynomials nil)
    (degr_rec_change_function formula-decl nil dnf_polynomials nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pneq adt-constructor-decl "(pneq?)" poly_system_strategy nil)
    (pneq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy nil)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy nil)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (polynomial_eq_a0_plus formula-decl nil polynomials reals)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy nil)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (change_function const-decl "[nat -> rat]" dnf_polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sequence type-eq-decl nil sequences nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (PolyRelExpr_PREL_extensionality formula-decl nil PolyRelExpr_adt nil)
    (p skolem-const-decl "PolyRelExpr" dnf_polynomials nil)
    (> const-decl "bool" reals nil)
    (dnf_prel_preserves_truth_len1 formula-decl nil dnf_polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d shared-adt-accessor-decl
       "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> nat]" PolyRelExpr_adt
       nil))
   nil)
  (dnf_prel_preserves_truth-28 nil 3772790342
   ("" (skeep)
    (("" (skeep)
      (("" (case "d(p) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "d(p) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "d(p) > 1")
            (("1" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (case
                                         "polynomial(change_function(pn(p), r(p)),
                          degr_rec(pn(p), d(p)))
                         (x) = polynomial(change_function(pn(p), r(p)), d(p))(x)")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -1)
                                            (("1" (postpone) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((d shared-adt-accessor-decl
       "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> nat]" PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PolyRelExpr_PREL_extensionality formula-decl nil PolyRelExpr_adt nil)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy nil)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (pneq adt-constructor-decl "(pneq?)" poly_system_strategy nil)
    (pneq? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy nil)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy nil)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (polynomial_eq_a0_plus formula-decl nil polynomials reals)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy nil)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]" poly_system_strategy
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (pn shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> [nat -> rat]]"
     PolyRelExpr_adt nil)
    (rel shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> TarskiRel]" PolyRelExpr_adt
     nil)
    (r shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> rat]" PolyRelExpr_adt nil))
   nil)
  (dnf_prel_preserves_truth-27 nil 3772790208
   ("" (skeep)
    (("" (skeep)
      (("" (case "d(p) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "d(p) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "d(p) > 1")
            (("1" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "eval_rel")
                                        (("1"
                                          (case "rel(p) = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "polynomial_eq_a0_plus")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "polynomial_eq_a0_plus")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "pn(p)"
                                                           "d(p)"
                                                           "x")
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (expand
                                                                   "change_function")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "rel(p) = ple")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "polynomial_eq_a0_plus")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lemma
                                                           "polynomial_eq_a0_plus")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "pn(p)"
                                                             "d(p)"
                                                             "x")
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (expand
                                                                 "change_function")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "rel(p) = pgt")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "polynomial_eq_a0_plus")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (replace -1 3)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "polynomial_eq_a0_plus")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "pn(p)"
                                                                 "d(p)"
                                                                 "x")
                                                                (("1"
                                                                  (split -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     3)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "change_function")
                                                                        (("1"
                                                                          (hide
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (case
                                                                             "-r(p) > 0 = 0 > r(p)")
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -5)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_plus_lt1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0"
                                                                                     "-r(p)"
                                                                                     "r(p)")
                                                                                    (("2"
                                                                                      (simplify)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -4
                                                           2
                                                           3
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "rel(p) = pge")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -1 1 2 3)
                                                      (("1"
                                                        (lemma
                                                         "polynomial_eq_a0_plus")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (lemma
                                                                 "polynomial_eq_a0_plus")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "pn(p)"
                                                                   "d(p)"
                                                                   "x")
                                                                  (("1"
                                                                    (split -1)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "change_function")
                                                                          (("1"
                                                                            (case
                                                                             "-r(p) >= 0 = 0 >= r(p)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -4
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -1 -3 2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "rel(p) = peq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -1 1 2 3 4)
                                                        (("1"
                                                          (lemma
                                                           "polynomial_eq_a0_plus")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (lemma
                                                                   "polynomial_eq_a0_plus")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "pn(p)"
                                                                     "d(p)"
                                                                     "x")
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "change_function")
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (case
                                                                                 "(pn(p)(0) - r(p)) +
                                    x * polynomial(LAMBDA (i: nat): pn(p)(1 + i), d(p) - 1)(x)
                                    = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -4
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide -1 -3 2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "rel(p) = pneq")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1 1 2 3 4 5)
                                                          (("1"
                                                            (lemma
                                                             "polynomial_eq_a0_plus")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (lemma
                                                                   "polynomial_eq_a0_plus")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "pn(p)"
                                                                     "d(p)"
                                                                     "x")
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -4
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   -3
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-26 nil 3772789878
   ("" (skeep)
    (("" (skeep)
      (("" (case "d(p) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "d(p) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "d(p) > 1")
            (("1" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "eval_rel")
                                        (("1"
                                          (case "rel(p) = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "polynomial_eq_a0_plus")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "polynomial_eq_a0_plus")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "pn(p)"
                                                           "d(p)"
                                                           "x")
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (expand
                                                                   "change_function")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "rel(p) = ple")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "polynomial_eq_a0_plus")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lemma
                                                           "polynomial_eq_a0_plus")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "pn(p)"
                                                             "d(p)"
                                                             "x")
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (expand
                                                                 "change_function")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "rel(p) = pgt")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "polynomial_eq_a0_plus")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (replace -1 3)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "polynomial_eq_a0_plus")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "pn(p)"
                                                                 "d(p)"
                                                                 "x")
                                                                (("1"
                                                                  (split -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     3)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "change_function")
                                                                        (("1"
                                                                          (hide
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (case
                                                                             "-r(p) > 0 = 0 > r(p)")
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -5)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_plus_lt1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0"
                                                                                     "-r(p)"
                                                                                     "r(p)")
                                                                                    (("2"
                                                                                      (simplify)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -4
                                                           2
                                                           3
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "rel(p) = pge")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -1 1 2 3)
                                                      (("1"
                                                        (lemma
                                                         "polynomial_eq_a0_plus")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (lemma
                                                                 "polynomial_eq_a0_plus")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "pn(p)"
                                                                   "d(p)"
                                                                   "x")
                                                                  (("1"
                                                                    (split -1)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "change_function")
                                                                          (("1"
                                                                            (case
                                                                             "-r(p) >= 0 = 0 >= r(p)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -4
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -1 -3 2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "rel(p) = peq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -1 1 2 3 4)
                                                        (("1"
                                                          (lemma
                                                           "polynomial_eq_a0_plus")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (lemma
                                                                   "polynomial_eq_a0_plus")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "pn(p)"
                                                                     "d(p)"
                                                                     "x")
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "change_function")
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (case
                                                                                 "(pn(p)(0) - r(p)) +
       x * polynomial(LAMBDA (i: nat): pn(p)(1 + i), d(p) - 1)(x)
       = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -4
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide -1 -3 2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "rel(p) = pneq")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1 1 2 3 4)
                                                          (("1"
                                                            (lemma
                                                             "polynomial_eq_a0_plus")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (lemma
                                                                   "polynomial_eq_a0_plus")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "pn(p)"
                                                                     "d(p)"
                                                                     "x")
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -4
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   -3
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-25 nil 3772789681
   ("" (skeep)
    (("" (skeep)
      (("" (case "d(p) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "d(p) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "d(p) > 1")
            (("1" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "eval_rel")
                                        (("1"
                                          (case "rel(p) = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "polynomial_eq_a0_plus")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "polynomial_eq_a0_plus")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "pn(p)"
                                                           "d(p)"
                                                           "x")
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (expand
                                                                   "change_function")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "rel(p) = ple")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "polynomial_eq_a0_plus")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lemma
                                                           "polynomial_eq_a0_plus")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "pn(p)"
                                                             "d(p)"
                                                             "x")
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (expand
                                                                 "change_function")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "rel(p) = pgt")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "polynomial_eq_a0_plus")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (replace -1 3)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "polynomial_eq_a0_plus")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "pn(p)"
                                                                 "d(p)"
                                                                 "x")
                                                                (("1"
                                                                  (split -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     3)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "change_function")
                                                                        (("1"
                                                                          (hide
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (case
                                                                             "-r(p) > 0 = 0 > r(p)")
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -5)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_plus_lt1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0"
                                                                                     "-r(p)"
                                                                                     "r(p)")
                                                                                    (("2"
                                                                                      (simplify)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -4
                                                           2
                                                           3
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "rel(p) = pge")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -1 1 2 3)
                                                      (("1"
                                                        (lemma
                                                         "polynomial_eq_a0_plus")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (lemma
                                                                 "polynomial_eq_a0_plus")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "pn(p)"
                                                                   "d(p)"
                                                                   "x")
                                                                  (("1"
                                                                    (split -1)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "change_function")
                                                                          (("1"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "rel(p) = peq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -1 1 2 3 4)
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "rel(p) = pneq")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1 1 2 3 4)
                                                          (("1"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-24 nil 3772789630
   ("" (skeep)
    (("" (skeep)
      (("" (case "d(p) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil) ("2" (propax) nil) ("3" (propax) nil)))))))
         ("2" (case "d(p) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))
           ("2" (case "d(p) > 1")
            (("1" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "eval_rel")
                                        (("1"
                                          (case "rel(p) = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "polynomial_eq_a0_plus")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "polynomial_eq_a0_plus")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "pn(p)"
                                                           "d(p)"
                                                           "x")
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (expand
                                                                   "change_function")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))))
                                                   ("2" (assert) nil)))))))))
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "rel(p) = ple")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "polynomial_eq_a0_plus")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lemma
                                                           "polynomial_eq_a0_plus")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "pn(p)"
                                                             "d(p)"
                                                             "x")
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (expand
                                                                 "change_function")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))
                                                               ("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("2"
                                                        (assert)
                                                        nil)))))))))
                                               ("2"
                                                (case "rel(p) = pgt")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "polynomial_eq_a0_plus")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (replace -1 3)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "polynomial_eq_a0_plus")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "pn(p)"
                                                                 "d(p)"
                                                                 "x")
                                                                (("1"
                                                                  (split -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     3)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "change_function")
                                                                        (("1"
                                                                          (hide
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (case
                                                                             "-r(p) > 0 = 0 > r(p)")
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -5)
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_plus_lt1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0"
                                                                                     "-r(p)"
                                                                                     "r(p)")
                                                                                    (("2"
                                                                                      (simplify)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil)))))))))))))))))))))
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -4
                                                           2
                                                           3
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))
                                                 ("2"
                                                  (case "rel(p) = pge")
                                                  (("1"
                                                    (assert)
                                                    (("1" (postpone) nil)))
                                                   ("2"
                                                    (case "rel(p) = peq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1 3)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "polynomial_eq_a0_plus")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "pn(p)"
                                                               "d(p)"
                                                               "x")
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   3)
                                                                  (("1"
                                                                    (hide -1)
                                                                    (("1"
                                                                      (expand
                                                                       "change_function")
                                                                      (("1"
                                                                        (postpone)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (case "rel(p) = pneq")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (postpone)
                                                          nil)))
                                                       ("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))))))))))))))))
               ("2" (apply-extensionality) nil)))
             ("2" (assert) nil)))))
         ("3" (assert) nil))))))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-23 nil 3772559049
   ("" (skeep)
    (("" (skeep)
      (("" (case "d(p) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "d(p) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "d(p) > 1")
            (("1" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "eval_rel")
                                        (("1"
                                          (case "rel(p) = plt")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "polynomial_eq_a0_plus")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "polynomial_eq_a0_plus")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "pn(p)"
                                                           "d(p)"
                                                           "x")
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (expand
                                                                   "change_function")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "rel(p) = ple")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "polynomial_eq_a0_plus")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lemma
                                                           "polynomial_eq_a0_plus")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "pn(p)"
                                                             "d(p)"
                                                             "x")
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (expand
                                                                 "change_function")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "rel(p) = pgt")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "polynomial_eq_a0_plus")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (replace -1 3)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "polynomial_eq_a0_plus")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "pn(p)"
                                                                 "d(p)"
                                                                 "x")
                                                                (("1"
                                                                  (split -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     3)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "change_function")
                                                                        (("1"
                                                                          (hide
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (case
                                                                             "-r(p) > 0 = 0 > r(p)")
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -5)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_plus_lt1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0"
                                                                                     "-r(p)"
                                                                                     "r(p)")
                                                                                    (("2"
                                                                                      (simplify)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -4)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -4
                                                           2
                                                           3
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "rel(p) = pge")
                                                  (("1"
                                                    (assert)
                                                    (("1" (postpone) nil nil))
                                                    nil)
                                                   ("2"
                                                    (case "rel(p) = peq")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "rel(p) = pneq")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-22 nil 3770484430
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "polylist")
                                        (("1"
                                          (expand "eval_polylist")
                                          (("1"
                                            (case
                                             "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                                                                                     cdr(plist(p)))) = cdr(plist(p))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                                                                                                               cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "nth(plist(p), 0) = car(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (case
                                                         "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case "x^0 = 1")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (case
                                                                       "null?(cdr(plist(p))) ")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (pl: list[rat]): FORALL(a,b: rat): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                                                                                                                                                                                                                                                                                                 (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                                                                                                                                                                a - b)
                                                                                                                                                                                                                                                                                                                                                                               (x),
                                                                                                                                                                                                                                                                                                                                                                  0)
                                                                                                                                                                                                                                                                                                                                                          =
                                                                                                                                                                                                                                                                                                                                                          eval_rel(rel(p))
                                                                                                                                                                                                                                                                                                                                                                  (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                                                                                                                                                                 a)
                                                                                                                                                                                                                                                                                                                                                                                (x),
                                                                                                                                                                                                                                                                                                                                                                   b)")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (induct
                                                                               "pl")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (case
                                                                                     "length(cons2_var) = 1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_polylist")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -4
                                                                                           -5
                                                                                           -6)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             eval_rel_preserves_truth)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "rel(p)"
                                                                                               "car(cons2_var) * x + a"
                                                                                               "b")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -4
                                                                                           -5
                                                                                           -6)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             eval_rel_preserves_truth)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "rel(p)"
                                                                                               "car(cons2_var) * x + a"
                                                                                               "b")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "length(cons2_var) > 1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "eval_polylist"
                                                                                         2)
                                                                                        (("1"
                                                                                          (case
                                                                                           "null?(cdr(cons2_var))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 eval_rel_preserves_truth)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -2
                                                                                                   -3
                                                                                                   -4
                                                                                                   -5
                                                                                                   -6
                                                                                                   -7
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     eval_polylist_remove_acc)
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             eval_polylist_remove_acc)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "car(cons2_var) *
                                                                                                                                   x ^
                                                                                                                                    (length(cons(cons1_var, cons2_var)) -
                                                                                                                                      length(cons2_var))
                                                                                                                                   + a"
                                                                                                               "cdr(cons2_var)"
                                                                                                               "x"
                                                                                                               "length(cons2_var) - 1")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "rel(p)"
                                                                                                                   "eval_polylist(cdr(cons2_var), length(cons2_var) - 1, 0)(x)
                                                                                                                       +
                                                                                                                       (car(cons2_var) *
                                                                                                                         x ^
                                                                                                                          (length(cons(cons1_var, cons2_var)) -
                                                                                                                            length(cons2_var))
                                                                                                                         + a)"
                                                                                                                   "b")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         eval_polylist_remove_acc)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "car(cons2_var) * x ^ (length(cons(cons1_var, cons2_var)) -
                                  length(cons2_var)) + a"
                                                                                                                           "cdr(cons2_var)"
                                                                                                                           "x"
                                                                                                                           "length(cons(cons1_var, cons2_var)) - 1")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               -2
                                                                                                                               -3)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 eval_rel_preserves_truth)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "rel(p)"
                                                                                                                                   "eval_polylist(cdr(cons2_var),
                              length(cons(cons1_var, cons2_var)) - 1, 0)
                             (x)
                 +
                 (car(cons2_var) *
                   x ^
                    (length(cons(cons1_var, cons2_var)) -
                      length(cons2_var))
                   + a)"
                                                                                                                                   "b")
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         1
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           eval_polylist_remove_acc)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "car(cons2_var) * x ^ (length(cons(cons1_var, cons2_var)) -
                                  length(cons2_var)) + a"
                                                                                                                             "cdr(cons2_var)"
                                                                                                                             "x"
                                                                                                                             "length(cons(cons1_var, cons2_var)) - 1")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   eval_rel_preserves_truth)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "rel(p)"
                                                                                                                                     "eval_polylist(cdr(cons2_var),
                              length(cons(cons1_var, cons2_var)) - 1, 0)
                             (x)
                 +
                 (car(cons2_var) *
                   x ^
                    (length(cons(cons1_var, cons2_var)) -
                      length(cons2_var))
                   + a)"
                                                                                                                                     "b")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             3)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "cons2_var")
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "append")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil nil))
                                              nil)
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (typepred "plist(p)")
                                                (("4"
                                                  (grind)
                                                  (("4"
                                                    (typepred
                                                     "cdr(cdr(plist(p)))")
                                                    (("4" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (hide 2)
                                              (("5"
                                                (typepred "plist(p)")
                                                (("5" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((TarskiRel type-decl nil poly_system_strategy nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (rel shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> TarskiRel]" PolyRelExpr_adt
     nil)
    (r shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> rat]" PolyRelExpr_adt nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (eval_polylist def-decl "real" polylist Sturm)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (eval_polylist_remove_acc formula-decl nil polylist Sturm)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (polylist const-decl "real" polylist Sturm)
    (PolyRelExpr_PREL_extensionality formula-decl nil PolyRelExpr_adt nil)
    (list type-decl nil list_adt nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist Sturm))
   nil)
  (dnf_prel_preserves_truth-21 nil 3770484245
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "polylist")
                                        (("1"
                                          (expand "eval_polylist")
                                          (("1"
                                            (case
                                             "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                                                       cdr(plist(p)))) = cdr(plist(p))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                                                                             cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "nth(plist(p), 0) = car(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (case
                                                         "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case "x^0 = 1")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (case
                                                                       "null?(cdr(plist(p))) ")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (pl: list[rat]): FORALL(a,b: rat): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                                                                                                                                                                                                                                           (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                                                                                                          a - b)
                                                                                                                                                                                                                                                                                                                         (x),
                                                                                                                                                                                                                                                                                                            0)
                                                                                                                                                                                                                                                                                                    =
                                                                                                                                                                                                                                                                                                    eval_rel(rel(p))
                                                                                                                                                                                                                                                                                                            (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                                                                                                           a)
                                                                                                                                                                                                                                                                                                                          (x),
                                                                                                                                                                                                                                                                                                             b)")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (induct
                                                                               "pl")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (case
                                                                                     "length(cons2_var) = 1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_polylist")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -4
                                                                                           -5
                                                                                           -6)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             eval_rel_preserves_truth)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "rel(p)"
                                                                                               "car(cons2_var) * x + a"
                                                                                               "b")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -4
                                                                                           -5
                                                                                           -6)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             eval_rel_preserves_truth)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "rel(p)"
                                                                                               "car(cons2_var) * x + a"
                                                                                               "b")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "length(cons2_var) > 1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "eval_polylist"
                                                                                         2)
                                                                                        (("1"
                                                                                          (case
                                                                                           "null?(cdr(cons2_var))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "length(cons(cons1_var, cons2_var)) - 1 = length(cons2_var) -1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     eval_rel_preserves_truth)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       -7
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         eval_polylist_remove_acc)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 eval_polylist_remove_acc)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "car(cons2_var) *
                                                                 x ^
                                                                  (length(cons(cons1_var, cons2_var)) -
                                                                    length(cons2_var))
                                                                 + a"
                                                                                                                   "cdr(cons2_var)"
                                                                                                                   "x"
                                                                                                                   "length(cons2_var) - 1")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "rel(p)"
                                                                                                                         "eval_polylist(cdr(cons2_var), length(cons2_var) - 1, 0)(x)
                                                   +
                                                   (car(cons2_var) *
                                                     x ^
                                                      (length(cons(cons1_var, cons2_var)) -
                                                        length(cons2_var))
                                                     + a)"
                                                                                                                         "b")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (postpone)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             2
                                                                                             3)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "cons2_var")
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "append")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil nil))
                                              nil)
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (typepred "plist(p)")
                                                (("4"
                                                  (grind)
                                                  (("4"
                                                    (typepred
                                                     "cdr(cdr(plist(p)))")
                                                    (("4" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (hide 2)
                                              (("5"
                                                (typepred "plist(p)")
                                                (("5" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-20 nil 3770483859
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "polylist")
                                        (("1"
                                          (expand "eval_polylist")
                                          (("1"
                                            (case
                                             "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                                                                      cdr(plist(p)))) = cdr(plist(p))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                                                                                              cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "nth(plist(p), 0) = car(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (case
                                                         "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case "x^0 = 1")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (case
                                                                       "null?(cdr(plist(p))) ")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (postpone) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (postpone) nil nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil)
                                             ("4" (postpone) nil nil)
                                             ("5" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-19 nil 3770482754
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "polylist")
                                        (("1"
                                          (expand "eval_polylist")
                                          (("1"
                                            (case
                                             "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                                        cdr(plist(p)))) = cdr(plist(p))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                                                            cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "nth(plist(p), 0) = car(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (case
                                                         "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case "x^0 = 1")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (case
                                                                       "null?(cdr(plist(p))) ")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (pl: list[rat]): FORALL(a,b: rat): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                                                                                                                                                                                                                (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                                                                               a - b)
                                                                                                                                                                                                                                                                                              (x),
                                                                                                                                                                                                                                                                                 0)
                                                                                                                                                                                                                                                                         =
                                                                                                                                                                                                                                                                         eval_rel(rel(p))
                                                                                                                                                                                                                                                                                 (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                                                                                a)
                                                                                                                                                                                                                                                                                               (x),
                                                                                                                                                                                                                                                                                  b)")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (induct
                                                                               "pl")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (case
                                                                                     "length(cons2_var) = 1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_polylist")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -4
                                                                                           -5
                                                                                           -6)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             eval_rel_preserves_truth)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "rel(p)"
                                                                                               "car(cons2_var) * x + a"
                                                                                               "b")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -4
                                                                                           -5
                                                                                           -6)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             eval_rel_preserves_truth)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "rel(p)"
                                                                                               "car(cons2_var) * x + a"
                                                                                               "b")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "length(cons2_var) > 1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "eval_polylist"
                                                                                         2)
                                                                                        (("1"
                                                                                          (case
                                                                                           "null?(cdr(cons2_var))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "length(cons(cons1_var, cons2_var)) - 1 = length(cons2_var) -1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     eval_rel_preserves_truth)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       -7
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         eval_polylist_remove_acc)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 eval_polylist_remove_acc)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "car(cons2_var) *
                               x ^
                                (length(cons(cons1_var, cons2_var)) -
                                  length(cons2_var))
                               + a"
                                                                                                                   "cdr(cons2_var)"
                                                                                                                   "x"
                                                                                                                   "length(cons2_var) - 1")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "rel(p)"
                                                                                                                         "eval_polylist(cdr(cons2_var), length(cons2_var) - 1, 0)(x)
                 +
                 (car(cons2_var) *
                   x ^
                    (length(cons(cons1_var, cons2_var)) -
                      length(cons2_var))
                   + a)"
                                                                                                                         "b")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "append")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil nil))
                                              nil)
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (typepred "plist(p)")
                                                (("4"
                                                  (grind)
                                                  (("4"
                                                    (typepred
                                                     "cdr(cdr(plist(p)))")
                                                    (("4" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (hide 2)
                                              (("5"
                                                (typepred "plist(p)")
                                                (("5" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-18 nil 3770482404
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "polylist")
                                        (("1"
                                          (expand "eval_polylist")
                                          (("1"
                                            (case
                                             "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                         cdr(plist(p)))) = cdr(plist(p))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                                           cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "nth(plist(p), 0) = car(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (case
                                                         "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case "x^0 = 1")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (case
                                                                       "null?(cdr(plist(p))) ")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (pl: list[rat]): FORALL(k: rat): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                                                                                                                                                                                     (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                                                    car(pl) - k)
                                                                                                                                                                                                                                                                   (x),
                                                                                                                                                                                                                                                      0)
                                                                                                                                                                                                                                              =
                                                                                                                                                                                                                                              eval_rel(rel(p))
                                                                                                                                                                                                                                                      (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                                                     car(pl))
                                                                                                                                                                                                                                                                    (x),
                                                                                                                                                                                                                                                       k)")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (induct
                                                                               "pl")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (case
                                                                                     "length(cons2_var) = 1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_polylist")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -4
                                                                                           -5
                                                                                           -6)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -4
                                                                                           -5
                                                                                           -6)
                                                                                          (("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "length(cons2_var) > 1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "eval_polylist"
                                                                                         2)
                                                                                        (("1"
                                                                                          (case
                                                                                           "null?(cdr(cons2_var))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "append")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil nil))
                                              nil)
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (typepred "plist(p)")
                                                (("4"
                                                  (grind)
                                                  (("4"
                                                    (typepred
                                                     "cdr(cdr(plist(p)))")
                                                    (("4" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (hide 2)
                                              (("5"
                                                (typepred "plist(p)")
                                                (("5" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-17 nil 3770482340
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "polylist")
                                        (("1"
                                          (expand "eval_polylist")
                                          (("1"
                                            (case
                                             "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                          cdr(plist(p)))) = cdr(plist(p))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                                          cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "nth(plist(p), 0) = car(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (case
                                                         "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case "x^0 = 1")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (case
                                                                       "null?(cdr(plist(p))) ")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (pl: list[rat]): FORALL(k: real): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                                                                                                                                                          (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                         car(pl) - k)
                                                                                                                                                                                                                                        (x),
                                                                                                                                                                                                                           0)
                                                                                                                                                                                                                   =
                                                                                                                                                                                                                   eval_rel(rel(p))
                                                                                                                                                                                                                           (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                                                          car(pl))
                                                                                                                                                                                                                                         (x),
                                                                                                                                                                                                                            k)")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (induct
                                                                               "pl")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (grind)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "k")
                                                                                      (("3"
                                                                                        (grind)
                                                                                        (("3"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                (("3"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "append")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil nil))
                                              nil)
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (typepred "plist(p)")
                                                (("4"
                                                  (grind)
                                                  (("4"
                                                    (typepred
                                                     "cdr(cdr(plist(p)))")
                                                    (("4" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (hide 2)
                                              (("5"
                                                (typepred "plist(p)")
                                                (("5" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-16 nil 3770481639
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil) ("2" (propax) nil) ("3" (propax) nil)))))))
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "polylist")
                                        (("1"
                                          (expand "eval_polylist")
                                          (("1"
                                            (case
                                             "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                           cdr(plist(p)))) = cdr(plist(p))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                                         cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "nth(plist(p), 0) = car(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (case
                                                         "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case "x^0 = 1")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (case
                                                                       "null?(cdr(plist(p))) ")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (pl: list[rat]): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                                                                                                                               (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                              car(pl) - r(p))
                                                                                                                                                                                                             (x),
                                                                                                                                                                                                0)
                                                                                                                                                                                        =
                                                                                                                                                                                        eval_rel(rel(p))
                                                                                                                                                                                                (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                                               car(pl))
                                                                                                                                                                                                              (x),
                                                                                                                                                                                                 r(p))")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil)))))
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (induct
                                                                               "pl")
                                                                              (("1"
                                                                                (grind)
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (postpone)
                                                                                  nil)))
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (grind)
                                                                                    nil)))))
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (grind)
                                                                                    nil)))))
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (grind)
                                                                                    nil)))))))))
                                                                           ("3"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))))
                                                                           ("4"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil)))))
                                                                           ("5"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil)))))))))))))))))
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "append")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))))))))))
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil)))))))
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (grind) nil)))))))
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil)))
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil)))
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (typepred "plist(p)")
                                                (("4"
                                                  (grind)
                                                  (("4"
                                                    (typepred
                                                     "cdr(cdr(plist(p)))")
                                                    (("4"
                                                      (propax)
                                                      nil)))))))))
                                             ("5"
                                              (hide 2)
                                              (("5"
                                                (typepred "plist(p)")
                                                (("5"
                                                  (grind)
                                                  nil)))))))))))))))))))))))))))))))))))
               ("2" (apply-extensionality) nil)))
             ("2" (assert) nil)))))
         ("3" (assert) nil))))))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-15 nil 3770481603
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil) ("2" (propax) nil) ("3" (propax) nil)))))))
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (assert)
                    (("1" (expand "nnf")
                      (("1" (expand "distribute_ands")
                        (("1" (expand "construct_dnf")
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "polylist")
                                        (("1"
                                          (expand "eval_polylist")
                                          (("1"
                                            (case
                                             "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                            cdr(plist(p)))) = cdr(plist(p))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                                        cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "nth(plist(p), 0) = car(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (case
                                                         "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case "x^0 = 1")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (case
                                                                       "null?(cdr(plist(p))) ")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (pl: list[rat]): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                                                                                                    (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                   car(pl) - r(p))
                                                                                                                                                                                  (x),
                                                                                                                                                                     0)
                                                                                                                                                             =
                                                                                                                                                             eval_rel(rel(p))
                                                                                                                                                                     (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                                                    car(pl))
                                                                                                                                                                                   (x),
                                                                                                                                                                      r(p))")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil)))))
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (induct
                                                                               "pl")
                                                                              (("1"
                                                                                (grind)
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (postpone)
                                                                                  nil)))
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (grind)
                                                                                    nil)))))
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (grind)
                                                                                    nil)))))
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (grind)
                                                                                    nil)))))))))
                                                                           ("3"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))))
                                                                           ("4"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil)))))
                                                                           ("5"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil)))))))))))))))))
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "append")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))))))))))
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil)))))))
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (grind) nil)))))))
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil)))
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil)))
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (typepred "plist(p)")
                                                (("4"
                                                  (grind)
                                                  (("4"
                                                    (typepred
                                                     "cdr(cdr(plist(p)))")
                                                    (("4"
                                                      (propax)
                                                      nil)))))))))
                                             ("5"
                                              (hide 2)
                                              (("5"
                                                (typepred "plist(p)")
                                                (("5"
                                                  (grind)
                                                  nil)))))))))))))))))))))))))))))))))))
               ("2" (apply-extensionality) nil)))
             ("2" (assert) nil)))))
         ("3" (assert) nil))))))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-14 nil 3770481526
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil) ("2" (propax) nil) ("3" (propax) nil)))))))
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (hide 1 2)
                (("1" (replace -1 1)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (expand "eval")
                          (("1" (expand "eval")
                            (("1" (expand "eval_atm_list")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm")
                                  (("1" (expand "construct_record")
                                    (("1" (expand "polylist")
                                      (("1"
                                        (expand "eval_polylist")
                                        (("1"
                                          (case
                                           "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                                             cdr(plist(p)))) = cdr(plist(p))")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (case
                                               "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                                       cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (case
                                                   "nth(plist(p), 0) = car(plist(p))")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (case
                                                       "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1 -2 -3 -4)
                                                          (("1"
                                                            (case "x^0 = 1")
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (simplify)
                                                                  (("1"
                                                                    (case
                                                                     "null?(cdr(plist(p))) ")
                                                                    (("1"
                                                                      (hide 1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)))
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "FORALL (pl: list[rat]): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                                                                         (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                        car(pl) - r(p))
                                                                                                                                                       (x),
                                                                                                                                          0)
                                                                                                                                  =
                                                                                                                                  eval_rel(rel(p))
                                                                                                                                          (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                                                         car(pl))
                                                                                                                                                        (x),
                                                                                                                                           r(p))")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil)))))
                                                                         ("2"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (induct
                                                                             "pl")
                                                                            (("1"
                                                                              (grind)
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (postpone)
                                                                                nil)))
                                                                             ("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (grind)
                                                                                  nil)))))
                                                                             ("4"
                                                                              (hide
                                                                               2)
                                                                              (("4"
                                                                                (skeep)
                                                                                (("4"
                                                                                  (grind)
                                                                                  nil)))))
                                                                             ("5"
                                                                              (hide
                                                                               2)
                                                                              (("5"
                                                                                (skeep)
                                                                                (("5"
                                                                                  (grind)
                                                                                  nil)))))))))
                                                                         ("3"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("3"
                                                                            (skeep)
                                                                            (("3"
                                                                              (grind)
                                                                              nil)))))
                                                                         ("4"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("4"
                                                                            (skeep)
                                                                            (("4"
                                                                              (grind)
                                                                              nil)))))
                                                                         ("5"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("5"
                                                                            (skeep)
                                                                            (("5"
                                                                              (grind)
                                                                              nil)))))))))))))))))
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))
                                                       ("2"
                                                        (hide-all-but 1)
                                                        (("2"
                                                          (expand "length")
                                                          (("2"
                                                            (expand "append")
                                                            (("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (expand
                                                                 "append")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))))))
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil)))))))
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil)))))))
                                           ("2" (hide 2) (("2" (grind) nil)))
                                           ("3" (hide 2) (("3" (grind) nil)))
                                           ("4"
                                            (hide 2)
                                            (("4"
                                              (typepred "plist(p)")
                                              (("4"
                                                (grind)
                                                (("4"
                                                  (typepred
                                                   "cdr(cdr(plist(p)))")
                                                  (("4" (propax) nil)))))))))
                                           ("5"
                                            (hide 2)
                                            (("5"
                                              (typepred "plist(p)")
                                              (("5"
                                                (grind)
                                                nil)))))))))))))))))))))))))))))))))
               ("2" (apply-extensionality) nil)))
             ("2" (assert) nil)))))
         ("3" (assert) nil))))))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-13 nil 3770481368
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil) ("2" (propax) nil) ("3" (propax) nil)))))))
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (replace -1 1)
                (("1" (expand "nnf")
                  (("1" (expand "distribute_ands")
                    (("1" (expand "construct_dnf")
                      (("1" (expand "eval")
                        (("1" (expand "eval")
                          (("1" (expand "eval_atm_list")
                            (("1" (expand "eval_atm_list")
                              (("1" (expand "eval_atm")
                                (("1" (expand "construct_record")
                                  (("1" (expand "polylist")
                                    (("1" (expand "eval_polylist")
                                      (("1"
                                        (case
                                         "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                                              cdr(plist(p)))) = cdr(plist(p))")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (case
                                             "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                                      cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "nth(plist(p), 0) = car(plist(p))")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (hide -1 -2 -3 -4)
                                                        (("1"
                                                          (case "x^0 = 1")
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (simplify)
                                                                (("1"
                                                                  (case
                                                                   "null?(cdr(plist(p))) ")
                                                                  (("1"
                                                                    (hide 1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil)))
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "FORALL (pl: list[rat]): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                                              (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                             car(pl) - r(p))
                                                                                                                            (x),
                                                                                                               0)
                                                                                                       =
                                                                                                       eval_rel(rel(p))
                                                                                                               (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                                              car(pl))
                                                                                                                             (x),
                                                                                                                r(p))")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil)))))
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (induct
                                                                           "pl")
                                                                          (("1"
                                                                            (grind)
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (postpone)
                                                                              nil)))
                                                                           ("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))))
                                                                           ("4"
                                                                            (hide
                                                                             2)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil)))))
                                                                           ("5"
                                                                            (hide
                                                                             2)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil)))))))))
                                                                       ("3"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("4"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (grind)
                                                                            nil)))))
                                                                       ("5"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("5"
                                                                          (skeep)
                                                                          (("5"
                                                                            (grind)
                                                                            nil)))))))))))))))))
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "length")
                                                        (("2"
                                                          (expand "append")
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2" (grind) nil)))))))
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil)))))))
                                         ("2" (hide 2) (("2" (grind) nil)))
                                         ("3" (hide 2) (("3" (grind) nil)))
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (typepred "plist(p)")
                                            (("4"
                                              (grind)
                                              (("4"
                                                (typepred
                                                 "cdr(cdr(plist(p)))")
                                                (("4" (propax) nil)))))))))
                                         ("5"
                                          (hide 2)
                                          (("5"
                                            (typepred "plist(p)")
                                            (("5"
                                              (grind)
                                              nil)))))))))))))))))))))))))))))))
               ("2" (apply-extensionality) nil)))
             ("2" (assert) nil)))))
         ("3" (assert) nil))))))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-12 nil 3770480746
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil) ("2" (propax) nil) ("3" (propax) nil)))))))
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (replace -1 1)
                (("1" (expand "nnf")
                  (("1" (expand "distribute_ands")
                    (("1" (expand "construct_dnf")
                      (("1" (case " length(plist(p)) > 1")
                        (("1" (assert)
                          (("1" (expand "eval")
                            (("1" (expand "eval")
                              (("1" (expand "eval_atm_list")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm")
                                    (("1" (expand "construct_record")
                                      (("1"
                                        (expand "polylist")
                                        (("1"
                                          (expand "eval_polylist")
                                          (("1"
                                            (case
                                             "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                                               cdr(plist(p)))) = cdr(plist(p))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "car(append((: nth(plist(p), 0) - r(p) :),
                                                                                     cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "nth(plist(p), 0) = car(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (case
                                                         "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (case "x^0 = 1")
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (simplify)
                                                                    (("1"
                                                                      (case
                                                                       "null?(cdr(plist(p))) ")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (pl: list[rat]): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                                                                   (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                  car(pl) - r(p))
                                                                                                 (x),
                                                                                    0)
                                                                            =
                                                                            eval_rel(rel(p))
                                                                                    (eval_polylist(cdr(pl), length(pl) - 1,
                                                                                                   car(pl))
                                                                                                  (x),
                                                                                     r(p))")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil)))))
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (induct
                                                                               "pl")
                                                                              (("1"
                                                                                (grind)
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (postpone)
                                                                                  nil)))
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (grind)
                                                                                    nil)))))
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (grind)
                                                                                    nil)))))
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (grind)
                                                                                    nil)))))))))
                                                                           ("3"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))))
                                                                           ("4"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil)))))
                                                                           ("5"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil)))))))))))))))))
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "append")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))))))))))))))
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil)))))))
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (grind) nil)))))))
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil)))
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil)))
                                             ("4"
                                              (hide 2)
                                              (("4"
                                                (typepred "plist(p)")
                                                (("4"
                                                  (grind)
                                                  (("4"
                                                    (typepred
                                                     "cdr(cdr(plist(p)))")
                                                    (("4"
                                                      (propax)
                                                      nil)))))))))
                                             ("5"
                                              (hide 2)
                                              (("5"
                                                (typepred "plist(p)")
                                                (("5"
                                                  (grind)
                                                  nil)))))))))))))))))))))))))))))))))))
               ("2" (apply-extensionality) nil)))
             ("2" (assert) nil)))))
         ("3" (assert) nil))))))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-11 nil 3770474623
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "length(plist(p)) > 1")
            (("1" (case "p = PREL(plist(p),rel(p),r(p))")
              (("1" (replace -1 1)
                (("1" (hide -3)
                  (("1" (expand "nnf")
                    (("1" (expand "distribute_ands")
                      (("1" (expand "construct_dnf")
                        (("1" (assert)
                          (("1"
                            (case "FORALL (pl: list[rat]): length(pl) > 1 IMPLIES eval((: (: construct_record(pl, rel(p), r(p)) :) :))(x) =
       eval(PREL(pl, rel(p), r(p)))(x)")
                            (("1" (inst?)
                              (("1" (split)
                                (("1" (propax) nil nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2 3 4)
                              (("2" (induct "pl")
                                (("1" (grind) nil nil)
                                 ("2" (skeep)
                                  (("2" (case "length(cons2_var) = 0")
                                    (("1" (hide 1) (("1" (grind) nil nil))
                                      nil)
                                     ("2" (case "length(cons2_var) = 1")
                                      (("1"
                                        (hide 1 -2)
                                        (("1"
                                          (hide -2)
                                          (("1" (postpone) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "length(cons2_var) > 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 1 2)
                                            (("1"
                                              (expand "eval")
                                              (("1"
                                                (expand "eval")
                                                (("1"
                                                  (expand "eval_atm_list")
                                                  (("1"
                                                    (expand "eval_atm_list")
                                                    (("1"
                                                      (expand "eval_atm")
                                                      (("1"
                                                        (expand
                                                         "construct_record")
                                                        (("1"
                                                          (case
                                                           "nth(cons(cons1_var, cons2_var), 0) = cons1_var")
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (expand
                                                               "polylist"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "eval_polylist"
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   "length(cons(cons1_var, cons2_var)) - 1 = length(cons2_var)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (case
                                                                           "car(append((: cons1_var - r(p) :), cons2_var)) = cons1_var - r(p)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (case
                                                                               "cdr(append
                                      ((: cons1_var - r(p) :), cons2_var)) = cons2_var")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (case
                                                                                   "length(append
                                         ((: cons1_var - r(p) :),
                                          cons2_var))
                                   - 1 = length(cons2_var)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (case
                                                                                       "null?(cons2_var)")
                                                                                      (("1"
                                                                                        (hide
                                                                                         1)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           1)
                                                                                          (("2"
                                                                                            (case
                                                                                             "x^0 = 1")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (simplify)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "polylist"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (postpone)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "append")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "append")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "append")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "append")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "append")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2)
                                                                            (("4"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (expand "nth")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (hide 2)
                                  (("3" (skeep) (("3" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2 3 4) (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (apply-extensionality) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-10 nil 3770474503
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil) ("2" (propax) nil) ("3" (propax) nil)))))))
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))
           ("2" (case "length(plist(p)) > 1")
            (("1" (postpone) nil) ("2" (assert) nil)))))
         ("3" (case "p = PREL(plist(p),rel(p),r(p))")
          (("3" (expand "nnf")
            (("3" (expand "distribute_ands")
              (("3" (expand "construct_dnf")
                (("3" (expand "eval")
                  (("3" (expand "eval")
                    (("3" (expand "eval_atm_list")
                      (("3" (expand "eval_atm_list")
                        (("3" (expand "eval_atm")
                          (("3" (expand "construct_record")
                            (("3" (expand "polylist")
                              (("3" (expand "eval_polylist")
                                nil))))))))))))))))))))))))))))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-9 nil 3770474356
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil) ("2" (propax) nil) ("3" (propax) nil)))))))
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))
           ("2" (case "length(plist(p)) > 1")
            (("1" (postpone) nil) ("2" (assert) nil)))))
         ("3" (expand "nnf")
          (("3" (expand "distribute_ands")
            (("3" (expand "construct_dnf")
              (("3" (expand "eval")
                (("3" (expand "eval")
                  (("3" (expand "eval_atm_list")
                    (("3" (expand "eval_atm_list")
                      (("3" (expand "eval_atm")
                        (("3" (expand "construct_record")
                          (("3" (expand "polylist")
                            (("3" (expand "eval_polylist")
                              nil))))))))))))))))))))))))))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-8 nil 3770474239
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "length(plist(p)) > 1")
            (("1" (postpone) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         ("3" (expand "nnf")
          (("3" (expand "distribute_ands")
            (("3" (expand "construct_dnf")
              (("3" (case " length(plist(p)) > 1")
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-7 nil 3770474194
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil) ("2" (propax) nil) ("3" (propax) nil)))))))
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil) ("2" (propax) nil)
                 ("3" (propax) nil)))))))
           ("2" (case "length(plist(p)) > 1")
            (("1" (postpone) nil) ("2" (assert) nil)))))
         ("3" (postpone) nil))))))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-6 nil 3770473991
   ("" (skeep)
    (("" (skeep)
      (("" (case "length(plist(p)) = 1")
        (("1" (lemma "dnf_prel_preserves_truth_len1")
          (("1" (inst?)
            (("1" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "length(plist(p)) = 0")
          (("1" (lemma dnf_prel_preserves_truth_len0)
            (("1" (inst?)
              (("1" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "length(plist(p)) > 1")
            (("1" (postpone) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-5 nil 3770473855
   ("" (skeep)
    (("" (skeep)
      (("" (case "p = PREL(plist(p),rel(p),r(p))")
        (("1" (hide -2)
          (("1" (replace -1 1)
            (("1" (expand "nnf")
              (("1" (expand "distribute_ands")
                (("1" (expand "construct_dnf")
                  (("1" (case " length(plist(p)) > 1")
                    (("1" (assert)
                      (("1" (expand "eval")
                        (("1" (expand "eval")
                          (("1" (expand "eval_atm_list")
                            (("1" (expand "eval_atm_list")
                              (("1" (expand "eval_atm")
                                (("1" (expand "construct_record")
                                  (("1" (expand "polylist")
                                    (("1" (expand "eval_polylist")
                                      (("1"
                                        (case
                                         "cdr(append((: nth(plist(p), 0) - r(p) :),
                                                         cdr(plist(p)))) = cdr(plist(p))")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (case
                                             "car(append((: nth(plist(p), 0) - r(p) :),
                                                           cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "nth(plist(p), 0) = car(plist(p))")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (hide -1 -2 -3 -4)
                                                        (("1"
                                                          (case "x^0 = 1")
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (simplify)
                                                                (("1"
                                                                  (case
                                                                   "null?(cdr(plist(p))) ")
                                                                  (("1"
                                                                    (hide 1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "FORALL (pl: list[rat]): length(pl) > 1 IMPLIES eval_rel(rel(p))
                                     (eval_polylist(cdr(pl), length(pl) - 1,
                                                    car(pl) - r(p))
                                                   (x),
                                      0)
                              =
                              eval_rel(rel(p))
                                      (eval_polylist(cdr(pl), length(pl) - 1,
                                                     car(pl))
                                                    (x),
                                       r(p))")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (induct
                                                                           "pl")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide
                                                                             2)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("5"
                                                                          (skeep)
                                                                          (("5"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "length")
                                                        (("2"
                                                          (expand "append")
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (typepred "plist(p)")
                                            (("4"
                                              (grind)
                                              (("4"
                                                (typepred
                                                 "cdr(cdr(plist(p)))")
                                                (("4" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (hide 2)
                                          (("5"
                                            (typepred "plist(p)")
                                            (("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "length(plist(p)) = 1")
                        (("1" (lemma dnf_prel_preserves_truth_len1)
                          (("1" (inst?)
                            (("1" (inst -1 "x")
                              (("1" (split)
                                (("1" (assert)
                                  (("1" (replace -3 -1)
                                    (("1" (expand "nnf" -1)
                                      (("1"
                                        (expand "distribute_ands")
                                        (("1"
                                          (assert)
                                          (("1" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil)
                                 ("3" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality) nil nil) ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-4 nil 3770472259
   ("" (skeep)
    (("" (skeep)
      (("" (case "p = PREL(plist(p),rel(p),r(p))")
        (("1" (hide -2)
          (("1" (replace -1 1)
            (("1" (expand "nnf")
              (("1" (expand "distribute_ands")
                (("1" (expand "construct_dnf")
                  (("1" (case " length(plist(p)) > 1")
                    (("1" (assert)
                      (("1" (expand "eval")
                        (("1" (expand "eval")
                          (("1" (expand "eval_atm_list")
                            (("1" (expand "eval_atm_list")
                              (("1" (expand "eval_atm")
                                (("1" (expand "construct_record")
                                  (("1" (expand "polylist")
                                    (("1" (expand "eval_polylist")
                                      (("1"
                                        (case
                                         "cdr(append((: nth(plist(p), 0) - r(p) :),
                                              cdr(plist(p)))) = cdr(plist(p))")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (case
                                             "car(append((: nth(plist(p), 0) - r(p) :),
                                              cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "nth(plist(p), 0) = car(plist(p))")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (hide -1 -2 -3 -4)
                                                        (("1"
                                                          (case "x^0 = 1")
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (simplify)
                                                                (("1"
                                                                  (case
                                                                   "null?(cdr(plist(p))) ")
                                                                  (("1"
                                                                    (hide 1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "FORALL (pl: list[rat]): length(pl) > 1 IMPLIES eval_rel(rel(p))
              (eval_polylist(cdr(pl), length(pl) - 1,
                             car(pl) - r(p))
                            (x),
               0)
       =
       eval_rel(rel(p))
               (eval_polylist(cdr(pl), length(pl) - 1,
                              car(pl))
                             (x),
                r(p))")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (induct
                                                                           "pl")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide
                                                                             2)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("5"
                                                                          (skeep)
                                                                          (("5"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "length")
                                                        (("2"
                                                          (expand "append")
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (typepred "plist(p)")
                                            (("4"
                                              (grind)
                                              (("4"
                                                (typepred
                                                 "cdr(cdr(plist(p)))")
                                                (("4" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (hide 2)
                                          (("5"
                                            (typepred "plist(p)")
                                            (("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "length( plist(p)) = 1")
                      (("1" (assert)
                        (("1" (hide 1)
                          (("1" (expand "construct_dnf_bool")
                            (("1" (expand "eval")
                              (("1" (expand "eval")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm_list")
                                    (("1" (expand "eval_atm")
                                      (("1"
                                        (expand "construct_record")
                                        (("1"
                                          (expand "append")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "append")
                                              (("1"
                                                (case
                                                 "cons(1, (: :)) = (: 1 :)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (case
                                                       "eval_rel(rel(p))(car(plist(p)), r(p))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "eval_rel(pneq)(polylist((: 1 :))(x), 0) = TRUE")
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (expand
                                                                 "polylist")
                                                                (("1"
                                                                  (expand
                                                                   "eval_polylist")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (expand
                                                               "eval_rel")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 1)
                                                          (("2"
                                                            (case
                                                             "eval_rel(peq)(polylist((: 1 :))(x), 0) = FALSE")
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (expand
                                                                 "polylist")
                                                                (("1"
                                                                  (expand
                                                                   "eval_polylist")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (expand
                                                                 "eval_rel")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "length(plist(p)) = 0")
                          (("1" (case "plist(p) = null")
                            (("1" (hide 1 2)
                              (("1" (replace -1 1)
                                (("1" (expand "construct_dnf_bool")
                                  (("1" (expand "eval")
                                    (("1" (expand "eval")
                                      (("1"
                                        (expand "eval_atm_list")
                                        (("1"
                                          (expand "eval_atm")
                                          (("1"
                                            (expand "construct_record")
                                            (("1"
                                              (expand "eval_atm_list")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2 2 3 4) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality) nil nil) ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-3 nil 3770471358
   ("" (skeep)
    (("" (skeep)
      (("" (case "p = PREL(plist(p),rel(p),r(p))")
        (("1"
          (case "FORALL (pl:list[rat]): eval(construct_dnf(PREL(pl, rel(p), r(p))))(x) =
                         eval(PREL(pl, rel(p), r(p)))(x)")
          (("1" (inst?)
            (("1" (expand "construct_dnf")
              (("1" (expand "construct_dnf_bool") (("1" (postpone) nil nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil)
           ("3" (skeep)
            (("3" (expand "has_special_form") (("3" (propax) nil nil)) nil))
            nil)
           ("4" (skeep) (("4" (typepred "pl") (("4" (postpone) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (apply-extensionality) nil nil)) nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-2 nil 3770469407
   ("" (skeep)
    (("" (skeep)
      (("" (case "p = PREL(plist(p),rel(p),r(p))")
        (("1" (hide -2)
          (("1" (replace -1 1)
            (("1" (expand "nnf")
              (("1" (expand "distribute_ands")
                (("1" (expand "construct_dnf")
                  (("1" (case " length(plist(p)) > 1")
                    (("1" (assert)
                      (("1" (expand "eval")
                        (("1" (expand "eval")
                          (("1" (expand "eval_atm_list")
                            (("1" (expand "eval_atm_list")
                              (("1" (expand "eval_atm")
                                (("1" (expand "construct_record")
                                  (("1" (expand "polylist")
                                    (("1" (expand "eval_polylist")
                                      (("1"
                                        (case
                                         "cdr(append((: nth(plist(p), 0) - r(p) :),
                                   cdr(plist(p)))) = cdr(plist(p))")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (case
                                             "car(append((: nth(plist(p), 0) - r(p) :),
                                 cdr(plist(p)))) = nth(plist(p), 0) - r(p)")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case
                                                 "nth(plist(p), 0) = car(plist(p))")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "length(append((: car(plist(p)) - r(p) :),cdr(plist(p)))) = length(plist(p))")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (hide -1 -2 -3 -4)
                                                        (("1"
                                                          (case "x^0 = 1")
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (simplify)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "length")
                                                        (("2"
                                                          (expand "append")
                                                          (("2"
                                                            (expand "length")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (typepred "plist(p)")
                                            (("4"
                                              (grind)
                                              (("4"
                                                (typepred
                                                 "cdr(cdr(plist(p)))")
                                                (("4" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (hide 2)
                                          (("5"
                                            (typepred "plist(p)")
                                            (("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "length( plist(p)) = 1")
                      (("1" (assert)
                        (("1" (hide 1)
                          (("1" (expand "construct_dnf_bool")
                            (("1" (expand "eval")
                              (("1" (expand "eval")
                                (("1" (expand "eval_atm_list")
                                  (("1" (expand "eval_atm_list")
                                    (("1" (expand "eval_atm")
                                      (("1"
                                        (expand "construct_record")
                                        (("1"
                                          (expand "append")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "append")
                                              (("1"
                                                (case
                                                 "cons(1, (: :)) = (: 1 :)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (case
                                                       "eval_rel(rel(p))(car(plist(p)), r(p))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "eval_rel(pneq)(polylist((: 1 :))(x), 0) = TRUE")
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (expand
                                                                 "polylist")
                                                                (("1"
                                                                  (expand
                                                                   "eval_polylist")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (expand
                                                               "eval_rel")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 1)
                                                          (("2"
                                                            (case
                                                             "eval_rel(peq)(polylist((: 1 :))(x), 0) = FALSE")
                                                            (("1"
                                                              (replace -1 1)
                                                              (("1"
                                                                (expand
                                                                 "polylist")
                                                                (("1"
                                                                  (expand
                                                                   "eval_polylist")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (expand
                                                                 "eval_rel")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "length(plist(p)) = 0")
                          (("1" (case "plist(p) = null")
                            (("1" (hide 1 2)
                              (("1" (replace -1 1)
                                (("1" (expand "construct_dnf_bool")
                                  (("1" (expand "eval")
                                    (("1" (expand "eval")
                                      (("1"
                                        (expand "eval_atm_list")
                                        (("1"
                                          (expand "eval_atm")
                                          (("1"
                                            (expand "construct_record")
                                            (("1"
                                              (expand "eval_atm_list")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2 2 3 4) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality) nil nil) ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (dnf_prel_preserves_truth-1 nil 3770468814
   ("" (skeep)
    (("" (skeep)
      (("" (case "p = PREL(plist(p),rel(p),r(p))")
        (("1" (hide -2)
          (("1" (replace -1 1)
            (("1" (expand "nnf")
              (("1" (expand "distribute_ands")
                (("1" (expand "construct_dnf")
                  (("1" (case " length(plist(p)) > 1")
                    (("1" (assert)
                      (("1" (expand "eval")
                        (("1" (expand "eval")
                          (("1" (expand "eval_atm_list")
                            (("1" (expand "eval_atm_list")
                              (("1" (expand "eval_atm")
                                (("1" (expand "construct_record")
                                  (("1"
                                    (case "rel(p) = plt OR rel(p) = ple OR rel(p) = pgt OR rel(p) = pge OR rel(p) = peq OR rel(p) = pneq")
                                    (("1" (postpone) nil nil)
                                     ("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "length( plist(p)) = 1")
                      (("1" (assert)
                        (("1" (hide 1) (("1" (postpone) nil nil)) nil)) nil)
                       ("2" (assert)
                        (("2" (case "length(plist(p)) = 0")
                          (("1" (case "plist(p) = null")
                            (("1" (hide 1 2)
                              (("1" (replace -1 1)
                                (("1" (expand "construct_dnf_bool")
                                  (("1" (expand "eval")
                                    (("1" (expand "eval")
                                      (("1"
                                        (expand "eval_atm_list")
                                        (("1"
                                          (expand "eval_atm")
                                          (("1"
                                            (expand "construct_record")
                                            (("1"
                                              (expand "eval_atm_list")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2 2 3 4) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality) nil nil) ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dnf_prel_preserves_truth2_TCC1 0
  (dnf_prel_preserves_truth2_TCC1-1 nil 3770485855 ("" (grind) nil nil)
   ((has_special_form def-decl "bool" dnf_polynomials nil)) nil
   (dnf_prel_preserves_truth2 subtype "dnf_polynomials.p" "NNF_expr")))
 (dnf_prel_preserves_truth2 0
  (dnf_prel_preserves_truth2-1 nil 3770485856
   ("" (skeep*)
    ((""
      (case "eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (case "p = PREL(pn(p),d(p),rel(p),r(p))")
        (("1" (replace -1 -2)
          (("1" (replace -1 1)
            (("1" (expand "nnf" -2)
              (("1" (expand "distribute_ands" -2) (("1" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality) nil nil) ("3" (assert) nil nil))
        nil)
       ("2" (lemma dnf_prel_preserves_truth)
        (("2" (inst?)
          (("2" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (inst?) nil nil)) nil))
      nil))
    nil)
   ((eval def-decl "bool" dnf_polynomials nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (p skolem-const-decl "PolyRelExpr" dnf_polynomials nil)
    (PolyRelExpr_PREL_extensionality formula-decl nil PolyRelExpr_adt nil)
    (r shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> rat]" PolyRelExpr_adt nil)
    (rel shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> TarskiRel]" PolyRelExpr_adt
     nil)
    (d shared-adt-accessor-decl
       "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> nat]" PolyRelExpr_adt nil)
    (pn shared-adt-accessor-decl
     "[{x: PolyRelExpr | PREL?(x) OR PABS?(x)} -> [nat -> rat]]"
     PolyRelExpr_adt nil)
    (PABS? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dnf_prel_preserves_truth formula-decl nil dnf_polynomials nil)
    (nnf_has_special_form formula-decl nil dnf_polynomials nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (dnf_special_form 0
  (dnf_special_form-2 nil 3770546399
   ("" (skeep)
    (("" (lemma distrib_ands_special_form)
      (("" (inst?)
        (("" (inst -1 "nnf(p)")
          (("" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2"
                (case "distribute_ands(nnf(p)) = PAND(pe1(distribute_ands(nnf(p))), pe2(distribute_ands(nnf(p))))")
                (("1" (replace -1 1)
                  (("1" (hide -1 -2)
                    (("1" (expand "pull_out_conjunctions")
                      (("1" (expand "member") (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality) nil nil) ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((distrib_ands_special_form formula-decl nil dnf_polynomials nil)
    (p skolem-const-decl "PolyRelExpr" dnf_polynomials nil)
    (PolyRelExpr_PAND_extensionality formula-decl nil PolyRelExpr_adt nil)
    (pull_out_conjunctions def-decl "list[NNF_expr]" dnf_polynomials nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PIFF? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PWHEN? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PITE? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (pe1 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (pe2 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   nil)
  (dnf_special_form-1 nil 3770545022
   ("" (skeep)
    (("" (case "has_no_ors(distribute_ands(nnf(p)))")
      (("1"
        (case "distribute_ands(nnf(p)) = PAND(pe1(distribute_ands(nnf(p))), pe2(distribute_ands(nnf(p))))")
        (("1" (replace -1 -2)
          (("1" (expand "has_no_ors" -2) (("1" (propax) nil nil)) nil)) nil)
         ("2" (apply-extensionality) nil nil) ("3" (assert) nil nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma distrib_ands_special_form)
          (("2" (inst?)
            (("2" (inst -1 "nnf(p)")
              (("2" (split -1)
                (("1" (propax) nil nil)
                 ("2" (hide 2)
                  (("2"
                    (case "distribute_ands(nnf(p)) = PAND(pe1(distribute_ands(nnf(p))), pe2(distribute_ands(nnf(p))))")
                    (("1" (replace -1 1)
                      (("1" (hide -1 -2)
                        (("1" (expand "pull_out_conjunctions")
                          (("1" (expand "member") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (PolyRelExpr_PAND_extensionality formula-decl nil PolyRelExpr_adt nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PIFF? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PWHEN? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PITE? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (pe1 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (pe2 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil))
   shostak))
 (construct_dnf_length 0
  (construct_dnf_length-1 nil 3770548295
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind)
      (("6" (grind) (("6" (expand "append") (("6" (grind) nil nil)) nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil))
    nil)
   ((gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (construct_record const-decl "DNF_Atom" dnf_polynomials nil)
    (construct_dnf_bool const-decl "DNF" dnf_polynomials nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (length def-decl "nat" list_props nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   shostak))
 (construct_dnf_car_length_TCC1 0
  (construct_dnf_car_length_TCC1-1 nil 3770548762
   ("" (lemma "construct_dnf_length")
    (("" (skeep) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (length def-decl "nat" list_props nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (construct_dnf_length formula-decl nil dnf_polynomials nil))
   nil
   (construct_dnf_car_length subtype
    "dnf_polynomials.construct_dnf(dnf_polynomials.p)"
    "(list_adt[list[DNF_Atom]].cons?)")))
 (construct_dnf_car_length 0
  (construct_dnf_car_length-1 nil 3770548763
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (grind) (("5" (expand "append") (("5" (grind) nil nil)) nil)) nil)
     ("6" (grind) (("6" (expand "append") (("6" (grind) nil nil)) nil)) nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (grind)
      (("12" (lemma construct_dnf_length)
        (("12" (inst?) (("12" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((construct_dnf_length formula-decl nil dnf_polynomials nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (append def-decl "list[T]" list_props nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (construct_record const-decl "DNF_Atom" dnf_polynomials nil)
    (construct_dnf_bool const-decl "DNF" dnf_polynomials nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (length def-decl "nat" list_props nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil))
   shostak))
 (has_no_ors_prop_TCC1 0
  (has_no_ors_prop_TCC2-1 nil 3770547673
   ("" (skeep)
    (("" (lemma "construct_dnf_length")
      (("" (inst?) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((construct_dnf_length formula-decl nil dnf_polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (length def-decl "nat" list_props nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   nil
   (has_no_ors_prop subtype "dnf_polynomials.construct_dnf(dnf_polynomials.p)"
    "(list_adt[list[DNF_Atom]].cons?)")))
 (has_no_ors_prop 0
  (has_no_ors_prop-1 nil 3770547674
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (assert)
          (("4" (expand "construct_dnf" 1) (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil)
     ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)
     ("11" (induct "p")
      (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
       ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
       ("10" (grind) nil nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (construct_record const-decl "DNF_Atom" dnf_polynomials nil)
    (construct_dnf_bool const-decl "DNF" dnf_polynomials nil)
    (change_function const-decl "[nat -> rat]" dnf_polynomials nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (has_no_ors def-decl "bool" dnf_polynomials nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil))
   shostak))
 (eval_atm_list_truth 0
  (eval_atm_list_truth-1 nil 3770549775
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "x")
          (("2"
            (case " eval_atm_list(cons(cons1_var, cons2_var))(x) = (eval_atm(cons1_var)(x) AND eval_atm_list(cons2_var)(x))")
            (("1" (replace -1 1)
              (("1" (hide -1)
                (("1" (split 1)
                  (("1" (flatten 1)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (typepred "i")
                          (("1" (case "i = 0")
                            (("1" (replace -1 1)
                              (("1" (expand "nth") (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (case "i > 0")
                              (("1" (hide -2 1)
                                (("1" (inst -5 "i - 1")
                                  (("1" (split -5)
                                    (("1" (expand "nth" 1)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (expand "length" -4)
                                      (("2" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten 1)
                    (("2" (split 1)
                      (("1" (inst -1 "0")
                        (("1" (split -1)
                          (("1" (expand "nth") (("1" (propax) nil nil)) nil)
                           ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten -2)
                        (("2" (hide -2)
                          (("2" (split -2)
                            (("1" (propax) nil nil)
                             ("2" (hide 2)
                              (("2" (skeep)
                                (("2" (inst -2 "i+1")
                                  (("2" (split -2)
                                    (("1" (expand "nth" -1)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "nat" dnf_polynomials nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (eval_atm_list_prop 0
  (eval_atm_list_prop-1 nil 3770548616
   ("" (skeep)
    (("" (induct "l1")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (inst -1 "l2")
            (("2"
              (case "eval_atm_list(append(cons(cons1_var, cons2_var), l2))(x) IFF
       (eval_atm(cons1_var)(x) AND eval_atm_list(cons2_var)(x) AND
         eval_atm_list(l2)(x))")
              (("1" (hide -2) (("1" (grind) nil nil)) nil)
               ("2" (hide 2)
                (("2"
                  (case "append(cons(cons1_var, cons2_var), l2) = cons(cons1_var, append(cons2_var, l2))")
                  (("1" (replace -1 1)
                    (("1" (hide -1)
                      (("1"
                        (case "eval_atm_list(cons(cons1_var, append(cons2_var, l2)))(x) = (eval_atm(cons1_var)(x) AND eval_atm_list(append(cons2_var, l2))(x))")
                        (("1" (replace -1 1)
                          (("1" (hide -1)
                            (("1" (replace -1 1) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (hide -1)
                      (("2" (expand "append") (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (eval_atm_list def-decl "bool" dnf_polynomials nil)
    (append def-decl "list[T]" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list_induction formula-decl nil list_adt nil)
    (eval_atm const-decl "bool" dnf_polynomials nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (has_no_ors_dnf_prop 0
  (has_no_ors_dnf_prop-1 nil 3770558138
   ("" (induct "p")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil))
    nil)
   ((degr_rec def-decl "upto(deg)" dnf_polynomials nil)
    (construct_record const-decl "DNF_Atom" dnf_polynomials nil)
    (construct_dnf_bool const-decl "DNF" dnf_polynomials nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (length def-decl "nat" list_props nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (has_no_ors def-decl "bool" dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil))
   shostak))
 (construction_lemma_1 0
  (construction_lemma_1-1 nil 3770557319
   ("" (skeep*)
    (("" (lemma "has_no_ors_dnf_prop")
      (("" (inst -1 "p1")
        (("" (case "length(construct_dnf(p1)) = 1")
          (("1" (hide -2)
            (("1" (lemma "has_no_ors_dnf_prop")
              (("1" (inst -1 "p2")
                (("1" (case "length(construct_dnf(p2)) = 1")
                  (("1" (hide -2)
                    (("1" (split 1)
                      (("1" (flatten 1)
                        (("1" (expand "construct_dnf" -1)
                          (("1" (expand "eval" -1)
                            (("1" (expand "eval" -1)
                              (("1" (lemma eval_atm_list_prop)
                                (("1" (inst?)
                                  (("1" (replace -1 -2)
                                    (("1" (hide -1)
                                      (("1"
                                        (expand "eval" 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten 1)
                        (("2" (expand "construct_dnf" 1)
                          (("2" (expand "eval" 1)
                            (("2" (expand "eval" 1)
                              (("2" (lemma eval_atm_list_prop)
                                (("2" (inst?)
                                  (("2" (replace -1 1)
                                    (("2" (hide -1)
                                      (("2"
                                        (expand "eval" -1)
                                        (("2"
                                          (expand "eval" -2)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (hide -2 -4 -5)
                                                (("1"
                                                  (case
                                                   "cdr(construct_dnf(p1)) = null")
                                                  (("1"
                                                    (replace -1 -2)
                                                    (("1"
                                                      (expand "eval" -2)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (case
                                                           "null?(construct_dnf(p1))")
                                                          (("1"
                                                            (hide -2 1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (expand "length")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 -4 -5 -6)
                                              (("2"
                                                (case
                                                 "cdr(construct_dnf(p2)) = null")
                                                (("1"
                                                  (replace -1 -2)
                                                  (("1"
                                                    (expand "eval" -2)
                                                    (("1"
                                                      (case
                                                       "null?(construct_dnf(p2))")
                                                      (("1"
                                                        (hide -2 -3 1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (expand "length")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (typepred "p2") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (typepred "p1") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((has_no_ors_dnf_prop formula-decl nil dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (length def-decl "nat" list_props nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eval_atm_list_prop formula-decl nil dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (construction_lemma_2 0
  (construction_lemma_2-1 nil 3770557509
   ("" (induct "d1")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "d2")
          (("2" (skeep)
            (("2" (inst -1 "x")
              (("2"
                (case "append(cons(cons1_var, cons2_var), d2) = cons(cons1_var, append(cons2_var, d2))")
                (("1" (replace -1 1)
                  (("1" (hide -1)
                    (("1"
                      (case "eval(cons(cons1_var, append(cons2_var, d2)))(x) = (eval_atm_list(cons1_var)(x) OR eval(append(cons2_var, d2))(x))")
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (replace -1 1)
                            (("1" (hide -1)
                              (("1"
                                (case "eval(cons(cons1_var, cons2_var))(x) = (eval_atm_list(cons1_var)(x) OR eval(cons2_var)(x))")
                                (("1" (replace -1 1) (("1" (assert) nil nil))
                                  nil)
                                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (hide -1)
                    (("2" (expand "append") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_atm_list def-decl "bool" dnf_polynomials nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (DNF_Atom type-eq-decl nil dnf_polynomials nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (DNF type-eq-decl nil dnf_polynomials nil))
   shostak))
 (dnf_preserves_truth 0
  (dnf_preserves_truth-17 nil 3770556017
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                                                                                          FORALL (x: real):
                                                                                                            eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): ((has_special_form(p) AND (PAND?(p) IMPLIES has_no_ors(p))) AND (POR?(p) IMPLIES (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(p)) IMPLIES has_no_ors(q)))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil nil)) nil)
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (lemma distrib_ands_special_form)
                      (("4" (inst?) (("4" (flatten 1) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert)
                          (("4"
                            (case "((PAND?(PAND2_var) IMPLIES has_no_ors(PAND2_var)) AND
                                  (POR?(PAND2_var) IMPLIES
                                    FORALL (q: NNF_expr):
                                      member(q, pull_out_conjunctions(PAND2_var))
                                       IMPLIES has_no_ors(q)))")
                            (("1"
                              (case "eval(construct_dnf(PAND2_var))(x) = eval(PAND2_var)(x)")
                              (("1" (hide -4)
                                (("1" (hide -2)
                                  (("1"
                                    (case "((PAND?(PAND1_var) IMPLIES has_no_ors(PAND1_var)) AND
                                          (POR?(PAND1_var) IMPLIES
                                            FORALL (q: NNF_expr):
                                              member(q, pull_out_conjunctions(PAND1_var))
                                               IMPLIES has_no_ors(q)))")
                                    (("1"
                                      (case
                                       "eval(construct_dnf(PAND1_var))(x) = eval(PAND1_var)(x)")
                                      (("1"
                                        (hide -4 -2)
                                        (("1"
                                          (lemma "construction_lemma_1")
                                          (("1"
                                            (expand "has_no_ors" -6)
                                            (("1"
                                              (flatten -6)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (case
                                                   "(eval(construct_dnf(PAND(PAND1_var, PAND2_var)))(x) IFF
         (eval(construct_dnf(PAND1_var))(x) AND
           eval(construct_dnf(PAND2_var))(x)))")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (case
                                                           "eval(PAND(PAND1_var, PAND2_var))(x) = (eval(PAND1_var)(x) AND eval(PAND2_var)(x))")
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (replace -2 1)
                                                              (("1"
                                                                (replace -3 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -2 -3 -4 -5)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -4 -5 -6 -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (hide -1 -2 -3 -4)
                                          (("1"
                                            (expand "has_no_ors" -1)
                                            (("1"
                                              (flatten -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2 -3 -4)
                                          (("2"
                                            (expand "has_no_ors" -1)
                                            (("2"
                                              (flatten -1)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (expand "has_no_ors" -1)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (hide -4 -5 -6)
                                  (("2" (hide -2) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (split 1)
                                (("1" (expand "has_no_ors" -5)
                                  (("1" (flatten -5)
                                    (("1" (hide -1 -2 -3 -4 -5)
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1 -2 -3 -4)
                                  (("2" (expand "has_no_ors" -1)
                                    (("2" (flatten -1)
                                      (("2"
                                        (expand "has_no_ors" -2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (expand "pull_out_conjunctions" -5)
                              (("5"
                                (case "FORALL (q: NNF_expr):
            member(q, pull_out_conjunctions(POR2_var)) IMPLIES
             has_no_ors(q)")
                                (("1"
                                  (case "FORALL (q: NNF_expr):
            member(q, pull_out_conjunctions(POR1_var)) IMPLIES
             has_no_ors(q)")
                                  (("1"
                                    (case "((PAND?(POR1_var) IMPLIES has_no_ors(POR1_var)) AND
        (POR?(POR1_var) IMPLIES FORALL (q: NNF_expr): member(q, pull_out_conjunctions(POR1_var)) IMPLIES has_no_ors(q)))")
                                    (("1"
                                      (case
                                       "eval(construct_dnf(POR1_var))(x) = eval(POR1_var)(x)")
                                      (("1"
                                        (hide -2 -5)
                                        (("1"
                                          (hide -2 -7)
                                          (("1"
                                            (case
                                             " ((PAND?(POR2_var) IMPLIES has_no_ors(POR2_var)) AND
        (POR?(POR2_var) IMPLIES
          FORALL (q: NNF_expr):
            member(q, pull_out_conjunctions(POR2_var)) IMPLIES
             has_no_ors(q)))")
                                            (("1"
                                              (case
                                               " eval(construct_dnf(POR2_var))(x) = eval(POR2_var)(x)")
                                              (("1"
                                                (hide -4 -5 -2)
                                                (("1"
                                                  (lemma construction_lemma_2)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (case
                                                           "eval(POR(POR1_var, POR2_var))(x) = (eval(POR1_var)(x) OR eval(POR2_var)(x))")
                                                          (("1"
                                                            (replace -1 1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (replace -1 1)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (hide -2 -3 -5 -6)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (reveal -2)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (flatten 1)
                                                      (("1"
                                                        (case
                                                         "POR2_var = PAND(pe1(POR2_var), pe2(POR2_var))")
                                                        (("1"
                                                          (replace -1 -3)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "POR2_var")
                                                            (("1"
                                                              (expand
                                                               "pull_out_conjunctions"
                                                               -3)
                                                              (("1"
                                                                (split -3)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    (("2"
                                                                      (reveal
                                                                       -2)
                                                                      (("2"
                                                                        (apply-extensionality)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -2 -3 -5 -6 -7 -8)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (hide -7)
                                          (("1"
                                            (hide -3 -4 -5 -6)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (flatten 1)
                                                (("1"
                                                  (case
                                                   "POR1_var = PAND(pe1(POR1_var), pe2(POR1_var))")
                                                  (("1"
                                                    (replace -1 -3)
                                                    (("1"
                                                      (expand
                                                       "pull_out_conjunctions"
                                                       -3)
                                                      (("1"
                                                        (inst -3 "POR1_var")
                                                        (("1"
                                                          (split -3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply-extensionality)
                                                    nil
                                                    nil)
                                                   ("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -5 -6 -7)
                                          (("2"
                                            (hide -3 -4)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (hide -1 -2 -3 -4 -5)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -2 "q")
                                          (("2"
                                            (split -2)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (lemma
                                               "member_append_l[PolyRelExpr]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (split)
                                                  (("1" (propax) nil nil)
                                                   ("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (hide -1 -2 -3 -4)
                                    (("2" (skeep)
                                      (("2"
                                        (inst -2 "q")
                                        (("2"
                                          (split -2)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "member_append_r[PolyRelExpr]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (split -1)
                                                  (("1" (propax) nil nil)
                                                   ("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (grind) nil nil) ("7" (grind) nil nil)
                   ("8" (grind) nil nil) ("9" (grind) nil nil)
                   ("10" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   ((eval def-decl "bool" dnf_polynomials nil)
    (nnf def-decl "PolyRelExpr" dnf_polynomials nil)
    (distribute_ands def-decl "NNF_expr" dnf_polynomials nil)
    (construct_dnf def-decl "DNF" dnf_polynomials nil)
    (NNF_expr type-eq-decl nil dnf_polynomials nil)
    (has_special_form def-decl "bool" dnf_polynomials nil)
    (eval def-decl "bool" dnf_polynomials nil)
    (DNF type-eq-decl nil dnf_polynomials nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (DNF_At type-eq-decl nil dnf_polynomials nil)
    (TarskiRel type-decl nil poly_system_strategy nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PolyRelExpr type-decl nil PolyRelExpr_adt nil)
    (distribute_ands_preserves_truth formula-decl nil dnf_polynomials nil)
    (nnf_preserves_truth formula-decl nil dnf_polynomials nil)
    (pull_out_conjunctions def-decl "list[NNF_expr]" dnf_polynomials nil)
    (member def-decl "bool" list_props nil)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (has_no_ors def-decl "bool" dnf_polynomials nil)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dnf_special_form formula-decl nil dnf_polynomials nil)
    (distrib_ands_special_form formula-decl nil dnf_polynomials nil)
    (PolyRelExpr_induction formula-decl nil PolyRelExpr_adt nil)
    (dnf_const_preserves_truth_1 formula-decl nil dnf_polynomials nil)
    (PCONST? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PCONST adt-constructor-decl "[bool -> (PCONST?)]" PolyRelExpr_adt nil)
    (dnf_prel_preserves_truth2 formula-decl nil dnf_polynomials nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (eval_rel const-decl "bool" dnf_polynomials nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (construction_lemma_1 formula-decl nil dnf_polynomials nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (PAND adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     PolyRelExpr_adt nil)
    (member_append_r formula-decl nil more_list_props structures)
    (POR1_var skolem-const-decl "PolyRelExpr" dnf_polynomials nil)
    (PolyRelExpr_PAND_extensionality formula-decl nil PolyRelExpr_adt nil)
    (POR2_var skolem-const-decl "PolyRelExpr" dnf_polynomials nil)
    (pe2 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (pe1 shared-adt-accessor-decl "[{x: PolyRelExpr |
         PAND?(x) OR POR?(x) OR PIMPLIES?(x) OR PIFF?(x) OR PWHEN?(x)
     OR PITE?(x)} ->
   PolyRelExpr]" PolyRelExpr_adt nil)
    (PITE? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PWHEN? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (PIFF? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt nil)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]" PolyRelExpr_adt
     nil)
    (construction_lemma_2 formula-decl nil dnf_polynomials nil)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member_append_l formula-decl nil more_list_props structures)
    (nnf_has_special_form formula-decl nil dnf_polynomials nil)
    (dnf const-decl "DNF" dnf_polynomials nil))
   nil)
  (dnf_preserves_truth-16 nil 3770555951
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                                                                                   FORALL (x: real):
                                                                                                     eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): ((has_special_form(p) AND (PAND?(p) IMPLIES has_no_ors(p))) AND (POR?(p) IMPLIES (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(p)) IMPLIES has_no_ors(q)))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil nil)) nil)
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (lemma distrib_ands_special_form)
                      (("4" (inst?) (("4" (flatten 1) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert)
                          (("4"
                            (case "((PAND?(PAND2_var) IMPLIES has_no_ors(PAND2_var)) AND
                     (POR?(PAND2_var) IMPLIES
                       FORALL (q: NNF_expr):
                         member(q, pull_out_conjunctions(distribute_ands(PAND2_var)))
                          IMPLIES has_no_ors(q)))")
                            (("1"
                              (case "eval(construct_dnf(PAND2_var))(x) = eval(PAND2_var)(x)")
                              (("1" (hide -4)
                                (("1" (hide -2)
                                  (("1"
                                    (case "((PAND?(PAND1_var) IMPLIES has_no_ors(PAND1_var)) AND
                         (POR?(PAND1_var) IMPLIES
                           FORALL (q: NNF_expr):
                             member(q, pull_out_conjunctions(distribute_ands(PAND1_var)))
                              IMPLIES has_no_ors(q)))")
                                    (("1"
                                      (case
                                       "eval(construct_dnf(PAND1_var))(x) = eval(PAND1_var)(x)")
                                      (("1"
                                        (hide -4 -2)
                                        (("1" (postpone) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -4 -5 -6 -2)
                                          (("2"
                                            (assert)
                                            (("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (hide -1 -2 -3 -4)
                                          (("1"
                                            (expand "has_no_ors" -1)
                                            (("1"
                                              (flatten -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2 -3 -4)
                                          (("2"
                                            (expand "has_no_ors" -1)
                                            (("2"
                                              (flatten -1)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (expand "has_no_ors" -1)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (hide -4 -5 -6)
                                  (("2" (hide -2)
                                    (("2" (assert) (("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (split 1)
                                (("1" (expand "has_no_ors" -5)
                                  (("1" (flatten -5)
                                    (("1" (hide -1 -2 -3 -4 -5)
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1 -2 -3 -4)
                                  (("2" (expand "has_no_ors" -1)
                                    (("2" (flatten -1)
                                      (("2"
                                        (expand "has_no_ors" -2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (expand "pull_out_conjunctions" -5)
                              (("5" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (grind) nil nil) ("7" (grind) nil nil)
                   ("8" (grind) nil nil) ("9" (grind) nil nil)
                   ("10" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (dnf_preserves_truth-15 nil 3770555185
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                                                                            FORALL (x: real):
                                                                                              eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): ((has_special_form(p) AND (PAND?(p) IMPLIES has_no_ors(p))) AND (POR?(p) IMPLIES (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(distribute_ands(p))) IMPLIES has_no_ors(q)))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil nil)) nil)
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (lemma distrib_ands_special_form)
                      (("4" (inst?) (("4" (flatten 1) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert)
                          (("4"
                            (case "((PAND?(PAND2_var) IMPLIES has_no_ors(PAND2_var)) AND
        (POR?(PAND2_var) IMPLIES
          FORALL (q: NNF_expr):
            member(q, pull_out_conjunctions(distribute_ands(PAND2_var)))
             IMPLIES has_no_ors(q)))")
                            (("1"
                              (case "eval(construct_dnf(PAND2_var))(x) = eval(PAND2_var)(x)")
                              (("1" (hide -4)
                                (("1" (hide -2)
                                  (("1"
                                    (case "((PAND?(PAND1_var) IMPLIES has_no_ors(PAND1_var)) AND
        (POR?(PAND1_var) IMPLIES
          FORALL (q: NNF_expr):
            member(q, pull_out_conjunctions(distribute_ands(PAND1_var)))
             IMPLIES has_no_ors(q)))")
                                    (("1"
                                      (case
                                       "eval(construct_dnf(PAND1_var))(x) = eval(PAND1_var)(x)")
                                      (("1"
                                        (hide -4 -2)
                                        (("1" (postpone) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -4 -5 -6 -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (hide -1 -2 -3 -4)
                                          (("1"
                                            (expand "has_no_ors" -1)
                                            (("1"
                                              (flatten -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2 -3 -4)
                                          (("2"
                                            (expand "has_no_ors" -1)
                                            (("2"
                                              (flatten -1)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (expand "has_no_ors" -1)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (hide -4 -5 -6)
                                  (("2" (hide -2) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (split 1)
                                (("1" (expand "has_no_ors" -5)
                                  (("1" (flatten -5)
                                    (("1" (hide -1 -2 -3 -4 -5)
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1 -2 -3 -4)
                                  (("2" (expand "has_no_ors" -1)
                                    (("2" (flatten -1)
                                      (("2"
                                        (expand "has_no_ors" -2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (expand "distribute_ands" -5)
                              (("5" (expand "pull_out_conjunctions" -5)
                                (("5" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (grind) nil nil) ("7" (grind) nil nil)
                   ("8" (grind) nil nil) ("9" (grind) nil nil)
                   ("10" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (dnf_preserves_truth-14 nil 3770555115
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                                                                     FORALL (x: real):
                                                                                       eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): ((has_special_form(p) AND (PAND?(p) IMPLIES has_no_ors(p))) AND (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(distribute_ands(p))) IMPLIES has_no_ors(q))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil nil)) nil)
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (lemma distrib_ands_special_form)
                      (("4" (skeep)
                        (("4" (inst?)
                          (("4" (split -1)
                            (("1" (propax) nil nil) ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert) (("4" (postpone) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (expand "distribute_ands" -5)
                              (("5" (expand "pull_out_conjunctions" -5)
                                (("5" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (grind) nil nil) ("7" (grind) nil nil)
                   ("8" (grind) nil nil) ("9" (grind) nil nil)
                   ("10" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (dnf_preserves_truth-13 nil 3770555058
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                                                              FORALL (x: real):
                                                                                eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): ((has_special_form(p) AND (PAND?(p) IMPLIES has_no_ors(p))) AND (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(distribute_ands(p))) IMPLIES has_no_ors(q))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil nil)) nil)
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (lemma distrib_ands_special_form)
                      (("4" (skeep)
                        (("4" (inst?)
                          (("4" (split -1)
                            (("1" (propax) nil nil) ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert) (("4" (postpone) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (expand "distribute_ands" -5)
                              (("5" (expand "pull_out_conjunctions" -5)
                                (("5" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (grind) nil nil) ("7" (grind) nil nil)
                   ("8" (grind) nil nil) ("9" (grind) nil nil)
                   ("10" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (dnf_preserves_truth-12 nil 3770554967
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                                                       FORALL (x: real):
                                                                         eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): (has_special_form(p) AND (PAND?(p) IMPLIES has_no_ors(p)) AND (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(distribute_ands(p))) IMPLIES has_no_ors(q))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil nil)) nil)
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (lemma distrib_ands_special_form)
                      (("4" (skeep)
                        (("4" (inst?)
                          (("4" (split -1)
                            (("1" (propax) nil nil) ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert) (("4" (postpone) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (expand "distribute_ands" -5)
                              (("5" (expand "pull_out_conjunctions" -5)
                                (("5" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (grind) nil nil) ("7" (grind) nil nil)
                   ("8" (grind) nil nil) ("9" (grind) nil nil)
                   ("10" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (dnf_preserves_truth-11 nil 3770554947
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                                                FORALL (x: real):
                                                                  eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x")
                      (("1" (assert) nil)))))))))))))))))
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): (has_special_form(p) AND (PAND?(p) IMPLIES has_no_ors(p))) AND (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(distribute_ands(p))) IMPLIES has_no_ors(q))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil)))
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form)
                      (("3" (inst?)
                        (("3" (lemma distrib_ands_special_form)
                          (("3" (skeep)
                            (("3" (inst?)
                              (("3" (split -1)
                                (("1" (propax) nil)
                                 ("2" (propax) nil)))))))))))))))))))
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil) ("2" (assert) nil)))))))))
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil) ("2" (assert) nil)))))))))
                   ("3" (grind) nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert) (("4" (postpone) nil)))))))))
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (expand "distribute_ands" -5)
                              (("5" (expand "pull_out_conjunctions" -5)
                                (("5" (postpone) nil)))))))))))))))
                   ("6" (grind) nil) ("7" (grind) nil) ("8" (grind) nil)
                   ("9" (grind) nil) ("10" (grind) nil)))))))))))))
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil))))))
    nil)
   nil nil)
  (dnf_preserves_truth-10 nil 3770554727
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                                         FORALL (x: real):
                                                           eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): (has_special_form(p) AND (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(distribute_ands(p))) IMPLIES has_no_ors(q))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil nil)) nil)
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form)
                      (("3" (inst?)
                        (("3" (lemma distrib_ands_special_form)
                          (("3" (skeep)
                            (("3" (inst?)
                              (("3" (split -1)
                                (("1" (propax) nil nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert) (("4" (postpone) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (expand "distribute_ands" -5)
                              (("5" (expand "pull_out_conjunctions" -5)
                                (("5" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (grind) nil nil) ("7" (grind) nil nil)
                   ("8" (grind) nil nil) ("9" (grind) nil nil)
                   ("10" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (dnf_preserves_truth-9 nil 3770554590
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                                  FORALL (x: real):
                                                    eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x")
                      (("1" (assert) nil)))))))))))))))))
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): (has_special_form(p) AND (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(distribute_ands(p))) IMPLIES has_no_ors(q))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil)))
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil)))))))))
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil) ("2" (assert) nil)))))))))
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil) ("2" (assert) nil)))))))))
                   ("3" (grind) nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert)
                          (("4"
                            (case "(PAND?(PAND1_var) IMPLIES has_no_ors(PAND1_var))")
                            (("1"
                              (case "(PAND?(PAND2_var) IMPLIES has_no_ors(PAND2_var))")
                              (("1"
                                (case "eval(construct_dnf(PAND1_var))(x) = eval(PAND1_var)(x)")
                                (("1" (hide -4)
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "eval(construct_dnf(PAND2_var))(x) = eval(PAND2_var)(x)")
                                      (("1"
                                        (hide -3 -4)
                                        (("1"
                                          (expand "eval" 1)
                                          (("1"
                                            (expand "construct_dnf" 1)
                                            (("1"
                                              (case
                                               "(eval_atm_list(append(car(construct_dnf(PAND1_var)),
                                                                                           car(construct_dnf(PAND2_var)))) (x)
                                                                       OR eval((: :))(x)) = eval_atm_list(append(car(construct_dnf(PAND1_var)),
                                                                                           car(construct_dnf(PAND2_var))))(x)")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand "has_no_ors" -5)
                                                    (("1"
                                                      (flatten -5)
                                                      (("1"
                                                        (hide -3 -4)
                                                        (("1"
                                                          (lemma
                                                           has_no_ors_prop)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst -1 "x")
                                                                (("1"
                                                                  (lemma
                                                                   has_no_ors_prop)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "PAND1_var")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil)))))))))))))))))))))))))))))
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil)))))))))))
                                       ("2"
                                        (hide -4 -5 -6 2)
                                        (("2" (assert) nil)))))))))
                                 ("2" (hide 2)
                                  (("2" (hide -5 -6 -7)
                                    (("2" (assert) nil)))))))
                               ("2" (hide -1 -2 -3 -4 -5 2)
                                (("2" (expand "has_no_ors" -1)
                                  (("2" (flatten -1)
                                    (("2" (assert) nil)))))))))
                             ("2" (hide -1 -2 -3 -4 2)
                              (("2" (expand "has_no_ors" -1)
                                (("2" (flatten -1)
                                  (("2" (assert) nil)))))))))))))))))
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (postpone) nil)))))))))))
                   ("6" (grind) nil) ("7" (grind) nil) ("8" (grind) nil)
                   ("9" (grind) nil) ("10" (grind) nil)))))))))))))
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil))))))
    nil)
   nil nil)
  (dnf_preserves_truth-8 nil 3770554573
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                           FORALL (x: real):
                                             eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x")
                      (("1" (assert) nil)))))))))))))))))
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): (has_special_form(p) AND (FORALL (q:NNF_expr): member(q, pull_out_conjunctions(distribute_ands(a))) IMPLIES has_no_ors(q))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil)))
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil)))))))))
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil) ("2" (assert) nil)))))))))
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil) ("2" (assert) nil)))))))))
                   ("3" (grind) nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert)
                          (("4"
                            (case "(PAND?(PAND1_var) IMPLIES has_no_ors(PAND1_var))")
                            (("1"
                              (case "(PAND?(PAND2_var) IMPLIES has_no_ors(PAND2_var))")
                              (("1"
                                (case "eval(construct_dnf(PAND1_var))(x) = eval(PAND1_var)(x)")
                                (("1" (hide -4)
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "eval(construct_dnf(PAND2_var))(x) = eval(PAND2_var)(x)")
                                      (("1"
                                        (hide -3 -4)
                                        (("1"
                                          (expand "eval" 1)
                                          (("1"
                                            (expand "construct_dnf" 1)
                                            (("1"
                                              (case
                                               "(eval_atm_list(append(car(construct_dnf(PAND1_var)),
                                                                      car(construct_dnf(PAND2_var)))) (x)
                                                  OR eval((: :))(x)) = eval_atm_list(append(car(construct_dnf(PAND1_var)),
                                                                      car(construct_dnf(PAND2_var))))(x)")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand "has_no_ors" -5)
                                                    (("1"
                                                      (flatten -5)
                                                      (("1"
                                                        (hide -3 -4)
                                                        (("1"
                                                          (lemma
                                                           has_no_ors_prop)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst -1 "x")
                                                                (("1"
                                                                  (lemma
                                                                   has_no_ors_prop)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "PAND1_var")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil)))))))))))))))))))))))))))))
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil)))))))))))
                                       ("2"
                                        (hide -4 -5 -6 2)
                                        (("2" (assert) nil)))))))))
                                 ("2" (hide 2)
                                  (("2" (hide -5 -6 -7)
                                    (("2" (assert) nil)))))))
                               ("2" (hide -1 -2 -3 -4 -5 2)
                                (("2" (expand "has_no_ors" -1)
                                  (("2" (flatten -1)
                                    (("2" (assert) nil)))))))))
                             ("2" (hide -1 -2 -3 -4 2)
                              (("2" (expand "has_no_ors" -1)
                                (("2" (flatten -1)
                                  (("2" (assert) nil)))))))))))))))))
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (postpone) nil)))))))))))
                   ("6" (grind) nil) ("7" (grind) nil) ("8" (grind) nil)
                   ("9" (grind) nil) ("10" (grind) nil)))))))))))))
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil))))))
    nil)
   nil nil)
  (dnf_preserves_truth-7 nil 3770554497
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                                    FORALL (x: real):
                                      eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x")
                      (("1" (assert) nil)))))))))))))))))
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): (has_special_form(p) AND (has_no_ors(pull_out_conjunctions(p)))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil)))
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil)))))))))
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil) ("2" (assert) nil)))))))))
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil) ("2" (assert) nil)))))))))
                   ("3" (grind) nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert)
                          (("4"
                            (case "(PAND?(PAND1_var) IMPLIES has_no_ors(PAND1_var))")
                            (("1"
                              (case "(PAND?(PAND2_var) IMPLIES has_no_ors(PAND2_var))")
                              (("1"
                                (case "eval(construct_dnf(PAND1_var))(x) = eval(PAND1_var)(x)")
                                (("1" (hide -4)
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "eval(construct_dnf(PAND2_var))(x) = eval(PAND2_var)(x)")
                                      (("1"
                                        (hide -3 -4)
                                        (("1"
                                          (expand "eval" 1)
                                          (("1"
                                            (expand "construct_dnf" 1)
                                            (("1"
                                              (case
                                               "(eval_atm_list(append(car(construct_dnf(PAND1_var)),
                                                 car(construct_dnf(PAND2_var)))) (x)
                             OR eval((: :))(x)) = eval_atm_list(append(car(construct_dnf(PAND1_var)),
                                                 car(construct_dnf(PAND2_var))))(x)")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand "has_no_ors" -5)
                                                    (("1"
                                                      (flatten -5)
                                                      (("1"
                                                        (hide -3 -4)
                                                        (("1"
                                                          (lemma
                                                           has_no_ors_prop)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst -1 "x")
                                                                (("1"
                                                                  (lemma
                                                                   has_no_ors_prop)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "PAND1_var")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil)))))))))))))))))))))))))))))
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil)))))))))))
                                       ("2"
                                        (hide -4 -5 -6 2)
                                        (("2" (assert) nil)))))))))
                                 ("2" (hide 2)
                                  (("2" (hide -5 -6 -7)
                                    (("2" (assert) nil)))))))
                               ("2" (hide -1 -2 -3 -4 -5 2)
                                (("2" (expand "has_no_ors" -1)
                                  (("2" (flatten -1)
                                    (("2" (assert) nil)))))))))
                             ("2" (hide -1 -2 -3 -4 2)
                              (("2" (expand "has_no_ors" -1)
                                (("2" (flatten -1)
                                  (("2" (assert) nil)))))))))))))))))
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (postpone) nil)))))))))))
                   ("6" (grind) nil) ("7" (grind) nil) ("8" (grind) nil)
                   ("9" (grind) nil) ("10" (grind) nil)))))))))))))
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil))))))
    nil)
   nil nil)
  (dnf_preserves_truth-6 nil 3770546625
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                             FORALL (x: real):
                               eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): (has_special_form(p) AND (PAND?(p) IMPLIES has_no_ors(p))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil nil)) nil)
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth_1)
                      (("1" (inst?)
                        (("1" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (skeep)
                    (("4" (expand "has_special_form" -3)
                      (("4" (flatten -3)
                        (("4" (assert)
                          (("4"
                            (case "(PAND?(PAND1_var) IMPLIES has_no_ors(PAND1_var))")
                            (("1"
                              (case "(PAND?(PAND2_var) IMPLIES has_no_ors(PAND2_var))")
                              (("1"
                                (case "eval(construct_dnf(PAND1_var))(x) = eval(PAND1_var)(x)")
                                (("1" (hide -4)
                                  (("1" (hide -3)
                                    (("1"
                                      (case
                                       "eval(construct_dnf(PAND2_var))(x) = eval(PAND2_var)(x)")
                                      (("1"
                                        (hide -3 -4)
                                        (("1"
                                          (expand "eval" 1)
                                          (("1"
                                            (expand "construct_dnf" 1)
                                            (("1"
                                              (case
                                               "(eval_atm_list(append(car(construct_dnf(PAND1_var)),
                            car(construct_dnf(PAND2_var)))) (x)
        OR eval((: :))(x)) = eval_atm_list(append(car(construct_dnf(PAND1_var)),
                            car(construct_dnf(PAND2_var))))(x)")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand "has_no_ors" -5)
                                                    (("1"
                                                      (flatten -5)
                                                      (("1"
                                                        (hide -3 -4)
                                                        (("1"
                                                          (lemma
                                                           has_no_ors_prop)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst -1 "x")
                                                                (("1"
                                                                  (lemma
                                                                   has_no_ors_prop)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "PAND1_var")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -4 -5 -6 2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (hide -5 -6 -7)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (hide -1 -2 -3 -4 -5 2)
                                (("2" (expand "has_no_ors" -1)
                                  (("2" (flatten -1) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 -3 -4 2)
                              (("2" (expand "has_no_ors" -1)
                                (("2" (flatten -1) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skeep)
                    (("5" (expand "has_special_form" -3)
                      (("5" (flatten -3)
                        (("5" (assert)
                          (("5" (expand "construct_dnf" 1)
                            (("5" (postpone) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (grind) nil nil) ("7" (grind) nil nil)
                   ("8" (grind) nil nil) ("9" (grind) nil nil)
                   ("10" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (dnf_preserves_truth-5 nil 3770546141
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
                      FORALL (x: real):
                        eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "FORALL (p:PolyRelExpr): (has_special_form(p) AND (PAND?(p) IMPLIES has_no_ors(p))) IMPLIES eval(construct_dnf(p))(x) = eval(p)(x)")
              (("1" (inst?)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (typepred "distribute_ands(nnf(p))")
                    (("2" (propax) nil nil)) nil)
                   ("3" (hide 2)
                    (("3" (lemma dnf_special_form) (("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (lemma dnf_const_preserves_truth)
                      (("1" (inst?)
                        (("1" (inst -1 "x")
                          (("1" (split -1)
                            (("1" (expand "nnf" -1)
                              (("1" (expand "distribute_ands" -1)
                                (("1" (propax) nil nil)) nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma dnf_prel_preserves_truth2)
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil) ("4" (postpone) nil nil)
                   ("5" (postpone) nil nil) ("6" (grind) nil nil)
                   ("7" (grind) nil nil) ("8" (grind) nil nil)
                   ("9" (grind) nil nil) ("10" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (dnf_preserves_truth-4 nil 3770464575
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
               FORALL (x: real):
                 eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (skeep)
            (("2"
              (case "PCONST?(distribute_ands(nnf(p))) OR PREL?(distribute_ands(nnf(p))) OR PAND?(distribute_ands(nnf(p))) OR POR?(distribute_ands(nnf(p)))")
              (("1" (split -1)
                (("1" (lemma "dnf_const_preserves_truth_1")
                  (("1" (inst?)
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (lemma dnf_prel_preserves_truth2)
                  (("2" (inst?)
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (expand "eval")
                  (("3" (assert)
                    (("3" (expand "construct_dnf")
                      (("3"
                        (case "eval_atm_list(append(car(construct_dnf(pe1
                                              (distribute_ands(nnf(p))))),
                            car(construct_dnf(pe2
                                              (distribute_ands(nnf(p)))))))
                    (x) = (eval(pe1(distribute_ands(nnf(p))))(x) AND
         eval(pe2(distribute_ands(nnf(p))))(x))")
                        (("1" (grind) nil nil)
                         ("2" (hide 2) (("2" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4"
                  (case "eval(construct_dnf(POR(pe1(distribute_ands(nnf(p))), pe2(distribute_ands(nnf(p))))))(x) =
       eval(distribute_ands(nnf(p)))(x)")
                  (("1" (assert)
                    (("1"
                      (case "distribute_ands(nnf(p)) = POR(pe1(distribute_ands(nnf(p))),
                           pe2(distribute_ands(nnf(p))))")
                      (("1" (replace -1 1) (("1" (assert) nil nil)) nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "construct_dnf") (("2" (postpone) nil nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (typepred "distribute_ands(nnf(p))")
                      (("3"
                        (case "distribute_ands(nnf(p)) = POR(pe1(distribute_ands(nnf(p))),
                           pe2(distribute_ands(nnf(p))))")
                        (("1" (replace -1 -2) (("1" (propax) nil nil)) nil)
                         ("2" (apply-extensionality) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4" (assert) nil nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "distribute_ands(nnf(p))")
                  (("2" (expand "has_special_form" -1) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil nil)
  (dnf_preserves_truth-3 nil 3770464524
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
               FORALL (x: real):
                 eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x")
                      (("1" (assert) nil)))))))))))))))))
       ("2" (hide 2)
        (("2" (induct "p")
          (("1" (expand "construct_dnf")
            (("1" (grind)
              (("1" (expand "eval_rel") (("1" (postpone) nil)))
               ("2" (expand "eval_rel") (("2" (postpone) nil)))))))
           ("2" (postpone) nil)
           ("3" (skeep)
            (("3" (skeep)
              (("3" (expand "nnf")
                (("3" (expand "distribute_ands")
                  (("3" (expand "construct_dnf")
                    (("3" (expand "construct_record")
                      (("3" (expand "eval")
                        (("3" (expand "eval")
                          (("3" (expand "eval")
                            (("3" (postpone) nil)))))))))))))))))))
           ("4" (postpone) nil) ("5" (postpone) nil) ("6" (postpone) nil)
           ("7" (postpone) nil) ("8" (postpone) nil) ("9" (postpone) nil)
           ("10" (postpone) nil)))))
       ("3" (hide 2)
        (("3" (lemma nnf_has_special_form) (("3" (postpone) nil))))))))
    nil)
   nil nil)
  (dnf_preserves_truth-2 nil 3770464477
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
               FORALL (x: real):
                 eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x")
                      (("1" (assert) nil)))))))))))))))))
       ("2" (hide 2)
        (("2" (induct "p")
          (("1" (expand "construct_dnf")
            (("1" (grind)
              (("1" (expand "eval_rel") (("1" (postpone) nil)))
               ("2" (expand "eval_rel") (("2" (postpone) nil)))))))
           ("2" (postpone) nil)
           ("3" (skeep)
            (("3" (skeep)
              (("3" (expand "nnf")
                (("3" (expand "distribute_ands")
                  (("3" (expand "construct_dnf")
                    (("3" (expand "construct_record")
                      (("3" (expand "eval")
                        (("3" (expand "eval")
                          (("3" (expand "eval")
                            (("3" (postpone) nil)))))))))))))))))))
           ("4" (postpone) nil) ("5" (postpone) nil) ("6" (postpone) nil)
           ("7" (postpone) nil) ("8" (postpone) nil) ("9" (postpone) nil)
           ("10" (postpone) nil)))))
       ("3" (hide 2)
        (("3" (lemma nnf_has_special_form) (("3" (propax) nil))))))))
    nil)
   nil nil)
  (dnf_preserves_truth-1 nil 3770392115
   ("" (expand "dnf")
    ((""
      (case "FORALL (p: PolyRelExpr):
        FORALL (x: real):
          eval(construct_dnf(distribute_ands(nnf(p))))(x) = eval(distribute_ands(nnf(p)))(x)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst -1 "p")
            (("1" (inst -1 "x")
              (("1" (lemma nnf_preserves_truth)
                (("1" (inst -1 "p" "x")
                  (("1" (lemma "distribute_ands_preserves_truth")
                    (("1" (inst -1 "nnf(p)" "x") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "p")
          (("1" (expand "construct_dnf")
            (("1" (grind)
              (("1" (expand "eval_rel") (("1" (propax) nil nil)) nil)
               ("2" (expand "eval_rel") (("2" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (grind) nil nil)
           ("3" (skeep)
            (("3" (skeep)
              (("3" (expand "nnf")
                (("3" (expand "distribute_ands")
                  (("3" (expand "construct_dnf")
                    (("3" (expand "construct_record")
                      (("3" (expand "eval")
                        (("3" (expand "eval")
                          (("3" (expand "eval") (("3" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (postpone) nil nil) ("5" (postpone) nil nil)
           ("6" (postpone) nil nil) ("7" (postpone) nil nil)
           ("8" (postpone) nil nil) ("9" (postpone) nil nil)
           ("10" (postpone) nil nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (lemma nnf_has_special_form) (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)))

